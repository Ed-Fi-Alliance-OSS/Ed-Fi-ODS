using System;
using System.Linq;
using System.Diagnostics.CodeAnalysis;
using EdFi.Ods.Api.Dependencies;
using EdFi.Ods.Api.ETag;
using EdFi.Ods.Api.Extensions;
using EdFi.Ods.Common;
using EdFi.Ods.Common.Constants;
using EdFi.Ods.Common.Conventions;
using EdFi.Ods.Common.Extensions;
using EdFi.Ods.Entities.Common.EdFi;
// Aggregate: AidTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.AidTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AidTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IAidTypeDescriptor source, IAidTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IAidTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AidTypeDescriptorId != target.AidTypeDescriptorId)
            {
                source.AidTypeDescriptorId = target.AidTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAidTypeDescriptor source, IAidTypeDescriptor target, Action<IAidTypeDescriptor, IAidTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IAidTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IAidTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AidTypeDescriptorId = source.AidTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAidTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: AnonymizedStudent

namespace EdFi.Ods.Entities.Common.TPDM //.AnonymizedStudentAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AnonymizedStudentMapper 
    {
        public static bool SynchronizeTo(this IAnonymizedStudent source, IAnonymizedStudent target)
        {
            bool isModified = false;

            var sourceSupport = source as IAnonymizedStudentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AnonymizedStudentIdentifier != target.AnonymizedStudentIdentifier)
            {
                source.AnonymizedStudentIdentifier = target.AnonymizedStudentIdentifier;
            }
            if (source.FactsAsOfDate != target.FactsAsOfDate)
            {
                source.FactsAsOfDate = target.FactsAsOfDate;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAtriskIndicatorSupported)
                && target.AtriskIndicator != source.AtriskIndicator)
            {
                target.AtriskIndicator = source.AtriskIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsELLEnrollmentSupported)
                && target.ELLEnrollment != source.ELLEnrollment)
            {
                target.ELLEnrollment = source.ELLEnrollment;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsESLEnrollmentSupported)
                && target.ESLEnrollment != source.ESLEnrollment)
            {
                target.ESLEnrollment = source.ESLEnrollment;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGenderDescriptorSupported)
                && target.GenderDescriptor != source.GenderDescriptor)
            {
                target.GenderDescriptor = source.GenderDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGradeLevelDescriptorSupported)
                && target.GradeLevelDescriptor != source.GradeLevelDescriptor)
            {
                target.GradeLevelDescriptor = source.GradeLevelDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHispanicLatinoEthnicitySupported)
                && target.HispanicLatinoEthnicity != source.HispanicLatinoEthnicity)
            {
                target.HispanicLatinoEthnicity = source.HispanicLatinoEthnicity;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMobilitySupported)
                && target.Mobility != source.Mobility)
            {
                target.Mobility = source.Mobility;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSection504EnrollmentSupported)
                && target.Section504Enrollment != source.Section504Enrollment)
            {
                target.Section504Enrollment = source.Section504Enrollment;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSexDescriptorSupported)
                && target.SexDescriptor != source.SexDescriptor)
            {
                target.SexDescriptor = source.SexDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSPEDEnrollmentSupported)
                && target.SPEDEnrollment != source.SPEDEnrollment)
            {
                target.SPEDEnrollment = source.SPEDEnrollment;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTitleIEnrollmentSupported)
                && target.TitleIEnrollment != source.TitleIEnrollment)
            {
                target.TitleIEnrollment = source.TitleIEnrollment;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsAnonymizedStudentDisabilitiesSupported)
            {
                isModified |= 
                    source.AnonymizedStudentDisabilities.SynchronizeCollectionTo(
                        target.AnonymizedStudentDisabilities, 
                        onChildAdded: child => 
                            {
                                child.AnonymizedStudent = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsAnonymizedStudentDisabilityIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsAnonymizedStudentLanguagesSupported)
            {
                isModified |= 
                    source.AnonymizedStudentLanguages.SynchronizeCollectionTo(
                        target.AnonymizedStudentLanguages, 
                        onChildAdded: child => 
                            {
                                child.AnonymizedStudent = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsAnonymizedStudentLanguageIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsAnonymizedStudentRacesSupported)
            {
                isModified |= 
                    source.AnonymizedStudentRaces.SynchronizeCollectionTo(
                        target.AnonymizedStudentRaces, 
                        onChildAdded: child => 
                            {
                                child.AnonymizedStudent = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsAnonymizedStudentRaceIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IAnonymizedStudent source, IAnonymizedStudent target, Action<IAnonymizedStudent, IAnonymizedStudent> onMapped)
        {
            var sourceSynchSupport = source as IAnonymizedStudentSynchronizationSourceSupport;
            var targetSynchSupport = target as IAnonymizedStudentSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AnonymizedStudentIdentifier = source.AnonymizedStudentIdentifier;
            target.FactsAsOfDate = source.FactsAsOfDate;
            target.SchoolYear = source.SchoolYear;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAtriskIndicatorSupported)
                target.AtriskIndicator = source.AtriskIndicator;
            else
                targetSynchSupport.IsAtriskIndicatorSupported = false;

            if (sourceSynchSupport.IsELLEnrollmentSupported)
                target.ELLEnrollment = source.ELLEnrollment;
            else
                targetSynchSupport.IsELLEnrollmentSupported = false;

            if (sourceSynchSupport.IsESLEnrollmentSupported)
                target.ESLEnrollment = source.ESLEnrollment;
            else
                targetSynchSupport.IsESLEnrollmentSupported = false;

            if (sourceSynchSupport.IsGenderDescriptorSupported)
                target.GenderDescriptor = source.GenderDescriptor;
            else
                targetSynchSupport.IsGenderDescriptorSupported = false;

            if (sourceSynchSupport.IsGradeLevelDescriptorSupported)
                target.GradeLevelDescriptor = source.GradeLevelDescriptor;
            else
                targetSynchSupport.IsGradeLevelDescriptorSupported = false;

            if (sourceSynchSupport.IsHispanicLatinoEthnicitySupported)
                target.HispanicLatinoEthnicity = source.HispanicLatinoEthnicity;
            else
                targetSynchSupport.IsHispanicLatinoEthnicitySupported = false;

            if (sourceSynchSupport.IsMobilitySupported)
                target.Mobility = source.Mobility;
            else
                targetSynchSupport.IsMobilitySupported = false;

            if (sourceSynchSupport.IsSection504EnrollmentSupported)
                target.Section504Enrollment = source.Section504Enrollment;
            else
                targetSynchSupport.IsSection504EnrollmentSupported = false;

            if (sourceSynchSupport.IsSexDescriptorSupported)
                target.SexDescriptor = source.SexDescriptor;
            else
                targetSynchSupport.IsSexDescriptorSupported = false;

            if (sourceSynchSupport.IsSPEDEnrollmentSupported)
                target.SPEDEnrollment = source.SPEDEnrollment;
            else
                targetSynchSupport.IsSPEDEnrollmentSupported = false;

            if (sourceSynchSupport.IsTitleIEnrollmentSupported)
                target.TitleIEnrollment = source.TitleIEnrollment;
            else
                targetSynchSupport.IsTitleIEnrollmentSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsAnonymizedStudentDisabilitiesSupported)
            {    
                targetSynchSupport.IsAnonymizedStudentDisabilityIncluded = sourceSynchSupport.IsAnonymizedStudentDisabilityIncluded;
                source.AnonymizedStudentDisabilities.MapCollectionTo(target.AnonymizedStudentDisabilities, target);
            }
            else
            {
                targetSynchSupport.IsAnonymizedStudentDisabilitiesSupported = false;
            }

            if (sourceSynchSupport.IsAnonymizedStudentLanguagesSupported)
            {    
                targetSynchSupport.IsAnonymizedStudentLanguageIncluded = sourceSynchSupport.IsAnonymizedStudentLanguageIncluded;
                source.AnonymizedStudentLanguages.MapCollectionTo(target.AnonymizedStudentLanguages, target);
            }
            else
            {
                targetSynchSupport.IsAnonymizedStudentLanguagesSupported = false;
            }

            if (sourceSynchSupport.IsAnonymizedStudentRacesSupported)
            {    
                targetSynchSupport.IsAnonymizedStudentRaceIncluded = sourceSynchSupport.IsAnonymizedStudentRaceIncluded;
                source.AnonymizedStudentRaces.MapCollectionTo(target.AnonymizedStudentRaces, target);
            }
            else
            {
                targetSynchSupport.IsAnonymizedStudentRacesSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAnonymizedStudentSynchronizationSourceSupport 
    {
        bool IsAnonymizedStudentDisabilitiesSupported { get; set; }
        bool IsAnonymizedStudentLanguagesSupported { get; set; }
        bool IsAnonymizedStudentRacesSupported { get; set; }
        bool IsAtriskIndicatorSupported { get; set; }
        bool IsELLEnrollmentSupported { get; set; }
        bool IsESLEnrollmentSupported { get; set; }
        bool IsGenderDescriptorSupported { get; set; }
        bool IsGradeLevelDescriptorSupported { get; set; }
        bool IsHispanicLatinoEthnicitySupported { get; set; }
        bool IsMobilitySupported { get; set; }
        bool IsSection504EnrollmentSupported { get; set; }
        bool IsSexDescriptorSupported { get; set; }
        bool IsSPEDEnrollmentSupported { get; set; }
        bool IsTitleIEnrollmentSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
        Func<IAnonymizedStudentDisability, bool> IsAnonymizedStudentDisabilityIncluded { get; set; }
        Func<IAnonymizedStudentLanguage, bool> IsAnonymizedStudentLanguageIncluded { get; set; }
        Func<IAnonymizedStudentRace, bool> IsAnonymizedStudentRaceIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class AnonymizedStudentDisabilityMapper 
    {
        public static bool SynchronizeTo(this IAnonymizedStudentDisability source, IAnonymizedStudentDisability target)
        {
            bool isModified = false;

            var sourceSupport = source as IAnonymizedStudentDisabilitySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisabilityDescriptor != target.DisabilityDescriptor)
            {
                source.DisabilityDescriptor = target.DisabilityDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported)
                && target.DisabilityDeterminationSourceTypeDescriptor != source.DisabilityDeterminationSourceTypeDescriptor)
            {
                target.DisabilityDeterminationSourceTypeDescriptor = source.DisabilityDeterminationSourceTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDisabilityDiagnosisSupported)
                && target.DisabilityDiagnosis != source.DisabilityDiagnosis)
            {
                target.DisabilityDiagnosis = source.DisabilityDiagnosis;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOrderOfDisabilitySupported)
                && target.OrderOfDisability != source.OrderOfDisability)
            {
                target.OrderOfDisability = source.OrderOfDisability;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsAnonymizedStudentDisabilityDesignationsSupported)
            {
                isModified |= 
                    source.AnonymizedStudentDisabilityDesignations.SynchronizeCollectionTo(
                        target.AnonymizedStudentDisabilityDesignations, 
                        onChildAdded: child => 
                            {
                                child.AnonymizedStudentDisability = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsAnonymizedStudentDisabilityDesignationIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IAnonymizedStudentDisability source, IAnonymizedStudentDisability target, Action<IAnonymizedStudentDisability, IAnonymizedStudentDisability> onMapped)
        {
            var sourceSynchSupport = source as IAnonymizedStudentDisabilitySynchronizationSourceSupport;
            var targetSynchSupport = target as IAnonymizedStudentDisabilitySynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DisabilityDescriptor = source.DisabilityDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported)
                target.DisabilityDeterminationSourceTypeDescriptor = source.DisabilityDeterminationSourceTypeDescriptor;
            else
                targetSynchSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsDisabilityDiagnosisSupported)
                target.DisabilityDiagnosis = source.DisabilityDiagnosis;
            else
                targetSynchSupport.IsDisabilityDiagnosisSupported = false;

            if (sourceSynchSupport.IsOrderOfDisabilitySupported)
                target.OrderOfDisability = source.OrderOfDisability;
            else
                targetSynchSupport.IsOrderOfDisabilitySupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsAnonymizedStudentDisabilityDesignationsSupported)
            {    
                targetSynchSupport.IsAnonymizedStudentDisabilityDesignationIncluded = sourceSynchSupport.IsAnonymizedStudentDisabilityDesignationIncluded;
                source.AnonymizedStudentDisabilityDesignations.MapCollectionTo(target.AnonymizedStudentDisabilityDesignations, target);
            }
            else
            {
                targetSynchSupport.IsAnonymizedStudentDisabilityDesignationsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAnonymizedStudentDisabilitySynchronizationSourceSupport 
    {
        bool IsAnonymizedStudentDisabilityDesignationsSupported { get; set; }
        bool IsDisabilityDeterminationSourceTypeDescriptorSupported { get; set; }
        bool IsDisabilityDiagnosisSupported { get; set; }
        bool IsOrderOfDisabilitySupported { get; set; }
        Func<IAnonymizedStudentDisabilityDesignation, bool> IsAnonymizedStudentDisabilityDesignationIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class AnonymizedStudentDisabilityDesignationMapper 
    {
        public static bool SynchronizeTo(this IAnonymizedStudentDisabilityDesignation source, IAnonymizedStudentDisabilityDesignation target)
        {
            bool isModified = false;

            var sourceSupport = source as IAnonymizedStudentDisabilityDesignationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisabilityDesignationDescriptor != target.DisabilityDesignationDescriptor)
            {
                source.DisabilityDesignationDescriptor = target.DisabilityDesignationDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAnonymizedStudentDisabilityDesignation source, IAnonymizedStudentDisabilityDesignation target, Action<IAnonymizedStudentDisabilityDesignation, IAnonymizedStudentDisabilityDesignation> onMapped)
        {
            var sourceSynchSupport = source as IAnonymizedStudentDisabilityDesignationSynchronizationSourceSupport;
            var targetSynchSupport = target as IAnonymizedStudentDisabilityDesignationSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DisabilityDesignationDescriptor = source.DisabilityDesignationDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAnonymizedStudentDisabilityDesignationSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class AnonymizedStudentLanguageMapper 
    {
        public static bool SynchronizeTo(this IAnonymizedStudentLanguage source, IAnonymizedStudentLanguage target)
        {
            bool isModified = false;

            var sourceSupport = source as IAnonymizedStudentLanguageSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LanguageDescriptor != target.LanguageDescriptor)
            {
                source.LanguageDescriptor = target.LanguageDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsAnonymizedStudentLanguageUsesSupported)
            {
                isModified |= 
                    source.AnonymizedStudentLanguageUses.SynchronizeCollectionTo(
                        target.AnonymizedStudentLanguageUses, 
                        onChildAdded: child => 
                            {
                                child.AnonymizedStudentLanguage = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsAnonymizedStudentLanguageUseIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IAnonymizedStudentLanguage source, IAnonymizedStudentLanguage target, Action<IAnonymizedStudentLanguage, IAnonymizedStudentLanguage> onMapped)
        {
            var sourceSynchSupport = source as IAnonymizedStudentLanguageSynchronizationSourceSupport;
            var targetSynchSupport = target as IAnonymizedStudentLanguageSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LanguageDescriptor = source.LanguageDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsAnonymizedStudentLanguageUsesSupported)
            {    
                targetSynchSupport.IsAnonymizedStudentLanguageUseIncluded = sourceSynchSupport.IsAnonymizedStudentLanguageUseIncluded;
                source.AnonymizedStudentLanguageUses.MapCollectionTo(target.AnonymizedStudentLanguageUses, target);
            }
            else
            {
                targetSynchSupport.IsAnonymizedStudentLanguageUsesSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAnonymizedStudentLanguageSynchronizationSourceSupport 
    {
        bool IsAnonymizedStudentLanguageUsesSupported { get; set; }
        Func<IAnonymizedStudentLanguageUse, bool> IsAnonymizedStudentLanguageUseIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class AnonymizedStudentLanguageUseMapper 
    {
        public static bool SynchronizeTo(this IAnonymizedStudentLanguageUse source, IAnonymizedStudentLanguageUse target)
        {
            bool isModified = false;

            var sourceSupport = source as IAnonymizedStudentLanguageUseSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LanguageUseDescriptor != target.LanguageUseDescriptor)
            {
                source.LanguageUseDescriptor = target.LanguageUseDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAnonymizedStudentLanguageUse source, IAnonymizedStudentLanguageUse target, Action<IAnonymizedStudentLanguageUse, IAnonymizedStudentLanguageUse> onMapped)
        {
            var sourceSynchSupport = source as IAnonymizedStudentLanguageUseSynchronizationSourceSupport;
            var targetSynchSupport = target as IAnonymizedStudentLanguageUseSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LanguageUseDescriptor = source.LanguageUseDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAnonymizedStudentLanguageUseSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class AnonymizedStudentRaceMapper 
    {
        public static bool SynchronizeTo(this IAnonymizedStudentRace source, IAnonymizedStudentRace target)
        {
            bool isModified = false;

            var sourceSupport = source as IAnonymizedStudentRaceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.RaceDescriptor != target.RaceDescriptor)
            {
                source.RaceDescriptor = target.RaceDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAnonymizedStudentRace source, IAnonymizedStudentRace target, Action<IAnonymizedStudentRace, IAnonymizedStudentRace> onMapped)
        {
            var sourceSynchSupport = source as IAnonymizedStudentRaceSynchronizationSourceSupport;
            var targetSynchSupport = target as IAnonymizedStudentRaceSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.RaceDescriptor = source.RaceDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAnonymizedStudentRaceSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: AnonymizedStudentAcademicRecord

namespace EdFi.Ods.Entities.Common.TPDM //.AnonymizedStudentAcademicRecordAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AnonymizedStudentAcademicRecordMapper 
    {
        public static bool SynchronizeTo(this IAnonymizedStudentAcademicRecord source, IAnonymizedStudentAcademicRecord target)
        {
            bool isModified = false;

            var sourceSupport = source as IAnonymizedStudentAcademicRecordSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AnonymizedStudentIdentifier != target.AnonymizedStudentIdentifier)
            {
                source.AnonymizedStudentIdentifier = target.AnonymizedStudentIdentifier;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.FactAsOfDate != target.FactAsOfDate)
            {
                source.FactAsOfDate = target.FactAsOfDate;
            }
            if (source.FactsAsOfDate != target.FactsAsOfDate)
            {
                source.FactsAsOfDate = target.FactsAsOfDate;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCumulativeGradePointAverageSupported)
                && target.CumulativeGradePointAverage != source.CumulativeGradePointAverage)
            {
                target.CumulativeGradePointAverage = source.CumulativeGradePointAverage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGPAMaxSupported)
                && target.GPAMax != source.GPAMax)
            {
                target.GPAMax = source.GPAMax;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSessionGradePointAverageSupported)
                && target.SessionGradePointAverage != source.SessionGradePointAverage)
            {
                target.SessionGradePointAverage = source.SessionGradePointAverage;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAnonymizedStudentAcademicRecord source, IAnonymizedStudentAcademicRecord target, Action<IAnonymizedStudentAcademicRecord, IAnonymizedStudentAcademicRecord> onMapped)
        {
            var sourceSynchSupport = source as IAnonymizedStudentAcademicRecordSynchronizationSourceSupport;
            var targetSynchSupport = target as IAnonymizedStudentAcademicRecordSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AnonymizedStudentIdentifier = source.AnonymizedStudentIdentifier;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FactAsOfDate = source.FactAsOfDate;
            target.FactsAsOfDate = source.FactsAsOfDate;
            target.SchoolYear = source.SchoolYear;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCumulativeGradePointAverageSupported)
                target.CumulativeGradePointAverage = source.CumulativeGradePointAverage;
            else
                targetSynchSupport.IsCumulativeGradePointAverageSupported = false;

            if (sourceSynchSupport.IsGPAMaxSupported)
                target.GPAMax = source.GPAMax;
            else
                targetSynchSupport.IsGPAMaxSupported = false;

            if (sourceSynchSupport.IsSessionGradePointAverageSupported)
                target.SessionGradePointAverage = source.SessionGradePointAverage;
            else
                targetSynchSupport.IsSessionGradePointAverageSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AnonymizedStudentResourceId = source.AnonymizedStudentResourceId;
                target.AnonymizedStudentDiscriminator = source.AnonymizedStudentDiscriminator;
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAnonymizedStudentAcademicRecordSynchronizationSourceSupport 
    {
        bool IsCumulativeGradePointAverageSupported { get; set; }
        bool IsGPAMaxSupported { get; set; }
        bool IsSessionGradePointAverageSupported { get; set; }
    }
 
}
// Aggregate: AnonymizedStudentAssessment

namespace EdFi.Ods.Entities.Common.TPDM //.AnonymizedStudentAssessmentAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AnonymizedStudentAssessmentMapper 
    {
        public static bool SynchronizeTo(this IAnonymizedStudentAssessment source, IAnonymizedStudentAssessment target)
        {
            bool isModified = false;

            var sourceSupport = source as IAnonymizedStudentAssessmentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AdministrationDate != target.AdministrationDate)
            {
                source.AdministrationDate = target.AdministrationDate;
            }
            if (source.AnonymizedStudentIdentifier != target.AnonymizedStudentIdentifier)
            {
                source.AnonymizedStudentIdentifier = target.AnonymizedStudentIdentifier;
            }
            if (source.AssessmentIdentifier != target.AssessmentIdentifier)
            {
                source.AssessmentIdentifier = target.AssessmentIdentifier;
            }
            if (source.FactsAsOfDate != target.FactsAsOfDate)
            {
                source.FactsAsOfDate = target.FactsAsOfDate;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.TakenSchoolYear != target.TakenSchoolYear)
            {
                source.TakenSchoolYear = target.TakenSchoolYear;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAcademicSubjectDescriptorSupported)
                && target.AcademicSubjectDescriptor != source.AcademicSubjectDescriptor)
            {
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAssessmentCategoryDescriptorSupported)
                && target.AssessmentCategoryDescriptor != source.AssessmentCategoryDescriptor)
            {
                target.AssessmentCategoryDescriptor = source.AssessmentCategoryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAssessmentTitleSupported)
                && target.AssessmentTitle != source.AssessmentTitle)
            {
                target.AssessmentTitle = source.AssessmentTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGradeLevelDescriptorSupported)
                && target.GradeLevelDescriptor != source.GradeLevelDescriptor)
            {
                target.GradeLevelDescriptor = source.GradeLevelDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTermDescriptorSupported)
                && target.TermDescriptor != source.TermDescriptor)
            {
                target.TermDescriptor = source.TermDescriptor;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // AnonymizedStudentAssessmentPerformanceLevel
            if (sourceSupport == null || sourceSupport.IsAnonymizedStudentAssessmentPerformanceLevelSupported)
            {
                if (source.AnonymizedStudentAssessmentPerformanceLevel == null)
                {
                    if (target.AnonymizedStudentAssessmentPerformanceLevel != null)
                    {
                        target.AnonymizedStudentAssessmentPerformanceLevel = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.AnonymizedStudentAssessmentPerformanceLevel == null)
                    {
                        var itemType = target.GetType().GetProperty("AnonymizedStudentAssessmentPerformanceLevel").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.AnonymizedStudentAssessmentPerformanceLevel = (IAnonymizedStudentAssessmentPerformanceLevel) newItem;
                    }

                    isModified |= source.AnonymizedStudentAssessmentPerformanceLevel.Synchronize(target.AnonymizedStudentAssessmentPerformanceLevel);
                }
            }
            // AnonymizedStudentAssessmentScoreResult
            if (sourceSupport == null || sourceSupport.IsAnonymizedStudentAssessmentScoreResultSupported)
            {
                if (source.AnonymizedStudentAssessmentScoreResult == null)
                {
                    if (target.AnonymizedStudentAssessmentScoreResult != null)
                    {
                        target.AnonymizedStudentAssessmentScoreResult = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.AnonymizedStudentAssessmentScoreResult == null)
                    {
                        var itemType = target.GetType().GetProperty("AnonymizedStudentAssessmentScoreResult").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.AnonymizedStudentAssessmentScoreResult = (IAnonymizedStudentAssessmentScoreResult) newItem;
                    }

                    isModified |= source.AnonymizedStudentAssessmentScoreResult.Synchronize(target.AnonymizedStudentAssessmentScoreResult);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAnonymizedStudentAssessment source, IAnonymizedStudentAssessment target, Action<IAnonymizedStudentAssessment, IAnonymizedStudentAssessment> onMapped)
        {
            var sourceSynchSupport = source as IAnonymizedStudentAssessmentSynchronizationSourceSupport;
            var targetSynchSupport = target as IAnonymizedStudentAssessmentSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AdministrationDate = source.AdministrationDate;
            target.AnonymizedStudentIdentifier = source.AnonymizedStudentIdentifier;
            target.AssessmentIdentifier = source.AssessmentIdentifier;
            target.FactsAsOfDate = source.FactsAsOfDate;
            target.SchoolYear = source.SchoolYear;
            target.TakenSchoolYear = source.TakenSchoolYear;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAcademicSubjectDescriptorSupported)
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
            else
                targetSynchSupport.IsAcademicSubjectDescriptorSupported = false;

            if (sourceSynchSupport.IsAssessmentCategoryDescriptorSupported)
                target.AssessmentCategoryDescriptor = source.AssessmentCategoryDescriptor;
            else
                targetSynchSupport.IsAssessmentCategoryDescriptorSupported = false;

            if (sourceSynchSupport.IsAssessmentTitleSupported)
                target.AssessmentTitle = source.AssessmentTitle;
            else
                targetSynchSupport.IsAssessmentTitleSupported = false;

            if (sourceSynchSupport.IsGradeLevelDescriptorSupported)
                target.GradeLevelDescriptor = source.GradeLevelDescriptor;
            else
                targetSynchSupport.IsGradeLevelDescriptorSupported = false;

            if (sourceSynchSupport.IsTermDescriptorSupported)
                target.TermDescriptor = source.TermDescriptor;
            else
                targetSynchSupport.IsTermDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AnonymizedStudentResourceId = source.AnonymizedStudentResourceId;
                target.AnonymizedStudentDiscriminator = source.AnonymizedStudentDiscriminator;
                target.TakenSchoolYearTypeResourceId = source.TakenSchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // AnonymizedStudentAssessmentPerformanceLevel (Source)
            if (sourceSynchSupport.IsAnonymizedStudentAssessmentPerformanceLevelSupported)
            {
                var itemProperty = target.GetType().GetProperty("AnonymizedStudentAssessmentPerformanceLevel");
                
                if (itemProperty != null)
                {                    
                    if (source.AnonymizedStudentAssessmentPerformanceLevel == null)
                    {
                        target.AnonymizedStudentAssessmentPerformanceLevel = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetAnonymizedStudentAssessmentPerformanceLevel = Activator.CreateInstance(itemType);
                        (targetAnonymizedStudentAssessmentPerformanceLevel as IChildEntity)?.SetParent(target);
                        source.AnonymizedStudentAssessmentPerformanceLevel.Map(targetAnonymizedStudentAssessmentPerformanceLevel);
                        
                        // Update the target reference appropriately
                        target.AnonymizedStudentAssessmentPerformanceLevel = (IAnonymizedStudentAssessmentPerformanceLevel) targetAnonymizedStudentAssessmentPerformanceLevel;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsAnonymizedStudentAssessmentPerformanceLevelSupported = false; 
            }
            // AnonymizedStudentAssessmentScoreResult (Source)
            if (sourceSynchSupport.IsAnonymizedStudentAssessmentScoreResultSupported)
            {
                var itemProperty = target.GetType().GetProperty("AnonymizedStudentAssessmentScoreResult");
                
                if (itemProperty != null)
                {                    
                    if (source.AnonymizedStudentAssessmentScoreResult == null)
                    {
                        target.AnonymizedStudentAssessmentScoreResult = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetAnonymizedStudentAssessmentScoreResult = Activator.CreateInstance(itemType);
                        (targetAnonymizedStudentAssessmentScoreResult as IChildEntity)?.SetParent(target);
                        source.AnonymizedStudentAssessmentScoreResult.Map(targetAnonymizedStudentAssessmentScoreResult);
                        
                        // Update the target reference appropriately
                        target.AnonymizedStudentAssessmentScoreResult = (IAnonymizedStudentAssessmentScoreResult) targetAnonymizedStudentAssessmentScoreResult;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsAnonymizedStudentAssessmentScoreResultSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAnonymizedStudentAssessmentSynchronizationSourceSupport 
    {
        bool IsAcademicSubjectDescriptorSupported { get; set; }
        bool IsAnonymizedStudentAssessmentPerformanceLevelSupported { get; set; }
        bool IsAnonymizedStudentAssessmentScoreResultSupported { get; set; }
        bool IsAssessmentCategoryDescriptorSupported { get; set; }
        bool IsAssessmentTitleSupported { get; set; }
        bool IsGradeLevelDescriptorSupported { get; set; }
        bool IsTermDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class AnonymizedStudentAssessmentPerformanceLevelMapper 
    {
        public static bool SynchronizeTo(this IAnonymizedStudentAssessmentPerformanceLevel source, IAnonymizedStudentAssessmentPerformanceLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IAnonymizedStudentAssessmentPerformanceLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAssessmentReportingMethodDescriptorSupported)
                && target.AssessmentReportingMethodDescriptor != source.AssessmentReportingMethodDescriptor)
            {
                target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPerformanceLevelDescriptorSupported)
                && target.PerformanceLevelDescriptor != source.PerformanceLevelDescriptor)
            {
                target.PerformanceLevelDescriptor = source.PerformanceLevelDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPerformanceLevelMetSupported)
                && target.PerformanceLevelMet != source.PerformanceLevelMet)
            {
                target.PerformanceLevelMet = source.PerformanceLevelMet;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAnonymizedStudentAssessmentPerformanceLevel source, IAnonymizedStudentAssessmentPerformanceLevel target, Action<IAnonymizedStudentAssessmentPerformanceLevel, IAnonymizedStudentAssessmentPerformanceLevel> onMapped)
        {
            var sourceSynchSupport = source as IAnonymizedStudentAssessmentPerformanceLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IAnonymizedStudentAssessmentPerformanceLevelSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsAssessmentReportingMethodDescriptorSupported)
                target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;
            else
                targetSynchSupport.IsAssessmentReportingMethodDescriptorSupported = false;

            if (sourceSynchSupport.IsPerformanceLevelDescriptorSupported)
                target.PerformanceLevelDescriptor = source.PerformanceLevelDescriptor;
            else
                targetSynchSupport.IsPerformanceLevelDescriptorSupported = false;

            if (sourceSynchSupport.IsPerformanceLevelMetSupported)
                target.PerformanceLevelMet = source.PerformanceLevelMet;
            else
                targetSynchSupport.IsPerformanceLevelMetSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAnonymizedStudentAssessmentPerformanceLevelSynchronizationSourceSupport 
    {
        bool IsAssessmentReportingMethodDescriptorSupported { get; set; }
        bool IsPerformanceLevelDescriptorSupported { get; set; }
        bool IsPerformanceLevelMetSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class AnonymizedStudentAssessmentScoreResultMapper 
    {
        public static bool SynchronizeTo(this IAnonymizedStudentAssessmentScoreResult source, IAnonymizedStudentAssessmentScoreResult target)
        {
            bool isModified = false;

            var sourceSupport = source as IAnonymizedStudentAssessmentScoreResultSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAssessmentReportingMethodDescriptorSupported)
                && target.AssessmentReportingMethodDescriptor != source.AssessmentReportingMethodDescriptor)
            {
                target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsResultSupported)
                && target.Result != source.Result)
            {
                target.Result = source.Result;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsResultDatatypeTypeDescriptorSupported)
                && target.ResultDatatypeTypeDescriptor != source.ResultDatatypeTypeDescriptor)
            {
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAnonymizedStudentAssessmentScoreResult source, IAnonymizedStudentAssessmentScoreResult target, Action<IAnonymizedStudentAssessmentScoreResult, IAnonymizedStudentAssessmentScoreResult> onMapped)
        {
            var sourceSynchSupport = source as IAnonymizedStudentAssessmentScoreResultSynchronizationSourceSupport;
            var targetSynchSupport = target as IAnonymizedStudentAssessmentScoreResultSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsAssessmentReportingMethodDescriptorSupported)
                target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;
            else
                targetSynchSupport.IsAssessmentReportingMethodDescriptorSupported = false;

            if (sourceSynchSupport.IsResultSupported)
                target.Result = source.Result;
            else
                targetSynchSupport.IsResultSupported = false;

            if (sourceSynchSupport.IsResultDatatypeTypeDescriptorSupported)
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
            else
                targetSynchSupport.IsResultDatatypeTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAnonymizedStudentAssessmentScoreResultSynchronizationSourceSupport 
    {
        bool IsAssessmentReportingMethodDescriptorSupported { get; set; }
        bool IsResultSupported { get; set; }
        bool IsResultDatatypeTypeDescriptorSupported { get; set; }
    }
 
}
// Aggregate: AnonymizedStudentAssessmentCourseAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.AnonymizedStudentAssessmentCourseAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AnonymizedStudentAssessmentCourseAssociationMapper 
    {
        public static bool SynchronizeTo(this IAnonymizedStudentAssessmentCourseAssociation source, IAnonymizedStudentAssessmentCourseAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IAnonymizedStudentAssessmentCourseAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AdministrationDate != target.AdministrationDate)
            {
                source.AdministrationDate = target.AdministrationDate;
            }
            if (source.AnonymizedStudentIdentifier != target.AnonymizedStudentIdentifier)
            {
                source.AnonymizedStudentIdentifier = target.AnonymizedStudentIdentifier;
            }
            if (source.AssessmentIdentifier != target.AssessmentIdentifier)
            {
                source.AssessmentIdentifier = target.AssessmentIdentifier;
            }
            if (source.CourseCode != target.CourseCode)
            {
                source.CourseCode = target.CourseCode;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.FactsAsOfDate != target.FactsAsOfDate)
            {
                source.FactsAsOfDate = target.FactsAsOfDate;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.TakenSchoolYear != target.TakenSchoolYear)
            {
                source.TakenSchoolYear = target.TakenSchoolYear;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAnonymizedStudentAssessmentCourseAssociation source, IAnonymizedStudentAssessmentCourseAssociation target, Action<IAnonymizedStudentAssessmentCourseAssociation, IAnonymizedStudentAssessmentCourseAssociation> onMapped)
        {
            var sourceSynchSupport = source as IAnonymizedStudentAssessmentCourseAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IAnonymizedStudentAssessmentCourseAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AdministrationDate = source.AdministrationDate;
            target.AnonymizedStudentIdentifier = source.AnonymizedStudentIdentifier;
            target.AssessmentIdentifier = source.AssessmentIdentifier;
            target.CourseCode = source.CourseCode;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FactsAsOfDate = source.FactsAsOfDate;
            target.SchoolYear = source.SchoolYear;
            target.TakenSchoolYear = source.TakenSchoolYear;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AnonymizedStudentAssessmentResourceId = source.AnonymizedStudentAssessmentResourceId;
                target.AnonymizedStudentAssessmentDiscriminator = source.AnonymizedStudentAssessmentDiscriminator;
                target.CourseResourceId = source.CourseResourceId;
                target.CourseDiscriminator = source.CourseDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAnonymizedStudentAssessmentCourseAssociationSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: AnonymizedStudentAssessmentSectionAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.AnonymizedStudentAssessmentSectionAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AnonymizedStudentAssessmentSectionAssociationMapper 
    {
        public static bool SynchronizeTo(this IAnonymizedStudentAssessmentSectionAssociation source, IAnonymizedStudentAssessmentSectionAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IAnonymizedStudentAssessmentSectionAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AdministrationDate != target.AdministrationDate)
            {
                source.AdministrationDate = target.AdministrationDate;
            }
            if (source.AnonymizedStudentIdentifier != target.AnonymizedStudentIdentifier)
            {
                source.AnonymizedStudentIdentifier = target.AnonymizedStudentIdentifier;
            }
            if (source.AssessmentIdentifier != target.AssessmentIdentifier)
            {
                source.AssessmentIdentifier = target.AssessmentIdentifier;
            }
            if (source.FactsAsOfDate != target.FactsAsOfDate)
            {
                source.FactsAsOfDate = target.FactsAsOfDate;
            }
            if (source.LocalCourseCode != target.LocalCourseCode)
            {
                source.LocalCourseCode = target.LocalCourseCode;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SectionIdentifier != target.SectionIdentifier)
            {
                source.SectionIdentifier = target.SectionIdentifier;
            }
            if (source.SessionName != target.SessionName)
            {
                source.SessionName = target.SessionName;
            }
            if (source.TakenSchoolYear != target.TakenSchoolYear)
            {
                source.TakenSchoolYear = target.TakenSchoolYear;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAnonymizedStudentAssessmentSectionAssociation source, IAnonymizedStudentAssessmentSectionAssociation target, Action<IAnonymizedStudentAssessmentSectionAssociation, IAnonymizedStudentAssessmentSectionAssociation> onMapped)
        {
            var sourceSynchSupport = source as IAnonymizedStudentAssessmentSectionAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IAnonymizedStudentAssessmentSectionAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AdministrationDate = source.AdministrationDate;
            target.AnonymizedStudentIdentifier = source.AnonymizedStudentIdentifier;
            target.AssessmentIdentifier = source.AssessmentIdentifier;
            target.FactsAsOfDate = source.FactsAsOfDate;
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;
            target.TakenSchoolYear = source.TakenSchoolYear;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AnonymizedStudentAssessmentResourceId = source.AnonymizedStudentAssessmentResourceId;
                target.AnonymizedStudentAssessmentDiscriminator = source.AnonymizedStudentAssessmentDiscriminator;
                target.SectionResourceId = source.SectionResourceId;
                target.SectionDiscriminator = source.SectionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAnonymizedStudentAssessmentSectionAssociationSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: AnonymizedStudentCourseAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.AnonymizedStudentCourseAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AnonymizedStudentCourseAssociationMapper 
    {
        public static bool SynchronizeTo(this IAnonymizedStudentCourseAssociation source, IAnonymizedStudentCourseAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IAnonymizedStudentCourseAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AnonymizedStudentIdentifier != target.AnonymizedStudentIdentifier)
            {
                source.AnonymizedStudentIdentifier = target.AnonymizedStudentIdentifier;
            }
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.CourseCode != target.CourseCode)
            {
                source.CourseCode = target.CourseCode;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.FactsAsOfDate != target.FactsAsOfDate)
            {
                source.FactsAsOfDate = target.FactsAsOfDate;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAnonymizedStudentCourseAssociation source, IAnonymizedStudentCourseAssociation target, Action<IAnonymizedStudentCourseAssociation, IAnonymizedStudentCourseAssociation> onMapped)
        {
            var sourceSynchSupport = source as IAnonymizedStudentCourseAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IAnonymizedStudentCourseAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AnonymizedStudentIdentifier = source.AnonymizedStudentIdentifier;
            target.BeginDate = source.BeginDate;
            target.CourseCode = source.CourseCode;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FactsAsOfDate = source.FactsAsOfDate;
            target.SchoolYear = source.SchoolYear;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AnonymizedStudentResourceId = source.AnonymizedStudentResourceId;
                target.AnonymizedStudentDiscriminator = source.AnonymizedStudentDiscriminator;
                target.CourseResourceId = source.CourseResourceId;
                target.CourseDiscriminator = source.CourseDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAnonymizedStudentCourseAssociationSynchronizationSourceSupport 
    {
        bool IsEndDateSupported { get; set; }
    }
 
}
// Aggregate: AnonymizedStudentCourseTranscript

namespace EdFi.Ods.Entities.Common.TPDM //.AnonymizedStudentCourseTranscriptAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AnonymizedStudentCourseTranscriptMapper 
    {
        public static bool SynchronizeTo(this IAnonymizedStudentCourseTranscript source, IAnonymizedStudentCourseTranscript target)
        {
            bool isModified = false;

            var sourceSupport = source as IAnonymizedStudentCourseTranscriptSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AnonymizedStudentIdentifier != target.AnonymizedStudentIdentifier)
            {
                source.AnonymizedStudentIdentifier = target.AnonymizedStudentIdentifier;
            }
            if (source.CourseCode != target.CourseCode)
            {
                source.CourseCode = target.CourseCode;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.FactAsOfDate != target.FactAsOfDate)
            {
                source.FactAsOfDate = target.FactAsOfDate;
            }
            if (source.FactsAsOfDate != target.FactsAsOfDate)
            {
                source.FactsAsOfDate = target.FactsAsOfDate;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCourseRepeatCodeDescriptorSupported)
                && target.CourseRepeatCodeDescriptor != source.CourseRepeatCodeDescriptor)
            {
                target.CourseRepeatCodeDescriptor = source.CourseRepeatCodeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCourseTitleSupported)
                && target.CourseTitle != source.CourseTitle)
            {
                target.CourseTitle = source.CourseTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFinalLetterGradeEarnedSupported)
                && target.FinalLetterGradeEarned != source.FinalLetterGradeEarned)
            {
                target.FinalLetterGradeEarned = source.FinalLetterGradeEarned;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFinalNumericGradeEarnedSupported)
                && target.FinalNumericGradeEarned != source.FinalNumericGradeEarned)
            {
                target.FinalNumericGradeEarned = source.FinalNumericGradeEarned;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAnonymizedStudentCourseTranscript source, IAnonymizedStudentCourseTranscript target, Action<IAnonymizedStudentCourseTranscript, IAnonymizedStudentCourseTranscript> onMapped)
        {
            var sourceSynchSupport = source as IAnonymizedStudentCourseTranscriptSynchronizationSourceSupport;
            var targetSynchSupport = target as IAnonymizedStudentCourseTranscriptSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AnonymizedStudentIdentifier = source.AnonymizedStudentIdentifier;
            target.CourseCode = source.CourseCode;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FactAsOfDate = source.FactAsOfDate;
            target.FactsAsOfDate = source.FactsAsOfDate;
            target.SchoolYear = source.SchoolYear;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCourseRepeatCodeDescriptorSupported)
                target.CourseRepeatCodeDescriptor = source.CourseRepeatCodeDescriptor;
            else
                targetSynchSupport.IsCourseRepeatCodeDescriptorSupported = false;

            if (sourceSynchSupport.IsCourseTitleSupported)
                target.CourseTitle = source.CourseTitle;
            else
                targetSynchSupport.IsCourseTitleSupported = false;

            if (sourceSynchSupport.IsFinalLetterGradeEarnedSupported)
                target.FinalLetterGradeEarned = source.FinalLetterGradeEarned;
            else
                targetSynchSupport.IsFinalLetterGradeEarnedSupported = false;

            if (sourceSynchSupport.IsFinalNumericGradeEarnedSupported)
                target.FinalNumericGradeEarned = source.FinalNumericGradeEarned;
            else
                targetSynchSupport.IsFinalNumericGradeEarnedSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AnonymizedStudentAcademicRecordResourceId = source.AnonymizedStudentAcademicRecordResourceId;
                target.AnonymizedStudentAcademicRecordDiscriminator = source.AnonymizedStudentAcademicRecordDiscriminator;
                target.CourseResourceId = source.CourseResourceId;
                target.CourseDiscriminator = source.CourseDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAnonymizedStudentCourseTranscriptSynchronizationSourceSupport 
    {
        bool IsCourseRepeatCodeDescriptorSupported { get; set; }
        bool IsCourseTitleSupported { get; set; }
        bool IsFinalLetterGradeEarnedSupported { get; set; }
        bool IsFinalNumericGradeEarnedSupported { get; set; }
    }
 
}
// Aggregate: AnonymizedStudentEducationOrganizationAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.AnonymizedStudentEducationOrganizationAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AnonymizedStudentEducationOrganizationAssociationMapper 
    {
        public static bool SynchronizeTo(this IAnonymizedStudentEducationOrganizationAssociation source, IAnonymizedStudentEducationOrganizationAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IAnonymizedStudentEducationOrganizationAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AnonymizedStudentIdentifier != target.AnonymizedStudentIdentifier)
            {
                source.AnonymizedStudentIdentifier = target.AnonymizedStudentIdentifier;
            }
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.FactsAsOfDate != target.FactsAsOfDate)
            {
                source.FactsAsOfDate = target.FactsAsOfDate;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAnonymizedStudentEducationOrganizationAssociation source, IAnonymizedStudentEducationOrganizationAssociation target, Action<IAnonymizedStudentEducationOrganizationAssociation, IAnonymizedStudentEducationOrganizationAssociation> onMapped)
        {
            var sourceSynchSupport = source as IAnonymizedStudentEducationOrganizationAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IAnonymizedStudentEducationOrganizationAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AnonymizedStudentIdentifier = source.AnonymizedStudentIdentifier;
            target.BeginDate = source.BeginDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FactsAsOfDate = source.FactsAsOfDate;
            target.SchoolYear = source.SchoolYear;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AnonymizedStudentResourceId = source.AnonymizedStudentResourceId;
                target.AnonymizedStudentDiscriminator = source.AnonymizedStudentDiscriminator;
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAnonymizedStudentEducationOrganizationAssociationSynchronizationSourceSupport 
    {
        bool IsEndDateSupported { get; set; }
    }
 
}
// Aggregate: AnonymizedStudentSectionAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.AnonymizedStudentSectionAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AnonymizedStudentSectionAssociationMapper 
    {
        public static bool SynchronizeTo(this IAnonymizedStudentSectionAssociation source, IAnonymizedStudentSectionAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IAnonymizedStudentSectionAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AnonymizedStudentIdentifier != target.AnonymizedStudentIdentifier)
            {
                source.AnonymizedStudentIdentifier = target.AnonymizedStudentIdentifier;
            }
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.FactsAsOfDate != target.FactsAsOfDate)
            {
                source.FactsAsOfDate = target.FactsAsOfDate;
            }
            if (source.LocalCourseCode != target.LocalCourseCode)
            {
                source.LocalCourseCode = target.LocalCourseCode;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SectionIdentifier != target.SectionIdentifier)
            {
                source.SectionIdentifier = target.SectionIdentifier;
            }
            if (source.SessionName != target.SessionName)
            {
                source.SessionName = target.SessionName;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAnonymizedStudentSectionAssociation source, IAnonymizedStudentSectionAssociation target, Action<IAnonymizedStudentSectionAssociation, IAnonymizedStudentSectionAssociation> onMapped)
        {
            var sourceSynchSupport = source as IAnonymizedStudentSectionAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IAnonymizedStudentSectionAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AnonymizedStudentIdentifier = source.AnonymizedStudentIdentifier;
            target.BeginDate = source.BeginDate;
            target.FactsAsOfDate = source.FactsAsOfDate;
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AnonymizedStudentResourceId = source.AnonymizedStudentResourceId;
                target.AnonymizedStudentDiscriminator = source.AnonymizedStudentDiscriminator;
                target.SectionResourceId = source.SectionResourceId;
                target.SectionDiscriminator = source.SectionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAnonymizedStudentSectionAssociationSynchronizationSourceSupport 
    {
        bool IsEndDateSupported { get; set; }
    }
 
}
// Aggregate: Applicant

namespace EdFi.Ods.Entities.Common.TPDM //.ApplicantAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ApplicantMapper 
    {
        public static bool SynchronizeTo(this IApplicant source, IApplicant target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ApplicantIdentifier != target.ApplicantIdentifier)
            {
                source.ApplicantIdentifier = target.ApplicantIdentifier;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBirthDateSupported)
                && target.BirthDate != source.BirthDate)
            {
                target.BirthDate = source.BirthDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCitizenshipStatusDescriptorSupported)
                && target.CitizenshipStatusDescriptor != source.CitizenshipStatusDescriptor)
            {
                target.CitizenshipStatusDescriptor = source.CitizenshipStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEconomicDisadvantagedSupported)
                && target.EconomicDisadvantaged != source.EconomicDisadvantaged)
            {
                target.EconomicDisadvantaged = source.EconomicDisadvantaged;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFirstGenerationStudentSupported)
                && target.FirstGenerationStudent != source.FirstGenerationStudent)
            {
                target.FirstGenerationStudent = source.FirstGenerationStudent;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFirstNameSupported)
                && target.FirstName != source.FirstName)
            {
                target.FirstName = source.FirstName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGenderDescriptorSupported)
                && target.GenderDescriptor != source.GenderDescriptor)
            {
                target.GenderDescriptor = source.GenderDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGenerationCodeSuffixSupported)
                && target.GenerationCodeSuffix != source.GenerationCodeSuffix)
            {
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHighestCompletedLevelOfEducationDescriptorSupported)
                && target.HighestCompletedLevelOfEducationDescriptor != source.HighestCompletedLevelOfEducationDescriptor)
            {
                target.HighestCompletedLevelOfEducationDescriptor = source.HighestCompletedLevelOfEducationDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHighlyQualifiedAcademicSubjectDescriptorSupported)
                && target.HighlyQualifiedAcademicSubjectDescriptor != source.HighlyQualifiedAcademicSubjectDescriptor)
            {
                target.HighlyQualifiedAcademicSubjectDescriptor = source.HighlyQualifiedAcademicSubjectDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHighlyQualifiedTeacherSupported)
                && target.HighlyQualifiedTeacher != source.HighlyQualifiedTeacher)
            {
                target.HighlyQualifiedTeacher = source.HighlyQualifiedTeacher;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHispanicLatinoEthnicitySupported)
                && target.HispanicLatinoEthnicity != source.HispanicLatinoEthnicity)
            {
                target.HispanicLatinoEthnicity = source.HispanicLatinoEthnicity;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLastSurnameSupported)
                && target.LastSurname != source.LastSurname)
            {
                target.LastSurname = source.LastSurname;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLoginIdSupported)
                && target.LoginId != source.LoginId)
            {
                target.LoginId = source.LoginId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaidenNameSupported)
                && target.MaidenName != source.MaidenName)
            {
                target.MaidenName = source.MaidenName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMiddleNameSupported)
                && target.MiddleName != source.MiddleName)
            {
                target.MiddleName = source.MiddleName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPersonalTitlePrefixSupported)
                && target.PersonalTitlePrefix != source.PersonalTitlePrefix)
            {
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSexDescriptorSupported)
                && target.SexDescriptor != source.SexDescriptor)
            {
                target.SexDescriptor = source.SexDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTeacherCandidateIdentifierSupported)
                && target.TeacherCandidateIdentifier != source.TeacherCandidateIdentifier)
            {
                target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsYearsOfPriorProfessionalExperienceSupported)
                && target.YearsOfPriorProfessionalExperience != source.YearsOfPriorProfessionalExperience)
            {
                target.YearsOfPriorProfessionalExperience = source.YearsOfPriorProfessionalExperience;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsYearsOfPriorTeachingExperienceSupported)
                && target.YearsOfPriorTeachingExperience != source.YearsOfPriorTeachingExperience)
            {
                target.YearsOfPriorTeachingExperience = source.YearsOfPriorTeachingExperience;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsApplicantAddressesSupported)
            {
                isModified |= 
                    source.ApplicantAddresses.SynchronizeCollectionTo(
                        target.ApplicantAddresses, 
                        onChildAdded: child => 
                            {
                                child.Applicant = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantAddressIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantAidsSupported)
            {
                isModified |= 
                    source.ApplicantAids.SynchronizeCollectionTo(
                        target.ApplicantAids, 
                        onChildAdded: child => 
                            {
                                child.Applicant = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantAidIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantBackgroundChecksSupported)
            {
                isModified |= 
                    source.ApplicantBackgroundChecks.SynchronizeCollectionTo(
                        target.ApplicantBackgroundChecks, 
                        onChildAdded: child => 
                            {
                                child.Applicant = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantBackgroundCheckIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantCharacteristicsSupported)
            {
                isModified |= 
                    source.ApplicantCharacteristics.SynchronizeCollectionTo(
                        target.ApplicantCharacteristics, 
                        onChildAdded: child => 
                            {
                                child.Applicant = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantCharacteristicIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantCredentialsSupported)
            {
                isModified |= 
                    source.ApplicantCredentials.SynchronizeCollectionTo(
                        target.ApplicantCredentials, 
                        onChildAdded: child => 
                            {
                                child.Applicant = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantCredentialIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantDisabilitiesSupported)
            {
                isModified |= 
                    source.ApplicantDisabilities.SynchronizeCollectionTo(
                        target.ApplicantDisabilities, 
                        onChildAdded: child => 
                            {
                                child.Applicant = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantDisabilityIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantElectronicMailsSupported)
            {
                isModified |= 
                    source.ApplicantElectronicMails.SynchronizeCollectionTo(
                        target.ApplicantElectronicMails, 
                        onChildAdded: child => 
                            {
                                child.Applicant = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantElectronicMailIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantGradePointAveragesSupported)
            {
                isModified |= 
                    source.ApplicantGradePointAverages.SynchronizeCollectionTo(
                        target.ApplicantGradePointAverages, 
                        onChildAdded: child => 
                            {
                                child.Applicant = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantGradePointAverageIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantIdentificationDocumentsSupported)
            {
                isModified |= 
                    source.ApplicantIdentificationDocuments.SynchronizeCollectionTo(
                        target.ApplicantIdentificationDocuments, 
                        onChildAdded: child => 
                            {
                                child.Applicant = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantIdentificationDocumentIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantInternationalAddressesSupported)
            {
                isModified |= 
                    source.ApplicantInternationalAddresses.SynchronizeCollectionTo(
                        target.ApplicantInternationalAddresses, 
                        onChildAdded: child => 
                            {
                                child.Applicant = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantInternationalAddressIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantLanguagesSupported)
            {
                isModified |= 
                    source.ApplicantLanguages.SynchronizeCollectionTo(
                        target.ApplicantLanguages, 
                        onChildAdded: child => 
                            {
                                child.Applicant = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantLanguageIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantPersonalIdentificationDocumentsSupported)
            {
                isModified |= 
                    source.ApplicantPersonalIdentificationDocuments.SynchronizeCollectionTo(
                        target.ApplicantPersonalIdentificationDocuments, 
                        onChildAdded: child => 
                            {
                                child.Applicant = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantPersonalIdentificationDocumentIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantRacesSupported)
            {
                isModified |= 
                    source.ApplicantRaces.SynchronizeCollectionTo(
                        target.ApplicantRaces, 
                        onChildAdded: child => 
                            {
                                child.Applicant = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantRaceIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantScoreResultsSupported)
            {
                isModified |= 
                    source.ApplicantScoreResults.SynchronizeCollectionTo(
                        target.ApplicantScoreResults, 
                        onChildAdded: child => 
                            {
                                child.Applicant = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantScoreResultIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantStaffIdentificationCodesSupported)
            {
                isModified |= 
                    source.ApplicantStaffIdentificationCodes.SynchronizeCollectionTo(
                        target.ApplicantStaffIdentificationCodes, 
                        onChildAdded: child => 
                            {
                                child.Applicant = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantStaffIdentificationCodeIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantTeacherPreparationProgramsSupported)
            {
                isModified |= 
                    source.ApplicantTeacherPreparationPrograms.SynchronizeCollectionTo(
                        target.ApplicantTeacherPreparationPrograms, 
                        onChildAdded: child => 
                            {
                                child.Applicant = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantTeacherPreparationProgramIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantTelephonesSupported)
            {
                isModified |= 
                    source.ApplicantTelephones.SynchronizeCollectionTo(
                        target.ApplicantTelephones, 
                        onChildAdded: child => 
                            {
                                child.Applicant = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantTelephoneIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantVisasSupported)
            {
                isModified |= 
                    source.ApplicantVisas.SynchronizeCollectionTo(
                        target.ApplicantVisas, 
                        onChildAdded: child => 
                            {
                                child.Applicant = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantVisaIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IApplicant source, IApplicant target, Action<IApplicant, IApplicant> onMapped)
        {
            var sourceSynchSupport = source as IApplicantSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ApplicantIdentifier = source.ApplicantIdentifier;
            target.EducationOrganizationId = source.EducationOrganizationId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBirthDateSupported)
                target.BirthDate = source.BirthDate;
            else
                targetSynchSupport.IsBirthDateSupported = false;

            if (sourceSynchSupport.IsCitizenshipStatusDescriptorSupported)
                target.CitizenshipStatusDescriptor = source.CitizenshipStatusDescriptor;
            else
                targetSynchSupport.IsCitizenshipStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsEconomicDisadvantagedSupported)
                target.EconomicDisadvantaged = source.EconomicDisadvantaged;
            else
                targetSynchSupport.IsEconomicDisadvantagedSupported = false;

            if (sourceSynchSupport.IsFirstGenerationStudentSupported)
                target.FirstGenerationStudent = source.FirstGenerationStudent;
            else
                targetSynchSupport.IsFirstGenerationStudentSupported = false;

            if (sourceSynchSupport.IsFirstNameSupported)
                target.FirstName = source.FirstName;
            else
                targetSynchSupport.IsFirstNameSupported = false;

            if (sourceSynchSupport.IsGenderDescriptorSupported)
                target.GenderDescriptor = source.GenderDescriptor;
            else
                targetSynchSupport.IsGenderDescriptorSupported = false;

            if (sourceSynchSupport.IsGenerationCodeSuffixSupported)
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
            else
                targetSynchSupport.IsGenerationCodeSuffixSupported = false;

            if (sourceSynchSupport.IsHighestCompletedLevelOfEducationDescriptorSupported)
                target.HighestCompletedLevelOfEducationDescriptor = source.HighestCompletedLevelOfEducationDescriptor;
            else
                targetSynchSupport.IsHighestCompletedLevelOfEducationDescriptorSupported = false;

            if (sourceSynchSupport.IsHighlyQualifiedAcademicSubjectDescriptorSupported)
                target.HighlyQualifiedAcademicSubjectDescriptor = source.HighlyQualifiedAcademicSubjectDescriptor;
            else
                targetSynchSupport.IsHighlyQualifiedAcademicSubjectDescriptorSupported = false;

            if (sourceSynchSupport.IsHighlyQualifiedTeacherSupported)
                target.HighlyQualifiedTeacher = source.HighlyQualifiedTeacher;
            else
                targetSynchSupport.IsHighlyQualifiedTeacherSupported = false;

            if (sourceSynchSupport.IsHispanicLatinoEthnicitySupported)
                target.HispanicLatinoEthnicity = source.HispanicLatinoEthnicity;
            else
                targetSynchSupport.IsHispanicLatinoEthnicitySupported = false;

            if (sourceSynchSupport.IsLastSurnameSupported)
                target.LastSurname = source.LastSurname;
            else
                targetSynchSupport.IsLastSurnameSupported = false;

            if (sourceSynchSupport.IsLoginIdSupported)
                target.LoginId = source.LoginId;
            else
                targetSynchSupport.IsLoginIdSupported = false;

            if (sourceSynchSupport.IsMaidenNameSupported)
                target.MaidenName = source.MaidenName;
            else
                targetSynchSupport.IsMaidenNameSupported = false;

            if (sourceSynchSupport.IsMiddleNameSupported)
                target.MiddleName = source.MiddleName;
            else
                targetSynchSupport.IsMiddleNameSupported = false;

            if (sourceSynchSupport.IsPersonalTitlePrefixSupported)
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
            else
                targetSynchSupport.IsPersonalTitlePrefixSupported = false;

            if (sourceSynchSupport.IsSexDescriptorSupported)
                target.SexDescriptor = source.SexDescriptor;
            else
                targetSynchSupport.IsSexDescriptorSupported = false;

            if (sourceSynchSupport.IsTeacherCandidateIdentifierSupported)
                target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;
            else
                targetSynchSupport.IsTeacherCandidateIdentifierSupported = false;

            if (sourceSynchSupport.IsYearsOfPriorProfessionalExperienceSupported)
                target.YearsOfPriorProfessionalExperience = source.YearsOfPriorProfessionalExperience;
            else
                targetSynchSupport.IsYearsOfPriorProfessionalExperienceSupported = false;

            if (sourceSynchSupport.IsYearsOfPriorTeachingExperienceSupported)
                target.YearsOfPriorTeachingExperience = source.YearsOfPriorTeachingExperience;
            else
                targetSynchSupport.IsYearsOfPriorTeachingExperienceSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.TeacherCandidateResourceId = source.TeacherCandidateResourceId;
                target.TeacherCandidateDiscriminator = source.TeacherCandidateDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsApplicantAddressesSupported)
            {    
                targetSynchSupport.IsApplicantAddressIncluded = sourceSynchSupport.IsApplicantAddressIncluded;
                source.ApplicantAddresses.MapCollectionTo(target.ApplicantAddresses, target);
            }
            else
            {
                targetSynchSupport.IsApplicantAddressesSupported = false;
            }

            if (sourceSynchSupport.IsApplicantAidsSupported)
            {    
                targetSynchSupport.IsApplicantAidIncluded = sourceSynchSupport.IsApplicantAidIncluded;
                source.ApplicantAids.MapCollectionTo(target.ApplicantAids, target);
            }
            else
            {
                targetSynchSupport.IsApplicantAidsSupported = false;
            }

            if (sourceSynchSupport.IsApplicantBackgroundChecksSupported)
            {    
                targetSynchSupport.IsApplicantBackgroundCheckIncluded = sourceSynchSupport.IsApplicantBackgroundCheckIncluded;
                source.ApplicantBackgroundChecks.MapCollectionTo(target.ApplicantBackgroundChecks, target);
            }
            else
            {
                targetSynchSupport.IsApplicantBackgroundChecksSupported = false;
            }

            if (sourceSynchSupport.IsApplicantCharacteristicsSupported)
            {    
                targetSynchSupport.IsApplicantCharacteristicIncluded = sourceSynchSupport.IsApplicantCharacteristicIncluded;
                source.ApplicantCharacteristics.MapCollectionTo(target.ApplicantCharacteristics, target);
            }
            else
            {
                targetSynchSupport.IsApplicantCharacteristicsSupported = false;
            }

            if (sourceSynchSupport.IsApplicantCredentialsSupported)
            {    
                targetSynchSupport.IsApplicantCredentialIncluded = sourceSynchSupport.IsApplicantCredentialIncluded;
                source.ApplicantCredentials.MapCollectionTo(target.ApplicantCredentials, target);
            }
            else
            {
                targetSynchSupport.IsApplicantCredentialsSupported = false;
            }

            if (sourceSynchSupport.IsApplicantDisabilitiesSupported)
            {    
                targetSynchSupport.IsApplicantDisabilityIncluded = sourceSynchSupport.IsApplicantDisabilityIncluded;
                source.ApplicantDisabilities.MapCollectionTo(target.ApplicantDisabilities, target);
            }
            else
            {
                targetSynchSupport.IsApplicantDisabilitiesSupported = false;
            }

            if (sourceSynchSupport.IsApplicantElectronicMailsSupported)
            {    
                targetSynchSupport.IsApplicantElectronicMailIncluded = sourceSynchSupport.IsApplicantElectronicMailIncluded;
                source.ApplicantElectronicMails.MapCollectionTo(target.ApplicantElectronicMails, target);
            }
            else
            {
                targetSynchSupport.IsApplicantElectronicMailsSupported = false;
            }

            if (sourceSynchSupport.IsApplicantGradePointAveragesSupported)
            {    
                targetSynchSupport.IsApplicantGradePointAverageIncluded = sourceSynchSupport.IsApplicantGradePointAverageIncluded;
                source.ApplicantGradePointAverages.MapCollectionTo(target.ApplicantGradePointAverages, target);
            }
            else
            {
                targetSynchSupport.IsApplicantGradePointAveragesSupported = false;
            }

            if (sourceSynchSupport.IsApplicantIdentificationDocumentsSupported)
            {    
                targetSynchSupport.IsApplicantIdentificationDocumentIncluded = sourceSynchSupport.IsApplicantIdentificationDocumentIncluded;
                source.ApplicantIdentificationDocuments.MapCollectionTo(target.ApplicantIdentificationDocuments, target);
            }
            else
            {
                targetSynchSupport.IsApplicantIdentificationDocumentsSupported = false;
            }

            if (sourceSynchSupport.IsApplicantInternationalAddressesSupported)
            {    
                targetSynchSupport.IsApplicantInternationalAddressIncluded = sourceSynchSupport.IsApplicantInternationalAddressIncluded;
                source.ApplicantInternationalAddresses.MapCollectionTo(target.ApplicantInternationalAddresses, target);
            }
            else
            {
                targetSynchSupport.IsApplicantInternationalAddressesSupported = false;
            }

            if (sourceSynchSupport.IsApplicantLanguagesSupported)
            {    
                targetSynchSupport.IsApplicantLanguageIncluded = sourceSynchSupport.IsApplicantLanguageIncluded;
                source.ApplicantLanguages.MapCollectionTo(target.ApplicantLanguages, target);
            }
            else
            {
                targetSynchSupport.IsApplicantLanguagesSupported = false;
            }

            if (sourceSynchSupport.IsApplicantPersonalIdentificationDocumentsSupported)
            {    
                targetSynchSupport.IsApplicantPersonalIdentificationDocumentIncluded = sourceSynchSupport.IsApplicantPersonalIdentificationDocumentIncluded;
                source.ApplicantPersonalIdentificationDocuments.MapCollectionTo(target.ApplicantPersonalIdentificationDocuments, target);
            }
            else
            {
                targetSynchSupport.IsApplicantPersonalIdentificationDocumentsSupported = false;
            }

            if (sourceSynchSupport.IsApplicantRacesSupported)
            {    
                targetSynchSupport.IsApplicantRaceIncluded = sourceSynchSupport.IsApplicantRaceIncluded;
                source.ApplicantRaces.MapCollectionTo(target.ApplicantRaces, target);
            }
            else
            {
                targetSynchSupport.IsApplicantRacesSupported = false;
            }

            if (sourceSynchSupport.IsApplicantScoreResultsSupported)
            {    
                targetSynchSupport.IsApplicantScoreResultIncluded = sourceSynchSupport.IsApplicantScoreResultIncluded;
                source.ApplicantScoreResults.MapCollectionTo(target.ApplicantScoreResults, target);
            }
            else
            {
                targetSynchSupport.IsApplicantScoreResultsSupported = false;
            }

            if (sourceSynchSupport.IsApplicantStaffIdentificationCodesSupported)
            {    
                targetSynchSupport.IsApplicantStaffIdentificationCodeIncluded = sourceSynchSupport.IsApplicantStaffIdentificationCodeIncluded;
                source.ApplicantStaffIdentificationCodes.MapCollectionTo(target.ApplicantStaffIdentificationCodes, target);
            }
            else
            {
                targetSynchSupport.IsApplicantStaffIdentificationCodesSupported = false;
            }

            if (sourceSynchSupport.IsApplicantTeacherPreparationProgramsSupported)
            {    
                targetSynchSupport.IsApplicantTeacherPreparationProgramIncluded = sourceSynchSupport.IsApplicantTeacherPreparationProgramIncluded;
                source.ApplicantTeacherPreparationPrograms.MapCollectionTo(target.ApplicantTeacherPreparationPrograms, target);
            }
            else
            {
                targetSynchSupport.IsApplicantTeacherPreparationProgramsSupported = false;
            }

            if (sourceSynchSupport.IsApplicantTelephonesSupported)
            {    
                targetSynchSupport.IsApplicantTelephoneIncluded = sourceSynchSupport.IsApplicantTelephoneIncluded;
                source.ApplicantTelephones.MapCollectionTo(target.ApplicantTelephones, target);
            }
            else
            {
                targetSynchSupport.IsApplicantTelephonesSupported = false;
            }

            if (sourceSynchSupport.IsApplicantVisasSupported)
            {    
                targetSynchSupport.IsApplicantVisaIncluded = sourceSynchSupport.IsApplicantVisaIncluded;
                source.ApplicantVisas.MapCollectionTo(target.ApplicantVisas, target);
            }
            else
            {
                targetSynchSupport.IsApplicantVisasSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantSynchronizationSourceSupport 
    {
        bool IsApplicantAddressesSupported { get; set; }
        bool IsApplicantAidsSupported { get; set; }
        bool IsApplicantBackgroundChecksSupported { get; set; }
        bool IsApplicantCharacteristicsSupported { get; set; }
        bool IsApplicantCredentialsSupported { get; set; }
        bool IsApplicantDisabilitiesSupported { get; set; }
        bool IsApplicantElectronicMailsSupported { get; set; }
        bool IsApplicantGradePointAveragesSupported { get; set; }
        bool IsApplicantIdentificationDocumentsSupported { get; set; }
        bool IsApplicantInternationalAddressesSupported { get; set; }
        bool IsApplicantLanguagesSupported { get; set; }
        bool IsApplicantPersonalIdentificationDocumentsSupported { get; set; }
        bool IsApplicantRacesSupported { get; set; }
        bool IsApplicantScoreResultsSupported { get; set; }
        bool IsApplicantStaffIdentificationCodesSupported { get; set; }
        bool IsApplicantTeacherPreparationProgramsSupported { get; set; }
        bool IsApplicantTelephonesSupported { get; set; }
        bool IsApplicantVisasSupported { get; set; }
        bool IsBirthDateSupported { get; set; }
        bool IsCitizenshipStatusDescriptorSupported { get; set; }
        bool IsEconomicDisadvantagedSupported { get; set; }
        bool IsFirstGenerationStudentSupported { get; set; }
        bool IsFirstNameSupported { get; set; }
        bool IsGenderDescriptorSupported { get; set; }
        bool IsGenerationCodeSuffixSupported { get; set; }
        bool IsHighestCompletedLevelOfEducationDescriptorSupported { get; set; }
        bool IsHighlyQualifiedAcademicSubjectDescriptorSupported { get; set; }
        bool IsHighlyQualifiedTeacherSupported { get; set; }
        bool IsHispanicLatinoEthnicitySupported { get; set; }
        bool IsLastSurnameSupported { get; set; }
        bool IsLoginIdSupported { get; set; }
        bool IsMaidenNameSupported { get; set; }
        bool IsMiddleNameSupported { get; set; }
        bool IsPersonalTitlePrefixSupported { get; set; }
        bool IsSexDescriptorSupported { get; set; }
        bool IsTeacherCandidateIdentifierSupported { get; set; }
        bool IsYearsOfPriorProfessionalExperienceSupported { get; set; }
        bool IsYearsOfPriorTeachingExperienceSupported { get; set; }
        Func<IApplicantAddress, bool> IsApplicantAddressIncluded { get; set; }
        Func<IApplicantAid, bool> IsApplicantAidIncluded { get; set; }
        Func<IApplicantBackgroundCheck, bool> IsApplicantBackgroundCheckIncluded { get; set; }
        Func<IApplicantCharacteristic, bool> IsApplicantCharacteristicIncluded { get; set; }
        Func<IApplicantCredential, bool> IsApplicantCredentialIncluded { get; set; }
        Func<IApplicantDisability, bool> IsApplicantDisabilityIncluded { get; set; }
        Func<IApplicantElectronicMail, bool> IsApplicantElectronicMailIncluded { get; set; }
        Func<IApplicantGradePointAverage, bool> IsApplicantGradePointAverageIncluded { get; set; }
        Func<IApplicantIdentificationDocument, bool> IsApplicantIdentificationDocumentIncluded { get; set; }
        Func<IApplicantInternationalAddress, bool> IsApplicantInternationalAddressIncluded { get; set; }
        Func<IApplicantLanguage, bool> IsApplicantLanguageIncluded { get; set; }
        Func<IApplicantPersonalIdentificationDocument, bool> IsApplicantPersonalIdentificationDocumentIncluded { get; set; }
        Func<IApplicantRace, bool> IsApplicantRaceIncluded { get; set; }
        Func<IApplicantScoreResult, bool> IsApplicantScoreResultIncluded { get; set; }
        Func<IApplicantStaffIdentificationCode, bool> IsApplicantStaffIdentificationCodeIncluded { get; set; }
        Func<IApplicantTeacherPreparationProgram, bool> IsApplicantTeacherPreparationProgramIncluded { get; set; }
        Func<IApplicantTelephone, bool> IsApplicantTelephoneIncluded { get; set; }
        Func<IApplicantVisa, bool> IsApplicantVisaIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantAddressMapper 
    {
        public static bool SynchronizeTo(this IApplicantAddress source, IApplicantAddress target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantAddressSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AddressTypeDescriptor != target.AddressTypeDescriptor)
            {
                source.AddressTypeDescriptor = target.AddressTypeDescriptor;
            }
            if (source.City != target.City)
            {
                source.City = target.City;
            }
            if (source.PostalCode != target.PostalCode)
            {
                source.PostalCode = target.PostalCode;
            }
            if (source.StateAbbreviationDescriptor != target.StateAbbreviationDescriptor)
            {
                source.StateAbbreviationDescriptor = target.StateAbbreviationDescriptor;
            }
            if (source.StreetNumberName != target.StreetNumberName)
            {
                source.StreetNumberName = target.StreetNumberName;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsApartmentRoomSuiteNumberSupported)
                && target.ApartmentRoomSuiteNumber != source.ApartmentRoomSuiteNumber)
            {
                target.ApartmentRoomSuiteNumber = source.ApartmentRoomSuiteNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBuildingSiteNumberSupported)
                && target.BuildingSiteNumber != source.BuildingSiteNumber)
            {
                target.BuildingSiteNumber = source.BuildingSiteNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCongressionalDistrictSupported)
                && target.CongressionalDistrict != source.CongressionalDistrict)
            {
                target.CongressionalDistrict = source.CongressionalDistrict;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCountyFIPSCodeSupported)
                && target.CountyFIPSCode != source.CountyFIPSCode)
            {
                target.CountyFIPSCode = source.CountyFIPSCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDoNotPublishIndicatorSupported)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLatitudeSupported)
                && target.Latitude != source.Latitude)
            {
                target.Latitude = source.Latitude;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLocaleDescriptorSupported)
                && target.LocaleDescriptor != source.LocaleDescriptor)
            {
                target.LocaleDescriptor = source.LocaleDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLongitudeSupported)
                && target.Longitude != source.Longitude)
            {
                target.Longitude = source.Longitude;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNameOfCountySupported)
                && target.NameOfCounty != source.NameOfCounty)
            {
                target.NameOfCounty = source.NameOfCounty;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsApplicantAddressPeriodsSupported)
            {
                isModified |= 
                    source.ApplicantAddressPeriods.SynchronizeCollectionTo(
                        target.ApplicantAddressPeriods, 
                        onChildAdded: child => 
                            {
                                child.ApplicantAddress = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantAddressPeriodIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IApplicantAddress source, IApplicantAddress target, Action<IApplicantAddress, IApplicantAddress> onMapped)
        {
            var sourceSynchSupport = source as IApplicantAddressSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantAddressSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AddressTypeDescriptor = source.AddressTypeDescriptor;
            target.City = source.City;
            target.PostalCode = source.PostalCode;
            target.StateAbbreviationDescriptor = source.StateAbbreviationDescriptor;
            target.StreetNumberName = source.StreetNumberName;

            // Copy non-PK properties

            if (sourceSynchSupport.IsApartmentRoomSuiteNumberSupported)
                target.ApartmentRoomSuiteNumber = source.ApartmentRoomSuiteNumber;
            else
                targetSynchSupport.IsApartmentRoomSuiteNumberSupported = false;

            if (sourceSynchSupport.IsBuildingSiteNumberSupported)
                target.BuildingSiteNumber = source.BuildingSiteNumber;
            else
                targetSynchSupport.IsBuildingSiteNumberSupported = false;

            if (sourceSynchSupport.IsCongressionalDistrictSupported)
                target.CongressionalDistrict = source.CongressionalDistrict;
            else
                targetSynchSupport.IsCongressionalDistrictSupported = false;

            if (sourceSynchSupport.IsCountyFIPSCodeSupported)
                target.CountyFIPSCode = source.CountyFIPSCode;
            else
                targetSynchSupport.IsCountyFIPSCodeSupported = false;

            if (sourceSynchSupport.IsDoNotPublishIndicatorSupported)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
            else
                targetSynchSupport.IsDoNotPublishIndicatorSupported = false;

            if (sourceSynchSupport.IsLatitudeSupported)
                target.Latitude = source.Latitude;
            else
                targetSynchSupport.IsLatitudeSupported = false;

            if (sourceSynchSupport.IsLocaleDescriptorSupported)
                target.LocaleDescriptor = source.LocaleDescriptor;
            else
                targetSynchSupport.IsLocaleDescriptorSupported = false;

            if (sourceSynchSupport.IsLongitudeSupported)
                target.Longitude = source.Longitude;
            else
                targetSynchSupport.IsLongitudeSupported = false;

            if (sourceSynchSupport.IsNameOfCountySupported)
                target.NameOfCounty = source.NameOfCounty;
            else
                targetSynchSupport.IsNameOfCountySupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsApplicantAddressPeriodsSupported)
            {    
                targetSynchSupport.IsApplicantAddressPeriodIncluded = sourceSynchSupport.IsApplicantAddressPeriodIncluded;
                source.ApplicantAddressPeriods.MapCollectionTo(target.ApplicantAddressPeriods, target);
            }
            else
            {
                targetSynchSupport.IsApplicantAddressPeriodsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantAddressSynchronizationSourceSupport 
    {
        bool IsApartmentRoomSuiteNumberSupported { get; set; }
        bool IsApplicantAddressPeriodsSupported { get; set; }
        bool IsBuildingSiteNumberSupported { get; set; }
        bool IsCongressionalDistrictSupported { get; set; }
        bool IsCountyFIPSCodeSupported { get; set; }
        bool IsDoNotPublishIndicatorSupported { get; set; }
        bool IsLatitudeSupported { get; set; }
        bool IsLocaleDescriptorSupported { get; set; }
        bool IsLongitudeSupported { get; set; }
        bool IsNameOfCountySupported { get; set; }
        Func<IApplicantAddressPeriod, bool> IsApplicantAddressPeriodIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantAddressPeriodMapper 
    {
        public static bool SynchronizeTo(this IApplicantAddressPeriod source, IApplicantAddressPeriod target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantAddressPeriodSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantAddressPeriod source, IApplicantAddressPeriod target, Action<IApplicantAddressPeriod, IApplicantAddressPeriod> onMapped)
        {
            var sourceSynchSupport = source as IApplicantAddressPeriodSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantAddressPeriodSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantAddressPeriodSynchronizationSourceSupport 
    {
        bool IsEndDateSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantAidMapper 
    {
        public static bool SynchronizeTo(this IApplicantAid source, IApplicantAid target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantAidSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AidTypeDescriptor != target.AidTypeDescriptor)
            {
                source.AidTypeDescriptor = target.AidTypeDescriptor;
            }
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAidAmountSupported)
                && target.AidAmount != source.AidAmount)
            {
                target.AidAmount = source.AidAmount;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAidConditionDescriptionSupported)
                && target.AidConditionDescription != source.AidConditionDescription)
            {
                target.AidConditionDescription = source.AidConditionDescription;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPellGrantRecipientSupported)
                && target.PellGrantRecipient != source.PellGrantRecipient)
            {
                target.PellGrantRecipient = source.PellGrantRecipient;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantAid source, IApplicantAid target, Action<IApplicantAid, IApplicantAid> onMapped)
        {
            var sourceSynchSupport = source as IApplicantAidSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantAidSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AidTypeDescriptor = source.AidTypeDescriptor;
            target.BeginDate = source.BeginDate;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAidAmountSupported)
                target.AidAmount = source.AidAmount;
            else
                targetSynchSupport.IsAidAmountSupported = false;

            if (sourceSynchSupport.IsAidConditionDescriptionSupported)
                target.AidConditionDescription = source.AidConditionDescription;
            else
                targetSynchSupport.IsAidConditionDescriptionSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsPellGrantRecipientSupported)
                target.PellGrantRecipient = source.PellGrantRecipient;
            else
                targetSynchSupport.IsPellGrantRecipientSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantAidSynchronizationSourceSupport 
    {
        bool IsAidAmountSupported { get; set; }
        bool IsAidConditionDescriptionSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsPellGrantRecipientSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantBackgroundCheckMapper 
    {
        public static bool SynchronizeTo(this IApplicantBackgroundCheck source, IApplicantBackgroundCheck target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantBackgroundCheckSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BackgroundCheckTypeDescriptor != target.BackgroundCheckTypeDescriptor)
            {
                source.BackgroundCheckTypeDescriptor = target.BackgroundCheckTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBackgroundCheckCompletedDateSupported)
                && target.BackgroundCheckCompletedDate != source.BackgroundCheckCompletedDate)
            {
                target.BackgroundCheckCompletedDate = source.BackgroundCheckCompletedDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBackgroundCheckRequestedDateSupported)
                && target.BackgroundCheckRequestedDate != source.BackgroundCheckRequestedDate)
            {
                target.BackgroundCheckRequestedDate = source.BackgroundCheckRequestedDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBackgroundCheckStatusDescriptorSupported)
                && target.BackgroundCheckStatusDescriptor != source.BackgroundCheckStatusDescriptor)
            {
                target.BackgroundCheckStatusDescriptor = source.BackgroundCheckStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFingerprintSupported)
                && target.Fingerprint != source.Fingerprint)
            {
                target.Fingerprint = source.Fingerprint;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantBackgroundCheck source, IApplicantBackgroundCheck target, Action<IApplicantBackgroundCheck, IApplicantBackgroundCheck> onMapped)
        {
            var sourceSynchSupport = source as IApplicantBackgroundCheckSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantBackgroundCheckSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.BackgroundCheckTypeDescriptor = source.BackgroundCheckTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBackgroundCheckCompletedDateSupported)
                target.BackgroundCheckCompletedDate = source.BackgroundCheckCompletedDate;
            else
                targetSynchSupport.IsBackgroundCheckCompletedDateSupported = false;

            if (sourceSynchSupport.IsBackgroundCheckRequestedDateSupported)
                target.BackgroundCheckRequestedDate = source.BackgroundCheckRequestedDate;
            else
                targetSynchSupport.IsBackgroundCheckRequestedDateSupported = false;

            if (sourceSynchSupport.IsBackgroundCheckStatusDescriptorSupported)
                target.BackgroundCheckStatusDescriptor = source.BackgroundCheckStatusDescriptor;
            else
                targetSynchSupport.IsBackgroundCheckStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsFingerprintSupported)
                target.Fingerprint = source.Fingerprint;
            else
                targetSynchSupport.IsFingerprintSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantBackgroundCheckSynchronizationSourceSupport 
    {
        bool IsBackgroundCheckCompletedDateSupported { get; set; }
        bool IsBackgroundCheckRequestedDateSupported { get; set; }
        bool IsBackgroundCheckStatusDescriptorSupported { get; set; }
        bool IsFingerprintSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantCharacteristicMapper 
    {
        public static bool SynchronizeTo(this IApplicantCharacteristic source, IApplicantCharacteristic target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantCharacteristicSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.StudentCharacteristicDescriptor != target.StudentCharacteristicDescriptor)
            {
                source.StudentCharacteristicDescriptor = target.StudentCharacteristicDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDesignatedBySupported)
                && target.DesignatedBy != source.DesignatedBy)
            {
                target.DesignatedBy = source.DesignatedBy;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantCharacteristic source, IApplicantCharacteristic target, Action<IApplicantCharacteristic, IApplicantCharacteristic> onMapped)
        {
            var sourceSynchSupport = source as IApplicantCharacteristicSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantCharacteristicSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.StudentCharacteristicDescriptor = source.StudentCharacteristicDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsDesignatedBySupported)
                target.DesignatedBy = source.DesignatedBy;
            else
                targetSynchSupport.IsDesignatedBySupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantCharacteristicSynchronizationSourceSupport 
    {
        bool IsBeginDateSupported { get; set; }
        bool IsDesignatedBySupported { get; set; }
        bool IsEndDateSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantCredentialMapper 
    {
        public static bool SynchronizeTo(this IApplicantCredential source, IApplicantCredential target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantCredentialSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CredentialIdentifier != target.CredentialIdentifier)
            {
                source.CredentialIdentifier = target.CredentialIdentifier;
            }
            if (source.StateOfIssueStateAbbreviationDescriptor != target.StateOfIssueStateAbbreviationDescriptor)
            {
                source.StateOfIssueStateAbbreviationDescriptor = target.StateOfIssueStateAbbreviationDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantCredential source, IApplicantCredential target, Action<IApplicantCredential, IApplicantCredential> onMapped)
        {
            var sourceSynchSupport = source as IApplicantCredentialSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantCredentialSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.CredentialIdentifier = source.CredentialIdentifier;
            target.StateOfIssueStateAbbreviationDescriptor = source.StateOfIssueStateAbbreviationDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CredentialResourceId = source.CredentialResourceId;
                target.CredentialDiscriminator = source.CredentialDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantCredentialSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantDisabilityMapper 
    {
        public static bool SynchronizeTo(this IApplicantDisability source, IApplicantDisability target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantDisabilitySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisabilityDescriptor != target.DisabilityDescriptor)
            {
                source.DisabilityDescriptor = target.DisabilityDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported)
                && target.DisabilityDeterminationSourceTypeDescriptor != source.DisabilityDeterminationSourceTypeDescriptor)
            {
                target.DisabilityDeterminationSourceTypeDescriptor = source.DisabilityDeterminationSourceTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDisabilityDiagnosisSupported)
                && target.DisabilityDiagnosis != source.DisabilityDiagnosis)
            {
                target.DisabilityDiagnosis = source.DisabilityDiagnosis;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOrderOfDisabilitySupported)
                && target.OrderOfDisability != source.OrderOfDisability)
            {
                target.OrderOfDisability = source.OrderOfDisability;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsApplicantDisabilityDesignationsSupported)
            {
                isModified |= 
                    source.ApplicantDisabilityDesignations.SynchronizeCollectionTo(
                        target.ApplicantDisabilityDesignations, 
                        onChildAdded: child => 
                            {
                                child.ApplicantDisability = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantDisabilityDesignationIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IApplicantDisability source, IApplicantDisability target, Action<IApplicantDisability, IApplicantDisability> onMapped)
        {
            var sourceSynchSupport = source as IApplicantDisabilitySynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantDisabilitySynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DisabilityDescriptor = source.DisabilityDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported)
                target.DisabilityDeterminationSourceTypeDescriptor = source.DisabilityDeterminationSourceTypeDescriptor;
            else
                targetSynchSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsDisabilityDiagnosisSupported)
                target.DisabilityDiagnosis = source.DisabilityDiagnosis;
            else
                targetSynchSupport.IsDisabilityDiagnosisSupported = false;

            if (sourceSynchSupport.IsOrderOfDisabilitySupported)
                target.OrderOfDisability = source.OrderOfDisability;
            else
                targetSynchSupport.IsOrderOfDisabilitySupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsApplicantDisabilityDesignationsSupported)
            {    
                targetSynchSupport.IsApplicantDisabilityDesignationIncluded = sourceSynchSupport.IsApplicantDisabilityDesignationIncluded;
                source.ApplicantDisabilityDesignations.MapCollectionTo(target.ApplicantDisabilityDesignations, target);
            }
            else
            {
                targetSynchSupport.IsApplicantDisabilityDesignationsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantDisabilitySynchronizationSourceSupport 
    {
        bool IsApplicantDisabilityDesignationsSupported { get; set; }
        bool IsDisabilityDeterminationSourceTypeDescriptorSupported { get; set; }
        bool IsDisabilityDiagnosisSupported { get; set; }
        bool IsOrderOfDisabilitySupported { get; set; }
        Func<IApplicantDisabilityDesignation, bool> IsApplicantDisabilityDesignationIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantDisabilityDesignationMapper 
    {
        public static bool SynchronizeTo(this IApplicantDisabilityDesignation source, IApplicantDisabilityDesignation target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantDisabilityDesignationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisabilityDesignationDescriptor != target.DisabilityDesignationDescriptor)
            {
                source.DisabilityDesignationDescriptor = target.DisabilityDesignationDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantDisabilityDesignation source, IApplicantDisabilityDesignation target, Action<IApplicantDisabilityDesignation, IApplicantDisabilityDesignation> onMapped)
        {
            var sourceSynchSupport = source as IApplicantDisabilityDesignationSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantDisabilityDesignationSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DisabilityDesignationDescriptor = source.DisabilityDesignationDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantDisabilityDesignationSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantElectronicMailMapper 
    {
        public static bool SynchronizeTo(this IApplicantElectronicMail source, IApplicantElectronicMail target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantElectronicMailSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ElectronicMailAddress != target.ElectronicMailAddress)
            {
                source.ElectronicMailAddress = target.ElectronicMailAddress;
            }
            if (source.ElectronicMailTypeDescriptor != target.ElectronicMailTypeDescriptor)
            {
                source.ElectronicMailTypeDescriptor = target.ElectronicMailTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDoNotPublishIndicatorSupported)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPrimaryEmailAddressIndicatorSupported)
                && target.PrimaryEmailAddressIndicator != source.PrimaryEmailAddressIndicator)
            {
                target.PrimaryEmailAddressIndicator = source.PrimaryEmailAddressIndicator;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantElectronicMail source, IApplicantElectronicMail target, Action<IApplicantElectronicMail, IApplicantElectronicMail> onMapped)
        {
            var sourceSynchSupport = source as IApplicantElectronicMailSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantElectronicMailSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.ElectronicMailAddress = source.ElectronicMailAddress;
            target.ElectronicMailTypeDescriptor = source.ElectronicMailTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDoNotPublishIndicatorSupported)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
            else
                targetSynchSupport.IsDoNotPublishIndicatorSupported = false;

            if (sourceSynchSupport.IsPrimaryEmailAddressIndicatorSupported)
                target.PrimaryEmailAddressIndicator = source.PrimaryEmailAddressIndicator;
            else
                targetSynchSupport.IsPrimaryEmailAddressIndicatorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantElectronicMailSynchronizationSourceSupport 
    {
        bool IsDoNotPublishIndicatorSupported { get; set; }
        bool IsPrimaryEmailAddressIndicatorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantGradePointAverageMapper 
    {
        public static bool SynchronizeTo(this IApplicantGradePointAverage source, IApplicantGradePointAverage target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantGradePointAverageSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradePointAverageTypeDescriptor != target.GradePointAverageTypeDescriptor)
            {
                source.GradePointAverageTypeDescriptor = target.GradePointAverageTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsGradePointAverageValueSupported)
                && target.GradePointAverageValue != source.GradePointAverageValue)
            {
                target.GradePointAverageValue = source.GradePointAverageValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIsCumulativeSupported)
                && target.IsCumulative != source.IsCumulative)
            {
                target.IsCumulative = source.IsCumulative;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaxGradePointAverageValueSupported)
                && target.MaxGradePointAverageValue != source.MaxGradePointAverageValue)
            {
                target.MaxGradePointAverageValue = source.MaxGradePointAverageValue;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantGradePointAverage source, IApplicantGradePointAverage target, Action<IApplicantGradePointAverage, IApplicantGradePointAverage> onMapped)
        {
            var sourceSynchSupport = source as IApplicantGradePointAverageSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantGradePointAverageSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradePointAverageTypeDescriptor = source.GradePointAverageTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsGradePointAverageValueSupported)
                target.GradePointAverageValue = source.GradePointAverageValue;
            else
                targetSynchSupport.IsGradePointAverageValueSupported = false;

            if (sourceSynchSupport.IsIsCumulativeSupported)
                target.IsCumulative = source.IsCumulative;
            else
                targetSynchSupport.IsIsCumulativeSupported = false;

            if (sourceSynchSupport.IsMaxGradePointAverageValueSupported)
                target.MaxGradePointAverageValue = source.MaxGradePointAverageValue;
            else
                targetSynchSupport.IsMaxGradePointAverageValueSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantGradePointAverageSynchronizationSourceSupport 
    {
        bool IsGradePointAverageValueSupported { get; set; }
        bool IsIsCumulativeSupported { get; set; }
        bool IsMaxGradePointAverageValueSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantIdentificationDocumentMapper 
    {
        public static bool SynchronizeTo(this IApplicantIdentificationDocument source, IApplicantIdentificationDocument target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantIdentificationDocumentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.IdentificationDocumentUseDescriptor != target.IdentificationDocumentUseDescriptor)
            {
                source.IdentificationDocumentUseDescriptor = target.IdentificationDocumentUseDescriptor;
            }
            if (source.PersonalInformationVerificationDescriptor != target.PersonalInformationVerificationDescriptor)
            {
                source.PersonalInformationVerificationDescriptor = target.PersonalInformationVerificationDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDocumentExpirationDateSupported)
                && target.DocumentExpirationDate != source.DocumentExpirationDate)
            {
                target.DocumentExpirationDate = source.DocumentExpirationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDocumentTitleSupported)
                && target.DocumentTitle != source.DocumentTitle)
            {
                target.DocumentTitle = source.DocumentTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerCountryDescriptorSupported)
                && target.IssuerCountryDescriptor != source.IssuerCountryDescriptor)
            {
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerDocumentIdentificationCodeSupported)
                && target.IssuerDocumentIdentificationCode != source.IssuerDocumentIdentificationCode)
            {
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerNameSupported)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantIdentificationDocument source, IApplicantIdentificationDocument target, Action<IApplicantIdentificationDocument, IApplicantIdentificationDocument> onMapped)
        {
            var sourceSynchSupport = source as IApplicantIdentificationDocumentSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantIdentificationDocumentSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.IdentificationDocumentUseDescriptor = source.IdentificationDocumentUseDescriptor;
            target.PersonalInformationVerificationDescriptor = source.PersonalInformationVerificationDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDocumentExpirationDateSupported)
                target.DocumentExpirationDate = source.DocumentExpirationDate;
            else
                targetSynchSupport.IsDocumentExpirationDateSupported = false;

            if (sourceSynchSupport.IsDocumentTitleSupported)
                target.DocumentTitle = source.DocumentTitle;
            else
                targetSynchSupport.IsDocumentTitleSupported = false;

            if (sourceSynchSupport.IsIssuerCountryDescriptorSupported)
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
            else
                targetSynchSupport.IsIssuerCountryDescriptorSupported = false;

            if (sourceSynchSupport.IsIssuerDocumentIdentificationCodeSupported)
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
            else
                targetSynchSupport.IsIssuerDocumentIdentificationCodeSupported = false;

            if (sourceSynchSupport.IsIssuerNameSupported)
                target.IssuerName = source.IssuerName;
            else
                targetSynchSupport.IsIssuerNameSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantIdentificationDocumentSynchronizationSourceSupport 
    {
        bool IsDocumentExpirationDateSupported { get; set; }
        bool IsDocumentTitleSupported { get; set; }
        bool IsIssuerCountryDescriptorSupported { get; set; }
        bool IsIssuerDocumentIdentificationCodeSupported { get; set; }
        bool IsIssuerNameSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantInternationalAddressMapper 
    {
        public static bool SynchronizeTo(this IApplicantInternationalAddress source, IApplicantInternationalAddress target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantInternationalAddressSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AddressTypeDescriptor != target.AddressTypeDescriptor)
            {
                source.AddressTypeDescriptor = target.AddressTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAddressLine1Supported)
                && target.AddressLine1 != source.AddressLine1)
            {
                target.AddressLine1 = source.AddressLine1;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAddressLine2Supported)
                && target.AddressLine2 != source.AddressLine2)
            {
                target.AddressLine2 = source.AddressLine2;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAddressLine3Supported)
                && target.AddressLine3 != source.AddressLine3)
            {
                target.AddressLine3 = source.AddressLine3;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAddressLine4Supported)
                && target.AddressLine4 != source.AddressLine4)
            {
                target.AddressLine4 = source.AddressLine4;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCountryDescriptorSupported)
                && target.CountryDescriptor != source.CountryDescriptor)
            {
                target.CountryDescriptor = source.CountryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLatitudeSupported)
                && target.Latitude != source.Latitude)
            {
                target.Latitude = source.Latitude;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLongitudeSupported)
                && target.Longitude != source.Longitude)
            {
                target.Longitude = source.Longitude;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantInternationalAddress source, IApplicantInternationalAddress target, Action<IApplicantInternationalAddress, IApplicantInternationalAddress> onMapped)
        {
            var sourceSynchSupport = source as IApplicantInternationalAddressSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantInternationalAddressSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AddressTypeDescriptor = source.AddressTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAddressLine1Supported)
                target.AddressLine1 = source.AddressLine1;
            else
                targetSynchSupport.IsAddressLine1Supported = false;

            if (sourceSynchSupport.IsAddressLine2Supported)
                target.AddressLine2 = source.AddressLine2;
            else
                targetSynchSupport.IsAddressLine2Supported = false;

            if (sourceSynchSupport.IsAddressLine3Supported)
                target.AddressLine3 = source.AddressLine3;
            else
                targetSynchSupport.IsAddressLine3Supported = false;

            if (sourceSynchSupport.IsAddressLine4Supported)
                target.AddressLine4 = source.AddressLine4;
            else
                targetSynchSupport.IsAddressLine4Supported = false;

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsCountryDescriptorSupported)
                target.CountryDescriptor = source.CountryDescriptor;
            else
                targetSynchSupport.IsCountryDescriptorSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsLatitudeSupported)
                target.Latitude = source.Latitude;
            else
                targetSynchSupport.IsLatitudeSupported = false;

            if (sourceSynchSupport.IsLongitudeSupported)
                target.Longitude = source.Longitude;
            else
                targetSynchSupport.IsLongitudeSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantInternationalAddressSynchronizationSourceSupport 
    {
        bool IsAddressLine1Supported { get; set; }
        bool IsAddressLine2Supported { get; set; }
        bool IsAddressLine3Supported { get; set; }
        bool IsAddressLine4Supported { get; set; }
        bool IsBeginDateSupported { get; set; }
        bool IsCountryDescriptorSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsLatitudeSupported { get; set; }
        bool IsLongitudeSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantLanguageMapper 
    {
        public static bool SynchronizeTo(this IApplicantLanguage source, IApplicantLanguage target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantLanguageSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LanguageDescriptor != target.LanguageDescriptor)
            {
                source.LanguageDescriptor = target.LanguageDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsApplicantLanguageUsesSupported)
            {
                isModified |= 
                    source.ApplicantLanguageUses.SynchronizeCollectionTo(
                        target.ApplicantLanguageUses, 
                        onChildAdded: child => 
                            {
                                child.ApplicantLanguage = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantLanguageUseIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IApplicantLanguage source, IApplicantLanguage target, Action<IApplicantLanguage, IApplicantLanguage> onMapped)
        {
            var sourceSynchSupport = source as IApplicantLanguageSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantLanguageSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LanguageDescriptor = source.LanguageDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsApplicantLanguageUsesSupported)
            {    
                targetSynchSupport.IsApplicantLanguageUseIncluded = sourceSynchSupport.IsApplicantLanguageUseIncluded;
                source.ApplicantLanguageUses.MapCollectionTo(target.ApplicantLanguageUses, target);
            }
            else
            {
                targetSynchSupport.IsApplicantLanguageUsesSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantLanguageSynchronizationSourceSupport 
    {
        bool IsApplicantLanguageUsesSupported { get; set; }
        Func<IApplicantLanguageUse, bool> IsApplicantLanguageUseIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantLanguageUseMapper 
    {
        public static bool SynchronizeTo(this IApplicantLanguageUse source, IApplicantLanguageUse target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantLanguageUseSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LanguageUseDescriptor != target.LanguageUseDescriptor)
            {
                source.LanguageUseDescriptor = target.LanguageUseDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantLanguageUse source, IApplicantLanguageUse target, Action<IApplicantLanguageUse, IApplicantLanguageUse> onMapped)
        {
            var sourceSynchSupport = source as IApplicantLanguageUseSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantLanguageUseSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LanguageUseDescriptor = source.LanguageUseDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantLanguageUseSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantPersonalIdentificationDocumentMapper 
    {
        public static bool SynchronizeTo(this IApplicantPersonalIdentificationDocument source, IApplicantPersonalIdentificationDocument target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantPersonalIdentificationDocumentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.IdentificationDocumentUseDescriptor != target.IdentificationDocumentUseDescriptor)
            {
                source.IdentificationDocumentUseDescriptor = target.IdentificationDocumentUseDescriptor;
            }
            if (source.PersonalInformationVerificationDescriptor != target.PersonalInformationVerificationDescriptor)
            {
                source.PersonalInformationVerificationDescriptor = target.PersonalInformationVerificationDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDocumentExpirationDateSupported)
                && target.DocumentExpirationDate != source.DocumentExpirationDate)
            {
                target.DocumentExpirationDate = source.DocumentExpirationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDocumentTitleSupported)
                && target.DocumentTitle != source.DocumentTitle)
            {
                target.DocumentTitle = source.DocumentTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerCountryDescriptorSupported)
                && target.IssuerCountryDescriptor != source.IssuerCountryDescriptor)
            {
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerDocumentIdentificationCodeSupported)
                && target.IssuerDocumentIdentificationCode != source.IssuerDocumentIdentificationCode)
            {
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerNameSupported)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantPersonalIdentificationDocument source, IApplicantPersonalIdentificationDocument target, Action<IApplicantPersonalIdentificationDocument, IApplicantPersonalIdentificationDocument> onMapped)
        {
            var sourceSynchSupport = source as IApplicantPersonalIdentificationDocumentSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantPersonalIdentificationDocumentSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.IdentificationDocumentUseDescriptor = source.IdentificationDocumentUseDescriptor;
            target.PersonalInformationVerificationDescriptor = source.PersonalInformationVerificationDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDocumentExpirationDateSupported)
                target.DocumentExpirationDate = source.DocumentExpirationDate;
            else
                targetSynchSupport.IsDocumentExpirationDateSupported = false;

            if (sourceSynchSupport.IsDocumentTitleSupported)
                target.DocumentTitle = source.DocumentTitle;
            else
                targetSynchSupport.IsDocumentTitleSupported = false;

            if (sourceSynchSupport.IsIssuerCountryDescriptorSupported)
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
            else
                targetSynchSupport.IsIssuerCountryDescriptorSupported = false;

            if (sourceSynchSupport.IsIssuerDocumentIdentificationCodeSupported)
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
            else
                targetSynchSupport.IsIssuerDocumentIdentificationCodeSupported = false;

            if (sourceSynchSupport.IsIssuerNameSupported)
                target.IssuerName = source.IssuerName;
            else
                targetSynchSupport.IsIssuerNameSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantPersonalIdentificationDocumentSynchronizationSourceSupport 
    {
        bool IsDocumentExpirationDateSupported { get; set; }
        bool IsDocumentTitleSupported { get; set; }
        bool IsIssuerCountryDescriptorSupported { get; set; }
        bool IsIssuerDocumentIdentificationCodeSupported { get; set; }
        bool IsIssuerNameSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantRaceMapper 
    {
        public static bool SynchronizeTo(this IApplicantRace source, IApplicantRace target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantRaceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.RaceDescriptor != target.RaceDescriptor)
            {
                source.RaceDescriptor = target.RaceDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantRace source, IApplicantRace target, Action<IApplicantRace, IApplicantRace> onMapped)
        {
            var sourceSynchSupport = source as IApplicantRaceSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantRaceSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.RaceDescriptor = source.RaceDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantRaceSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantScoreResultMapper 
    {
        public static bool SynchronizeTo(this IApplicantScoreResult source, IApplicantScoreResult target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantScoreResultSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AssessmentReportingMethodDescriptor != target.AssessmentReportingMethodDescriptor)
            {
                source.AssessmentReportingMethodDescriptor = target.AssessmentReportingMethodDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsResultSupported)
                && target.Result != source.Result)
            {
                target.Result = source.Result;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsResultDatatypeTypeDescriptorSupported)
                && target.ResultDatatypeTypeDescriptor != source.ResultDatatypeTypeDescriptor)
            {
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantScoreResult source, IApplicantScoreResult target, Action<IApplicantScoreResult, IApplicantScoreResult> onMapped)
        {
            var sourceSynchSupport = source as IApplicantScoreResultSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantScoreResultSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsResultSupported)
                target.Result = source.Result;
            else
                targetSynchSupport.IsResultSupported = false;

            if (sourceSynchSupport.IsResultDatatypeTypeDescriptorSupported)
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
            else
                targetSynchSupport.IsResultDatatypeTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantScoreResultSynchronizationSourceSupport 
    {
        bool IsResultSupported { get; set; }
        bool IsResultDatatypeTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantStaffIdentificationCodeMapper 
    {
        public static bool SynchronizeTo(this IApplicantStaffIdentificationCode source, IApplicantStaffIdentificationCode target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantStaffIdentificationCodeSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.StaffIdentificationSystemDescriptor != target.StaffIdentificationSystemDescriptor)
            {
                source.StaffIdentificationSystemDescriptor = target.StaffIdentificationSystemDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAssigningOrganizationIdentificationCodeSupported)
                && target.AssigningOrganizationIdentificationCode != source.AssigningOrganizationIdentificationCode)
            {
                target.AssigningOrganizationIdentificationCode = source.AssigningOrganizationIdentificationCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIdentificationCodeSupported)
                && target.IdentificationCode != source.IdentificationCode)
            {
                target.IdentificationCode = source.IdentificationCode;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantStaffIdentificationCode source, IApplicantStaffIdentificationCode target, Action<IApplicantStaffIdentificationCode, IApplicantStaffIdentificationCode> onMapped)
        {
            var sourceSynchSupport = source as IApplicantStaffIdentificationCodeSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantStaffIdentificationCodeSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.StaffIdentificationSystemDescriptor = source.StaffIdentificationSystemDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAssigningOrganizationIdentificationCodeSupported)
                target.AssigningOrganizationIdentificationCode = source.AssigningOrganizationIdentificationCode;
            else
                targetSynchSupport.IsAssigningOrganizationIdentificationCodeSupported = false;

            if (sourceSynchSupport.IsIdentificationCodeSupported)
                target.IdentificationCode = source.IdentificationCode;
            else
                targetSynchSupport.IsIdentificationCodeSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantStaffIdentificationCodeSynchronizationSourceSupport 
    {
        bool IsAssigningOrganizationIdentificationCodeSupported { get; set; }
        bool IsIdentificationCodeSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantTeacherPreparationProgramMapper 
    {
        public static bool SynchronizeTo(this IApplicantTeacherPreparationProgram source, IApplicantTeacherPreparationProgram target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantTeacherPreparationProgramSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TeacherPreparationProgramName != target.TeacherPreparationProgramName)
            {
                source.TeacherPreparationProgramName = target.TeacherPreparationProgramName;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsGPASupported)
                && target.GPA != source.GPA)
            {
                target.GPA = source.GPA;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLevelOfDegreeAwardedDescriptorSupported)
                && target.LevelOfDegreeAwardedDescriptor != source.LevelOfDegreeAwardedDescriptor)
            {
                target.LevelOfDegreeAwardedDescriptor = source.LevelOfDegreeAwardedDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMajorSpecializationSupported)
                && target.MajorSpecialization != source.MajorSpecialization)
            {
                target.MajorSpecialization = source.MajorSpecialization;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNameOfInstitutionSupported)
                && target.NameOfInstitution != source.NameOfInstitution)
            {
                target.NameOfInstitution = source.NameOfInstitution;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTeacherPreparationProgramIdentifierSupported)
                && target.TeacherPreparationProgramIdentifier != source.TeacherPreparationProgramIdentifier)
            {
                target.TeacherPreparationProgramIdentifier = source.TeacherPreparationProgramIdentifier;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTeacherPreparationProgramTypeDescriptorSupported)
                && target.TeacherPreparationProgramTypeDescriptor != source.TeacherPreparationProgramTypeDescriptor)
            {
                target.TeacherPreparationProgramTypeDescriptor = source.TeacherPreparationProgramTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantTeacherPreparationProgram source, IApplicantTeacherPreparationProgram target, Action<IApplicantTeacherPreparationProgram, IApplicantTeacherPreparationProgram> onMapped)
        {
            var sourceSynchSupport = source as IApplicantTeacherPreparationProgramSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantTeacherPreparationProgramSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.TeacherPreparationProgramName = source.TeacherPreparationProgramName;

            // Copy non-PK properties

            if (sourceSynchSupport.IsGPASupported)
                target.GPA = source.GPA;
            else
                targetSynchSupport.IsGPASupported = false;

            if (sourceSynchSupport.IsLevelOfDegreeAwardedDescriptorSupported)
                target.LevelOfDegreeAwardedDescriptor = source.LevelOfDegreeAwardedDescriptor;
            else
                targetSynchSupport.IsLevelOfDegreeAwardedDescriptorSupported = false;

            if (sourceSynchSupport.IsMajorSpecializationSupported)
                target.MajorSpecialization = source.MajorSpecialization;
            else
                targetSynchSupport.IsMajorSpecializationSupported = false;

            if (sourceSynchSupport.IsNameOfInstitutionSupported)
                target.NameOfInstitution = source.NameOfInstitution;
            else
                targetSynchSupport.IsNameOfInstitutionSupported = false;

            if (sourceSynchSupport.IsTeacherPreparationProgramIdentifierSupported)
                target.TeacherPreparationProgramIdentifier = source.TeacherPreparationProgramIdentifier;
            else
                targetSynchSupport.IsTeacherPreparationProgramIdentifierSupported = false;

            if (sourceSynchSupport.IsTeacherPreparationProgramTypeDescriptorSupported)
                target.TeacherPreparationProgramTypeDescriptor = source.TeacherPreparationProgramTypeDescriptor;
            else
                targetSynchSupport.IsTeacherPreparationProgramTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantTeacherPreparationProgramSynchronizationSourceSupport 
    {
        bool IsGPASupported { get; set; }
        bool IsLevelOfDegreeAwardedDescriptorSupported { get; set; }
        bool IsMajorSpecializationSupported { get; set; }
        bool IsNameOfInstitutionSupported { get; set; }
        bool IsTeacherPreparationProgramIdentifierSupported { get; set; }
        bool IsTeacherPreparationProgramTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantTelephoneMapper 
    {
        public static bool SynchronizeTo(this IApplicantTelephone source, IApplicantTelephone target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantTelephoneSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TelephoneNumber != target.TelephoneNumber)
            {
                source.TelephoneNumber = target.TelephoneNumber;
            }
            if (source.TelephoneNumberTypeDescriptor != target.TelephoneNumberTypeDescriptor)
            {
                source.TelephoneNumberTypeDescriptor = target.TelephoneNumberTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDoNotPublishIndicatorSupported)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOrderOfPrioritySupported)
                && target.OrderOfPriority != source.OrderOfPriority)
            {
                target.OrderOfPriority = source.OrderOfPriority;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTextMessageCapabilityIndicatorSupported)
                && target.TextMessageCapabilityIndicator != source.TextMessageCapabilityIndicator)
            {
                target.TextMessageCapabilityIndicator = source.TextMessageCapabilityIndicator;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantTelephone source, IApplicantTelephone target, Action<IApplicantTelephone, IApplicantTelephone> onMapped)
        {
            var sourceSynchSupport = source as IApplicantTelephoneSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantTelephoneSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.TelephoneNumber = source.TelephoneNumber;
            target.TelephoneNumberTypeDescriptor = source.TelephoneNumberTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDoNotPublishIndicatorSupported)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
            else
                targetSynchSupport.IsDoNotPublishIndicatorSupported = false;

            if (sourceSynchSupport.IsOrderOfPrioritySupported)
                target.OrderOfPriority = source.OrderOfPriority;
            else
                targetSynchSupport.IsOrderOfPrioritySupported = false;

            if (sourceSynchSupport.IsTextMessageCapabilityIndicatorSupported)
                target.TextMessageCapabilityIndicator = source.TextMessageCapabilityIndicator;
            else
                targetSynchSupport.IsTextMessageCapabilityIndicatorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantTelephoneSynchronizationSourceSupport 
    {
        bool IsDoNotPublishIndicatorSupported { get; set; }
        bool IsOrderOfPrioritySupported { get; set; }
        bool IsTextMessageCapabilityIndicatorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantVisaMapper 
    {
        public static bool SynchronizeTo(this IApplicantVisa source, IApplicantVisa target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantVisaSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.VisaDescriptor != target.VisaDescriptor)
            {
                source.VisaDescriptor = target.VisaDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantVisa source, IApplicantVisa target, Action<IApplicantVisa, IApplicantVisa> onMapped)
        {
            var sourceSynchSupport = source as IApplicantVisaSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantVisaSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.VisaDescriptor = source.VisaDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantVisaSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: ApplicantProspectAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.ApplicantProspectAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ApplicantProspectAssociationMapper 
    {
        public static bool SynchronizeTo(this IApplicantProspectAssociation source, IApplicantProspectAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantProspectAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ApplicantIdentifier != target.ApplicantIdentifier)
            {
                source.ApplicantIdentifier = target.ApplicantIdentifier;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.ProspectIdentifier != target.ProspectIdentifier)
            {
                source.ProspectIdentifier = target.ProspectIdentifier;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantProspectAssociation source, IApplicantProspectAssociation target, Action<IApplicantProspectAssociation, IApplicantProspectAssociation> onMapped)
        {
            var sourceSynchSupport = source as IApplicantProspectAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantProspectAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ApplicantIdentifier = source.ApplicantIdentifier;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProspectIdentifier = source.ProspectIdentifier;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ApplicantResourceId = source.ApplicantResourceId;
                target.ApplicantDiscriminator = source.ApplicantDiscriminator;
                target.ProspectResourceId = source.ProspectResourceId;
                target.ProspectDiscriminator = source.ProspectDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantProspectAssociationSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: Application

namespace EdFi.Ods.Entities.Common.TPDM //.ApplicationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ApplicationMapper 
    {
        public static bool SynchronizeTo(this IApplication source, IApplication target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ApplicantIdentifier != target.ApplicantIdentifier)
            {
                source.ApplicantIdentifier = target.ApplicantIdentifier;
            }
            if (source.ApplicationIdentifier != target.ApplicationIdentifier)
            {
                source.ApplicationIdentifier = target.ApplicationIdentifier;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAcademicSubjectDescriptorSupported)
                && target.AcademicSubjectDescriptor != source.AcademicSubjectDescriptor)
            {
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAcceptedDateSupported)
                && target.AcceptedDate != source.AcceptedDate)
            {
                target.AcceptedDate = source.AcceptedDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsApplicationDateSupported)
                && target.ApplicationDate != source.ApplicationDate)
            {
                target.ApplicationDate = source.ApplicationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsApplicationSourceDescriptorSupported)
                && target.ApplicationSourceDescriptor != source.ApplicationSourceDescriptor)
            {
                target.ApplicationSourceDescriptor = source.ApplicationSourceDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsApplicationStatusDescriptorSupported)
                && target.ApplicationStatusDescriptor != source.ApplicationStatusDescriptor)
            {
                target.ApplicationStatusDescriptor = source.ApplicationStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCurrentEmployeeSupported)
                && target.CurrentEmployee != source.CurrentEmployee)
            {
                target.CurrentEmployee = source.CurrentEmployee;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFirstContactDateSupported)
                && target.FirstContactDate != source.FirstContactDate)
            {
                target.FirstContactDate = source.FirstContactDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHighNeedsAcademicSubjectDescriptorSupported)
                && target.HighNeedsAcademicSubjectDescriptor != source.HighNeedsAcademicSubjectDescriptor)
            {
                target.HighNeedsAcademicSubjectDescriptor = source.HighNeedsAcademicSubjectDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHireStatusDescriptorSupported)
                && target.HireStatusDescriptor != source.HireStatusDescriptor)
            {
                target.HireStatusDescriptor = source.HireStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHiringSourceDescriptorSupported)
                && target.HiringSourceDescriptor != source.HiringSourceDescriptor)
            {
                target.HiringSourceDescriptor = source.HiringSourceDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsWithdrawDateSupported)
                && target.WithdrawDate != source.WithdrawDate)
            {
                target.WithdrawDate = source.WithdrawDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsWithdrawReasonDescriptorSupported)
                && target.WithdrawReasonDescriptor != source.WithdrawReasonDescriptor)
            {
                target.WithdrawReasonDescriptor = source.WithdrawReasonDescriptor;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsApplicationOpenStaffPositionsSupported)
            {
                isModified |= 
                    source.ApplicationOpenStaffPositions.SynchronizeCollectionTo(
                        target.ApplicationOpenStaffPositions, 
                        onChildAdded: child => 
                            {
                                child.Application = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicationOpenStaffPositionIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicationTermsSupported)
            {
                isModified |= 
                    source.ApplicationTerms.SynchronizeCollectionTo(
                        target.ApplicationTerms, 
                        onChildAdded: child => 
                            {
                                child.Application = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicationTermIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IApplication source, IApplication target, Action<IApplication, IApplication> onMapped)
        {
            var sourceSynchSupport = source as IApplicationSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ApplicantIdentifier = source.ApplicantIdentifier;
            target.ApplicationIdentifier = source.ApplicationIdentifier;
            target.EducationOrganizationId = source.EducationOrganizationId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAcademicSubjectDescriptorSupported)
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
            else
                targetSynchSupport.IsAcademicSubjectDescriptorSupported = false;

            if (sourceSynchSupport.IsAcceptedDateSupported)
                target.AcceptedDate = source.AcceptedDate;
            else
                targetSynchSupport.IsAcceptedDateSupported = false;

            if (sourceSynchSupport.IsApplicationDateSupported)
                target.ApplicationDate = source.ApplicationDate;
            else
                targetSynchSupport.IsApplicationDateSupported = false;

            if (sourceSynchSupport.IsApplicationSourceDescriptorSupported)
                target.ApplicationSourceDescriptor = source.ApplicationSourceDescriptor;
            else
                targetSynchSupport.IsApplicationSourceDescriptorSupported = false;

            if (sourceSynchSupport.IsApplicationStatusDescriptorSupported)
                target.ApplicationStatusDescriptor = source.ApplicationStatusDescriptor;
            else
                targetSynchSupport.IsApplicationStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsCurrentEmployeeSupported)
                target.CurrentEmployee = source.CurrentEmployee;
            else
                targetSynchSupport.IsCurrentEmployeeSupported = false;

            if (sourceSynchSupport.IsFirstContactDateSupported)
                target.FirstContactDate = source.FirstContactDate;
            else
                targetSynchSupport.IsFirstContactDateSupported = false;

            if (sourceSynchSupport.IsHighNeedsAcademicSubjectDescriptorSupported)
                target.HighNeedsAcademicSubjectDescriptor = source.HighNeedsAcademicSubjectDescriptor;
            else
                targetSynchSupport.IsHighNeedsAcademicSubjectDescriptorSupported = false;

            if (sourceSynchSupport.IsHireStatusDescriptorSupported)
                target.HireStatusDescriptor = source.HireStatusDescriptor;
            else
                targetSynchSupport.IsHireStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsHiringSourceDescriptorSupported)
                target.HiringSourceDescriptor = source.HiringSourceDescriptor;
            else
                targetSynchSupport.IsHiringSourceDescriptorSupported = false;

            if (sourceSynchSupport.IsWithdrawDateSupported)
                target.WithdrawDate = source.WithdrawDate;
            else
                targetSynchSupport.IsWithdrawDateSupported = false;

            if (sourceSynchSupport.IsWithdrawReasonDescriptorSupported)
                target.WithdrawReasonDescriptor = source.WithdrawReasonDescriptor;
            else
                targetSynchSupport.IsWithdrawReasonDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ApplicantResourceId = source.ApplicantResourceId;
                target.ApplicantDiscriminator = source.ApplicantDiscriminator;
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsApplicationOpenStaffPositionsSupported)
            {    
                targetSynchSupport.IsApplicationOpenStaffPositionIncluded = sourceSynchSupport.IsApplicationOpenStaffPositionIncluded;
                source.ApplicationOpenStaffPositions.MapCollectionTo(target.ApplicationOpenStaffPositions, target);
            }
            else
            {
                targetSynchSupport.IsApplicationOpenStaffPositionsSupported = false;
            }

            if (sourceSynchSupport.IsApplicationTermsSupported)
            {    
                targetSynchSupport.IsApplicationTermIncluded = sourceSynchSupport.IsApplicationTermIncluded;
                source.ApplicationTerms.MapCollectionTo(target.ApplicationTerms, target);
            }
            else
            {
                targetSynchSupport.IsApplicationTermsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicationSynchronizationSourceSupport 
    {
        bool IsAcademicSubjectDescriptorSupported { get; set; }
        bool IsAcceptedDateSupported { get; set; }
        bool IsApplicationDateSupported { get; set; }
        bool IsApplicationOpenStaffPositionsSupported { get; set; }
        bool IsApplicationSourceDescriptorSupported { get; set; }
        bool IsApplicationStatusDescriptorSupported { get; set; }
        bool IsApplicationTermsSupported { get; set; }
        bool IsCurrentEmployeeSupported { get; set; }
        bool IsFirstContactDateSupported { get; set; }
        bool IsHighNeedsAcademicSubjectDescriptorSupported { get; set; }
        bool IsHireStatusDescriptorSupported { get; set; }
        bool IsHiringSourceDescriptorSupported { get; set; }
        bool IsWithdrawDateSupported { get; set; }
        bool IsWithdrawReasonDescriptorSupported { get; set; }
        Func<IApplicationOpenStaffPosition, bool> IsApplicationOpenStaffPositionIncluded { get; set; }
        Func<IApplicationTerm, bool> IsApplicationTermIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicationOpenStaffPositionMapper 
    {
        public static bool SynchronizeTo(this IApplicationOpenStaffPosition source, IApplicationOpenStaffPosition target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicationOpenStaffPositionSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.RequisitionNumber != target.RequisitionNumber)
            {
                source.RequisitionNumber = target.RequisitionNumber;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicationOpenStaffPosition source, IApplicationOpenStaffPosition target, Action<IApplicationOpenStaffPosition, IApplicationOpenStaffPosition> onMapped)
        {
            var sourceSynchSupport = source as IApplicationOpenStaffPositionSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicationOpenStaffPositionSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.RequisitionNumber = source.RequisitionNumber;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.OpenStaffPositionResourceId = source.OpenStaffPositionResourceId;
                target.OpenStaffPositionDiscriminator = source.OpenStaffPositionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicationOpenStaffPositionSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicationTermMapper 
    {
        public static bool SynchronizeTo(this IApplicationTerm source, IApplicationTerm target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicationTermSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicationTerm source, IApplicationTerm target, Action<IApplicationTerm, IApplicationTerm> onMapped)
        {
            var sourceSynchSupport = source as IApplicationTermSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicationTermSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicationTermSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: ApplicationEvent

namespace EdFi.Ods.Entities.Common.TPDM //.ApplicationEventAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ApplicationEventMapper 
    {
        public static bool SynchronizeTo(this IApplicationEvent source, IApplicationEvent target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicationEventSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ApplicantIdentifier != target.ApplicantIdentifier)
            {
                source.ApplicantIdentifier = target.ApplicantIdentifier;
            }
            if (source.ApplicationEventTypeDescriptor != target.ApplicationEventTypeDescriptor)
            {
                source.ApplicationEventTypeDescriptor = target.ApplicationEventTypeDescriptor;
            }
            if (source.ApplicationIdentifier != target.ApplicationIdentifier)
            {
                source.ApplicationIdentifier = target.ApplicationIdentifier;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EventDate != target.EventDate)
            {
                source.EventDate = target.EventDate;
            }
            if (source.SequenceNumber != target.SequenceNumber)
            {
                source.SequenceNumber = target.SequenceNumber;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsApplicationEvaluationScoreSupported)
                && target.ApplicationEvaluationScore != source.ApplicationEvaluationScore)
            {
                target.ApplicationEvaluationScore = source.ApplicationEvaluationScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsApplicationEventResultDescriptorSupported)
                && target.ApplicationEventResultDescriptor != source.ApplicationEventResultDescriptor)
            {
                target.ApplicationEventResultDescriptor = source.ApplicationEventResultDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEventEndDateSupported)
                && target.EventEndDate != source.EventEndDate)
            {
                target.EventEndDate = source.EventEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolYearSupported)
                && target.SchoolYear != source.SchoolYear)
            {
                target.SchoolYear = source.SchoolYear;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTermDescriptorSupported)
                && target.TermDescriptor != source.TermDescriptor)
            {
                target.TermDescriptor = source.TermDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicationEvent source, IApplicationEvent target, Action<IApplicationEvent, IApplicationEvent> onMapped)
        {
            var sourceSynchSupport = source as IApplicationEventSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicationEventSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ApplicantIdentifier = source.ApplicantIdentifier;
            target.ApplicationEventTypeDescriptor = source.ApplicationEventTypeDescriptor;
            target.ApplicationIdentifier = source.ApplicationIdentifier;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EventDate = source.EventDate;
            target.SequenceNumber = source.SequenceNumber;

            // Copy non-PK properties

            if (sourceSynchSupport.IsApplicationEvaluationScoreSupported)
                target.ApplicationEvaluationScore = source.ApplicationEvaluationScore;
            else
                targetSynchSupport.IsApplicationEvaluationScoreSupported = false;

            if (sourceSynchSupport.IsApplicationEventResultDescriptorSupported)
                target.ApplicationEventResultDescriptor = source.ApplicationEventResultDescriptor;
            else
                targetSynchSupport.IsApplicationEventResultDescriptorSupported = false;

            if (sourceSynchSupport.IsEventEndDateSupported)
                target.EventEndDate = source.EventEndDate;
            else
                targetSynchSupport.IsEventEndDateSupported = false;

            if (sourceSynchSupport.IsSchoolYearSupported)
                target.SchoolYear = source.SchoolYear;
            else
                targetSynchSupport.IsSchoolYearSupported = false;

            if (sourceSynchSupport.IsTermDescriptorSupported)
                target.TermDescriptor = source.TermDescriptor;
            else
                targetSynchSupport.IsTermDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ApplicationResourceId = source.ApplicationResourceId;
                target.ApplicationDiscriminator = source.ApplicationDiscriminator;
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicationEventSynchronizationSourceSupport 
    {
        bool IsApplicationEvaluationScoreSupported { get; set; }
        bool IsApplicationEventResultDescriptorSupported { get; set; }
        bool IsEventEndDateSupported { get; set; }
        bool IsSchoolYearSupported { get; set; }
        bool IsTermDescriptorSupported { get; set; }
    }
 
}
// Aggregate: ApplicationEventResultDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.ApplicationEventResultDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ApplicationEventResultDescriptorMapper 
    {
        public static bool SynchronizeTo(this IApplicationEventResultDescriptor source, IApplicationEventResultDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicationEventResultDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ApplicationEventResultDescriptorId != target.ApplicationEventResultDescriptorId)
            {
                source.ApplicationEventResultDescriptorId = target.ApplicationEventResultDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicationEventResultDescriptor source, IApplicationEventResultDescriptor target, Action<IApplicationEventResultDescriptor, IApplicationEventResultDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IApplicationEventResultDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicationEventResultDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ApplicationEventResultDescriptorId = source.ApplicationEventResultDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicationEventResultDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: ApplicationEventTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.ApplicationEventTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ApplicationEventTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IApplicationEventTypeDescriptor source, IApplicationEventTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicationEventTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ApplicationEventTypeDescriptorId != target.ApplicationEventTypeDescriptorId)
            {
                source.ApplicationEventTypeDescriptorId = target.ApplicationEventTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicationEventTypeDescriptor source, IApplicationEventTypeDescriptor target, Action<IApplicationEventTypeDescriptor, IApplicationEventTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IApplicationEventTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicationEventTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ApplicationEventTypeDescriptorId = source.ApplicationEventTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicationEventTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: ApplicationSourceDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.ApplicationSourceDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ApplicationSourceDescriptorMapper 
    {
        public static bool SynchronizeTo(this IApplicationSourceDescriptor source, IApplicationSourceDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicationSourceDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ApplicationSourceDescriptorId != target.ApplicationSourceDescriptorId)
            {
                source.ApplicationSourceDescriptorId = target.ApplicationSourceDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicationSourceDescriptor source, IApplicationSourceDescriptor target, Action<IApplicationSourceDescriptor, IApplicationSourceDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IApplicationSourceDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicationSourceDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ApplicationSourceDescriptorId = source.ApplicationSourceDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicationSourceDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: ApplicationStatusDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.ApplicationStatusDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ApplicationStatusDescriptorMapper 
    {
        public static bool SynchronizeTo(this IApplicationStatusDescriptor source, IApplicationStatusDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicationStatusDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ApplicationStatusDescriptorId != target.ApplicationStatusDescriptorId)
            {
                source.ApplicationStatusDescriptorId = target.ApplicationStatusDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicationStatusDescriptor source, IApplicationStatusDescriptor target, Action<IApplicationStatusDescriptor, IApplicationStatusDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IApplicationStatusDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicationStatusDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ApplicationStatusDescriptorId = source.ApplicationStatusDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicationStatusDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: Assessment

namespace EdFi.Ods.Entities.Common.TPDM //.AssessmentAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AssessmentExtensionMapper 
    {
        public static bool SynchronizeTo(this IAssessmentExtension source, IAssessmentExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as IAssessmentExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.Assessment as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsProgramGatewayDescriptorSupported)
                && target.ProgramGatewayDescriptor != source.ProgramGatewayDescriptor)
            {
                target.ProgramGatewayDescriptor = source.ProgramGatewayDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAssessmentExtension source, IAssessmentExtension target, Action<IAssessmentExtension, IAssessmentExtension> onMapped)
        {
            var sourceSynchSupport = source as IAssessmentExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as IAssessmentExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsProgramGatewayDescriptorSupported)
                target.ProgramGatewayDescriptor = source.ProgramGatewayDescriptor;
            else
                targetSynchSupport.IsProgramGatewayDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAssessmentExtensionSynchronizationSourceSupport 
    {
        bool IsProgramGatewayDescriptorSupported { get; set; }
    }
 
}
// Aggregate: BackgroundCheckStatusDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.BackgroundCheckStatusDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class BackgroundCheckStatusDescriptorMapper 
    {
        public static bool SynchronizeTo(this IBackgroundCheckStatusDescriptor source, IBackgroundCheckStatusDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IBackgroundCheckStatusDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BackgroundCheckStatusDescriptorId != target.BackgroundCheckStatusDescriptorId)
            {
                source.BackgroundCheckStatusDescriptorId = target.BackgroundCheckStatusDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IBackgroundCheckStatusDescriptor source, IBackgroundCheckStatusDescriptor target, Action<IBackgroundCheckStatusDescriptor, IBackgroundCheckStatusDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IBackgroundCheckStatusDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IBackgroundCheckStatusDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BackgroundCheckStatusDescriptorId = source.BackgroundCheckStatusDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IBackgroundCheckStatusDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: BackgroundCheckTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.BackgroundCheckTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class BackgroundCheckTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IBackgroundCheckTypeDescriptor source, IBackgroundCheckTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IBackgroundCheckTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BackgroundCheckTypeDescriptorId != target.BackgroundCheckTypeDescriptorId)
            {
                source.BackgroundCheckTypeDescriptorId = target.BackgroundCheckTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IBackgroundCheckTypeDescriptor source, IBackgroundCheckTypeDescriptor target, Action<IBackgroundCheckTypeDescriptor, IBackgroundCheckTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IBackgroundCheckTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IBackgroundCheckTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BackgroundCheckTypeDescriptorId = source.BackgroundCheckTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IBackgroundCheckTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: BoardCertificationTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.BoardCertificationTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class BoardCertificationTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IBoardCertificationTypeDescriptor source, IBoardCertificationTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IBoardCertificationTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BoardCertificationTypeDescriptorId != target.BoardCertificationTypeDescriptorId)
            {
                source.BoardCertificationTypeDescriptorId = target.BoardCertificationTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IBoardCertificationTypeDescriptor source, IBoardCertificationTypeDescriptor target, Action<IBoardCertificationTypeDescriptor, IBoardCertificationTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IBoardCertificationTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IBoardCertificationTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BoardCertificationTypeDescriptorId = source.BoardCertificationTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IBoardCertificationTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: CertificationExamStatusDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.CertificationExamStatusDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CertificationExamStatusDescriptorMapper 
    {
        public static bool SynchronizeTo(this ICertificationExamStatusDescriptor source, ICertificationExamStatusDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICertificationExamStatusDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CertificationExamStatusDescriptorId != target.CertificationExamStatusDescriptorId)
            {
                source.CertificationExamStatusDescriptorId = target.CertificationExamStatusDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICertificationExamStatusDescriptor source, ICertificationExamStatusDescriptor target, Action<ICertificationExamStatusDescriptor, ICertificationExamStatusDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICertificationExamStatusDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICertificationExamStatusDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CertificationExamStatusDescriptorId = source.CertificationExamStatusDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICertificationExamStatusDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: CertificationExamTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.CertificationExamTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CertificationExamTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this ICertificationExamTypeDescriptor source, ICertificationExamTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICertificationExamTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CertificationExamTypeDescriptorId != target.CertificationExamTypeDescriptorId)
            {
                source.CertificationExamTypeDescriptorId = target.CertificationExamTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICertificationExamTypeDescriptor source, ICertificationExamTypeDescriptor target, Action<ICertificationExamTypeDescriptor, ICertificationExamTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICertificationExamTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICertificationExamTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CertificationExamTypeDescriptorId = source.CertificationExamTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICertificationExamTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: CommunityOrganization

namespace EdFi.Ods.Entities.Common.TPDM //.CommunityOrganizationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CommunityOrganizationExtensionMapper 
    {
        public static bool SynchronizeTo(this ICommunityOrganizationExtension source, ICommunityOrganizationExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as ICommunityOrganizationExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.CommunityOrganization as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsFederalLocaleCodeDescriptorSupported)
                && target.FederalLocaleCodeDescriptor != source.FederalLocaleCodeDescriptor)
            {
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICommunityOrganizationExtension source, ICommunityOrganizationExtension target, Action<ICommunityOrganizationExtension, ICommunityOrganizationExtension> onMapped)
        {
            var sourceSynchSupport = source as ICommunityOrganizationExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as ICommunityOrganizationExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsFederalLocaleCodeDescriptorSupported)
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
            else
                targetSynchSupport.IsFederalLocaleCodeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICommunityOrganizationExtensionSynchronizationSourceSupport 
    {
        bool IsFederalLocaleCodeDescriptorSupported { get; set; }
    }
 
}
// Aggregate: CommunityProvider

namespace EdFi.Ods.Entities.Common.TPDM //.CommunityProviderAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CommunityProviderExtensionMapper 
    {
        public static bool SynchronizeTo(this ICommunityProviderExtension source, ICommunityProviderExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as ICommunityProviderExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.CommunityProvider as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsFederalLocaleCodeDescriptorSupported)
                && target.FederalLocaleCodeDescriptor != source.FederalLocaleCodeDescriptor)
            {
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICommunityProviderExtension source, ICommunityProviderExtension target, Action<ICommunityProviderExtension, ICommunityProviderExtension> onMapped)
        {
            var sourceSynchSupport = source as ICommunityProviderExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as ICommunityProviderExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsFederalLocaleCodeDescriptorSupported)
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
            else
                targetSynchSupport.IsFederalLocaleCodeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICommunityProviderExtensionSynchronizationSourceSupport 
    {
        bool IsFederalLocaleCodeDescriptorSupported { get; set; }
    }
 
}
// Aggregate: CompleterAsStaffAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.CompleterAsStaffAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CompleterAsStaffAssociationMapper 
    {
        public static bool SynchronizeTo(this ICompleterAsStaffAssociation source, ICompleterAsStaffAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as ICompleterAsStaffAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }
            if (source.TeacherCandidateIdentifier != target.TeacherCandidateIdentifier)
            {
                source.TeacherCandidateIdentifier = target.TeacherCandidateIdentifier;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICompleterAsStaffAssociation source, ICompleterAsStaffAssociation target, Action<ICompleterAsStaffAssociation, ICompleterAsStaffAssociation> onMapped)
        {
            var sourceSynchSupport = source as ICompleterAsStaffAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as ICompleterAsStaffAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.StaffUniqueId = source.StaffUniqueId;
            target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
                target.TeacherCandidateResourceId = source.TeacherCandidateResourceId;
                target.TeacherCandidateDiscriminator = source.TeacherCandidateDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICompleterAsStaffAssociationSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: CoteachingStyleObservedDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.CoteachingStyleObservedDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CoteachingStyleObservedDescriptorMapper 
    {
        public static bool SynchronizeTo(this ICoteachingStyleObservedDescriptor source, ICoteachingStyleObservedDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICoteachingStyleObservedDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CoteachingStyleObservedDescriptorId != target.CoteachingStyleObservedDescriptorId)
            {
                source.CoteachingStyleObservedDescriptorId = target.CoteachingStyleObservedDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICoteachingStyleObservedDescriptor source, ICoteachingStyleObservedDescriptor target, Action<ICoteachingStyleObservedDescriptor, ICoteachingStyleObservedDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICoteachingStyleObservedDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICoteachingStyleObservedDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CoteachingStyleObservedDescriptorId = source.CoteachingStyleObservedDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICoteachingStyleObservedDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: CourseCourseTranscriptFacts

namespace EdFi.Ods.Entities.Common.TPDM //.CourseCourseTranscriptFactsAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CourseCourseTranscriptFactsMapper 
    {
        public static bool SynchronizeTo(this ICourseCourseTranscriptFacts source, ICourseCourseTranscriptFacts target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseCourseTranscriptFactsSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CourseCode != target.CourseCode)
            {
                source.CourseCode = target.CourseCode;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.FactAsOfDate != target.FactAsOfDate)
            {
                source.FactAsOfDate = target.FactAsOfDate;
            }
            if (source.FactsAsOfDate != target.FactsAsOfDate)
            {
                source.FactsAsOfDate = target.FactsAsOfDate;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCourseTitleSupported)
                && target.CourseTitle != source.CourseTitle)
            {
                target.CourseTitle = source.CourseTitle;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // CourseCourseTranscriptFactsAggregatedNumericGradeEarned
            if (sourceSupport == null || sourceSupport.IsCourseCourseTranscriptFactsAggregatedNumericGradeEarnedSupported)
            {
                if (source.CourseCourseTranscriptFactsAggregatedNumericGradeEarned == null)
                {
                    if (target.CourseCourseTranscriptFactsAggregatedNumericGradeEarned != null)
                    {
                        target.CourseCourseTranscriptFactsAggregatedNumericGradeEarned = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.CourseCourseTranscriptFactsAggregatedNumericGradeEarned == null)
                    {
                        var itemType = target.GetType().GetProperty("CourseCourseTranscriptFactsAggregatedNumericGradeEarned").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.CourseCourseTranscriptFactsAggregatedNumericGradeEarned = (ICourseCourseTranscriptFactsAggregatedNumericGradeEarned) newItem;
                    }

                    isModified |= source.CourseCourseTranscriptFactsAggregatedNumericGradeEarned.Synchronize(target.CourseCourseTranscriptFactsAggregatedNumericGradeEarned);
                }
            }
            // CourseCourseTranscriptFactsStudentsEnrolled
            if (sourceSupport == null || sourceSupport.IsCourseCourseTranscriptFactsStudentsEnrolledSupported)
            {
                if (source.CourseCourseTranscriptFactsStudentsEnrolled == null)
                {
                    if (target.CourseCourseTranscriptFactsStudentsEnrolled != null)
                    {
                        target.CourseCourseTranscriptFactsStudentsEnrolled = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.CourseCourseTranscriptFactsStudentsEnrolled == null)
                    {
                        var itemType = target.GetType().GetProperty("CourseCourseTranscriptFactsStudentsEnrolled").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.CourseCourseTranscriptFactsStudentsEnrolled = (ICourseCourseTranscriptFactsStudentsEnrolled) newItem;
                    }

                    isModified |= source.CourseCourseTranscriptFactsStudentsEnrolled.Synchronize(target.CourseCourseTranscriptFactsStudentsEnrolled);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsCourseCourseTranscriptFactsAggregatedFinalLetterGradeEarnedsSupported)
            {
                isModified |= 
                    source.CourseCourseTranscriptFactsAggregatedFinalLetterGradeEarneds.SynchronizeCollectionTo(
                        target.CourseCourseTranscriptFactsAggregatedFinalLetterGradeEarneds, 
                        onChildAdded: child => 
                            {
                                child.CourseCourseTranscriptFacts = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsCourseCourseTranscriptFactsAggregatedFinalLetterGradeEarnedIncluded);
            }


            return isModified;
        }



        public static void MapTo(this ICourseCourseTranscriptFacts source, ICourseCourseTranscriptFacts target, Action<ICourseCourseTranscriptFacts, ICourseCourseTranscriptFacts> onMapped)
        {
            var sourceSynchSupport = source as ICourseCourseTranscriptFactsSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseCourseTranscriptFactsSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CourseCode = source.CourseCode;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FactAsOfDate = source.FactAsOfDate;
            target.FactsAsOfDate = source.FactsAsOfDate;
            target.SchoolYear = source.SchoolYear;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCourseTitleSupported)
                target.CourseTitle = source.CourseTitle;
            else
                targetSynchSupport.IsCourseTitleSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CourseStudentAcademicRecordFactsResourceId = source.CourseStudentAcademicRecordFactsResourceId;
                target.CourseStudentAcademicRecordFactsDiscriminator = source.CourseStudentAcademicRecordFactsDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // CourseCourseTranscriptFactsAggregatedNumericGradeEarned (Source)
            if (sourceSynchSupport.IsCourseCourseTranscriptFactsAggregatedNumericGradeEarnedSupported)
            {
                var itemProperty = target.GetType().GetProperty("CourseCourseTranscriptFactsAggregatedNumericGradeEarned");
                
                if (itemProperty != null)
                {                    
                    if (source.CourseCourseTranscriptFactsAggregatedNumericGradeEarned == null)
                    {
                        target.CourseCourseTranscriptFactsAggregatedNumericGradeEarned = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetCourseCourseTranscriptFactsAggregatedNumericGradeEarned = Activator.CreateInstance(itemType);
                        (targetCourseCourseTranscriptFactsAggregatedNumericGradeEarned as IChildEntity)?.SetParent(target);
                        source.CourseCourseTranscriptFactsAggregatedNumericGradeEarned.Map(targetCourseCourseTranscriptFactsAggregatedNumericGradeEarned);
                        
                        // Update the target reference appropriately
                        target.CourseCourseTranscriptFactsAggregatedNumericGradeEarned = (ICourseCourseTranscriptFactsAggregatedNumericGradeEarned) targetCourseCourseTranscriptFactsAggregatedNumericGradeEarned;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsCourseCourseTranscriptFactsAggregatedNumericGradeEarnedSupported = false; 
            }
            // CourseCourseTranscriptFactsStudentsEnrolled (Source)
            if (sourceSynchSupport.IsCourseCourseTranscriptFactsStudentsEnrolledSupported)
            {
                var itemProperty = target.GetType().GetProperty("CourseCourseTranscriptFactsStudentsEnrolled");
                
                if (itemProperty != null)
                {                    
                    if (source.CourseCourseTranscriptFactsStudentsEnrolled == null)
                    {
                        target.CourseCourseTranscriptFactsStudentsEnrolled = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetCourseCourseTranscriptFactsStudentsEnrolled = Activator.CreateInstance(itemType);
                        (targetCourseCourseTranscriptFactsStudentsEnrolled as IChildEntity)?.SetParent(target);
                        source.CourseCourseTranscriptFactsStudentsEnrolled.Map(targetCourseCourseTranscriptFactsStudentsEnrolled);
                        
                        // Update the target reference appropriately
                        target.CourseCourseTranscriptFactsStudentsEnrolled = (ICourseCourseTranscriptFactsStudentsEnrolled) targetCourseCourseTranscriptFactsStudentsEnrolled;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsCourseCourseTranscriptFactsStudentsEnrolledSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists

            if (sourceSynchSupport.IsCourseCourseTranscriptFactsAggregatedFinalLetterGradeEarnedsSupported)
            {    
                targetSynchSupport.IsCourseCourseTranscriptFactsAggregatedFinalLetterGradeEarnedIncluded = sourceSynchSupport.IsCourseCourseTranscriptFactsAggregatedFinalLetterGradeEarnedIncluded;
                source.CourseCourseTranscriptFactsAggregatedFinalLetterGradeEarneds.MapCollectionTo(target.CourseCourseTranscriptFactsAggregatedFinalLetterGradeEarneds, target);
            }
            else
            {
                targetSynchSupport.IsCourseCourseTranscriptFactsAggregatedFinalLetterGradeEarnedsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseCourseTranscriptFactsSynchronizationSourceSupport 
    {
        bool IsCourseCourseTranscriptFactsAggregatedFinalLetterGradeEarnedsSupported { get; set; }
        bool IsCourseCourseTranscriptFactsAggregatedNumericGradeEarnedSupported { get; set; }
        bool IsCourseCourseTranscriptFactsStudentsEnrolledSupported { get; set; }
        bool IsCourseTitleSupported { get; set; }
        Func<ICourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned, bool> IsCourseCourseTranscriptFactsAggregatedFinalLetterGradeEarnedIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CourseCourseTranscriptFactsAggregatedFinalLetterGradeEarnedMapper 
    {
        public static bool SynchronizeTo(this ICourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned source, ICourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseCourseTranscriptFactsAggregatedFinalLetterGradeEarnedSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.FinalLetterGrade != target.FinalLetterGrade)
            {
                source.FinalLetterGrade = target.FinalLetterGrade;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsLetterGradeTypeNumberSupported)
                && target.LetterGradeTypeNumber != source.LetterGradeTypeNumber)
            {
                target.LetterGradeTypeNumber = source.LetterGradeTypeNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLetterGradeTypePercentageSupported)
                && target.LetterGradeTypePercentage != source.LetterGradeTypePercentage)
            {
                target.LetterGradeTypePercentage = source.LetterGradeTypePercentage;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned source, ICourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned target, Action<ICourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned, ICourseCourseTranscriptFactsAggregatedFinalLetterGradeEarned> onMapped)
        {
            var sourceSynchSupport = source as ICourseCourseTranscriptFactsAggregatedFinalLetterGradeEarnedSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseCourseTranscriptFactsAggregatedFinalLetterGradeEarnedSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.FinalLetterGrade = source.FinalLetterGrade;

            // Copy non-PK properties

            if (sourceSynchSupport.IsLetterGradeTypeNumberSupported)
                target.LetterGradeTypeNumber = source.LetterGradeTypeNumber;
            else
                targetSynchSupport.IsLetterGradeTypeNumberSupported = false;

            if (sourceSynchSupport.IsLetterGradeTypePercentageSupported)
                target.LetterGradeTypePercentage = source.LetterGradeTypePercentage;
            else
                targetSynchSupport.IsLetterGradeTypePercentageSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseCourseTranscriptFactsAggregatedFinalLetterGradeEarnedSynchronizationSourceSupport 
    {
        bool IsLetterGradeTypeNumberSupported { get; set; }
        bool IsLetterGradeTypePercentageSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CourseCourseTranscriptFactsAggregatedNumericGradeEarnedMapper 
    {
        public static bool SynchronizeTo(this ICourseCourseTranscriptFactsAggregatedNumericGradeEarned source, ICourseCourseTranscriptFactsAggregatedNumericGradeEarned target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseCourseTranscriptFactsAggregatedNumericGradeEarnedSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAverageFinalNumericGradeEarnedSupported)
                && target.AverageFinalNumericGradeEarned != source.AverageFinalNumericGradeEarned)
            {
                target.AverageFinalNumericGradeEarned = source.AverageFinalNumericGradeEarned;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNumericGradeNCountSupported)
                && target.NumericGradeNCount != source.NumericGradeNCount)
            {
                target.NumericGradeNCount = source.NumericGradeNCount;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNumericGradeStandardDeviationSupported)
                && target.NumericGradeStandardDeviation != source.NumericGradeStandardDeviation)
            {
                target.NumericGradeStandardDeviation = source.NumericGradeStandardDeviation;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICourseCourseTranscriptFactsAggregatedNumericGradeEarned source, ICourseCourseTranscriptFactsAggregatedNumericGradeEarned target, Action<ICourseCourseTranscriptFactsAggregatedNumericGradeEarned, ICourseCourseTranscriptFactsAggregatedNumericGradeEarned> onMapped)
        {
            var sourceSynchSupport = source as ICourseCourseTranscriptFactsAggregatedNumericGradeEarnedSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseCourseTranscriptFactsAggregatedNumericGradeEarnedSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsAverageFinalNumericGradeEarnedSupported)
                target.AverageFinalNumericGradeEarned = source.AverageFinalNumericGradeEarned;
            else
                targetSynchSupport.IsAverageFinalNumericGradeEarnedSupported = false;

            if (sourceSynchSupport.IsNumericGradeNCountSupported)
                target.NumericGradeNCount = source.NumericGradeNCount;
            else
                targetSynchSupport.IsNumericGradeNCountSupported = false;

            if (sourceSynchSupport.IsNumericGradeStandardDeviationSupported)
                target.NumericGradeStandardDeviation = source.NumericGradeStandardDeviation;
            else
                targetSynchSupport.IsNumericGradeStandardDeviationSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseCourseTranscriptFactsAggregatedNumericGradeEarnedSynchronizationSourceSupport 
    {
        bool IsAverageFinalNumericGradeEarnedSupported { get; set; }
        bool IsNumericGradeNCountSupported { get; set; }
        bool IsNumericGradeStandardDeviationSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CourseCourseTranscriptFactsStudentsEnrolledMapper 
    {
        public static bool SynchronizeTo(this ICourseCourseTranscriptFactsStudentsEnrolled source, ICourseCourseTranscriptFactsStudentsEnrolled target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseCourseTranscriptFactsStudentsEnrolledSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsNumberStudentsEnrolledSupported)
                && target.NumberStudentsEnrolled != source.NumberStudentsEnrolled)
            {
                target.NumberStudentsEnrolled = source.NumberStudentsEnrolled;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPercentAtRiskSupported)
                && target.PercentAtRisk != source.PercentAtRisk)
            {
                target.PercentAtRisk = source.PercentAtRisk;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPercentMobilitySupported)
                && target.PercentMobility != source.PercentMobility)
            {
                target.PercentMobility = source.PercentMobility;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICourseCourseTranscriptFactsStudentsEnrolled source, ICourseCourseTranscriptFactsStudentsEnrolled target, Action<ICourseCourseTranscriptFactsStudentsEnrolled, ICourseCourseTranscriptFactsStudentsEnrolled> onMapped)
        {
            var sourceSynchSupport = source as ICourseCourseTranscriptFactsStudentsEnrolledSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseCourseTranscriptFactsStudentsEnrolledSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsNumberStudentsEnrolledSupported)
                target.NumberStudentsEnrolled = source.NumberStudentsEnrolled;
            else
                targetSynchSupport.IsNumberStudentsEnrolledSupported = false;

            if (sourceSynchSupport.IsPercentAtRiskSupported)
                target.PercentAtRisk = source.PercentAtRisk;
            else
                targetSynchSupport.IsPercentAtRiskSupported = false;

            if (sourceSynchSupport.IsPercentMobilitySupported)
                target.PercentMobility = source.PercentMobility;
            else
                targetSynchSupport.IsPercentMobilitySupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseCourseTranscriptFactsStudentsEnrolledSynchronizationSourceSupport 
    {
        bool IsNumberStudentsEnrolledSupported { get; set; }
        bool IsPercentAtRiskSupported { get; set; }
        bool IsPercentMobilitySupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
}
// Aggregate: CourseStudentAcademicRecordFacts

namespace EdFi.Ods.Entities.Common.TPDM //.CourseStudentAcademicRecordFactsAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CourseStudentAcademicRecordFactsMapper 
    {
        public static bool SynchronizeTo(this ICourseStudentAcademicRecordFacts source, ICourseStudentAcademicRecordFacts target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseStudentAcademicRecordFactsSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CourseCode != target.CourseCode)
            {
                source.CourseCode = target.CourseCode;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.FactAsOfDate != target.FactAsOfDate)
            {
                source.FactAsOfDate = target.FactAsOfDate;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAggregatedGPAMaxSupported)
                && target.AggregatedGPAMax != source.AggregatedGPAMax)
            {
                target.AggregatedGPAMax = source.AggregatedGPAMax;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage
            if (sourceSupport == null || sourceSupport.IsCourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageSupported)
            {
                if (source.CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage == null)
                {
                    if (target.CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage != null)
                    {
                        target.CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage == null)
                    {
                        var itemType = target.GetType().GetProperty("CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage = (ICourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage) newItem;
                    }

                    isModified |= source.CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage.Synchronize(target.CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage);
                }
            }
            // CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage
            if (sourceSupport == null || sourceSupport.IsCourseStudentAcademicRecordFactsAggregatedSessionGradePointAverageSupported)
            {
                if (source.CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage == null)
                {
                    if (target.CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage != null)
                    {
                        target.CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage == null)
                    {
                        var itemType = target.GetType().GetProperty("CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage = (ICourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage) newItem;
                    }

                    isModified |= source.CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage.Synchronize(target.CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage);
                }
            }
            // CourseStudentAcademicRecordFactsStudentsEnrolled
            if (sourceSupport == null || sourceSupport.IsCourseStudentAcademicRecordFactsStudentsEnrolledSupported)
            {
                if (source.CourseStudentAcademicRecordFactsStudentsEnrolled == null)
                {
                    if (target.CourseStudentAcademicRecordFactsStudentsEnrolled != null)
                    {
                        target.CourseStudentAcademicRecordFactsStudentsEnrolled = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.CourseStudentAcademicRecordFactsStudentsEnrolled == null)
                    {
                        var itemType = target.GetType().GetProperty("CourseStudentAcademicRecordFactsStudentsEnrolled").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.CourseStudentAcademicRecordFactsStudentsEnrolled = (ICourseStudentAcademicRecordFactsStudentsEnrolled) newItem;
                    }

                    isModified |= source.CourseStudentAcademicRecordFactsStudentsEnrolled.Synchronize(target.CourseStudentAcademicRecordFactsStudentsEnrolled);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICourseStudentAcademicRecordFacts source, ICourseStudentAcademicRecordFacts target, Action<ICourseStudentAcademicRecordFacts, ICourseStudentAcademicRecordFacts> onMapped)
        {
            var sourceSynchSupport = source as ICourseStudentAcademicRecordFactsSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseStudentAcademicRecordFactsSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CourseCode = source.CourseCode;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FactAsOfDate = source.FactAsOfDate;
            target.SchoolYear = source.SchoolYear;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAggregatedGPAMaxSupported)
                target.AggregatedGPAMax = source.AggregatedGPAMax;
            else
                targetSynchSupport.IsAggregatedGPAMaxSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CourseResourceId = source.CourseResourceId;
                target.CourseDiscriminator = source.CourseDiscriminator;
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage (Source)
            if (sourceSynchSupport.IsCourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageSupported)
            {
                var itemProperty = target.GetType().GetProperty("CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage");
                
                if (itemProperty != null)
                {                    
                    if (source.CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage == null)
                    {
                        target.CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetCourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage = Activator.CreateInstance(itemType);
                        (targetCourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage as IChildEntity)?.SetParent(target);
                        source.CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage.Map(targetCourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage);
                        
                        // Update the target reference appropriately
                        target.CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage = (ICourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage) targetCourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsCourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageSupported = false; 
            }
            // CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage (Source)
            if (sourceSynchSupport.IsCourseStudentAcademicRecordFactsAggregatedSessionGradePointAverageSupported)
            {
                var itemProperty = target.GetType().GetProperty("CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage");
                
                if (itemProperty != null)
                {                    
                    if (source.CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage == null)
                    {
                        target.CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetCourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage = Activator.CreateInstance(itemType);
                        (targetCourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage as IChildEntity)?.SetParent(target);
                        source.CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage.Map(targetCourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage);
                        
                        // Update the target reference appropriately
                        target.CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage = (ICourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage) targetCourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsCourseStudentAcademicRecordFactsAggregatedSessionGradePointAverageSupported = false; 
            }
            // CourseStudentAcademicRecordFactsStudentsEnrolled (Source)
            if (sourceSynchSupport.IsCourseStudentAcademicRecordFactsStudentsEnrolledSupported)
            {
                var itemProperty = target.GetType().GetProperty("CourseStudentAcademicRecordFactsStudentsEnrolled");
                
                if (itemProperty != null)
                {                    
                    if (source.CourseStudentAcademicRecordFactsStudentsEnrolled == null)
                    {
                        target.CourseStudentAcademicRecordFactsStudentsEnrolled = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetCourseStudentAcademicRecordFactsStudentsEnrolled = Activator.CreateInstance(itemType);
                        (targetCourseStudentAcademicRecordFactsStudentsEnrolled as IChildEntity)?.SetParent(target);
                        source.CourseStudentAcademicRecordFactsStudentsEnrolled.Map(targetCourseStudentAcademicRecordFactsStudentsEnrolled);
                        
                        // Update the target reference appropriately
                        target.CourseStudentAcademicRecordFactsStudentsEnrolled = (ICourseStudentAcademicRecordFactsStudentsEnrolled) targetCourseStudentAcademicRecordFactsStudentsEnrolled;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsCourseStudentAcademicRecordFactsStudentsEnrolledSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseStudentAcademicRecordFactsSynchronizationSourceSupport 
    {
        bool IsAggregatedGPAMaxSupported { get; set; }
        bool IsCourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageSupported { get; set; }
        bool IsCourseStudentAcademicRecordFactsAggregatedSessionGradePointAverageSupported { get; set; }
        bool IsCourseStudentAcademicRecordFactsStudentsEnrolledSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageMapper 
    {
        public static bool SynchronizeTo(this ICourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage source, ICourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsGradePointAverageSupported)
                && target.GradePointAverage != source.GradePointAverage)
            {
                target.GradePointAverage = source.GradePointAverage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGradePointNCountSupported)
                && target.GradePointNCount != source.GradePointNCount)
            {
                target.GradePointNCount = source.GradePointNCount;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGradePointStandardDeviationSupported)
                && target.GradePointStandardDeviation != source.GradePointStandardDeviation)
            {
                target.GradePointStandardDeviation = source.GradePointStandardDeviation;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage source, ICourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage target, Action<ICourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage, ICourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage> onMapped)
        {
            var sourceSynchSupport = source as ICourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsGradePointAverageSupported)
                target.GradePointAverage = source.GradePointAverage;
            else
                targetSynchSupport.IsGradePointAverageSupported = false;

            if (sourceSynchSupport.IsGradePointNCountSupported)
                target.GradePointNCount = source.GradePointNCount;
            else
                targetSynchSupport.IsGradePointNCountSupported = false;

            if (sourceSynchSupport.IsGradePointStandardDeviationSupported)
                target.GradePointStandardDeviation = source.GradePointStandardDeviation;
            else
                targetSynchSupport.IsGradePointStandardDeviationSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageSynchronizationSourceSupport 
    {
        bool IsGradePointAverageSupported { get; set; }
        bool IsGradePointNCountSupported { get; set; }
        bool IsGradePointStandardDeviationSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CourseStudentAcademicRecordFactsAggregatedSessionGradePointAverageMapper 
    {
        public static bool SynchronizeTo(this ICourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage source, ICourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseStudentAcademicRecordFactsAggregatedSessionGradePointAverageSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsGradePointAverageSupported)
                && target.GradePointAverage != source.GradePointAverage)
            {
                target.GradePointAverage = source.GradePointAverage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGradePointNCountSupported)
                && target.GradePointNCount != source.GradePointNCount)
            {
                target.GradePointNCount = source.GradePointNCount;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGradePointStandardDeviationSupported)
                && target.GradePointStandardDeviation != source.GradePointStandardDeviation)
            {
                target.GradePointStandardDeviation = source.GradePointStandardDeviation;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage source, ICourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage target, Action<ICourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage, ICourseStudentAcademicRecordFactsAggregatedSessionGradePointAverage> onMapped)
        {
            var sourceSynchSupport = source as ICourseStudentAcademicRecordFactsAggregatedSessionGradePointAverageSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseStudentAcademicRecordFactsAggregatedSessionGradePointAverageSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsGradePointAverageSupported)
                target.GradePointAverage = source.GradePointAverage;
            else
                targetSynchSupport.IsGradePointAverageSupported = false;

            if (sourceSynchSupport.IsGradePointNCountSupported)
                target.GradePointNCount = source.GradePointNCount;
            else
                targetSynchSupport.IsGradePointNCountSupported = false;

            if (sourceSynchSupport.IsGradePointStandardDeviationSupported)
                target.GradePointStandardDeviation = source.GradePointStandardDeviation;
            else
                targetSynchSupport.IsGradePointStandardDeviationSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseStudentAcademicRecordFactsAggregatedSessionGradePointAverageSynchronizationSourceSupport 
    {
        bool IsGradePointAverageSupported { get; set; }
        bool IsGradePointNCountSupported { get; set; }
        bool IsGradePointStandardDeviationSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CourseStudentAcademicRecordFactsStudentsEnrolledMapper 
    {
        public static bool SynchronizeTo(this ICourseStudentAcademicRecordFactsStudentsEnrolled source, ICourseStudentAcademicRecordFactsStudentsEnrolled target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseStudentAcademicRecordFactsStudentsEnrolledSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsNumberStudentsEnrolledSupported)
                && target.NumberStudentsEnrolled != source.NumberStudentsEnrolled)
            {
                target.NumberStudentsEnrolled = source.NumberStudentsEnrolled;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPercentAtRiskSupported)
                && target.PercentAtRisk != source.PercentAtRisk)
            {
                target.PercentAtRisk = source.PercentAtRisk;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPercentMobilitySupported)
                && target.PercentMobility != source.PercentMobility)
            {
                target.PercentMobility = source.PercentMobility;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICourseStudentAcademicRecordFactsStudentsEnrolled source, ICourseStudentAcademicRecordFactsStudentsEnrolled target, Action<ICourseStudentAcademicRecordFactsStudentsEnrolled, ICourseStudentAcademicRecordFactsStudentsEnrolled> onMapped)
        {
            var sourceSynchSupport = source as ICourseStudentAcademicRecordFactsStudentsEnrolledSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseStudentAcademicRecordFactsStudentsEnrolledSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsNumberStudentsEnrolledSupported)
                target.NumberStudentsEnrolled = source.NumberStudentsEnrolled;
            else
                targetSynchSupport.IsNumberStudentsEnrolledSupported = false;

            if (sourceSynchSupport.IsPercentAtRiskSupported)
                target.PercentAtRisk = source.PercentAtRisk;
            else
                targetSynchSupport.IsPercentAtRiskSupported = false;

            if (sourceSynchSupport.IsPercentMobilitySupported)
                target.PercentMobility = source.PercentMobility;
            else
                targetSynchSupport.IsPercentMobilitySupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseStudentAcademicRecordFactsStudentsEnrolledSynchronizationSourceSupport 
    {
        bool IsNumberStudentsEnrolledSupported { get; set; }
        bool IsPercentAtRiskSupported { get; set; }
        bool IsPercentMobilitySupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
}
// Aggregate: CourseStudentAssessmentFacts

namespace EdFi.Ods.Entities.Common.TPDM //.CourseStudentAssessmentFactsAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CourseStudentAssessmentFactsMapper 
    {
        public static bool SynchronizeTo(this ICourseStudentAssessmentFacts source, ICourseStudentAssessmentFacts target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseStudentAssessmentFactsSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CourseCode != target.CourseCode)
            {
                source.CourseCode = target.CourseCode;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.FactAsOfDate != target.FactAsOfDate)
            {
                source.FactAsOfDate = target.FactAsOfDate;
            }
            if (source.TakenSchoolYear != target.TakenSchoolYear)
            {
                source.TakenSchoolYear = target.TakenSchoolYear;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAcademicSubjectDescriptorSupported)
                && target.AcademicSubjectDescriptor != source.AcademicSubjectDescriptor)
            {
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAdministrationDateSupported)
                && target.AdministrationDate != source.AdministrationDate)
            {
                target.AdministrationDate = source.AdministrationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAssessmentCategoryDescriptorSupported)
                && target.AssessmentCategoryDescriptor != source.AssessmentCategoryDescriptor)
            {
                target.AssessmentCategoryDescriptor = source.AssessmentCategoryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAssessmentTitleSupported)
                && target.AssessmentTitle != source.AssessmentTitle)
            {
                target.AssessmentTitle = source.AssessmentTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGradeLevelDescriptorSupported)
                && target.GradeLevelDescriptor != source.GradeLevelDescriptor)
            {
                target.GradeLevelDescriptor = source.GradeLevelDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTermDescriptorSupported)
                && target.TermDescriptor != source.TermDescriptor)
            {
                target.TermDescriptor = source.TermDescriptor;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // CourseStudentAssessmentFactsAggregatedScoreResult
            if (sourceSupport == null || sourceSupport.IsCourseStudentAssessmentFactsAggregatedScoreResultSupported)
            {
                if (source.CourseStudentAssessmentFactsAggregatedScoreResult == null)
                {
                    if (target.CourseStudentAssessmentFactsAggregatedScoreResult != null)
                    {
                        target.CourseStudentAssessmentFactsAggregatedScoreResult = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.CourseStudentAssessmentFactsAggregatedScoreResult == null)
                    {
                        var itemType = target.GetType().GetProperty("CourseStudentAssessmentFactsAggregatedScoreResult").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.CourseStudentAssessmentFactsAggregatedScoreResult = (ICourseStudentAssessmentFactsAggregatedScoreResult) newItem;
                    }

                    isModified |= source.CourseStudentAssessmentFactsAggregatedScoreResult.Synchronize(target.CourseStudentAssessmentFactsAggregatedScoreResult);
                }
            }
            // CourseStudentAssessmentFactsStudentsEnrolled
            if (sourceSupport == null || sourceSupport.IsCourseStudentAssessmentFactsStudentsEnrolledSupported)
            {
                if (source.CourseStudentAssessmentFactsStudentsEnrolled == null)
                {
                    if (target.CourseStudentAssessmentFactsStudentsEnrolled != null)
                    {
                        target.CourseStudentAssessmentFactsStudentsEnrolled = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.CourseStudentAssessmentFactsStudentsEnrolled == null)
                    {
                        var itemType = target.GetType().GetProperty("CourseStudentAssessmentFactsStudentsEnrolled").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.CourseStudentAssessmentFactsStudentsEnrolled = (ICourseStudentAssessmentFactsStudentsEnrolled) newItem;
                    }

                    isModified |= source.CourseStudentAssessmentFactsStudentsEnrolled.Synchronize(target.CourseStudentAssessmentFactsStudentsEnrolled);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsCourseStudentAssessmentFactsAggregatedPerformanceLevelsSupported)
            {
                isModified |= 
                    source.CourseStudentAssessmentFactsAggregatedPerformanceLevels.SynchronizeCollectionTo(
                        target.CourseStudentAssessmentFactsAggregatedPerformanceLevels, 
                        onChildAdded: child => 
                            {
                                child.CourseStudentAssessmentFacts = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsCourseStudentAssessmentFactsAggregatedPerformanceLevelIncluded);
            }


            return isModified;
        }



        public static void MapTo(this ICourseStudentAssessmentFacts source, ICourseStudentAssessmentFacts target, Action<ICourseStudentAssessmentFacts, ICourseStudentAssessmentFacts> onMapped)
        {
            var sourceSynchSupport = source as ICourseStudentAssessmentFactsSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseStudentAssessmentFactsSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CourseCode = source.CourseCode;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FactAsOfDate = source.FactAsOfDate;
            target.TakenSchoolYear = source.TakenSchoolYear;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAcademicSubjectDescriptorSupported)
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
            else
                targetSynchSupport.IsAcademicSubjectDescriptorSupported = false;

            if (sourceSynchSupport.IsAdministrationDateSupported)
                target.AdministrationDate = source.AdministrationDate;
            else
                targetSynchSupport.IsAdministrationDateSupported = false;

            if (sourceSynchSupport.IsAssessmentCategoryDescriptorSupported)
                target.AssessmentCategoryDescriptor = source.AssessmentCategoryDescriptor;
            else
                targetSynchSupport.IsAssessmentCategoryDescriptorSupported = false;

            if (sourceSynchSupport.IsAssessmentTitleSupported)
                target.AssessmentTitle = source.AssessmentTitle;
            else
                targetSynchSupport.IsAssessmentTitleSupported = false;

            if (sourceSynchSupport.IsGradeLevelDescriptorSupported)
                target.GradeLevelDescriptor = source.GradeLevelDescriptor;
            else
                targetSynchSupport.IsGradeLevelDescriptorSupported = false;

            if (sourceSynchSupport.IsTermDescriptorSupported)
                target.TermDescriptor = source.TermDescriptor;
            else
                targetSynchSupport.IsTermDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CourseResourceId = source.CourseResourceId;
                target.CourseDiscriminator = source.CourseDiscriminator;
                target.TakenSchoolYearTypeResourceId = source.TakenSchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // CourseStudentAssessmentFactsAggregatedScoreResult (Source)
            if (sourceSynchSupport.IsCourseStudentAssessmentFactsAggregatedScoreResultSupported)
            {
                var itemProperty = target.GetType().GetProperty("CourseStudentAssessmentFactsAggregatedScoreResult");
                
                if (itemProperty != null)
                {                    
                    if (source.CourseStudentAssessmentFactsAggregatedScoreResult == null)
                    {
                        target.CourseStudentAssessmentFactsAggregatedScoreResult = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetCourseStudentAssessmentFactsAggregatedScoreResult = Activator.CreateInstance(itemType);
                        (targetCourseStudentAssessmentFactsAggregatedScoreResult as IChildEntity)?.SetParent(target);
                        source.CourseStudentAssessmentFactsAggregatedScoreResult.Map(targetCourseStudentAssessmentFactsAggregatedScoreResult);
                        
                        // Update the target reference appropriately
                        target.CourseStudentAssessmentFactsAggregatedScoreResult = (ICourseStudentAssessmentFactsAggregatedScoreResult) targetCourseStudentAssessmentFactsAggregatedScoreResult;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsCourseStudentAssessmentFactsAggregatedScoreResultSupported = false; 
            }
            // CourseStudentAssessmentFactsStudentsEnrolled (Source)
            if (sourceSynchSupport.IsCourseStudentAssessmentFactsStudentsEnrolledSupported)
            {
                var itemProperty = target.GetType().GetProperty("CourseStudentAssessmentFactsStudentsEnrolled");
                
                if (itemProperty != null)
                {                    
                    if (source.CourseStudentAssessmentFactsStudentsEnrolled == null)
                    {
                        target.CourseStudentAssessmentFactsStudentsEnrolled = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetCourseStudentAssessmentFactsStudentsEnrolled = Activator.CreateInstance(itemType);
                        (targetCourseStudentAssessmentFactsStudentsEnrolled as IChildEntity)?.SetParent(target);
                        source.CourseStudentAssessmentFactsStudentsEnrolled.Map(targetCourseStudentAssessmentFactsStudentsEnrolled);
                        
                        // Update the target reference appropriately
                        target.CourseStudentAssessmentFactsStudentsEnrolled = (ICourseStudentAssessmentFactsStudentsEnrolled) targetCourseStudentAssessmentFactsStudentsEnrolled;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsCourseStudentAssessmentFactsStudentsEnrolledSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists

            if (sourceSynchSupport.IsCourseStudentAssessmentFactsAggregatedPerformanceLevelsSupported)
            {    
                targetSynchSupport.IsCourseStudentAssessmentFactsAggregatedPerformanceLevelIncluded = sourceSynchSupport.IsCourseStudentAssessmentFactsAggregatedPerformanceLevelIncluded;
                source.CourseStudentAssessmentFactsAggregatedPerformanceLevels.MapCollectionTo(target.CourseStudentAssessmentFactsAggregatedPerformanceLevels, target);
            }
            else
            {
                targetSynchSupport.IsCourseStudentAssessmentFactsAggregatedPerformanceLevelsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseStudentAssessmentFactsSynchronizationSourceSupport 
    {
        bool IsAcademicSubjectDescriptorSupported { get; set; }
        bool IsAdministrationDateSupported { get; set; }
        bool IsAssessmentCategoryDescriptorSupported { get; set; }
        bool IsAssessmentTitleSupported { get; set; }
        bool IsCourseStudentAssessmentFactsAggregatedPerformanceLevelsSupported { get; set; }
        bool IsCourseStudentAssessmentFactsAggregatedScoreResultSupported { get; set; }
        bool IsCourseStudentAssessmentFactsStudentsEnrolledSupported { get; set; }
        bool IsGradeLevelDescriptorSupported { get; set; }
        bool IsTermDescriptorSupported { get; set; }
        Func<ICourseStudentAssessmentFactsAggregatedPerformanceLevel, bool> IsCourseStudentAssessmentFactsAggregatedPerformanceLevelIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CourseStudentAssessmentFactsAggregatedPerformanceLevelMapper 
    {
        public static bool SynchronizeTo(this ICourseStudentAssessmentFactsAggregatedPerformanceLevel source, ICourseStudentAssessmentFactsAggregatedPerformanceLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseStudentAssessmentFactsAggregatedPerformanceLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.PerformanceLevelDescriptor != target.PerformanceLevelDescriptor)
            {
                source.PerformanceLevelDescriptor = target.PerformanceLevelDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsPerformanceLevelMetNumberSupported)
                && target.PerformanceLevelMetNumber != source.PerformanceLevelMetNumber)
            {
                target.PerformanceLevelMetNumber = source.PerformanceLevelMetNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPerformanceLevelMetPercentageSupported)
                && target.PerformanceLevelMetPercentage != source.PerformanceLevelMetPercentage)
            {
                target.PerformanceLevelMetPercentage = source.PerformanceLevelMetPercentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPerformanceLevelTypeNumberSupported)
                && target.PerformanceLevelTypeNumber != source.PerformanceLevelTypeNumber)
            {
                target.PerformanceLevelTypeNumber = source.PerformanceLevelTypeNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPerformanceLevelTypePercentageSupported)
                && target.PerformanceLevelTypePercentage != source.PerformanceLevelTypePercentage)
            {
                target.PerformanceLevelTypePercentage = source.PerformanceLevelTypePercentage;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICourseStudentAssessmentFactsAggregatedPerformanceLevel source, ICourseStudentAssessmentFactsAggregatedPerformanceLevel target, Action<ICourseStudentAssessmentFactsAggregatedPerformanceLevel, ICourseStudentAssessmentFactsAggregatedPerformanceLevel> onMapped)
        {
            var sourceSynchSupport = source as ICourseStudentAssessmentFactsAggregatedPerformanceLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseStudentAssessmentFactsAggregatedPerformanceLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.PerformanceLevelDescriptor = source.PerformanceLevelDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsPerformanceLevelMetNumberSupported)
                target.PerformanceLevelMetNumber = source.PerformanceLevelMetNumber;
            else
                targetSynchSupport.IsPerformanceLevelMetNumberSupported = false;

            if (sourceSynchSupport.IsPerformanceLevelMetPercentageSupported)
                target.PerformanceLevelMetPercentage = source.PerformanceLevelMetPercentage;
            else
                targetSynchSupport.IsPerformanceLevelMetPercentageSupported = false;

            if (sourceSynchSupport.IsPerformanceLevelTypeNumberSupported)
                target.PerformanceLevelTypeNumber = source.PerformanceLevelTypeNumber;
            else
                targetSynchSupport.IsPerformanceLevelTypeNumberSupported = false;

            if (sourceSynchSupport.IsPerformanceLevelTypePercentageSupported)
                target.PerformanceLevelTypePercentage = source.PerformanceLevelTypePercentage;
            else
                targetSynchSupport.IsPerformanceLevelTypePercentageSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseStudentAssessmentFactsAggregatedPerformanceLevelSynchronizationSourceSupport 
    {
        bool IsPerformanceLevelMetNumberSupported { get; set; }
        bool IsPerformanceLevelMetPercentageSupported { get; set; }
        bool IsPerformanceLevelTypeNumberSupported { get; set; }
        bool IsPerformanceLevelTypePercentageSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CourseStudentAssessmentFactsAggregatedScoreResultMapper 
    {
        public static bool SynchronizeTo(this ICourseStudentAssessmentFactsAggregatedScoreResult source, ICourseStudentAssessmentFactsAggregatedScoreResult target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseStudentAssessmentFactsAggregatedScoreResultSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAssessmentReportingMethodDescriptorSupported)
                && target.AssessmentReportingMethodDescriptor != source.AssessmentReportingMethodDescriptor)
            {
                target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAverageScoreResultSupported)
                && target.AverageScoreResult != source.AverageScoreResult)
            {
                target.AverageScoreResult = source.AverageScoreResult;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAverageScoreResultDatatypeTypeDescriptorSupported)
                && target.AverageScoreResultDatatypeTypeDescriptor != source.AverageScoreResultDatatypeTypeDescriptor)
            {
                target.AverageScoreResultDatatypeTypeDescriptor = source.AverageScoreResultDatatypeTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsScoreNCountSupported)
                && target.ScoreNCount != source.ScoreNCount)
            {
                target.ScoreNCount = source.ScoreNCount;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsScoreStandardDeviationSupported)
                && target.ScoreStandardDeviation != source.ScoreStandardDeviation)
            {
                target.ScoreStandardDeviation = source.ScoreStandardDeviation;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICourseStudentAssessmentFactsAggregatedScoreResult source, ICourseStudentAssessmentFactsAggregatedScoreResult target, Action<ICourseStudentAssessmentFactsAggregatedScoreResult, ICourseStudentAssessmentFactsAggregatedScoreResult> onMapped)
        {
            var sourceSynchSupport = source as ICourseStudentAssessmentFactsAggregatedScoreResultSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseStudentAssessmentFactsAggregatedScoreResultSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsAssessmentReportingMethodDescriptorSupported)
                target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;
            else
                targetSynchSupport.IsAssessmentReportingMethodDescriptorSupported = false;

            if (sourceSynchSupport.IsAverageScoreResultSupported)
                target.AverageScoreResult = source.AverageScoreResult;
            else
                targetSynchSupport.IsAverageScoreResultSupported = false;

            if (sourceSynchSupport.IsAverageScoreResultDatatypeTypeDescriptorSupported)
                target.AverageScoreResultDatatypeTypeDescriptor = source.AverageScoreResultDatatypeTypeDescriptor;
            else
                targetSynchSupport.IsAverageScoreResultDatatypeTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsScoreNCountSupported)
                target.ScoreNCount = source.ScoreNCount;
            else
                targetSynchSupport.IsScoreNCountSupported = false;

            if (sourceSynchSupport.IsScoreStandardDeviationSupported)
                target.ScoreStandardDeviation = source.ScoreStandardDeviation;
            else
                targetSynchSupport.IsScoreStandardDeviationSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseStudentAssessmentFactsAggregatedScoreResultSynchronizationSourceSupport 
    {
        bool IsAssessmentReportingMethodDescriptorSupported { get; set; }
        bool IsAverageScoreResultSupported { get; set; }
        bool IsAverageScoreResultDatatypeTypeDescriptorSupported { get; set; }
        bool IsScoreNCountSupported { get; set; }
        bool IsScoreStandardDeviationSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CourseStudentAssessmentFactsStudentsEnrolledMapper 
    {
        public static bool SynchronizeTo(this ICourseStudentAssessmentFactsStudentsEnrolled source, ICourseStudentAssessmentFactsStudentsEnrolled target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseStudentAssessmentFactsStudentsEnrolledSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsNumberStudentsEnrolledSupported)
                && target.NumberStudentsEnrolled != source.NumberStudentsEnrolled)
            {
                target.NumberStudentsEnrolled = source.NumberStudentsEnrolled;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPercentAtRiskSupported)
                && target.PercentAtRisk != source.PercentAtRisk)
            {
                target.PercentAtRisk = source.PercentAtRisk;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPercentMobilitySupported)
                && target.PercentMobility != source.PercentMobility)
            {
                target.PercentMobility = source.PercentMobility;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICourseStudentAssessmentFactsStudentsEnrolled source, ICourseStudentAssessmentFactsStudentsEnrolled target, Action<ICourseStudentAssessmentFactsStudentsEnrolled, ICourseStudentAssessmentFactsStudentsEnrolled> onMapped)
        {
            var sourceSynchSupport = source as ICourseStudentAssessmentFactsStudentsEnrolledSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseStudentAssessmentFactsStudentsEnrolledSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsNumberStudentsEnrolledSupported)
                target.NumberStudentsEnrolled = source.NumberStudentsEnrolled;
            else
                targetSynchSupport.IsNumberStudentsEnrolledSupported = false;

            if (sourceSynchSupport.IsPercentAtRiskSupported)
                target.PercentAtRisk = source.PercentAtRisk;
            else
                targetSynchSupport.IsPercentAtRiskSupported = false;

            if (sourceSynchSupport.IsPercentMobilitySupported)
                target.PercentMobility = source.PercentMobility;
            else
                targetSynchSupport.IsPercentMobilitySupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseStudentAssessmentFactsStudentsEnrolledSynchronizationSourceSupport 
    {
        bool IsNumberStudentsEnrolledSupported { get; set; }
        bool IsPercentAtRiskSupported { get; set; }
        bool IsPercentMobilitySupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
}
// Aggregate: CourseStudentFacts

namespace EdFi.Ods.Entities.Common.TPDM //.CourseStudentFactsAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CourseStudentFactsMapper 
    {
        public static bool SynchronizeTo(this ICourseStudentFacts source, ICourseStudentFacts target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseStudentFactsSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CourseCode != target.CourseCode)
            {
                source.CourseCode = target.CourseCode;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.FactAsOfDate != target.FactAsOfDate)
            {
                source.FactAsOfDate = target.FactAsOfDate;
            }

            // Copy non-PK properties

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled
            if (sourceSupport == null || sourceSupport.IsCourseStudentFactsAggregatedDisabilityTotalStudentsDisabledSupported)
            {
                if (source.CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled == null)
                {
                    if (target.CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled != null)
                    {
                        target.CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled == null)
                    {
                        var itemType = target.GetType().GetProperty("CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled = (ICourseStudentFactsAggregatedDisabilityTotalStudentsDisabled) newItem;
                    }

                    isModified |= source.CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled.Synchronize(target.CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled);
                }
            }
            // CourseStudentFactsAggregatedELLEnrollment
            if (sourceSupport == null || sourceSupport.IsCourseStudentFactsAggregatedELLEnrollmentSupported)
            {
                if (source.CourseStudentFactsAggregatedELLEnrollment == null)
                {
                    if (target.CourseStudentFactsAggregatedELLEnrollment != null)
                    {
                        target.CourseStudentFactsAggregatedELLEnrollment = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.CourseStudentFactsAggregatedELLEnrollment == null)
                    {
                        var itemType = target.GetType().GetProperty("CourseStudentFactsAggregatedELLEnrollment").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.CourseStudentFactsAggregatedELLEnrollment = (ICourseStudentFactsAggregatedELLEnrollment) newItem;
                    }

                    isModified |= source.CourseStudentFactsAggregatedELLEnrollment.Synchronize(target.CourseStudentFactsAggregatedELLEnrollment);
                }
            }
            // CourseStudentFactsAggregatedESLEnrollment
            if (sourceSupport == null || sourceSupport.IsCourseStudentFactsAggregatedESLEnrollmentSupported)
            {
                if (source.CourseStudentFactsAggregatedESLEnrollment == null)
                {
                    if (target.CourseStudentFactsAggregatedESLEnrollment != null)
                    {
                        target.CourseStudentFactsAggregatedESLEnrollment = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.CourseStudentFactsAggregatedESLEnrollment == null)
                    {
                        var itemType = target.GetType().GetProperty("CourseStudentFactsAggregatedESLEnrollment").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.CourseStudentFactsAggregatedESLEnrollment = (ICourseStudentFactsAggregatedESLEnrollment) newItem;
                    }

                    isModified |= source.CourseStudentFactsAggregatedESLEnrollment.Synchronize(target.CourseStudentFactsAggregatedESLEnrollment);
                }
            }
            // CourseStudentFactsAggregatedSection504Enrollment
            if (sourceSupport == null || sourceSupport.IsCourseStudentFactsAggregatedSection504EnrollmentSupported)
            {
                if (source.CourseStudentFactsAggregatedSection504Enrollment == null)
                {
                    if (target.CourseStudentFactsAggregatedSection504Enrollment != null)
                    {
                        target.CourseStudentFactsAggregatedSection504Enrollment = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.CourseStudentFactsAggregatedSection504Enrollment == null)
                    {
                        var itemType = target.GetType().GetProperty("CourseStudentFactsAggregatedSection504Enrollment").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.CourseStudentFactsAggregatedSection504Enrollment = (ICourseStudentFactsAggregatedSection504Enrollment) newItem;
                    }

                    isModified |= source.CourseStudentFactsAggregatedSection504Enrollment.Synchronize(target.CourseStudentFactsAggregatedSection504Enrollment);
                }
            }
            // CourseStudentFactsAggregatedSPED
            if (sourceSupport == null || sourceSupport.IsCourseStudentFactsAggregatedSPEDSupported)
            {
                if (source.CourseStudentFactsAggregatedSPED == null)
                {
                    if (target.CourseStudentFactsAggregatedSPED != null)
                    {
                        target.CourseStudentFactsAggregatedSPED = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.CourseStudentFactsAggregatedSPED == null)
                    {
                        var itemType = target.GetType().GetProperty("CourseStudentFactsAggregatedSPED").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.CourseStudentFactsAggregatedSPED = (ICourseStudentFactsAggregatedSPED) newItem;
                    }

                    isModified |= source.CourseStudentFactsAggregatedSPED.Synchronize(target.CourseStudentFactsAggregatedSPED);
                }
            }
            // CourseStudentFactsAggregatedTitleIEnrollment
            if (sourceSupport == null || sourceSupport.IsCourseStudentFactsAggregatedTitleIEnrollmentSupported)
            {
                if (source.CourseStudentFactsAggregatedTitleIEnrollment == null)
                {
                    if (target.CourseStudentFactsAggregatedTitleIEnrollment != null)
                    {
                        target.CourseStudentFactsAggregatedTitleIEnrollment = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.CourseStudentFactsAggregatedTitleIEnrollment == null)
                    {
                        var itemType = target.GetType().GetProperty("CourseStudentFactsAggregatedTitleIEnrollment").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.CourseStudentFactsAggregatedTitleIEnrollment = (ICourseStudentFactsAggregatedTitleIEnrollment) newItem;
                    }

                    isModified |= source.CourseStudentFactsAggregatedTitleIEnrollment.Synchronize(target.CourseStudentFactsAggregatedTitleIEnrollment);
                }
            }
            // CourseStudentFactsStudentsEnrolled
            if (sourceSupport == null || sourceSupport.IsCourseStudentFactsStudentsEnrolledSupported)
            {
                if (source.CourseStudentFactsStudentsEnrolled == null)
                {
                    if (target.CourseStudentFactsStudentsEnrolled != null)
                    {
                        target.CourseStudentFactsStudentsEnrolled = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.CourseStudentFactsStudentsEnrolled == null)
                    {
                        var itemType = target.GetType().GetProperty("CourseStudentFactsStudentsEnrolled").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.CourseStudentFactsStudentsEnrolled = (ICourseStudentFactsStudentsEnrolled) newItem;
                    }

                    isModified |= source.CourseStudentFactsStudentsEnrolled.Synchronize(target.CourseStudentFactsStudentsEnrolled);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsCourseStudentFactsAggregatedByDisabilitiesSupported)
            {
                isModified |= 
                    source.CourseStudentFactsAggregatedByDisabilities.SynchronizeCollectionTo(
                        target.CourseStudentFactsAggregatedByDisabilities, 
                        onChildAdded: child => 
                            {
                                child.CourseStudentFacts = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsCourseStudentFactsAggregatedByDisabilityIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCourseStudentFactsAggregatedGendersSupported)
            {
                isModified |= 
                    source.CourseStudentFactsAggregatedGenders.SynchronizeCollectionTo(
                        target.CourseStudentFactsAggregatedGenders, 
                        onChildAdded: child => 
                            {
                                child.CourseStudentFacts = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsCourseStudentFactsAggregatedGenderIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCourseStudentFactsAggregatedHispanicLatinoEthnicitiesSupported)
            {
                isModified |= 
                    source.CourseStudentFactsAggregatedHispanicLatinoEthnicities.SynchronizeCollectionTo(
                        target.CourseStudentFactsAggregatedHispanicLatinoEthnicities, 
                        onChildAdded: child => 
                            {
                                child.CourseStudentFacts = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsCourseStudentFactsAggregatedHispanicLatinoEthnicityIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCourseStudentFactsAggregatedLanguagesSupported)
            {
                isModified |= 
                    source.CourseStudentFactsAggregatedLanguages.SynchronizeCollectionTo(
                        target.CourseStudentFactsAggregatedLanguages, 
                        onChildAdded: child => 
                            {
                                child.CourseStudentFacts = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsCourseStudentFactsAggregatedLanguageIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCourseStudentFactsAggregatedRacesSupported)
            {
                isModified |= 
                    source.CourseStudentFactsAggregatedRaces.SynchronizeCollectionTo(
                        target.CourseStudentFactsAggregatedRaces, 
                        onChildAdded: child => 
                            {
                                child.CourseStudentFacts = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsCourseStudentFactsAggregatedRaceIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCourseStudentFactsAggregatedSchoolFoodServiceProgramServicesSupported)
            {
                isModified |= 
                    source.CourseStudentFactsAggregatedSchoolFoodServiceProgramServices.SynchronizeCollectionTo(
                        target.CourseStudentFactsAggregatedSchoolFoodServiceProgramServices, 
                        onChildAdded: child => 
                            {
                                child.CourseStudentFacts = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsCourseStudentFactsAggregatedSchoolFoodServiceProgramServiceIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCourseStudentFactsAggregatedSexesSupported)
            {
                isModified |= 
                    source.CourseStudentFactsAggregatedSexes.SynchronizeCollectionTo(
                        target.CourseStudentFactsAggregatedSexes, 
                        onChildAdded: child => 
                            {
                                child.CourseStudentFacts = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsCourseStudentFactsAggregatedSexIncluded);
            }


            return isModified;
        }



        public static void MapTo(this ICourseStudentFacts source, ICourseStudentFacts target, Action<ICourseStudentFacts, ICourseStudentFacts> onMapped)
        {
            var sourceSynchSupport = source as ICourseStudentFactsSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseStudentFactsSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CourseCode = source.CourseCode;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FactAsOfDate = source.FactAsOfDate;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CourseResourceId = source.CourseResourceId;
                target.CourseDiscriminator = source.CourseDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled (Source)
            if (sourceSynchSupport.IsCourseStudentFactsAggregatedDisabilityTotalStudentsDisabledSupported)
            {
                var itemProperty = target.GetType().GetProperty("CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled");
                
                if (itemProperty != null)
                {                    
                    if (source.CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled == null)
                    {
                        target.CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetCourseStudentFactsAggregatedDisabilityTotalStudentsDisabled = Activator.CreateInstance(itemType);
                        (targetCourseStudentFactsAggregatedDisabilityTotalStudentsDisabled as IChildEntity)?.SetParent(target);
                        source.CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled.Map(targetCourseStudentFactsAggregatedDisabilityTotalStudentsDisabled);
                        
                        // Update the target reference appropriately
                        target.CourseStudentFactsAggregatedDisabilityTotalStudentsDisabled = (ICourseStudentFactsAggregatedDisabilityTotalStudentsDisabled) targetCourseStudentFactsAggregatedDisabilityTotalStudentsDisabled;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsCourseStudentFactsAggregatedDisabilityTotalStudentsDisabledSupported = false; 
            }
            // CourseStudentFactsAggregatedELLEnrollment (Source)
            if (sourceSynchSupport.IsCourseStudentFactsAggregatedELLEnrollmentSupported)
            {
                var itemProperty = target.GetType().GetProperty("CourseStudentFactsAggregatedELLEnrollment");
                
                if (itemProperty != null)
                {                    
                    if (source.CourseStudentFactsAggregatedELLEnrollment == null)
                    {
                        target.CourseStudentFactsAggregatedELLEnrollment = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetCourseStudentFactsAggregatedELLEnrollment = Activator.CreateInstance(itemType);
                        (targetCourseStudentFactsAggregatedELLEnrollment as IChildEntity)?.SetParent(target);
                        source.CourseStudentFactsAggregatedELLEnrollment.Map(targetCourseStudentFactsAggregatedELLEnrollment);
                        
                        // Update the target reference appropriately
                        target.CourseStudentFactsAggregatedELLEnrollment = (ICourseStudentFactsAggregatedELLEnrollment) targetCourseStudentFactsAggregatedELLEnrollment;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsCourseStudentFactsAggregatedELLEnrollmentSupported = false; 
            }
            // CourseStudentFactsAggregatedESLEnrollment (Source)
            if (sourceSynchSupport.IsCourseStudentFactsAggregatedESLEnrollmentSupported)
            {
                var itemProperty = target.GetType().GetProperty("CourseStudentFactsAggregatedESLEnrollment");
                
                if (itemProperty != null)
                {                    
                    if (source.CourseStudentFactsAggregatedESLEnrollment == null)
                    {
                        target.CourseStudentFactsAggregatedESLEnrollment = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetCourseStudentFactsAggregatedESLEnrollment = Activator.CreateInstance(itemType);
                        (targetCourseStudentFactsAggregatedESLEnrollment as IChildEntity)?.SetParent(target);
                        source.CourseStudentFactsAggregatedESLEnrollment.Map(targetCourseStudentFactsAggregatedESLEnrollment);
                        
                        // Update the target reference appropriately
                        target.CourseStudentFactsAggregatedESLEnrollment = (ICourseStudentFactsAggregatedESLEnrollment) targetCourseStudentFactsAggregatedESLEnrollment;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsCourseStudentFactsAggregatedESLEnrollmentSupported = false; 
            }
            // CourseStudentFactsAggregatedSection504Enrollment (Source)
            if (sourceSynchSupport.IsCourseStudentFactsAggregatedSection504EnrollmentSupported)
            {
                var itemProperty = target.GetType().GetProperty("CourseStudentFactsAggregatedSection504Enrollment");
                
                if (itemProperty != null)
                {                    
                    if (source.CourseStudentFactsAggregatedSection504Enrollment == null)
                    {
                        target.CourseStudentFactsAggregatedSection504Enrollment = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetCourseStudentFactsAggregatedSection504Enrollment = Activator.CreateInstance(itemType);
                        (targetCourseStudentFactsAggregatedSection504Enrollment as IChildEntity)?.SetParent(target);
                        source.CourseStudentFactsAggregatedSection504Enrollment.Map(targetCourseStudentFactsAggregatedSection504Enrollment);
                        
                        // Update the target reference appropriately
                        target.CourseStudentFactsAggregatedSection504Enrollment = (ICourseStudentFactsAggregatedSection504Enrollment) targetCourseStudentFactsAggregatedSection504Enrollment;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsCourseStudentFactsAggregatedSection504EnrollmentSupported = false; 
            }
            // CourseStudentFactsAggregatedSPED (Source)
            if (sourceSynchSupport.IsCourseStudentFactsAggregatedSPEDSupported)
            {
                var itemProperty = target.GetType().GetProperty("CourseStudentFactsAggregatedSPED");
                
                if (itemProperty != null)
                {                    
                    if (source.CourseStudentFactsAggregatedSPED == null)
                    {
                        target.CourseStudentFactsAggregatedSPED = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetCourseStudentFactsAggregatedSPED = Activator.CreateInstance(itemType);
                        (targetCourseStudentFactsAggregatedSPED as IChildEntity)?.SetParent(target);
                        source.CourseStudentFactsAggregatedSPED.Map(targetCourseStudentFactsAggregatedSPED);
                        
                        // Update the target reference appropriately
                        target.CourseStudentFactsAggregatedSPED = (ICourseStudentFactsAggregatedSPED) targetCourseStudentFactsAggregatedSPED;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsCourseStudentFactsAggregatedSPEDSupported = false; 
            }
            // CourseStudentFactsAggregatedTitleIEnrollment (Source)
            if (sourceSynchSupport.IsCourseStudentFactsAggregatedTitleIEnrollmentSupported)
            {
                var itemProperty = target.GetType().GetProperty("CourseStudentFactsAggregatedTitleIEnrollment");
                
                if (itemProperty != null)
                {                    
                    if (source.CourseStudentFactsAggregatedTitleIEnrollment == null)
                    {
                        target.CourseStudentFactsAggregatedTitleIEnrollment = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetCourseStudentFactsAggregatedTitleIEnrollment = Activator.CreateInstance(itemType);
                        (targetCourseStudentFactsAggregatedTitleIEnrollment as IChildEntity)?.SetParent(target);
                        source.CourseStudentFactsAggregatedTitleIEnrollment.Map(targetCourseStudentFactsAggregatedTitleIEnrollment);
                        
                        // Update the target reference appropriately
                        target.CourseStudentFactsAggregatedTitleIEnrollment = (ICourseStudentFactsAggregatedTitleIEnrollment) targetCourseStudentFactsAggregatedTitleIEnrollment;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsCourseStudentFactsAggregatedTitleIEnrollmentSupported = false; 
            }
            // CourseStudentFactsStudentsEnrolled (Source)
            if (sourceSynchSupport.IsCourseStudentFactsStudentsEnrolledSupported)
            {
                var itemProperty = target.GetType().GetProperty("CourseStudentFactsStudentsEnrolled");
                
                if (itemProperty != null)
                {                    
                    if (source.CourseStudentFactsStudentsEnrolled == null)
                    {
                        target.CourseStudentFactsStudentsEnrolled = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetCourseStudentFactsStudentsEnrolled = Activator.CreateInstance(itemType);
                        (targetCourseStudentFactsStudentsEnrolled as IChildEntity)?.SetParent(target);
                        source.CourseStudentFactsStudentsEnrolled.Map(targetCourseStudentFactsStudentsEnrolled);
                        
                        // Update the target reference appropriately
                        target.CourseStudentFactsStudentsEnrolled = (ICourseStudentFactsStudentsEnrolled) targetCourseStudentFactsStudentsEnrolled;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsCourseStudentFactsStudentsEnrolledSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists

            if (sourceSynchSupport.IsCourseStudentFactsAggregatedByDisabilitiesSupported)
            {    
                targetSynchSupport.IsCourseStudentFactsAggregatedByDisabilityIncluded = sourceSynchSupport.IsCourseStudentFactsAggregatedByDisabilityIncluded;
                source.CourseStudentFactsAggregatedByDisabilities.MapCollectionTo(target.CourseStudentFactsAggregatedByDisabilities, target);
            }
            else
            {
                targetSynchSupport.IsCourseStudentFactsAggregatedByDisabilitiesSupported = false;
            }

            if (sourceSynchSupport.IsCourseStudentFactsAggregatedGendersSupported)
            {    
                targetSynchSupport.IsCourseStudentFactsAggregatedGenderIncluded = sourceSynchSupport.IsCourseStudentFactsAggregatedGenderIncluded;
                source.CourseStudentFactsAggregatedGenders.MapCollectionTo(target.CourseStudentFactsAggregatedGenders, target);
            }
            else
            {
                targetSynchSupport.IsCourseStudentFactsAggregatedGendersSupported = false;
            }

            if (sourceSynchSupport.IsCourseStudentFactsAggregatedHispanicLatinoEthnicitiesSupported)
            {    
                targetSynchSupport.IsCourseStudentFactsAggregatedHispanicLatinoEthnicityIncluded = sourceSynchSupport.IsCourseStudentFactsAggregatedHispanicLatinoEthnicityIncluded;
                source.CourseStudentFactsAggregatedHispanicLatinoEthnicities.MapCollectionTo(target.CourseStudentFactsAggregatedHispanicLatinoEthnicities, target);
            }
            else
            {
                targetSynchSupport.IsCourseStudentFactsAggregatedHispanicLatinoEthnicitiesSupported = false;
            }

            if (sourceSynchSupport.IsCourseStudentFactsAggregatedLanguagesSupported)
            {    
                targetSynchSupport.IsCourseStudentFactsAggregatedLanguageIncluded = sourceSynchSupport.IsCourseStudentFactsAggregatedLanguageIncluded;
                source.CourseStudentFactsAggregatedLanguages.MapCollectionTo(target.CourseStudentFactsAggregatedLanguages, target);
            }
            else
            {
                targetSynchSupport.IsCourseStudentFactsAggregatedLanguagesSupported = false;
            }

            if (sourceSynchSupport.IsCourseStudentFactsAggregatedRacesSupported)
            {    
                targetSynchSupport.IsCourseStudentFactsAggregatedRaceIncluded = sourceSynchSupport.IsCourseStudentFactsAggregatedRaceIncluded;
                source.CourseStudentFactsAggregatedRaces.MapCollectionTo(target.CourseStudentFactsAggregatedRaces, target);
            }
            else
            {
                targetSynchSupport.IsCourseStudentFactsAggregatedRacesSupported = false;
            }

            if (sourceSynchSupport.IsCourseStudentFactsAggregatedSchoolFoodServiceProgramServicesSupported)
            {    
                targetSynchSupport.IsCourseStudentFactsAggregatedSchoolFoodServiceProgramServiceIncluded = sourceSynchSupport.IsCourseStudentFactsAggregatedSchoolFoodServiceProgramServiceIncluded;
                source.CourseStudentFactsAggregatedSchoolFoodServiceProgramServices.MapCollectionTo(target.CourseStudentFactsAggregatedSchoolFoodServiceProgramServices, target);
            }
            else
            {
                targetSynchSupport.IsCourseStudentFactsAggregatedSchoolFoodServiceProgramServicesSupported = false;
            }

            if (sourceSynchSupport.IsCourseStudentFactsAggregatedSexesSupported)
            {    
                targetSynchSupport.IsCourseStudentFactsAggregatedSexIncluded = sourceSynchSupport.IsCourseStudentFactsAggregatedSexIncluded;
                source.CourseStudentFactsAggregatedSexes.MapCollectionTo(target.CourseStudentFactsAggregatedSexes, target);
            }
            else
            {
                targetSynchSupport.IsCourseStudentFactsAggregatedSexesSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseStudentFactsSynchronizationSourceSupport 
    {
        bool IsCourseStudentFactsAggregatedByDisabilitiesSupported { get; set; }
        bool IsCourseStudentFactsAggregatedDisabilityTotalStudentsDisabledSupported { get; set; }
        bool IsCourseStudentFactsAggregatedELLEnrollmentSupported { get; set; }
        bool IsCourseStudentFactsAggregatedESLEnrollmentSupported { get; set; }
        bool IsCourseStudentFactsAggregatedGendersSupported { get; set; }
        bool IsCourseStudentFactsAggregatedHispanicLatinoEthnicitiesSupported { get; set; }
        bool IsCourseStudentFactsAggregatedLanguagesSupported { get; set; }
        bool IsCourseStudentFactsAggregatedRacesSupported { get; set; }
        bool IsCourseStudentFactsAggregatedSchoolFoodServiceProgramServicesSupported { get; set; }
        bool IsCourseStudentFactsAggregatedSection504EnrollmentSupported { get; set; }
        bool IsCourseStudentFactsAggregatedSexesSupported { get; set; }
        bool IsCourseStudentFactsAggregatedSPEDSupported { get; set; }
        bool IsCourseStudentFactsAggregatedTitleIEnrollmentSupported { get; set; }
        bool IsCourseStudentFactsStudentsEnrolledSupported { get; set; }
        Func<ICourseStudentFactsAggregatedByDisability, bool> IsCourseStudentFactsAggregatedByDisabilityIncluded { get; set; }
        Func<ICourseStudentFactsAggregatedGender, bool> IsCourseStudentFactsAggregatedGenderIncluded { get; set; }
        Func<ICourseStudentFactsAggregatedHispanicLatinoEthnicity, bool> IsCourseStudentFactsAggregatedHispanicLatinoEthnicityIncluded { get; set; }
        Func<ICourseStudentFactsAggregatedLanguage, bool> IsCourseStudentFactsAggregatedLanguageIncluded { get; set; }
        Func<ICourseStudentFactsAggregatedRace, bool> IsCourseStudentFactsAggregatedRaceIncluded { get; set; }
        Func<ICourseStudentFactsAggregatedSchoolFoodServiceProgramService, bool> IsCourseStudentFactsAggregatedSchoolFoodServiceProgramServiceIncluded { get; set; }
        Func<ICourseStudentFactsAggregatedSex, bool> IsCourseStudentFactsAggregatedSexIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CourseStudentFactsAggregatedByDisabilityMapper 
    {
        public static bool SynchronizeTo(this ICourseStudentFactsAggregatedByDisability source, ICourseStudentFactsAggregatedByDisability target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseStudentFactsAggregatedByDisabilitySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisabilityDescriptor != target.DisabilityDescriptor)
            {
                source.DisabilityDescriptor = target.DisabilityDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsPercentageSupported)
                && target.Percentage != source.Percentage)
            {
                target.Percentage = source.Percentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTypeNumberSupported)
                && target.TypeNumber != source.TypeNumber)
            {
                target.TypeNumber = source.TypeNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICourseStudentFactsAggregatedByDisability source, ICourseStudentFactsAggregatedByDisability target, Action<ICourseStudentFactsAggregatedByDisability, ICourseStudentFactsAggregatedByDisability> onMapped)
        {
            var sourceSynchSupport = source as ICourseStudentFactsAggregatedByDisabilitySynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseStudentFactsAggregatedByDisabilitySynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DisabilityDescriptor = source.DisabilityDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsPercentageSupported)
                target.Percentage = source.Percentage;
            else
                targetSynchSupport.IsPercentageSupported = false;

            if (sourceSynchSupport.IsTypeNumberSupported)
                target.TypeNumber = source.TypeNumber;
            else
                targetSynchSupport.IsTypeNumberSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseStudentFactsAggregatedByDisabilitySynchronizationSourceSupport 
    {
        bool IsPercentageSupported { get; set; }
        bool IsTypeNumberSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CourseStudentFactsAggregatedDisabilityTotalStudentsDisabledMapper 
    {
        public static bool SynchronizeTo(this ICourseStudentFactsAggregatedDisabilityTotalStudentsDisabled source, ICourseStudentFactsAggregatedDisabilityTotalStudentsDisabled target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseStudentFactsAggregatedDisabilityTotalStudentsDisabledSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsStudentsDisabledNumberSupported)
                && target.StudentsDisabledNumber != source.StudentsDisabledNumber)
            {
                target.StudentsDisabledNumber = source.StudentsDisabledNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStudentsDisabledPercentageSupported)
                && target.StudentsDisabledPercentage != source.StudentsDisabledPercentage)
            {
                target.StudentsDisabledPercentage = source.StudentsDisabledPercentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICourseStudentFactsAggregatedDisabilityTotalStudentsDisabled source, ICourseStudentFactsAggregatedDisabilityTotalStudentsDisabled target, Action<ICourseStudentFactsAggregatedDisabilityTotalStudentsDisabled, ICourseStudentFactsAggregatedDisabilityTotalStudentsDisabled> onMapped)
        {
            var sourceSynchSupport = source as ICourseStudentFactsAggregatedDisabilityTotalStudentsDisabledSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseStudentFactsAggregatedDisabilityTotalStudentsDisabledSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsStudentsDisabledNumberSupported)
                target.StudentsDisabledNumber = source.StudentsDisabledNumber;
            else
                targetSynchSupport.IsStudentsDisabledNumberSupported = false;

            if (sourceSynchSupport.IsStudentsDisabledPercentageSupported)
                target.StudentsDisabledPercentage = source.StudentsDisabledPercentage;
            else
                targetSynchSupport.IsStudentsDisabledPercentageSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseStudentFactsAggregatedDisabilityTotalStudentsDisabledSynchronizationSourceSupport 
    {
        bool IsStudentsDisabledNumberSupported { get; set; }
        bool IsStudentsDisabledPercentageSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CourseStudentFactsAggregatedELLEnrollmentMapper 
    {
        public static bool SynchronizeTo(this ICourseStudentFactsAggregatedELLEnrollment source, ICourseStudentFactsAggregatedELLEnrollment target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseStudentFactsAggregatedELLEnrollmentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsELLEnrollmentNumberSupported)
                && target.ELLEnrollmentNumber != source.ELLEnrollmentNumber)
            {
                target.ELLEnrollmentNumber = source.ELLEnrollmentNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsELLEnrollmentPercentageSupported)
                && target.ELLEnrollmentPercentage != source.ELLEnrollmentPercentage)
            {
                target.ELLEnrollmentPercentage = source.ELLEnrollmentPercentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICourseStudentFactsAggregatedELLEnrollment source, ICourseStudentFactsAggregatedELLEnrollment target, Action<ICourseStudentFactsAggregatedELLEnrollment, ICourseStudentFactsAggregatedELLEnrollment> onMapped)
        {
            var sourceSynchSupport = source as ICourseStudentFactsAggregatedELLEnrollmentSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseStudentFactsAggregatedELLEnrollmentSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsELLEnrollmentNumberSupported)
                target.ELLEnrollmentNumber = source.ELLEnrollmentNumber;
            else
                targetSynchSupport.IsELLEnrollmentNumberSupported = false;

            if (sourceSynchSupport.IsELLEnrollmentPercentageSupported)
                target.ELLEnrollmentPercentage = source.ELLEnrollmentPercentage;
            else
                targetSynchSupport.IsELLEnrollmentPercentageSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseStudentFactsAggregatedELLEnrollmentSynchronizationSourceSupport 
    {
        bool IsELLEnrollmentNumberSupported { get; set; }
        bool IsELLEnrollmentPercentageSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CourseStudentFactsAggregatedESLEnrollmentMapper 
    {
        public static bool SynchronizeTo(this ICourseStudentFactsAggregatedESLEnrollment source, ICourseStudentFactsAggregatedESLEnrollment target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseStudentFactsAggregatedESLEnrollmentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsESLEnrollmentNumberSupported)
                && target.ESLEnrollmentNumber != source.ESLEnrollmentNumber)
            {
                target.ESLEnrollmentNumber = source.ESLEnrollmentNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsESLEnrollmentPercentageSupported)
                && target.ESLEnrollmentPercentage != source.ESLEnrollmentPercentage)
            {
                target.ESLEnrollmentPercentage = source.ESLEnrollmentPercentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICourseStudentFactsAggregatedESLEnrollment source, ICourseStudentFactsAggregatedESLEnrollment target, Action<ICourseStudentFactsAggregatedESLEnrollment, ICourseStudentFactsAggregatedESLEnrollment> onMapped)
        {
            var sourceSynchSupport = source as ICourseStudentFactsAggregatedESLEnrollmentSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseStudentFactsAggregatedESLEnrollmentSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsESLEnrollmentNumberSupported)
                target.ESLEnrollmentNumber = source.ESLEnrollmentNumber;
            else
                targetSynchSupport.IsESLEnrollmentNumberSupported = false;

            if (sourceSynchSupport.IsESLEnrollmentPercentageSupported)
                target.ESLEnrollmentPercentage = source.ESLEnrollmentPercentage;
            else
                targetSynchSupport.IsESLEnrollmentPercentageSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseStudentFactsAggregatedESLEnrollmentSynchronizationSourceSupport 
    {
        bool IsESLEnrollmentNumberSupported { get; set; }
        bool IsESLEnrollmentPercentageSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CourseStudentFactsAggregatedGenderMapper 
    {
        public static bool SynchronizeTo(this ICourseStudentFactsAggregatedGender source, ICourseStudentFactsAggregatedGender target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseStudentFactsAggregatedGenderSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GenderDescriptor != target.GenderDescriptor)
            {
                source.GenderDescriptor = target.GenderDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsGenderTypeNumberSupported)
                && target.GenderTypeNumber != source.GenderTypeNumber)
            {
                target.GenderTypeNumber = source.GenderTypeNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGenderTypePercentageSupported)
                && target.GenderTypePercentage != source.GenderTypePercentage)
            {
                target.GenderTypePercentage = source.GenderTypePercentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICourseStudentFactsAggregatedGender source, ICourseStudentFactsAggregatedGender target, Action<ICourseStudentFactsAggregatedGender, ICourseStudentFactsAggregatedGender> onMapped)
        {
            var sourceSynchSupport = source as ICourseStudentFactsAggregatedGenderSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseStudentFactsAggregatedGenderSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GenderDescriptor = source.GenderDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsGenderTypeNumberSupported)
                target.GenderTypeNumber = source.GenderTypeNumber;
            else
                targetSynchSupport.IsGenderTypeNumberSupported = false;

            if (sourceSynchSupport.IsGenderTypePercentageSupported)
                target.GenderTypePercentage = source.GenderTypePercentage;
            else
                targetSynchSupport.IsGenderTypePercentageSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseStudentFactsAggregatedGenderSynchronizationSourceSupport 
    {
        bool IsGenderTypeNumberSupported { get; set; }
        bool IsGenderTypePercentageSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CourseStudentFactsAggregatedHispanicLatinoEthnicityMapper 
    {
        public static bool SynchronizeTo(this ICourseStudentFactsAggregatedHispanicLatinoEthnicity source, ICourseStudentFactsAggregatedHispanicLatinoEthnicity target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseStudentFactsAggregatedHispanicLatinoEthnicitySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.HispanicLatinoEthnicity != target.HispanicLatinoEthnicity)
            {
                source.HispanicLatinoEthnicity = target.HispanicLatinoEthnicity;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsHispanicLatinoEthnicityNumberSupported)
                && target.HispanicLatinoEthnicityNumber != source.HispanicLatinoEthnicityNumber)
            {
                target.HispanicLatinoEthnicityNumber = source.HispanicLatinoEthnicityNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHispanicLatinoEthnicityPercentageSupported)
                && target.HispanicLatinoEthnicityPercentage != source.HispanicLatinoEthnicityPercentage)
            {
                target.HispanicLatinoEthnicityPercentage = source.HispanicLatinoEthnicityPercentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICourseStudentFactsAggregatedHispanicLatinoEthnicity source, ICourseStudentFactsAggregatedHispanicLatinoEthnicity target, Action<ICourseStudentFactsAggregatedHispanicLatinoEthnicity, ICourseStudentFactsAggregatedHispanicLatinoEthnicity> onMapped)
        {
            var sourceSynchSupport = source as ICourseStudentFactsAggregatedHispanicLatinoEthnicitySynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseStudentFactsAggregatedHispanicLatinoEthnicitySynchronizationSourceSupport;

            // Copy contextual primary key values
            target.HispanicLatinoEthnicity = source.HispanicLatinoEthnicity;

            // Copy non-PK properties

            if (sourceSynchSupport.IsHispanicLatinoEthnicityNumberSupported)
                target.HispanicLatinoEthnicityNumber = source.HispanicLatinoEthnicityNumber;
            else
                targetSynchSupport.IsHispanicLatinoEthnicityNumberSupported = false;

            if (sourceSynchSupport.IsHispanicLatinoEthnicityPercentageSupported)
                target.HispanicLatinoEthnicityPercentage = source.HispanicLatinoEthnicityPercentage;
            else
                targetSynchSupport.IsHispanicLatinoEthnicityPercentageSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseStudentFactsAggregatedHispanicLatinoEthnicitySynchronizationSourceSupport 
    {
        bool IsHispanicLatinoEthnicityNumberSupported { get; set; }
        bool IsHispanicLatinoEthnicityPercentageSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CourseStudentFactsAggregatedLanguageMapper 
    {
        public static bool SynchronizeTo(this ICourseStudentFactsAggregatedLanguage source, ICourseStudentFactsAggregatedLanguage target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseStudentFactsAggregatedLanguageSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LanguageDescriptor != target.LanguageDescriptor)
            {
                source.LanguageDescriptor = target.LanguageDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsLanguageTypeNumberSupported)
                && target.LanguageTypeNumber != source.LanguageTypeNumber)
            {
                target.LanguageTypeNumber = source.LanguageTypeNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLanguageTypePercentageSupported)
                && target.LanguageTypePercentage != source.LanguageTypePercentage)
            {
                target.LanguageTypePercentage = source.LanguageTypePercentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICourseStudentFactsAggregatedLanguage source, ICourseStudentFactsAggregatedLanguage target, Action<ICourseStudentFactsAggregatedLanguage, ICourseStudentFactsAggregatedLanguage> onMapped)
        {
            var sourceSynchSupport = source as ICourseStudentFactsAggregatedLanguageSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseStudentFactsAggregatedLanguageSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LanguageDescriptor = source.LanguageDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsLanguageTypeNumberSupported)
                target.LanguageTypeNumber = source.LanguageTypeNumber;
            else
                targetSynchSupport.IsLanguageTypeNumberSupported = false;

            if (sourceSynchSupport.IsLanguageTypePercentageSupported)
                target.LanguageTypePercentage = source.LanguageTypePercentage;
            else
                targetSynchSupport.IsLanguageTypePercentageSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseStudentFactsAggregatedLanguageSynchronizationSourceSupport 
    {
        bool IsLanguageTypeNumberSupported { get; set; }
        bool IsLanguageTypePercentageSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CourseStudentFactsAggregatedRaceMapper 
    {
        public static bool SynchronizeTo(this ICourseStudentFactsAggregatedRace source, ICourseStudentFactsAggregatedRace target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseStudentFactsAggregatedRaceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.RaceDescriptor != target.RaceDescriptor)
            {
                source.RaceDescriptor = target.RaceDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsRaceTypeNumberSupported)
                && target.RaceTypeNumber != source.RaceTypeNumber)
            {
                target.RaceTypeNumber = source.RaceTypeNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRaceTypePercentageSupported)
                && target.RaceTypePercentage != source.RaceTypePercentage)
            {
                target.RaceTypePercentage = source.RaceTypePercentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICourseStudentFactsAggregatedRace source, ICourseStudentFactsAggregatedRace target, Action<ICourseStudentFactsAggregatedRace, ICourseStudentFactsAggregatedRace> onMapped)
        {
            var sourceSynchSupport = source as ICourseStudentFactsAggregatedRaceSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseStudentFactsAggregatedRaceSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.RaceDescriptor = source.RaceDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsRaceTypeNumberSupported)
                target.RaceTypeNumber = source.RaceTypeNumber;
            else
                targetSynchSupport.IsRaceTypeNumberSupported = false;

            if (sourceSynchSupport.IsRaceTypePercentageSupported)
                target.RaceTypePercentage = source.RaceTypePercentage;
            else
                targetSynchSupport.IsRaceTypePercentageSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseStudentFactsAggregatedRaceSynchronizationSourceSupport 
    {
        bool IsRaceTypeNumberSupported { get; set; }
        bool IsRaceTypePercentageSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CourseStudentFactsAggregatedSchoolFoodServiceProgramServiceMapper 
    {
        public static bool SynchronizeTo(this ICourseStudentFactsAggregatedSchoolFoodServiceProgramService source, ICourseStudentFactsAggregatedSchoolFoodServiceProgramService target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseStudentFactsAggregatedSchoolFoodServiceProgramServiceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SchoolFoodServiceProgramServiceDescriptor != target.SchoolFoodServiceProgramServiceDescriptor)
            {
                source.SchoolFoodServiceProgramServiceDescriptor = target.SchoolFoodServiceProgramServiceDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsTypeNumberSupported)
                && target.TypeNumber != source.TypeNumber)
            {
                target.TypeNumber = source.TypeNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTypePercentageSupported)
                && target.TypePercentage != source.TypePercentage)
            {
                target.TypePercentage = source.TypePercentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICourseStudentFactsAggregatedSchoolFoodServiceProgramService source, ICourseStudentFactsAggregatedSchoolFoodServiceProgramService target, Action<ICourseStudentFactsAggregatedSchoolFoodServiceProgramService, ICourseStudentFactsAggregatedSchoolFoodServiceProgramService> onMapped)
        {
            var sourceSynchSupport = source as ICourseStudentFactsAggregatedSchoolFoodServiceProgramServiceSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseStudentFactsAggregatedSchoolFoodServiceProgramServiceSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.SchoolFoodServiceProgramServiceDescriptor = source.SchoolFoodServiceProgramServiceDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsTypeNumberSupported)
                target.TypeNumber = source.TypeNumber;
            else
                targetSynchSupport.IsTypeNumberSupported = false;

            if (sourceSynchSupport.IsTypePercentageSupported)
                target.TypePercentage = source.TypePercentage;
            else
                targetSynchSupport.IsTypePercentageSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseStudentFactsAggregatedSchoolFoodServiceProgramServiceSynchronizationSourceSupport 
    {
        bool IsTypeNumberSupported { get; set; }
        bool IsTypePercentageSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CourseStudentFactsAggregatedSection504EnrollmentMapper 
    {
        public static bool SynchronizeTo(this ICourseStudentFactsAggregatedSection504Enrollment source, ICourseStudentFactsAggregatedSection504Enrollment target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseStudentFactsAggregatedSection504EnrollmentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsNumber504EnrolledSupported)
                && target.Number504Enrolled != source.Number504Enrolled)
            {
                target.Number504Enrolled = source.Number504Enrolled;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPercentage504EnrolledSupported)
                && target.Percentage504Enrolled != source.Percentage504Enrolled)
            {
                target.Percentage504Enrolled = source.Percentage504Enrolled;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICourseStudentFactsAggregatedSection504Enrollment source, ICourseStudentFactsAggregatedSection504Enrollment target, Action<ICourseStudentFactsAggregatedSection504Enrollment, ICourseStudentFactsAggregatedSection504Enrollment> onMapped)
        {
            var sourceSynchSupport = source as ICourseStudentFactsAggregatedSection504EnrollmentSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseStudentFactsAggregatedSection504EnrollmentSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsNumber504EnrolledSupported)
                target.Number504Enrolled = source.Number504Enrolled;
            else
                targetSynchSupport.IsNumber504EnrolledSupported = false;

            if (sourceSynchSupport.IsPercentage504EnrolledSupported)
                target.Percentage504Enrolled = source.Percentage504Enrolled;
            else
                targetSynchSupport.IsPercentage504EnrolledSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseStudentFactsAggregatedSection504EnrollmentSynchronizationSourceSupport 
    {
        bool IsNumber504EnrolledSupported { get; set; }
        bool IsPercentage504EnrolledSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CourseStudentFactsAggregatedSexMapper 
    {
        public static bool SynchronizeTo(this ICourseStudentFactsAggregatedSex source, ICourseStudentFactsAggregatedSex target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseStudentFactsAggregatedSexSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SexDescriptor != target.SexDescriptor)
            {
                source.SexDescriptor = target.SexDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsSexTypeNumberSupported)
                && target.SexTypeNumber != source.SexTypeNumber)
            {
                target.SexTypeNumber = source.SexTypeNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSexTypePercentageSupported)
                && target.SexTypePercentage != source.SexTypePercentage)
            {
                target.SexTypePercentage = source.SexTypePercentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICourseStudentFactsAggregatedSex source, ICourseStudentFactsAggregatedSex target, Action<ICourseStudentFactsAggregatedSex, ICourseStudentFactsAggregatedSex> onMapped)
        {
            var sourceSynchSupport = source as ICourseStudentFactsAggregatedSexSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseStudentFactsAggregatedSexSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.SexDescriptor = source.SexDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsSexTypeNumberSupported)
                target.SexTypeNumber = source.SexTypeNumber;
            else
                targetSynchSupport.IsSexTypeNumberSupported = false;

            if (sourceSynchSupport.IsSexTypePercentageSupported)
                target.SexTypePercentage = source.SexTypePercentage;
            else
                targetSynchSupport.IsSexTypePercentageSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseStudentFactsAggregatedSexSynchronizationSourceSupport 
    {
        bool IsSexTypeNumberSupported { get; set; }
        bool IsSexTypePercentageSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CourseStudentFactsAggregatedSPEDMapper 
    {
        public static bool SynchronizeTo(this ICourseStudentFactsAggregatedSPED source, ICourseStudentFactsAggregatedSPED target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseStudentFactsAggregatedSPEDSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsSPEDEnrollmentNumberSupported)
                && target.SPEDEnrollmentNumber != source.SPEDEnrollmentNumber)
            {
                target.SPEDEnrollmentNumber = source.SPEDEnrollmentNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSPEDEnrollmentPercentageSupported)
                && target.SPEDEnrollmentPercentage != source.SPEDEnrollmentPercentage)
            {
                target.SPEDEnrollmentPercentage = source.SPEDEnrollmentPercentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICourseStudentFactsAggregatedSPED source, ICourseStudentFactsAggregatedSPED target, Action<ICourseStudentFactsAggregatedSPED, ICourseStudentFactsAggregatedSPED> onMapped)
        {
            var sourceSynchSupport = source as ICourseStudentFactsAggregatedSPEDSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseStudentFactsAggregatedSPEDSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsSPEDEnrollmentNumberSupported)
                target.SPEDEnrollmentNumber = source.SPEDEnrollmentNumber;
            else
                targetSynchSupport.IsSPEDEnrollmentNumberSupported = false;

            if (sourceSynchSupport.IsSPEDEnrollmentPercentageSupported)
                target.SPEDEnrollmentPercentage = source.SPEDEnrollmentPercentage;
            else
                targetSynchSupport.IsSPEDEnrollmentPercentageSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseStudentFactsAggregatedSPEDSynchronizationSourceSupport 
    {
        bool IsSPEDEnrollmentNumberSupported { get; set; }
        bool IsSPEDEnrollmentPercentageSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CourseStudentFactsAggregatedTitleIEnrollmentMapper 
    {
        public static bool SynchronizeTo(this ICourseStudentFactsAggregatedTitleIEnrollment source, ICourseStudentFactsAggregatedTitleIEnrollment target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseStudentFactsAggregatedTitleIEnrollmentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsTitleIEnrollmentNumberSupported)
                && target.TitleIEnrollmentNumber != source.TitleIEnrollmentNumber)
            {
                target.TitleIEnrollmentNumber = source.TitleIEnrollmentNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTitleIEnrollmentPercentageSupported)
                && target.TitleIEnrollmentPercentage != source.TitleIEnrollmentPercentage)
            {
                target.TitleIEnrollmentPercentage = source.TitleIEnrollmentPercentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICourseStudentFactsAggregatedTitleIEnrollment source, ICourseStudentFactsAggregatedTitleIEnrollment target, Action<ICourseStudentFactsAggregatedTitleIEnrollment, ICourseStudentFactsAggregatedTitleIEnrollment> onMapped)
        {
            var sourceSynchSupport = source as ICourseStudentFactsAggregatedTitleIEnrollmentSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseStudentFactsAggregatedTitleIEnrollmentSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsTitleIEnrollmentNumberSupported)
                target.TitleIEnrollmentNumber = source.TitleIEnrollmentNumber;
            else
                targetSynchSupport.IsTitleIEnrollmentNumberSupported = false;

            if (sourceSynchSupport.IsTitleIEnrollmentPercentageSupported)
                target.TitleIEnrollmentPercentage = source.TitleIEnrollmentPercentage;
            else
                targetSynchSupport.IsTitleIEnrollmentPercentageSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseStudentFactsAggregatedTitleIEnrollmentSynchronizationSourceSupport 
    {
        bool IsTitleIEnrollmentNumberSupported { get; set; }
        bool IsTitleIEnrollmentPercentageSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CourseStudentFactsStudentsEnrolledMapper 
    {
        public static bool SynchronizeTo(this ICourseStudentFactsStudentsEnrolled source, ICourseStudentFactsStudentsEnrolled target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseStudentFactsStudentsEnrolledSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsNumberStudentsEnrolledSupported)
                && target.NumberStudentsEnrolled != source.NumberStudentsEnrolled)
            {
                target.NumberStudentsEnrolled = source.NumberStudentsEnrolled;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPercentAtRiskSupported)
                && target.PercentAtRisk != source.PercentAtRisk)
            {
                target.PercentAtRisk = source.PercentAtRisk;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPercentMobilitySupported)
                && target.PercentMobility != source.PercentMobility)
            {
                target.PercentMobility = source.PercentMobility;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICourseStudentFactsStudentsEnrolled source, ICourseStudentFactsStudentsEnrolled target, Action<ICourseStudentFactsStudentsEnrolled, ICourseStudentFactsStudentsEnrolled> onMapped)
        {
            var sourceSynchSupport = source as ICourseStudentFactsStudentsEnrolledSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseStudentFactsStudentsEnrolledSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsNumberStudentsEnrolledSupported)
                target.NumberStudentsEnrolled = source.NumberStudentsEnrolled;
            else
                targetSynchSupport.IsNumberStudentsEnrolledSupported = false;

            if (sourceSynchSupport.IsPercentAtRiskSupported)
                target.PercentAtRisk = source.PercentAtRisk;
            else
                targetSynchSupport.IsPercentAtRiskSupported = false;

            if (sourceSynchSupport.IsPercentMobilitySupported)
                target.PercentMobility = source.PercentMobility;
            else
                targetSynchSupport.IsPercentMobilitySupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseStudentFactsStudentsEnrolledSynchronizationSourceSupport 
    {
        bool IsNumberStudentsEnrolledSupported { get; set; }
        bool IsPercentAtRiskSupported { get; set; }
        bool IsPercentMobilitySupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
}
// Aggregate: Credential

namespace EdFi.Ods.Entities.Common.TPDM //.CredentialAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CredentialBoardCertificationMapper 
    {
        public static bool SynchronizeTo(this ICredentialBoardCertification source, ICredentialBoardCertification target)
        {
            bool isModified = false;

            var sourceSupport = source as ICredentialBoardCertificationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBoardCertificationSupported)
                && target.BoardCertification != source.BoardCertification)
            {
                target.BoardCertification = source.BoardCertification;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBoardCertificationDateSupported)
                && target.BoardCertificationDate != source.BoardCertificationDate)
            {
                target.BoardCertificationDate = source.BoardCertificationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBoardCertificationTypeDescriptorSupported)
                && target.BoardCertificationTypeDescriptor != source.BoardCertificationTypeDescriptor)
            {
                target.BoardCertificationTypeDescriptor = source.BoardCertificationTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICredentialBoardCertification source, ICredentialBoardCertification target, Action<ICredentialBoardCertification, ICredentialBoardCertification> onMapped)
        {
            var sourceSynchSupport = source as ICredentialBoardCertificationSynchronizationSourceSupport;
            var targetSynchSupport = target as ICredentialBoardCertificationSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsBoardCertificationSupported)
                target.BoardCertification = source.BoardCertification;
            else
                targetSynchSupport.IsBoardCertificationSupported = false;

            if (sourceSynchSupport.IsBoardCertificationDateSupported)
                target.BoardCertificationDate = source.BoardCertificationDate;
            else
                targetSynchSupport.IsBoardCertificationDateSupported = false;

            if (sourceSynchSupport.IsBoardCertificationTypeDescriptorSupported)
                target.BoardCertificationTypeDescriptor = source.BoardCertificationTypeDescriptor;
            else
                targetSynchSupport.IsBoardCertificationTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICredentialBoardCertificationSynchronizationSourceSupport 
    {
        bool IsBoardCertificationSupported { get; set; }
        bool IsBoardCertificationDateSupported { get; set; }
        bool IsBoardCertificationTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CredentialCertificationExamMapper 
    {
        public static bool SynchronizeTo(this ICredentialCertificationExam source, ICredentialCertificationExam target)
        {
            bool isModified = false;

            var sourceSupport = source as ICredentialCertificationExamSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CertificationExamTitle != target.CertificationExamTitle)
            {
                source.CertificationExamTitle = target.CertificationExamTitle;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAttemptNumberSupported)
                && target.AttemptNumber != source.AttemptNumber)
            {
                target.AttemptNumber = source.AttemptNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCertificationExamDateSupported)
                && target.CertificationExamDate != source.CertificationExamDate)
            {
                target.CertificationExamDate = source.CertificationExamDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCertificationExamOverallScoreSupported)
                && target.CertificationExamOverallScore != source.CertificationExamOverallScore)
            {
                target.CertificationExamOverallScore = source.CertificationExamOverallScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCertificationExamPassFailSupported)
                && target.CertificationExamPassFail != source.CertificationExamPassFail)
            {
                target.CertificationExamPassFail = source.CertificationExamPassFail;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCertificationExamStatusDescriptorSupported)
                && target.CertificationExamStatusDescriptor != source.CertificationExamStatusDescriptor)
            {
                target.CertificationExamStatusDescriptor = source.CertificationExamStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCertificationExamTypeDescriptorSupported)
                && target.CertificationExamTypeDescriptor != source.CertificationExamTypeDescriptor)
            {
                target.CertificationExamTypeDescriptor = source.CertificationExamTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICredentialCertificationExam source, ICredentialCertificationExam target, Action<ICredentialCertificationExam, ICredentialCertificationExam> onMapped)
        {
            var sourceSynchSupport = source as ICredentialCertificationExamSynchronizationSourceSupport;
            var targetSynchSupport = target as ICredentialCertificationExamSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.CertificationExamTitle = source.CertificationExamTitle;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAttemptNumberSupported)
                target.AttemptNumber = source.AttemptNumber;
            else
                targetSynchSupport.IsAttemptNumberSupported = false;

            if (sourceSynchSupport.IsCertificationExamDateSupported)
                target.CertificationExamDate = source.CertificationExamDate;
            else
                targetSynchSupport.IsCertificationExamDateSupported = false;

            if (sourceSynchSupport.IsCertificationExamOverallScoreSupported)
                target.CertificationExamOverallScore = source.CertificationExamOverallScore;
            else
                targetSynchSupport.IsCertificationExamOverallScoreSupported = false;

            if (sourceSynchSupport.IsCertificationExamPassFailSupported)
                target.CertificationExamPassFail = source.CertificationExamPassFail;
            else
                targetSynchSupport.IsCertificationExamPassFailSupported = false;

            if (sourceSynchSupport.IsCertificationExamStatusDescriptorSupported)
                target.CertificationExamStatusDescriptor = source.CertificationExamStatusDescriptor;
            else
                targetSynchSupport.IsCertificationExamStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsCertificationExamTypeDescriptorSupported)
                target.CertificationExamTypeDescriptor = source.CertificationExamTypeDescriptor;
            else
                targetSynchSupport.IsCertificationExamTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICredentialCertificationExamSynchronizationSourceSupport 
    {
        bool IsAttemptNumberSupported { get; set; }
        bool IsCertificationExamDateSupported { get; set; }
        bool IsCertificationExamOverallScoreSupported { get; set; }
        bool IsCertificationExamPassFailSupported { get; set; }
        bool IsCertificationExamStatusDescriptorSupported { get; set; }
        bool IsCertificationExamTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CredentialExtensionMapper 
    {
        public static bool SynchronizeTo(this ICredentialExtension source, ICredentialExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as ICredentialExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.Credential as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCurrentCredentialSupported)
                && target.CurrentCredential != source.CurrentCredential)
            {
                target.CurrentCredential = source.CurrentCredential;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRevocationDateSupported)
                && target.RevocationDate != source.RevocationDate)
            {
                target.RevocationDate = source.RevocationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRevocationReasonSupported)
                && target.RevocationReason != source.RevocationReason)
            {
                target.RevocationReason = source.RevocationReason;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSuspensionDateSupported)
                && target.SuspensionDate != source.SuspensionDate)
            {
                target.SuspensionDate = source.SuspensionDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSuspensionReasonSupported)
                && target.SuspensionReason != source.SuspensionReason)
            {
                target.SuspensionReason = source.SuspensionReason;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // CredentialBoardCertification
            if (sourceSupport == null || sourceSupport.IsCredentialBoardCertificationSupported)
            {
                if (source.CredentialBoardCertification == null)
                {
                    if (target.CredentialBoardCertification != null)
                    {
                        target.CredentialBoardCertification = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.CredentialBoardCertification == null)
                    {
                        var itemType = target.GetType().GetProperty("CredentialBoardCertification").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.CredentialBoardCertification = (ICredentialBoardCertification) newItem;
                    }

                    isModified |= source.CredentialBoardCertification.Synchronize(target.CredentialBoardCertification);
                }
            }
            // CredentialRecommendation
            if (sourceSupport == null || sourceSupport.IsCredentialRecommendationSupported)
            {
                if (source.CredentialRecommendation == null)
                {
                    if (target.CredentialRecommendation != null)
                    {
                        target.CredentialRecommendation = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.CredentialRecommendation == null)
                    {
                        var itemType = target.GetType().GetProperty("CredentialRecommendation").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.CredentialRecommendation = (ICredentialRecommendation) newItem;
                    }

                    isModified |= source.CredentialRecommendation.Synchronize(target.CredentialRecommendation);
                }
            }
            // CredentialRecommendingInstitution
            if (sourceSupport == null || sourceSupport.IsCredentialRecommendingInstitutionSupported)
            {
                if (source.CredentialRecommendingInstitution == null)
                {
                    if (target.CredentialRecommendingInstitution != null)
                    {
                        target.CredentialRecommendingInstitution = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.CredentialRecommendingInstitution == null)
                    {
                        var itemType = target.GetType().GetProperty("CredentialRecommendingInstitution").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.CredentialRecommendingInstitution = (ICredentialRecommendingInstitution) newItem;
                    }

                    isModified |= source.CredentialRecommendingInstitution.Synchronize(target.CredentialRecommendingInstitution);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsCredentialCertificationExamsSupported)
            {
                isModified |= 
                    source.CredentialCertificationExams.SynchronizeCollectionTo(
                        target.CredentialCertificationExams, 
                        onChildAdded: child => 
                            {
                                child.CredentialExtension = target;

                                // Extension class "children" need to reference the Ed-Fi Standard entity as the parent
                                (child as IChildEntity)?.SetParent(target.Credential);
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsCredentialCertificationExamIncluded);
            }


            return isModified;
        }



        public static void MapTo(this ICredentialExtension source, ICredentialExtension target, Action<ICredentialExtension, ICredentialExtension> onMapped)
        {
            var sourceSynchSupport = source as ICredentialExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as ICredentialExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsCurrentCredentialSupported)
                target.CurrentCredential = source.CurrentCredential;
            else
                targetSynchSupport.IsCurrentCredentialSupported = false;

            if (sourceSynchSupport.IsRevocationDateSupported)
                target.RevocationDate = source.RevocationDate;
            else
                targetSynchSupport.IsRevocationDateSupported = false;

            if (sourceSynchSupport.IsRevocationReasonSupported)
                target.RevocationReason = source.RevocationReason;
            else
                targetSynchSupport.IsRevocationReasonSupported = false;

            if (sourceSynchSupport.IsSuspensionDateSupported)
                target.SuspensionDate = source.SuspensionDate;
            else
                targetSynchSupport.IsSuspensionDateSupported = false;

            if (sourceSynchSupport.IsSuspensionReasonSupported)
                target.SuspensionReason = source.SuspensionReason;
            else
                targetSynchSupport.IsSuspensionReasonSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // CredentialBoardCertification (Source)
            if (sourceSynchSupport.IsCredentialBoardCertificationSupported)
            {
                var itemProperty = target.GetType().GetProperty("CredentialBoardCertification");
                
                if (itemProperty != null)
                {                    
                    if (source.CredentialBoardCertification == null)
                    {
                        target.CredentialBoardCertification = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetCredentialBoardCertification = Activator.CreateInstance(itemType);
                        (targetCredentialBoardCertification as IChildEntity)?.SetParent(target.Credential);
                        source.CredentialBoardCertification.Map(targetCredentialBoardCertification);
                        
                        // Update the target reference appropriately
                        target.CredentialBoardCertification = (ICredentialBoardCertification) targetCredentialBoardCertification;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsCredentialBoardCertificationSupported = false; 
            }
            // CredentialRecommendation (Source)
            if (sourceSynchSupport.IsCredentialRecommendationSupported)
            {
                var itemProperty = target.GetType().GetProperty("CredentialRecommendation");
                
                if (itemProperty != null)
                {                    
                    if (source.CredentialRecommendation == null)
                    {
                        target.CredentialRecommendation = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetCredentialRecommendation = Activator.CreateInstance(itemType);
                        (targetCredentialRecommendation as IChildEntity)?.SetParent(target.Credential);
                        source.CredentialRecommendation.Map(targetCredentialRecommendation);
                        
                        // Update the target reference appropriately
                        target.CredentialRecommendation = (ICredentialRecommendation) targetCredentialRecommendation;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsCredentialRecommendationSupported = false; 
            }
            // CredentialRecommendingInstitution (Source)
            if (sourceSynchSupport.IsCredentialRecommendingInstitutionSupported)
            {
                var itemProperty = target.GetType().GetProperty("CredentialRecommendingInstitution");
                
                if (itemProperty != null)
                {                    
                    if (source.CredentialRecommendingInstitution == null)
                    {
                        target.CredentialRecommendingInstitution = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetCredentialRecommendingInstitution = Activator.CreateInstance(itemType);
                        (targetCredentialRecommendingInstitution as IChildEntity)?.SetParent(target.Credential);
                        source.CredentialRecommendingInstitution.Map(targetCredentialRecommendingInstitution);
                        
                        // Update the target reference appropriately
                        target.CredentialRecommendingInstitution = (ICredentialRecommendingInstitution) targetCredentialRecommendingInstitution;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsCredentialRecommendingInstitutionSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists

            if (sourceSynchSupport.IsCredentialCertificationExamsSupported)
            {    
                targetSynchSupport.IsCredentialCertificationExamIncluded = sourceSynchSupport.IsCredentialCertificationExamIncluded;
                source.CredentialCertificationExams.MapCollectionTo(target.CredentialCertificationExams, target.Credential);
            }
            else
            {
                targetSynchSupport.IsCredentialCertificationExamsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICredentialExtensionSynchronizationSourceSupport 
    {
        bool IsCredentialBoardCertificationSupported { get; set; }
        bool IsCredentialCertificationExamsSupported { get; set; }
        bool IsCredentialRecommendationSupported { get; set; }
        bool IsCredentialRecommendingInstitutionSupported { get; set; }
        bool IsCurrentCredentialSupported { get; set; }
        bool IsRevocationDateSupported { get; set; }
        bool IsRevocationReasonSupported { get; set; }
        bool IsSuspensionDateSupported { get; set; }
        bool IsSuspensionReasonSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
        Func<ICredentialCertificationExam, bool> IsCredentialCertificationExamIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CredentialRecommendationMapper 
    {
        public static bool SynchronizeTo(this ICredentialRecommendation source, ICredentialRecommendation target)
        {
            bool isModified = false;

            var sourceSupport = source as ICredentialRecommendationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCredentialFieldDescriptorSupported)
                && target.CredentialFieldDescriptor != source.CredentialFieldDescriptor)
            {
                target.CredentialFieldDescriptor = source.CredentialFieldDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGradeLevelDescriptorSupported)
                && target.GradeLevelDescriptor != source.GradeLevelDescriptor)
            {
                target.GradeLevelDescriptor = source.GradeLevelDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTeachingCredentialDescriptorSupported)
                && target.TeachingCredentialDescriptor != source.TeachingCredentialDescriptor)
            {
                target.TeachingCredentialDescriptor = source.TeachingCredentialDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICredentialRecommendation source, ICredentialRecommendation target, Action<ICredentialRecommendation, ICredentialRecommendation> onMapped)
        {
            var sourceSynchSupport = source as ICredentialRecommendationSynchronizationSourceSupport;
            var targetSynchSupport = target as ICredentialRecommendationSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsCredentialFieldDescriptorSupported)
                target.CredentialFieldDescriptor = source.CredentialFieldDescriptor;
            else
                targetSynchSupport.IsCredentialFieldDescriptorSupported = false;

            if (sourceSynchSupport.IsGradeLevelDescriptorSupported)
                target.GradeLevelDescriptor = source.GradeLevelDescriptor;
            else
                targetSynchSupport.IsGradeLevelDescriptorSupported = false;

            if (sourceSynchSupport.IsTeachingCredentialDescriptorSupported)
                target.TeachingCredentialDescriptor = source.TeachingCredentialDescriptor;
            else
                targetSynchSupport.IsTeachingCredentialDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICredentialRecommendationSynchronizationSourceSupport 
    {
        bool IsCredentialFieldDescriptorSupported { get; set; }
        bool IsGradeLevelDescriptorSupported { get; set; }
        bool IsTeachingCredentialDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CredentialRecommendingInstitutionMapper 
    {
        public static bool SynchronizeTo(this ICredentialRecommendingInstitution source, ICredentialRecommendingInstitution target)
        {
            bool isModified = false;

            var sourceSupport = source as ICredentialRecommendingInstitutionSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsRecommendingDateSupported)
                && target.RecommendingDate != source.RecommendingDate)
            {
                target.RecommendingDate = source.RecommendingDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRecommendingInstitutionCountryDescriptorSupported)
                && target.RecommendingInstitutionCountryDescriptor != source.RecommendingInstitutionCountryDescriptor)
            {
                target.RecommendingInstitutionCountryDescriptor = source.RecommendingInstitutionCountryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRecommendingInstitutionStateAbbreviationDescriptorSupported)
                && target.RecommendingInstitutionStateAbbreviationDescriptor != source.RecommendingInstitutionStateAbbreviationDescriptor)
            {
                target.RecommendingInstitutionStateAbbreviationDescriptor = source.RecommendingInstitutionStateAbbreviationDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRecommendingInstutionNameSupported)
                && target.RecommendingInstutionName != source.RecommendingInstutionName)
            {
                target.RecommendingInstutionName = source.RecommendingInstutionName;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICredentialRecommendingInstitution source, ICredentialRecommendingInstitution target, Action<ICredentialRecommendingInstitution, ICredentialRecommendingInstitution> onMapped)
        {
            var sourceSynchSupport = source as ICredentialRecommendingInstitutionSynchronizationSourceSupport;
            var targetSynchSupport = target as ICredentialRecommendingInstitutionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsRecommendingDateSupported)
                target.RecommendingDate = source.RecommendingDate;
            else
                targetSynchSupport.IsRecommendingDateSupported = false;

            if (sourceSynchSupport.IsRecommendingInstitutionCountryDescriptorSupported)
                target.RecommendingInstitutionCountryDescriptor = source.RecommendingInstitutionCountryDescriptor;
            else
                targetSynchSupport.IsRecommendingInstitutionCountryDescriptorSupported = false;

            if (sourceSynchSupport.IsRecommendingInstitutionStateAbbreviationDescriptorSupported)
                target.RecommendingInstitutionStateAbbreviationDescriptor = source.RecommendingInstitutionStateAbbreviationDescriptor;
            else
                targetSynchSupport.IsRecommendingInstitutionStateAbbreviationDescriptorSupported = false;

            if (sourceSynchSupport.IsRecommendingInstutionNameSupported)
                target.RecommendingInstutionName = source.RecommendingInstutionName;
            else
                targetSynchSupport.IsRecommendingInstutionNameSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICredentialRecommendingInstitutionSynchronizationSourceSupport 
    {
        bool IsRecommendingDateSupported { get; set; }
        bool IsRecommendingInstitutionCountryDescriptorSupported { get; set; }
        bool IsRecommendingInstitutionStateAbbreviationDescriptorSupported { get; set; }
        bool IsRecommendingInstutionNameSupported { get; set; }
    }
 
}
// Aggregate: EducationOrganizationCourseTranscriptFacts

namespace EdFi.Ods.Entities.Common.TPDM //.EducationOrganizationCourseTranscriptFactsAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationCourseTranscriptFactsMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationCourseTranscriptFacts source, IEducationOrganizationCourseTranscriptFacts target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationCourseTranscriptFactsSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.FactAsOfDate != target.FactAsOfDate)
            {
                source.FactAsOfDate = target.FactAsOfDate;
            }
            if (source.FactsAsOfDate != target.FactsAsOfDate)
            {
                source.FactsAsOfDate = target.FactsAsOfDate;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCourseTitleSupported)
                && target.CourseTitle != source.CourseTitle)
            {
                target.CourseTitle = source.CourseTitle;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned
            if (sourceSupport == null || sourceSupport.IsEducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarnedSupported)
            {
                if (source.EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned == null)
                {
                    if (target.EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned != null)
                    {
                        target.EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned == null)
                    {
                        var itemType = target.GetType().GetProperty("EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned = (IEducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned) newItem;
                    }

                    isModified |= source.EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned.Synchronize(target.EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned);
                }
            }
            // EducationOrganizationCourseTranscriptFactsStudentsEnrolled
            if (sourceSupport == null || sourceSupport.IsEducationOrganizationCourseTranscriptFactsStudentsEnrolledSupported)
            {
                if (source.EducationOrganizationCourseTranscriptFactsStudentsEnrolled == null)
                {
                    if (target.EducationOrganizationCourseTranscriptFactsStudentsEnrolled != null)
                    {
                        target.EducationOrganizationCourseTranscriptFactsStudentsEnrolled = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.EducationOrganizationCourseTranscriptFactsStudentsEnrolled == null)
                    {
                        var itemType = target.GetType().GetProperty("EducationOrganizationCourseTranscriptFactsStudentsEnrolled").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.EducationOrganizationCourseTranscriptFactsStudentsEnrolled = (IEducationOrganizationCourseTranscriptFactsStudentsEnrolled) newItem;
                    }

                    isModified |= source.EducationOrganizationCourseTranscriptFactsStudentsEnrolled.Synchronize(target.EducationOrganizationCourseTranscriptFactsStudentsEnrolled);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsEducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarnedsSupported)
            {
                isModified |= 
                    source.EducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarneds.SynchronizeCollectionTo(
                        target.EducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarneds, 
                        onChildAdded: child => 
                            {
                                child.EducationOrganizationCourseTranscriptFacts = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsEducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarnedIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IEducationOrganizationCourseTranscriptFacts source, IEducationOrganizationCourseTranscriptFacts target, Action<IEducationOrganizationCourseTranscriptFacts, IEducationOrganizationCourseTranscriptFacts> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationCourseTranscriptFactsSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationCourseTranscriptFactsSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FactAsOfDate = source.FactAsOfDate;
            target.FactsAsOfDate = source.FactsAsOfDate;
            target.SchoolYear = source.SchoolYear;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCourseTitleSupported)
                target.CourseTitle = source.CourseTitle;
            else
                targetSynchSupport.IsCourseTitleSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationStudentAcademicRecordFactsResourceId = source.EducationOrganizationStudentAcademicRecordFactsResourceId;
                target.EducationOrganizationStudentAcademicRecordFactsDiscriminator = source.EducationOrganizationStudentAcademicRecordFactsDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned (Source)
            if (sourceSynchSupport.IsEducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarnedSupported)
            {
                var itemProperty = target.GetType().GetProperty("EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned");
                
                if (itemProperty != null)
                {                    
                    if (source.EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned == null)
                    {
                        target.EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetEducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned = Activator.CreateInstance(itemType);
                        (targetEducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned as IChildEntity)?.SetParent(target);
                        source.EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned.Map(targetEducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned);
                        
                        // Update the target reference appropriately
                        target.EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned = (IEducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned) targetEducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarnedSupported = false; 
            }
            // EducationOrganizationCourseTranscriptFactsStudentsEnrolled (Source)
            if (sourceSynchSupport.IsEducationOrganizationCourseTranscriptFactsStudentsEnrolledSupported)
            {
                var itemProperty = target.GetType().GetProperty("EducationOrganizationCourseTranscriptFactsStudentsEnrolled");
                
                if (itemProperty != null)
                {                    
                    if (source.EducationOrganizationCourseTranscriptFactsStudentsEnrolled == null)
                    {
                        target.EducationOrganizationCourseTranscriptFactsStudentsEnrolled = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetEducationOrganizationCourseTranscriptFactsStudentsEnrolled = Activator.CreateInstance(itemType);
                        (targetEducationOrganizationCourseTranscriptFactsStudentsEnrolled as IChildEntity)?.SetParent(target);
                        source.EducationOrganizationCourseTranscriptFactsStudentsEnrolled.Map(targetEducationOrganizationCourseTranscriptFactsStudentsEnrolled);
                        
                        // Update the target reference appropriately
                        target.EducationOrganizationCourseTranscriptFactsStudentsEnrolled = (IEducationOrganizationCourseTranscriptFactsStudentsEnrolled) targetEducationOrganizationCourseTranscriptFactsStudentsEnrolled;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationCourseTranscriptFactsStudentsEnrolledSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists

            if (sourceSynchSupport.IsEducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarnedsSupported)
            {    
                targetSynchSupport.IsEducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarnedIncluded = sourceSynchSupport.IsEducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarnedIncluded;
                source.EducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarneds.MapCollectionTo(target.EducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarneds, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarnedsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationCourseTranscriptFactsSynchronizationSourceSupport 
    {
        bool IsCourseTitleSupported { get; set; }
        bool IsEducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarnedsSupported { get; set; }
        bool IsEducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarnedSupported { get; set; }
        bool IsEducationOrganizationCourseTranscriptFactsStudentsEnrolledSupported { get; set; }
        Func<IEducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned, bool> IsEducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarnedIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarnedMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned source, IEducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarnedSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.FinalLetterGrade != target.FinalLetterGrade)
            {
                source.FinalLetterGrade = target.FinalLetterGrade;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsLetterGradeTypeNumberSupported)
                && target.LetterGradeTypeNumber != source.LetterGradeTypeNumber)
            {
                target.LetterGradeTypeNumber = source.LetterGradeTypeNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLetterGradeTypePercentageSupported)
                && target.LetterGradeTypePercentage != source.LetterGradeTypePercentage)
            {
                target.LetterGradeTypePercentage = source.LetterGradeTypePercentage;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned source, IEducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned target, Action<IEducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned, IEducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarned> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarnedSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarnedSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.FinalLetterGrade = source.FinalLetterGrade;

            // Copy non-PK properties

            if (sourceSynchSupport.IsLetterGradeTypeNumberSupported)
                target.LetterGradeTypeNumber = source.LetterGradeTypeNumber;
            else
                targetSynchSupport.IsLetterGradeTypeNumberSupported = false;

            if (sourceSynchSupport.IsLetterGradeTypePercentageSupported)
                target.LetterGradeTypePercentage = source.LetterGradeTypePercentage;
            else
                targetSynchSupport.IsLetterGradeTypePercentageSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationCourseTranscriptFactsAggregatedFinalLetterGradeEarnedSynchronizationSourceSupport 
    {
        bool IsLetterGradeTypeNumberSupported { get; set; }
        bool IsLetterGradeTypePercentageSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarnedMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned source, IEducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarnedSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAverageFinalNumericGradeEarnedSupported)
                && target.AverageFinalNumericGradeEarned != source.AverageFinalNumericGradeEarned)
            {
                target.AverageFinalNumericGradeEarned = source.AverageFinalNumericGradeEarned;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNumericGradeNCountSupported)
                && target.NumericGradeNCount != source.NumericGradeNCount)
            {
                target.NumericGradeNCount = source.NumericGradeNCount;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNumericGradeStandardDeviationSupported)
                && target.NumericGradeStandardDeviation != source.NumericGradeStandardDeviation)
            {
                target.NumericGradeStandardDeviation = source.NumericGradeStandardDeviation;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned source, IEducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned target, Action<IEducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned, IEducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarned> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarnedSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarnedSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsAverageFinalNumericGradeEarnedSupported)
                target.AverageFinalNumericGradeEarned = source.AverageFinalNumericGradeEarned;
            else
                targetSynchSupport.IsAverageFinalNumericGradeEarnedSupported = false;

            if (sourceSynchSupport.IsNumericGradeNCountSupported)
                target.NumericGradeNCount = source.NumericGradeNCount;
            else
                targetSynchSupport.IsNumericGradeNCountSupported = false;

            if (sourceSynchSupport.IsNumericGradeStandardDeviationSupported)
                target.NumericGradeStandardDeviation = source.NumericGradeStandardDeviation;
            else
                targetSynchSupport.IsNumericGradeStandardDeviationSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationCourseTranscriptFactsAggregatedNumericGradeEarnedSynchronizationSourceSupport 
    {
        bool IsAverageFinalNumericGradeEarnedSupported { get; set; }
        bool IsNumericGradeNCountSupported { get; set; }
        bool IsNumericGradeStandardDeviationSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationCourseTranscriptFactsStudentsEnrolledMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationCourseTranscriptFactsStudentsEnrolled source, IEducationOrganizationCourseTranscriptFactsStudentsEnrolled target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationCourseTranscriptFactsStudentsEnrolledSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsNumberStudentsEnrolledSupported)
                && target.NumberStudentsEnrolled != source.NumberStudentsEnrolled)
            {
                target.NumberStudentsEnrolled = source.NumberStudentsEnrolled;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPercentAtRiskSupported)
                && target.PercentAtRisk != source.PercentAtRisk)
            {
                target.PercentAtRisk = source.PercentAtRisk;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPercentMobilitySupported)
                && target.PercentMobility != source.PercentMobility)
            {
                target.PercentMobility = source.PercentMobility;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationCourseTranscriptFactsStudentsEnrolled source, IEducationOrganizationCourseTranscriptFactsStudentsEnrolled target, Action<IEducationOrganizationCourseTranscriptFactsStudentsEnrolled, IEducationOrganizationCourseTranscriptFactsStudentsEnrolled> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationCourseTranscriptFactsStudentsEnrolledSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationCourseTranscriptFactsStudentsEnrolledSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsNumberStudentsEnrolledSupported)
                target.NumberStudentsEnrolled = source.NumberStudentsEnrolled;
            else
                targetSynchSupport.IsNumberStudentsEnrolledSupported = false;

            if (sourceSynchSupport.IsPercentAtRiskSupported)
                target.PercentAtRisk = source.PercentAtRisk;
            else
                targetSynchSupport.IsPercentAtRiskSupported = false;

            if (sourceSynchSupport.IsPercentMobilitySupported)
                target.PercentMobility = source.PercentMobility;
            else
                targetSynchSupport.IsPercentMobilitySupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationCourseTranscriptFactsStudentsEnrolledSynchronizationSourceSupport 
    {
        bool IsNumberStudentsEnrolledSupported { get; set; }
        bool IsPercentAtRiskSupported { get; set; }
        bool IsPercentMobilitySupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
}
// Aggregate: EducationOrganizationFacts

namespace EdFi.Ods.Entities.Common.TPDM //.EducationOrganizationFactsAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationFactsMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationFacts source, IEducationOrganizationFacts target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationFactsSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.FactsAsOfDate != target.FactsAsOfDate)
            {
                source.FactsAsOfDate = target.FactsAsOfDate;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAverageYearsInDistrictEmployedSupported)
                && target.AverageYearsInDistrictEmployed != source.AverageYearsInDistrictEmployed)
            {
                target.AverageYearsInDistrictEmployed = source.AverageYearsInDistrictEmployed;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHiringRateSupported)
                && target.HiringRate != source.HiringRate)
            {
                target.HiringRate = source.HiringRate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNumberAdministratorsEmployedSupported)
                && target.NumberAdministratorsEmployed != source.NumberAdministratorsEmployed)
            {
                target.NumberAdministratorsEmployed = source.NumberAdministratorsEmployed;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNumberStudentsEnrolledSupported)
                && target.NumberStudentsEnrolled != source.NumberStudentsEnrolled)
            {
                target.NumberStudentsEnrolled = source.NumberStudentsEnrolled;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNumberTeachersEmployedSupported)
                && target.NumberTeachersEmployed != source.NumberTeachersEmployed)
            {
                target.NumberTeachersEmployed = source.NumberTeachersEmployed;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPercentStudentsFreeReducedLunchSupported)
                && target.PercentStudentsFreeReducedLunch != source.PercentStudentsFreeReducedLunch)
            {
                target.PercentStudentsFreeReducedLunch = source.PercentStudentsFreeReducedLunch;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPercentStudentsLimitedEnglishProficiencySupported)
                && target.PercentStudentsLimitedEnglishProficiency != source.PercentStudentsLimitedEnglishProficiency)
            {
                target.PercentStudentsLimitedEnglishProficiency = source.PercentStudentsLimitedEnglishProficiency;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPercentStudentsSpecialEducationSupported)
                && target.PercentStudentsSpecialEducation != source.PercentStudentsSpecialEducation)
            {
                target.PercentStudentsSpecialEducation = source.PercentStudentsSpecialEducation;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRetentionRateSupported)
                && target.RetentionRate != source.RetentionRate)
            {
                target.RetentionRate = source.RetentionRate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRetirementRateSupported)
                && target.RetirementRate != source.RetirementRate)
            {
                target.RetirementRate = source.RetirementRate;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // EducationOrganizationFactsAggregatedSalary
            if (sourceSupport == null || sourceSupport.IsEducationOrganizationFactsAggregatedSalarySupported)
            {
                if (source.EducationOrganizationFactsAggregatedSalary == null)
                {
                    if (target.EducationOrganizationFactsAggregatedSalary != null)
                    {
                        target.EducationOrganizationFactsAggregatedSalary = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.EducationOrganizationFactsAggregatedSalary == null)
                    {
                        var itemType = target.GetType().GetProperty("EducationOrganizationFactsAggregatedSalary").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.EducationOrganizationFactsAggregatedSalary = (IEducationOrganizationFactsAggregatedSalary) newItem;
                    }

                    isModified |= source.EducationOrganizationFactsAggregatedSalary.Synchronize(target.EducationOrganizationFactsAggregatedSalary);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsEducationOrganizationFactsVacanciesSupported)
            {
                isModified |= 
                    source.EducationOrganizationFactsVacancies.SynchronizeCollectionTo(
                        target.EducationOrganizationFactsVacancies, 
                        onChildAdded: child => 
                            {
                                child.EducationOrganizationFacts = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsEducationOrganizationFactsVacanciesIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IEducationOrganizationFacts source, IEducationOrganizationFacts target, Action<IEducationOrganizationFacts, IEducationOrganizationFacts> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationFactsSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationFactsSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FactsAsOfDate = source.FactsAsOfDate;
            target.SchoolYear = source.SchoolYear;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAverageYearsInDistrictEmployedSupported)
                target.AverageYearsInDistrictEmployed = source.AverageYearsInDistrictEmployed;
            else
                targetSynchSupport.IsAverageYearsInDistrictEmployedSupported = false;

            if (sourceSynchSupport.IsHiringRateSupported)
                target.HiringRate = source.HiringRate;
            else
                targetSynchSupport.IsHiringRateSupported = false;

            if (sourceSynchSupport.IsNumberAdministratorsEmployedSupported)
                target.NumberAdministratorsEmployed = source.NumberAdministratorsEmployed;
            else
                targetSynchSupport.IsNumberAdministratorsEmployedSupported = false;

            if (sourceSynchSupport.IsNumberStudentsEnrolledSupported)
                target.NumberStudentsEnrolled = source.NumberStudentsEnrolled;
            else
                targetSynchSupport.IsNumberStudentsEnrolledSupported = false;

            if (sourceSynchSupport.IsNumberTeachersEmployedSupported)
                target.NumberTeachersEmployed = source.NumberTeachersEmployed;
            else
                targetSynchSupport.IsNumberTeachersEmployedSupported = false;

            if (sourceSynchSupport.IsPercentStudentsFreeReducedLunchSupported)
                target.PercentStudentsFreeReducedLunch = source.PercentStudentsFreeReducedLunch;
            else
                targetSynchSupport.IsPercentStudentsFreeReducedLunchSupported = false;

            if (sourceSynchSupport.IsPercentStudentsLimitedEnglishProficiencySupported)
                target.PercentStudentsLimitedEnglishProficiency = source.PercentStudentsLimitedEnglishProficiency;
            else
                targetSynchSupport.IsPercentStudentsLimitedEnglishProficiencySupported = false;

            if (sourceSynchSupport.IsPercentStudentsSpecialEducationSupported)
                target.PercentStudentsSpecialEducation = source.PercentStudentsSpecialEducation;
            else
                targetSynchSupport.IsPercentStudentsSpecialEducationSupported = false;

            if (sourceSynchSupport.IsRetentionRateSupported)
                target.RetentionRate = source.RetentionRate;
            else
                targetSynchSupport.IsRetentionRateSupported = false;

            if (sourceSynchSupport.IsRetirementRateSupported)
                target.RetirementRate = source.RetirementRate;
            else
                targetSynchSupport.IsRetirementRateSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // EducationOrganizationFactsAggregatedSalary (Source)
            if (sourceSynchSupport.IsEducationOrganizationFactsAggregatedSalarySupported)
            {
                var itemProperty = target.GetType().GetProperty("EducationOrganizationFactsAggregatedSalary");
                
                if (itemProperty != null)
                {                    
                    if (source.EducationOrganizationFactsAggregatedSalary == null)
                    {
                        target.EducationOrganizationFactsAggregatedSalary = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetEducationOrganizationFactsAggregatedSalary = Activator.CreateInstance(itemType);
                        (targetEducationOrganizationFactsAggregatedSalary as IChildEntity)?.SetParent(target);
                        source.EducationOrganizationFactsAggregatedSalary.Map(targetEducationOrganizationFactsAggregatedSalary);
                        
                        // Update the target reference appropriately
                        target.EducationOrganizationFactsAggregatedSalary = (IEducationOrganizationFactsAggregatedSalary) targetEducationOrganizationFactsAggregatedSalary;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationFactsAggregatedSalarySupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists

            if (sourceSynchSupport.IsEducationOrganizationFactsVacanciesSupported)
            {    
                targetSynchSupport.IsEducationOrganizationFactsVacanciesIncluded = sourceSynchSupport.IsEducationOrganizationFactsVacanciesIncluded;
                source.EducationOrganizationFactsVacancies.MapCollectionTo(target.EducationOrganizationFactsVacancies, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationFactsVacanciesSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationFactsSynchronizationSourceSupport 
    {
        bool IsAverageYearsInDistrictEmployedSupported { get; set; }
        bool IsEducationOrganizationFactsAggregatedSalarySupported { get; set; }
        bool IsEducationOrganizationFactsVacanciesSupported { get; set; }
        bool IsHiringRateSupported { get; set; }
        bool IsNumberAdministratorsEmployedSupported { get; set; }
        bool IsNumberStudentsEnrolledSupported { get; set; }
        bool IsNumberTeachersEmployedSupported { get; set; }
        bool IsPercentStudentsFreeReducedLunchSupported { get; set; }
        bool IsPercentStudentsLimitedEnglishProficiencySupported { get; set; }
        bool IsPercentStudentsSpecialEducationSupported { get; set; }
        bool IsRetentionRateSupported { get; set; }
        bool IsRetirementRateSupported { get; set; }
        Func<IEducationOrganizationFactsVacancies, bool> IsEducationOrganizationFactsVacanciesIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationFactsAggregatedSalaryMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationFactsAggregatedSalary source, IEducationOrganizationFactsAggregatedSalary target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationFactsAggregatedSalarySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAverageSalarySupported)
                && target.AverageSalary != source.AverageSalary)
            {
                target.AverageSalary = source.AverageSalary;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCountOfSalariesAveragedSupported)
                && target.CountOfSalariesAveraged != source.CountOfSalariesAveraged)
            {
                target.CountOfSalariesAveraged = source.CountOfSalariesAveraged;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSalaryMaxRangeSupported)
                && target.SalaryMaxRange != source.SalaryMaxRange)
            {
                target.SalaryMaxRange = source.SalaryMaxRange;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSalaryMinRangeSupported)
                && target.SalaryMinRange != source.SalaryMinRange)
            {
                target.SalaryMinRange = source.SalaryMinRange;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStandardDeviationSupported)
                && target.StandardDeviation != source.StandardDeviation)
            {
                target.StandardDeviation = source.StandardDeviation;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationFactsAggregatedSalary source, IEducationOrganizationFactsAggregatedSalary target, Action<IEducationOrganizationFactsAggregatedSalary, IEducationOrganizationFactsAggregatedSalary> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationFactsAggregatedSalarySynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationFactsAggregatedSalarySynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsAverageSalarySupported)
                target.AverageSalary = source.AverageSalary;
            else
                targetSynchSupport.IsAverageSalarySupported = false;

            if (sourceSynchSupport.IsCountOfSalariesAveragedSupported)
                target.CountOfSalariesAveraged = source.CountOfSalariesAveraged;
            else
                targetSynchSupport.IsCountOfSalariesAveragedSupported = false;

            if (sourceSynchSupport.IsSalaryMaxRangeSupported)
                target.SalaryMaxRange = source.SalaryMaxRange;
            else
                targetSynchSupport.IsSalaryMaxRangeSupported = false;

            if (sourceSynchSupport.IsSalaryMinRangeSupported)
                target.SalaryMinRange = source.SalaryMinRange;
            else
                targetSynchSupport.IsSalaryMinRangeSupported = false;

            if (sourceSynchSupport.IsStandardDeviationSupported)
                target.StandardDeviation = source.StandardDeviation;
            else
                targetSynchSupport.IsStandardDeviationSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationFactsAggregatedSalarySynchronizationSourceSupport 
    {
        bool IsAverageSalarySupported { get; set; }
        bool IsCountOfSalariesAveragedSupported { get; set; }
        bool IsSalaryMaxRangeSupported { get; set; }
        bool IsSalaryMinRangeSupported { get; set; }
        bool IsStandardDeviationSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationFactsVacanciesMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationFactsVacancies source, IEducationOrganizationFactsVacancies target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationFactsVacanciesSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AcademicSubjectDescriptor != target.AcademicSubjectDescriptor)
            {
                source.AcademicSubjectDescriptor = target.AcademicSubjectDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsNumberOfVacanciesSupported)
                && target.NumberOfVacancies != source.NumberOfVacancies)
            {
                target.NumberOfVacancies = source.NumberOfVacancies;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsEducationOrganizationFactsVacanciesGradeLevelsSupported)
            {
                isModified |= 
                    source.EducationOrganizationFactsVacanciesGradeLevels.SynchronizeCollectionTo(
                        target.EducationOrganizationFactsVacanciesGradeLevels, 
                        onChildAdded: child => 
                            {
                                child.EducationOrganizationFactsVacancies = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsEducationOrganizationFactsVacanciesGradeLevelIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IEducationOrganizationFactsVacancies source, IEducationOrganizationFactsVacancies target, Action<IEducationOrganizationFactsVacancies, IEducationOrganizationFactsVacancies> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationFactsVacanciesSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationFactsVacanciesSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsNumberOfVacanciesSupported)
                target.NumberOfVacancies = source.NumberOfVacancies;
            else
                targetSynchSupport.IsNumberOfVacanciesSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsEducationOrganizationFactsVacanciesGradeLevelsSupported)
            {    
                targetSynchSupport.IsEducationOrganizationFactsVacanciesGradeLevelIncluded = sourceSynchSupport.IsEducationOrganizationFactsVacanciesGradeLevelIncluded;
                source.EducationOrganizationFactsVacanciesGradeLevels.MapCollectionTo(target.EducationOrganizationFactsVacanciesGradeLevels, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationFactsVacanciesGradeLevelsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationFactsVacanciesSynchronizationSourceSupport 
    {
        bool IsEducationOrganizationFactsVacanciesGradeLevelsSupported { get; set; }
        bool IsNumberOfVacanciesSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
        Func<IEducationOrganizationFactsVacanciesGradeLevel, bool> IsEducationOrganizationFactsVacanciesGradeLevelIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationFactsVacanciesGradeLevelMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationFactsVacanciesGradeLevel source, IEducationOrganizationFactsVacanciesGradeLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationFactsVacanciesGradeLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationFactsVacanciesGradeLevel source, IEducationOrganizationFactsVacanciesGradeLevel target, Action<IEducationOrganizationFactsVacanciesGradeLevel, IEducationOrganizationFactsVacanciesGradeLevel> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationFactsVacanciesGradeLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationFactsVacanciesGradeLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationFactsVacanciesGradeLevelSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: EducationOrganizationNetwork

namespace EdFi.Ods.Entities.Common.TPDM //.EducationOrganizationNetworkAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationNetworkExtensionMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationNetworkExtension source, IEducationOrganizationNetworkExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationNetworkExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.EducationOrganizationNetwork as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsFederalLocaleCodeDescriptorSupported)
                && target.FederalLocaleCodeDescriptor != source.FederalLocaleCodeDescriptor)
            {
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationNetworkExtension source, IEducationOrganizationNetworkExtension target, Action<IEducationOrganizationNetworkExtension, IEducationOrganizationNetworkExtension> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationNetworkExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationNetworkExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsFederalLocaleCodeDescriptorSupported)
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
            else
                targetSynchSupport.IsFederalLocaleCodeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationNetworkExtensionSynchronizationSourceSupport 
    {
        bool IsFederalLocaleCodeDescriptorSupported { get; set; }
    }
 
}
// Aggregate: EducationOrganizationStudentAcademicRecordFacts

namespace EdFi.Ods.Entities.Common.TPDM //.EducationOrganizationStudentAcademicRecordFactsAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationStudentAcademicRecordFactsMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationStudentAcademicRecordFacts source, IEducationOrganizationStudentAcademicRecordFacts target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationStudentAcademicRecordFactsSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.FactAsOfDate != target.FactAsOfDate)
            {
                source.FactAsOfDate = target.FactAsOfDate;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAggregatedGPAMaxSupported)
                && target.AggregatedGPAMax != source.AggregatedGPAMax)
            {
                target.AggregatedGPAMax = source.AggregatedGPAMax;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage
            if (sourceSupport == null || sourceSupport.IsEducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageSupported)
            {
                if (source.EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage == null)
                {
                    if (target.EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage != null)
                    {
                        target.EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage == null)
                    {
                        var itemType = target.GetType().GetProperty("EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage = (IEducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage) newItem;
                    }

                    isModified |= source.EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage.Synchronize(target.EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage);
                }
            }
            // EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage
            if (sourceSupport == null || sourceSupport.IsEducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverageSupported)
            {
                if (source.EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage == null)
                {
                    if (target.EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage != null)
                    {
                        target.EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage == null)
                    {
                        var itemType = target.GetType().GetProperty("EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage = (IEducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage) newItem;
                    }

                    isModified |= source.EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage.Synchronize(target.EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage);
                }
            }
            // EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled
            if (sourceSupport == null || sourceSupport.IsEducationOrganizationStudentAcademicRecordFactsStudentsEnrolledSupported)
            {
                if (source.EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled == null)
                {
                    if (target.EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled != null)
                    {
                        target.EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled == null)
                    {
                        var itemType = target.GetType().GetProperty("EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled = (IEducationOrganizationStudentAcademicRecordFactsStudentsEnrolled) newItem;
                    }

                    isModified |= source.EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled.Synchronize(target.EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationStudentAcademicRecordFacts source, IEducationOrganizationStudentAcademicRecordFacts target, Action<IEducationOrganizationStudentAcademicRecordFacts, IEducationOrganizationStudentAcademicRecordFacts> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationStudentAcademicRecordFactsSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationStudentAcademicRecordFactsSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FactAsOfDate = source.FactAsOfDate;
            target.SchoolYear = source.SchoolYear;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAggregatedGPAMaxSupported)
                target.AggregatedGPAMax = source.AggregatedGPAMax;
            else
                targetSynchSupport.IsAggregatedGPAMaxSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage (Source)
            if (sourceSynchSupport.IsEducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageSupported)
            {
                var itemProperty = target.GetType().GetProperty("EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage");
                
                if (itemProperty != null)
                {                    
                    if (source.EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage == null)
                    {
                        target.EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetEducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage = Activator.CreateInstance(itemType);
                        (targetEducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage as IChildEntity)?.SetParent(target);
                        source.EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage.Map(targetEducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage);
                        
                        // Update the target reference appropriately
                        target.EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage = (IEducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage) targetEducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageSupported = false; 
            }
            // EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage (Source)
            if (sourceSynchSupport.IsEducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverageSupported)
            {
                var itemProperty = target.GetType().GetProperty("EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage");
                
                if (itemProperty != null)
                {                    
                    if (source.EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage == null)
                    {
                        target.EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetEducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage = Activator.CreateInstance(itemType);
                        (targetEducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage as IChildEntity)?.SetParent(target);
                        source.EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage.Map(targetEducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage);
                        
                        // Update the target reference appropriately
                        target.EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage = (IEducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage) targetEducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverageSupported = false; 
            }
            // EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled (Source)
            if (sourceSynchSupport.IsEducationOrganizationStudentAcademicRecordFactsStudentsEnrolledSupported)
            {
                var itemProperty = target.GetType().GetProperty("EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled");
                
                if (itemProperty != null)
                {                    
                    if (source.EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled == null)
                    {
                        target.EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetEducationOrganizationStudentAcademicRecordFactsStudentsEnrolled = Activator.CreateInstance(itemType);
                        (targetEducationOrganizationStudentAcademicRecordFactsStudentsEnrolled as IChildEntity)?.SetParent(target);
                        source.EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled.Map(targetEducationOrganizationStudentAcademicRecordFactsStudentsEnrolled);
                        
                        // Update the target reference appropriately
                        target.EducationOrganizationStudentAcademicRecordFactsStudentsEnrolled = (IEducationOrganizationStudentAcademicRecordFactsStudentsEnrolled) targetEducationOrganizationStudentAcademicRecordFactsStudentsEnrolled;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationStudentAcademicRecordFactsStudentsEnrolledSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationStudentAcademicRecordFactsSynchronizationSourceSupport 
    {
        bool IsAggregatedGPAMaxSupported { get; set; }
        bool IsEducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageSupported { get; set; }
        bool IsEducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverageSupported { get; set; }
        bool IsEducationOrganizationStudentAcademicRecordFactsStudentsEnrolledSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage source, IEducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsGradePointAverageSupported)
                && target.GradePointAverage != source.GradePointAverage)
            {
                target.GradePointAverage = source.GradePointAverage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGradePointNCountSupported)
                && target.GradePointNCount != source.GradePointNCount)
            {
                target.GradePointNCount = source.GradePointNCount;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGradePointStandardDeviationSupported)
                && target.GradePointStandardDeviation != source.GradePointStandardDeviation)
            {
                target.GradePointStandardDeviation = source.GradePointStandardDeviation;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage source, IEducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage target, Action<IEducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage, IEducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsGradePointAverageSupported)
                target.GradePointAverage = source.GradePointAverage;
            else
                targetSynchSupport.IsGradePointAverageSupported = false;

            if (sourceSynchSupport.IsGradePointNCountSupported)
                target.GradePointNCount = source.GradePointNCount;
            else
                targetSynchSupport.IsGradePointNCountSupported = false;

            if (sourceSynchSupport.IsGradePointStandardDeviationSupported)
                target.GradePointStandardDeviation = source.GradePointStandardDeviation;
            else
                targetSynchSupport.IsGradePointStandardDeviationSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageSynchronizationSourceSupport 
    {
        bool IsGradePointAverageSupported { get; set; }
        bool IsGradePointNCountSupported { get; set; }
        bool IsGradePointStandardDeviationSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverageMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage source, IEducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverageSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsGradePointAverageSupported)
                && target.GradePointAverage != source.GradePointAverage)
            {
                target.GradePointAverage = source.GradePointAverage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGradePointNCountSupported)
                && target.GradePointNCount != source.GradePointNCount)
            {
                target.GradePointNCount = source.GradePointNCount;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGradePointStandardDeviationSupported)
                && target.GradePointStandardDeviation != source.GradePointStandardDeviation)
            {
                target.GradePointStandardDeviation = source.GradePointStandardDeviation;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage source, IEducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage target, Action<IEducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage, IEducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverage> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverageSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverageSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsGradePointAverageSupported)
                target.GradePointAverage = source.GradePointAverage;
            else
                targetSynchSupport.IsGradePointAverageSupported = false;

            if (sourceSynchSupport.IsGradePointNCountSupported)
                target.GradePointNCount = source.GradePointNCount;
            else
                targetSynchSupport.IsGradePointNCountSupported = false;

            if (sourceSynchSupport.IsGradePointStandardDeviationSupported)
                target.GradePointStandardDeviation = source.GradePointStandardDeviation;
            else
                targetSynchSupport.IsGradePointStandardDeviationSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationStudentAcademicRecordFactsAggregatedSessionGradePointAverageSynchronizationSourceSupport 
    {
        bool IsGradePointAverageSupported { get; set; }
        bool IsGradePointNCountSupported { get; set; }
        bool IsGradePointStandardDeviationSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationStudentAcademicRecordFactsStudentsEnrolledMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationStudentAcademicRecordFactsStudentsEnrolled source, IEducationOrganizationStudentAcademicRecordFactsStudentsEnrolled target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationStudentAcademicRecordFactsStudentsEnrolledSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsNumberStudentsEnrolledSupported)
                && target.NumberStudentsEnrolled != source.NumberStudentsEnrolled)
            {
                target.NumberStudentsEnrolled = source.NumberStudentsEnrolled;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPercentAtRiskSupported)
                && target.PercentAtRisk != source.PercentAtRisk)
            {
                target.PercentAtRisk = source.PercentAtRisk;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPercentMobilitySupported)
                && target.PercentMobility != source.PercentMobility)
            {
                target.PercentMobility = source.PercentMobility;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationStudentAcademicRecordFactsStudentsEnrolled source, IEducationOrganizationStudentAcademicRecordFactsStudentsEnrolled target, Action<IEducationOrganizationStudentAcademicRecordFactsStudentsEnrolled, IEducationOrganizationStudentAcademicRecordFactsStudentsEnrolled> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationStudentAcademicRecordFactsStudentsEnrolledSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationStudentAcademicRecordFactsStudentsEnrolledSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsNumberStudentsEnrolledSupported)
                target.NumberStudentsEnrolled = source.NumberStudentsEnrolled;
            else
                targetSynchSupport.IsNumberStudentsEnrolledSupported = false;

            if (sourceSynchSupport.IsPercentAtRiskSupported)
                target.PercentAtRisk = source.PercentAtRisk;
            else
                targetSynchSupport.IsPercentAtRiskSupported = false;

            if (sourceSynchSupport.IsPercentMobilitySupported)
                target.PercentMobility = source.PercentMobility;
            else
                targetSynchSupport.IsPercentMobilitySupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationStudentAcademicRecordFactsStudentsEnrolledSynchronizationSourceSupport 
    {
        bool IsNumberStudentsEnrolledSupported { get; set; }
        bool IsPercentAtRiskSupported { get; set; }
        bool IsPercentMobilitySupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
}
// Aggregate: EducationOrganizationStudentAssessmentFacts

namespace EdFi.Ods.Entities.Common.TPDM //.EducationOrganizationStudentAssessmentFactsAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationStudentAssessmentFactsMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationStudentAssessmentFacts source, IEducationOrganizationStudentAssessmentFacts target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationStudentAssessmentFactsSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.FactAsOfDate != target.FactAsOfDate)
            {
                source.FactAsOfDate = target.FactAsOfDate;
            }
            if (source.TakenSchoolYear != target.TakenSchoolYear)
            {
                source.TakenSchoolYear = target.TakenSchoolYear;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAcademicSubjectDescriptorSupported)
                && target.AcademicSubjectDescriptor != source.AcademicSubjectDescriptor)
            {
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAdministrationDateSupported)
                && target.AdministrationDate != source.AdministrationDate)
            {
                target.AdministrationDate = source.AdministrationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAssessmentCategoryDescriptorSupported)
                && target.AssessmentCategoryDescriptor != source.AssessmentCategoryDescriptor)
            {
                target.AssessmentCategoryDescriptor = source.AssessmentCategoryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAssessmentTitleSupported)
                && target.AssessmentTitle != source.AssessmentTitle)
            {
                target.AssessmentTitle = source.AssessmentTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGradeLevelDescriptorSupported)
                && target.GradeLevelDescriptor != source.GradeLevelDescriptor)
            {
                target.GradeLevelDescriptor = source.GradeLevelDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTermDescriptorSupported)
                && target.TermDescriptor != source.TermDescriptor)
            {
                target.TermDescriptor = source.TermDescriptor;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // EducationOrganizationStudentAssessmentFactsAggregatedScoreResult
            if (sourceSupport == null || sourceSupport.IsEducationOrganizationStudentAssessmentFactsAggregatedScoreResultSupported)
            {
                if (source.EducationOrganizationStudentAssessmentFactsAggregatedScoreResult == null)
                {
                    if (target.EducationOrganizationStudentAssessmentFactsAggregatedScoreResult != null)
                    {
                        target.EducationOrganizationStudentAssessmentFactsAggregatedScoreResult = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.EducationOrganizationStudentAssessmentFactsAggregatedScoreResult == null)
                    {
                        var itemType = target.GetType().GetProperty("EducationOrganizationStudentAssessmentFactsAggregatedScoreResult").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.EducationOrganizationStudentAssessmentFactsAggregatedScoreResult = (IEducationOrganizationStudentAssessmentFactsAggregatedScoreResult) newItem;
                    }

                    isModified |= source.EducationOrganizationStudentAssessmentFactsAggregatedScoreResult.Synchronize(target.EducationOrganizationStudentAssessmentFactsAggregatedScoreResult);
                }
            }
            // EducationOrganizationStudentAssessmentFactsStudentsEnrolled
            if (sourceSupport == null || sourceSupport.IsEducationOrganizationStudentAssessmentFactsStudentsEnrolledSupported)
            {
                if (source.EducationOrganizationStudentAssessmentFactsStudentsEnrolled == null)
                {
                    if (target.EducationOrganizationStudentAssessmentFactsStudentsEnrolled != null)
                    {
                        target.EducationOrganizationStudentAssessmentFactsStudentsEnrolled = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.EducationOrganizationStudentAssessmentFactsStudentsEnrolled == null)
                    {
                        var itemType = target.GetType().GetProperty("EducationOrganizationStudentAssessmentFactsStudentsEnrolled").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.EducationOrganizationStudentAssessmentFactsStudentsEnrolled = (IEducationOrganizationStudentAssessmentFactsStudentsEnrolled) newItem;
                    }

                    isModified |= source.EducationOrganizationStudentAssessmentFactsStudentsEnrolled.Synchronize(target.EducationOrganizationStudentAssessmentFactsStudentsEnrolled);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsEducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevelsSupported)
            {
                isModified |= 
                    source.EducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevels.SynchronizeCollectionTo(
                        target.EducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevels, 
                        onChildAdded: child => 
                            {
                                child.EducationOrganizationStudentAssessmentFacts = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsEducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevelIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IEducationOrganizationStudentAssessmentFacts source, IEducationOrganizationStudentAssessmentFacts target, Action<IEducationOrganizationStudentAssessmentFacts, IEducationOrganizationStudentAssessmentFacts> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationStudentAssessmentFactsSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationStudentAssessmentFactsSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FactAsOfDate = source.FactAsOfDate;
            target.TakenSchoolYear = source.TakenSchoolYear;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAcademicSubjectDescriptorSupported)
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
            else
                targetSynchSupport.IsAcademicSubjectDescriptorSupported = false;

            if (sourceSynchSupport.IsAdministrationDateSupported)
                target.AdministrationDate = source.AdministrationDate;
            else
                targetSynchSupport.IsAdministrationDateSupported = false;

            if (sourceSynchSupport.IsAssessmentCategoryDescriptorSupported)
                target.AssessmentCategoryDescriptor = source.AssessmentCategoryDescriptor;
            else
                targetSynchSupport.IsAssessmentCategoryDescriptorSupported = false;

            if (sourceSynchSupport.IsAssessmentTitleSupported)
                target.AssessmentTitle = source.AssessmentTitle;
            else
                targetSynchSupport.IsAssessmentTitleSupported = false;

            if (sourceSynchSupport.IsGradeLevelDescriptorSupported)
                target.GradeLevelDescriptor = source.GradeLevelDescriptor;
            else
                targetSynchSupport.IsGradeLevelDescriptorSupported = false;

            if (sourceSynchSupport.IsTermDescriptorSupported)
                target.TermDescriptor = source.TermDescriptor;
            else
                targetSynchSupport.IsTermDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.TakenSchoolYearTypeResourceId = source.TakenSchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // EducationOrganizationStudentAssessmentFactsAggregatedScoreResult (Source)
            if (sourceSynchSupport.IsEducationOrganizationStudentAssessmentFactsAggregatedScoreResultSupported)
            {
                var itemProperty = target.GetType().GetProperty("EducationOrganizationStudentAssessmentFactsAggregatedScoreResult");
                
                if (itemProperty != null)
                {                    
                    if (source.EducationOrganizationStudentAssessmentFactsAggregatedScoreResult == null)
                    {
                        target.EducationOrganizationStudentAssessmentFactsAggregatedScoreResult = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetEducationOrganizationStudentAssessmentFactsAggregatedScoreResult = Activator.CreateInstance(itemType);
                        (targetEducationOrganizationStudentAssessmentFactsAggregatedScoreResult as IChildEntity)?.SetParent(target);
                        source.EducationOrganizationStudentAssessmentFactsAggregatedScoreResult.Map(targetEducationOrganizationStudentAssessmentFactsAggregatedScoreResult);
                        
                        // Update the target reference appropriately
                        target.EducationOrganizationStudentAssessmentFactsAggregatedScoreResult = (IEducationOrganizationStudentAssessmentFactsAggregatedScoreResult) targetEducationOrganizationStudentAssessmentFactsAggregatedScoreResult;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationStudentAssessmentFactsAggregatedScoreResultSupported = false; 
            }
            // EducationOrganizationStudentAssessmentFactsStudentsEnrolled (Source)
            if (sourceSynchSupport.IsEducationOrganizationStudentAssessmentFactsStudentsEnrolledSupported)
            {
                var itemProperty = target.GetType().GetProperty("EducationOrganizationStudentAssessmentFactsStudentsEnrolled");
                
                if (itemProperty != null)
                {                    
                    if (source.EducationOrganizationStudentAssessmentFactsStudentsEnrolled == null)
                    {
                        target.EducationOrganizationStudentAssessmentFactsStudentsEnrolled = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetEducationOrganizationStudentAssessmentFactsStudentsEnrolled = Activator.CreateInstance(itemType);
                        (targetEducationOrganizationStudentAssessmentFactsStudentsEnrolled as IChildEntity)?.SetParent(target);
                        source.EducationOrganizationStudentAssessmentFactsStudentsEnrolled.Map(targetEducationOrganizationStudentAssessmentFactsStudentsEnrolled);
                        
                        // Update the target reference appropriately
                        target.EducationOrganizationStudentAssessmentFactsStudentsEnrolled = (IEducationOrganizationStudentAssessmentFactsStudentsEnrolled) targetEducationOrganizationStudentAssessmentFactsStudentsEnrolled;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationStudentAssessmentFactsStudentsEnrolledSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists

            if (sourceSynchSupport.IsEducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevelsSupported)
            {    
                targetSynchSupport.IsEducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevelIncluded = sourceSynchSupport.IsEducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevelIncluded;
                source.EducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevels.MapCollectionTo(target.EducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevels, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevelsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationStudentAssessmentFactsSynchronizationSourceSupport 
    {
        bool IsAcademicSubjectDescriptorSupported { get; set; }
        bool IsAdministrationDateSupported { get; set; }
        bool IsAssessmentCategoryDescriptorSupported { get; set; }
        bool IsAssessmentTitleSupported { get; set; }
        bool IsEducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevelsSupported { get; set; }
        bool IsEducationOrganizationStudentAssessmentFactsAggregatedScoreResultSupported { get; set; }
        bool IsEducationOrganizationStudentAssessmentFactsStudentsEnrolledSupported { get; set; }
        bool IsGradeLevelDescriptorSupported { get; set; }
        bool IsTermDescriptorSupported { get; set; }
        Func<IEducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel, bool> IsEducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevelIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevelMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel source, IEducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.PerformanceLevelDescriptor != target.PerformanceLevelDescriptor)
            {
                source.PerformanceLevelDescriptor = target.PerformanceLevelDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsPerformanceLevelMetNumberSupported)
                && target.PerformanceLevelMetNumber != source.PerformanceLevelMetNumber)
            {
                target.PerformanceLevelMetNumber = source.PerformanceLevelMetNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPerformanceLevelMetPercentageSupported)
                && target.PerformanceLevelMetPercentage != source.PerformanceLevelMetPercentage)
            {
                target.PerformanceLevelMetPercentage = source.PerformanceLevelMetPercentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPerformanceLevelTypeNumberSupported)
                && target.PerformanceLevelTypeNumber != source.PerformanceLevelTypeNumber)
            {
                target.PerformanceLevelTypeNumber = source.PerformanceLevelTypeNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPerformanceLevelTypePercentageSupported)
                && target.PerformanceLevelTypePercentage != source.PerformanceLevelTypePercentage)
            {
                target.PerformanceLevelTypePercentage = source.PerformanceLevelTypePercentage;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel source, IEducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel target, Action<IEducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel, IEducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevel> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.PerformanceLevelDescriptor = source.PerformanceLevelDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsPerformanceLevelMetNumberSupported)
                target.PerformanceLevelMetNumber = source.PerformanceLevelMetNumber;
            else
                targetSynchSupport.IsPerformanceLevelMetNumberSupported = false;

            if (sourceSynchSupport.IsPerformanceLevelMetPercentageSupported)
                target.PerformanceLevelMetPercentage = source.PerformanceLevelMetPercentage;
            else
                targetSynchSupport.IsPerformanceLevelMetPercentageSupported = false;

            if (sourceSynchSupport.IsPerformanceLevelTypeNumberSupported)
                target.PerformanceLevelTypeNumber = source.PerformanceLevelTypeNumber;
            else
                targetSynchSupport.IsPerformanceLevelTypeNumberSupported = false;

            if (sourceSynchSupport.IsPerformanceLevelTypePercentageSupported)
                target.PerformanceLevelTypePercentage = source.PerformanceLevelTypePercentage;
            else
                targetSynchSupport.IsPerformanceLevelTypePercentageSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationStudentAssessmentFactsAggregatedPerformanceLevelSynchronizationSourceSupport 
    {
        bool IsPerformanceLevelMetNumberSupported { get; set; }
        bool IsPerformanceLevelMetPercentageSupported { get; set; }
        bool IsPerformanceLevelTypeNumberSupported { get; set; }
        bool IsPerformanceLevelTypePercentageSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationStudentAssessmentFactsAggregatedScoreResultMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationStudentAssessmentFactsAggregatedScoreResult source, IEducationOrganizationStudentAssessmentFactsAggregatedScoreResult target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationStudentAssessmentFactsAggregatedScoreResultSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAssessmentReportingMethodDescriptorSupported)
                && target.AssessmentReportingMethodDescriptor != source.AssessmentReportingMethodDescriptor)
            {
                target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAverageScoreResultSupported)
                && target.AverageScoreResult != source.AverageScoreResult)
            {
                target.AverageScoreResult = source.AverageScoreResult;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAverageScoreResultDatatypeTypeDescriptorSupported)
                && target.AverageScoreResultDatatypeTypeDescriptor != source.AverageScoreResultDatatypeTypeDescriptor)
            {
                target.AverageScoreResultDatatypeTypeDescriptor = source.AverageScoreResultDatatypeTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsScoreNCountSupported)
                && target.ScoreNCount != source.ScoreNCount)
            {
                target.ScoreNCount = source.ScoreNCount;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsScoreStandardDeviationSupported)
                && target.ScoreStandardDeviation != source.ScoreStandardDeviation)
            {
                target.ScoreStandardDeviation = source.ScoreStandardDeviation;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationStudentAssessmentFactsAggregatedScoreResult source, IEducationOrganizationStudentAssessmentFactsAggregatedScoreResult target, Action<IEducationOrganizationStudentAssessmentFactsAggregatedScoreResult, IEducationOrganizationStudentAssessmentFactsAggregatedScoreResult> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationStudentAssessmentFactsAggregatedScoreResultSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationStudentAssessmentFactsAggregatedScoreResultSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsAssessmentReportingMethodDescriptorSupported)
                target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;
            else
                targetSynchSupport.IsAssessmentReportingMethodDescriptorSupported = false;

            if (sourceSynchSupport.IsAverageScoreResultSupported)
                target.AverageScoreResult = source.AverageScoreResult;
            else
                targetSynchSupport.IsAverageScoreResultSupported = false;

            if (sourceSynchSupport.IsAverageScoreResultDatatypeTypeDescriptorSupported)
                target.AverageScoreResultDatatypeTypeDescriptor = source.AverageScoreResultDatatypeTypeDescriptor;
            else
                targetSynchSupport.IsAverageScoreResultDatatypeTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsScoreNCountSupported)
                target.ScoreNCount = source.ScoreNCount;
            else
                targetSynchSupport.IsScoreNCountSupported = false;

            if (sourceSynchSupport.IsScoreStandardDeviationSupported)
                target.ScoreStandardDeviation = source.ScoreStandardDeviation;
            else
                targetSynchSupport.IsScoreStandardDeviationSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationStudentAssessmentFactsAggregatedScoreResultSynchronizationSourceSupport 
    {
        bool IsAssessmentReportingMethodDescriptorSupported { get; set; }
        bool IsAverageScoreResultSupported { get; set; }
        bool IsAverageScoreResultDatatypeTypeDescriptorSupported { get; set; }
        bool IsScoreNCountSupported { get; set; }
        bool IsScoreStandardDeviationSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationStudentAssessmentFactsStudentsEnrolledMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationStudentAssessmentFactsStudentsEnrolled source, IEducationOrganizationStudentAssessmentFactsStudentsEnrolled target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationStudentAssessmentFactsStudentsEnrolledSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsNumberStudentsEnrolledSupported)
                && target.NumberStudentsEnrolled != source.NumberStudentsEnrolled)
            {
                target.NumberStudentsEnrolled = source.NumberStudentsEnrolled;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPercentAtRiskSupported)
                && target.PercentAtRisk != source.PercentAtRisk)
            {
                target.PercentAtRisk = source.PercentAtRisk;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPercentMobilitySupported)
                && target.PercentMobility != source.PercentMobility)
            {
                target.PercentMobility = source.PercentMobility;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationStudentAssessmentFactsStudentsEnrolled source, IEducationOrganizationStudentAssessmentFactsStudentsEnrolled target, Action<IEducationOrganizationStudentAssessmentFactsStudentsEnrolled, IEducationOrganizationStudentAssessmentFactsStudentsEnrolled> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationStudentAssessmentFactsStudentsEnrolledSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationStudentAssessmentFactsStudentsEnrolledSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsNumberStudentsEnrolledSupported)
                target.NumberStudentsEnrolled = source.NumberStudentsEnrolled;
            else
                targetSynchSupport.IsNumberStudentsEnrolledSupported = false;

            if (sourceSynchSupport.IsPercentAtRiskSupported)
                target.PercentAtRisk = source.PercentAtRisk;
            else
                targetSynchSupport.IsPercentAtRiskSupported = false;

            if (sourceSynchSupport.IsPercentMobilitySupported)
                target.PercentMobility = source.PercentMobility;
            else
                targetSynchSupport.IsPercentMobilitySupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationStudentAssessmentFactsStudentsEnrolledSynchronizationSourceSupport 
    {
        bool IsNumberStudentsEnrolledSupported { get; set; }
        bool IsPercentAtRiskSupported { get; set; }
        bool IsPercentMobilitySupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
}
// Aggregate: EducationOrganizationStudentFacts

namespace EdFi.Ods.Entities.Common.TPDM //.EducationOrganizationStudentFactsAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationStudentFactsMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationStudentFacts source, IEducationOrganizationStudentFacts target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationStudentFactsSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.FactAsOfDate != target.FactAsOfDate)
            {
                source.FactAsOfDate = target.FactAsOfDate;
            }

            // Copy non-PK properties

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled
            if (sourceSupport == null || sourceSupport.IsEducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabledSupported)
            {
                if (source.EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled == null)
                {
                    if (target.EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled != null)
                    {
                        target.EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled == null)
                    {
                        var itemType = target.GetType().GetProperty("EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled = (IEducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled) newItem;
                    }

                    isModified |= source.EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled.Synchronize(target.EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled);
                }
            }
            // EducationOrganizationStudentFactsAggregatedELLEnrollment
            if (sourceSupport == null || sourceSupport.IsEducationOrganizationStudentFactsAggregatedELLEnrollmentSupported)
            {
                if (source.EducationOrganizationStudentFactsAggregatedELLEnrollment == null)
                {
                    if (target.EducationOrganizationStudentFactsAggregatedELLEnrollment != null)
                    {
                        target.EducationOrganizationStudentFactsAggregatedELLEnrollment = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.EducationOrganizationStudentFactsAggregatedELLEnrollment == null)
                    {
                        var itemType = target.GetType().GetProperty("EducationOrganizationStudentFactsAggregatedELLEnrollment").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.EducationOrganizationStudentFactsAggregatedELLEnrollment = (IEducationOrganizationStudentFactsAggregatedELLEnrollment) newItem;
                    }

                    isModified |= source.EducationOrganizationStudentFactsAggregatedELLEnrollment.Synchronize(target.EducationOrganizationStudentFactsAggregatedELLEnrollment);
                }
            }
            // EducationOrganizationStudentFactsAggregatedESLEnrollment
            if (sourceSupport == null || sourceSupport.IsEducationOrganizationStudentFactsAggregatedESLEnrollmentSupported)
            {
                if (source.EducationOrganizationStudentFactsAggregatedESLEnrollment == null)
                {
                    if (target.EducationOrganizationStudentFactsAggregatedESLEnrollment != null)
                    {
                        target.EducationOrganizationStudentFactsAggregatedESLEnrollment = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.EducationOrganizationStudentFactsAggregatedESLEnrollment == null)
                    {
                        var itemType = target.GetType().GetProperty("EducationOrganizationStudentFactsAggregatedESLEnrollment").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.EducationOrganizationStudentFactsAggregatedESLEnrollment = (IEducationOrganizationStudentFactsAggregatedESLEnrollment) newItem;
                    }

                    isModified |= source.EducationOrganizationStudentFactsAggregatedESLEnrollment.Synchronize(target.EducationOrganizationStudentFactsAggregatedESLEnrollment);
                }
            }
            // EducationOrganizationStudentFactsAggregatedSection504Enrollment
            if (sourceSupport == null || sourceSupport.IsEducationOrganizationStudentFactsAggregatedSection504EnrollmentSupported)
            {
                if (source.EducationOrganizationStudentFactsAggregatedSection504Enrollment == null)
                {
                    if (target.EducationOrganizationStudentFactsAggregatedSection504Enrollment != null)
                    {
                        target.EducationOrganizationStudentFactsAggregatedSection504Enrollment = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.EducationOrganizationStudentFactsAggregatedSection504Enrollment == null)
                    {
                        var itemType = target.GetType().GetProperty("EducationOrganizationStudentFactsAggregatedSection504Enrollment").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.EducationOrganizationStudentFactsAggregatedSection504Enrollment = (IEducationOrganizationStudentFactsAggregatedSection504Enrollment) newItem;
                    }

                    isModified |= source.EducationOrganizationStudentFactsAggregatedSection504Enrollment.Synchronize(target.EducationOrganizationStudentFactsAggregatedSection504Enrollment);
                }
            }
            // EducationOrganizationStudentFactsAggregatedSPED
            if (sourceSupport == null || sourceSupport.IsEducationOrganizationStudentFactsAggregatedSPEDSupported)
            {
                if (source.EducationOrganizationStudentFactsAggregatedSPED == null)
                {
                    if (target.EducationOrganizationStudentFactsAggregatedSPED != null)
                    {
                        target.EducationOrganizationStudentFactsAggregatedSPED = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.EducationOrganizationStudentFactsAggregatedSPED == null)
                    {
                        var itemType = target.GetType().GetProperty("EducationOrganizationStudentFactsAggregatedSPED").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.EducationOrganizationStudentFactsAggregatedSPED = (IEducationOrganizationStudentFactsAggregatedSPED) newItem;
                    }

                    isModified |= source.EducationOrganizationStudentFactsAggregatedSPED.Synchronize(target.EducationOrganizationStudentFactsAggregatedSPED);
                }
            }
            // EducationOrganizationStudentFactsAggregatedTitleIEnrollment
            if (sourceSupport == null || sourceSupport.IsEducationOrganizationStudentFactsAggregatedTitleIEnrollmentSupported)
            {
                if (source.EducationOrganizationStudentFactsAggregatedTitleIEnrollment == null)
                {
                    if (target.EducationOrganizationStudentFactsAggregatedTitleIEnrollment != null)
                    {
                        target.EducationOrganizationStudentFactsAggregatedTitleIEnrollment = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.EducationOrganizationStudentFactsAggregatedTitleIEnrollment == null)
                    {
                        var itemType = target.GetType().GetProperty("EducationOrganizationStudentFactsAggregatedTitleIEnrollment").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.EducationOrganizationStudentFactsAggregatedTitleIEnrollment = (IEducationOrganizationStudentFactsAggregatedTitleIEnrollment) newItem;
                    }

                    isModified |= source.EducationOrganizationStudentFactsAggregatedTitleIEnrollment.Synchronize(target.EducationOrganizationStudentFactsAggregatedTitleIEnrollment);
                }
            }
            // EducationOrganizationStudentFactsStudentsEnrolled
            if (sourceSupport == null || sourceSupport.IsEducationOrganizationStudentFactsStudentsEnrolledSupported)
            {
                if (source.EducationOrganizationStudentFactsStudentsEnrolled == null)
                {
                    if (target.EducationOrganizationStudentFactsStudentsEnrolled != null)
                    {
                        target.EducationOrganizationStudentFactsStudentsEnrolled = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.EducationOrganizationStudentFactsStudentsEnrolled == null)
                    {
                        var itemType = target.GetType().GetProperty("EducationOrganizationStudentFactsStudentsEnrolled").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.EducationOrganizationStudentFactsStudentsEnrolled = (IEducationOrganizationStudentFactsStudentsEnrolled) newItem;
                    }

                    isModified |= source.EducationOrganizationStudentFactsStudentsEnrolled.Synchronize(target.EducationOrganizationStudentFactsStudentsEnrolled);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsEducationOrganizationStudentFactsAggregatedByDisabilitiesSupported)
            {
                isModified |= 
                    source.EducationOrganizationStudentFactsAggregatedByDisabilities.SynchronizeCollectionTo(
                        target.EducationOrganizationStudentFactsAggregatedByDisabilities, 
                        onChildAdded: child => 
                            {
                                child.EducationOrganizationStudentFacts = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsEducationOrganizationStudentFactsAggregatedByDisabilityIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationStudentFactsAggregatedGendersSupported)
            {
                isModified |= 
                    source.EducationOrganizationStudentFactsAggregatedGenders.SynchronizeCollectionTo(
                        target.EducationOrganizationStudentFactsAggregatedGenders, 
                        onChildAdded: child => 
                            {
                                child.EducationOrganizationStudentFacts = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsEducationOrganizationStudentFactsAggregatedGenderIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicitiesSupported)
            {
                isModified |= 
                    source.EducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicities.SynchronizeCollectionTo(
                        target.EducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicities, 
                        onChildAdded: child => 
                            {
                                child.EducationOrganizationStudentFacts = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsEducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicityIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationStudentFactsAggregatedLanguagesSupported)
            {
                isModified |= 
                    source.EducationOrganizationStudentFactsAggregatedLanguages.SynchronizeCollectionTo(
                        target.EducationOrganizationStudentFactsAggregatedLanguages, 
                        onChildAdded: child => 
                            {
                                child.EducationOrganizationStudentFacts = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsEducationOrganizationStudentFactsAggregatedLanguageIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationStudentFactsAggregatedRacesSupported)
            {
                isModified |= 
                    source.EducationOrganizationStudentFactsAggregatedRaces.SynchronizeCollectionTo(
                        target.EducationOrganizationStudentFactsAggregatedRaces, 
                        onChildAdded: child => 
                            {
                                child.EducationOrganizationStudentFacts = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsEducationOrganizationStudentFactsAggregatedRaceIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationStudentFactsAggregatedSchoolFoodServiceProgramServicesSupported)
            {
                isModified |= 
                    source.EducationOrganizationStudentFactsAggregatedSchoolFoodServiceProgramServices.SynchronizeCollectionTo(
                        target.EducationOrganizationStudentFactsAggregatedSchoolFoodServiceProgramServices, 
                        onChildAdded: child => 
                            {
                                child.EducationOrganizationStudentFacts = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsEducationOrganizationStudentFactsAggregatedSchoolFoodServiceProgramServiceIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationStudentFactsAggregatedSexesSupported)
            {
                isModified |= 
                    source.EducationOrganizationStudentFactsAggregatedSexes.SynchronizeCollectionTo(
                        target.EducationOrganizationStudentFactsAggregatedSexes, 
                        onChildAdded: child => 
                            {
                                child.EducationOrganizationStudentFacts = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsEducationOrganizationStudentFactsAggregatedSexIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IEducationOrganizationStudentFacts source, IEducationOrganizationStudentFacts target, Action<IEducationOrganizationStudentFacts, IEducationOrganizationStudentFacts> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationStudentFactsSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationStudentFactsSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FactAsOfDate = source.FactAsOfDate;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled (Source)
            if (sourceSynchSupport.IsEducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabledSupported)
            {
                var itemProperty = target.GetType().GetProperty("EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled");
                
                if (itemProperty != null)
                {                    
                    if (source.EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled == null)
                    {
                        target.EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetEducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled = Activator.CreateInstance(itemType);
                        (targetEducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled as IChildEntity)?.SetParent(target);
                        source.EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled.Map(targetEducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled);
                        
                        // Update the target reference appropriately
                        target.EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled = (IEducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled) targetEducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabledSupported = false; 
            }
            // EducationOrganizationStudentFactsAggregatedELLEnrollment (Source)
            if (sourceSynchSupport.IsEducationOrganizationStudentFactsAggregatedELLEnrollmentSupported)
            {
                var itemProperty = target.GetType().GetProperty("EducationOrganizationStudentFactsAggregatedELLEnrollment");
                
                if (itemProperty != null)
                {                    
                    if (source.EducationOrganizationStudentFactsAggregatedELLEnrollment == null)
                    {
                        target.EducationOrganizationStudentFactsAggregatedELLEnrollment = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetEducationOrganizationStudentFactsAggregatedELLEnrollment = Activator.CreateInstance(itemType);
                        (targetEducationOrganizationStudentFactsAggregatedELLEnrollment as IChildEntity)?.SetParent(target);
                        source.EducationOrganizationStudentFactsAggregatedELLEnrollment.Map(targetEducationOrganizationStudentFactsAggregatedELLEnrollment);
                        
                        // Update the target reference appropriately
                        target.EducationOrganizationStudentFactsAggregatedELLEnrollment = (IEducationOrganizationStudentFactsAggregatedELLEnrollment) targetEducationOrganizationStudentFactsAggregatedELLEnrollment;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationStudentFactsAggregatedELLEnrollmentSupported = false; 
            }
            // EducationOrganizationStudentFactsAggregatedESLEnrollment (Source)
            if (sourceSynchSupport.IsEducationOrganizationStudentFactsAggregatedESLEnrollmentSupported)
            {
                var itemProperty = target.GetType().GetProperty("EducationOrganizationStudentFactsAggregatedESLEnrollment");
                
                if (itemProperty != null)
                {                    
                    if (source.EducationOrganizationStudentFactsAggregatedESLEnrollment == null)
                    {
                        target.EducationOrganizationStudentFactsAggregatedESLEnrollment = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetEducationOrganizationStudentFactsAggregatedESLEnrollment = Activator.CreateInstance(itemType);
                        (targetEducationOrganizationStudentFactsAggregatedESLEnrollment as IChildEntity)?.SetParent(target);
                        source.EducationOrganizationStudentFactsAggregatedESLEnrollment.Map(targetEducationOrganizationStudentFactsAggregatedESLEnrollment);
                        
                        // Update the target reference appropriately
                        target.EducationOrganizationStudentFactsAggregatedESLEnrollment = (IEducationOrganizationStudentFactsAggregatedESLEnrollment) targetEducationOrganizationStudentFactsAggregatedESLEnrollment;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationStudentFactsAggregatedESLEnrollmentSupported = false; 
            }
            // EducationOrganizationStudentFactsAggregatedSection504Enrollment (Source)
            if (sourceSynchSupport.IsEducationOrganizationStudentFactsAggregatedSection504EnrollmentSupported)
            {
                var itemProperty = target.GetType().GetProperty("EducationOrganizationStudentFactsAggregatedSection504Enrollment");
                
                if (itemProperty != null)
                {                    
                    if (source.EducationOrganizationStudentFactsAggregatedSection504Enrollment == null)
                    {
                        target.EducationOrganizationStudentFactsAggregatedSection504Enrollment = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetEducationOrganizationStudentFactsAggregatedSection504Enrollment = Activator.CreateInstance(itemType);
                        (targetEducationOrganizationStudentFactsAggregatedSection504Enrollment as IChildEntity)?.SetParent(target);
                        source.EducationOrganizationStudentFactsAggregatedSection504Enrollment.Map(targetEducationOrganizationStudentFactsAggregatedSection504Enrollment);
                        
                        // Update the target reference appropriately
                        target.EducationOrganizationStudentFactsAggregatedSection504Enrollment = (IEducationOrganizationStudentFactsAggregatedSection504Enrollment) targetEducationOrganizationStudentFactsAggregatedSection504Enrollment;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationStudentFactsAggregatedSection504EnrollmentSupported = false; 
            }
            // EducationOrganizationStudentFactsAggregatedSPED (Source)
            if (sourceSynchSupport.IsEducationOrganizationStudentFactsAggregatedSPEDSupported)
            {
                var itemProperty = target.GetType().GetProperty("EducationOrganizationStudentFactsAggregatedSPED");
                
                if (itemProperty != null)
                {                    
                    if (source.EducationOrganizationStudentFactsAggregatedSPED == null)
                    {
                        target.EducationOrganizationStudentFactsAggregatedSPED = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetEducationOrganizationStudentFactsAggregatedSPED = Activator.CreateInstance(itemType);
                        (targetEducationOrganizationStudentFactsAggregatedSPED as IChildEntity)?.SetParent(target);
                        source.EducationOrganizationStudentFactsAggregatedSPED.Map(targetEducationOrganizationStudentFactsAggregatedSPED);
                        
                        // Update the target reference appropriately
                        target.EducationOrganizationStudentFactsAggregatedSPED = (IEducationOrganizationStudentFactsAggregatedSPED) targetEducationOrganizationStudentFactsAggregatedSPED;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationStudentFactsAggregatedSPEDSupported = false; 
            }
            // EducationOrganizationStudentFactsAggregatedTitleIEnrollment (Source)
            if (sourceSynchSupport.IsEducationOrganizationStudentFactsAggregatedTitleIEnrollmentSupported)
            {
                var itemProperty = target.GetType().GetProperty("EducationOrganizationStudentFactsAggregatedTitleIEnrollment");
                
                if (itemProperty != null)
                {                    
                    if (source.EducationOrganizationStudentFactsAggregatedTitleIEnrollment == null)
                    {
                        target.EducationOrganizationStudentFactsAggregatedTitleIEnrollment = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetEducationOrganizationStudentFactsAggregatedTitleIEnrollment = Activator.CreateInstance(itemType);
                        (targetEducationOrganizationStudentFactsAggregatedTitleIEnrollment as IChildEntity)?.SetParent(target);
                        source.EducationOrganizationStudentFactsAggregatedTitleIEnrollment.Map(targetEducationOrganizationStudentFactsAggregatedTitleIEnrollment);
                        
                        // Update the target reference appropriately
                        target.EducationOrganizationStudentFactsAggregatedTitleIEnrollment = (IEducationOrganizationStudentFactsAggregatedTitleIEnrollment) targetEducationOrganizationStudentFactsAggregatedTitleIEnrollment;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationStudentFactsAggregatedTitleIEnrollmentSupported = false; 
            }
            // EducationOrganizationStudentFactsStudentsEnrolled (Source)
            if (sourceSynchSupport.IsEducationOrganizationStudentFactsStudentsEnrolledSupported)
            {
                var itemProperty = target.GetType().GetProperty("EducationOrganizationStudentFactsStudentsEnrolled");
                
                if (itemProperty != null)
                {                    
                    if (source.EducationOrganizationStudentFactsStudentsEnrolled == null)
                    {
                        target.EducationOrganizationStudentFactsStudentsEnrolled = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetEducationOrganizationStudentFactsStudentsEnrolled = Activator.CreateInstance(itemType);
                        (targetEducationOrganizationStudentFactsStudentsEnrolled as IChildEntity)?.SetParent(target);
                        source.EducationOrganizationStudentFactsStudentsEnrolled.Map(targetEducationOrganizationStudentFactsStudentsEnrolled);
                        
                        // Update the target reference appropriately
                        target.EducationOrganizationStudentFactsStudentsEnrolled = (IEducationOrganizationStudentFactsStudentsEnrolled) targetEducationOrganizationStudentFactsStudentsEnrolled;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationStudentFactsStudentsEnrolledSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists

            if (sourceSynchSupport.IsEducationOrganizationStudentFactsAggregatedByDisabilitiesSupported)
            {    
                targetSynchSupport.IsEducationOrganizationStudentFactsAggregatedByDisabilityIncluded = sourceSynchSupport.IsEducationOrganizationStudentFactsAggregatedByDisabilityIncluded;
                source.EducationOrganizationStudentFactsAggregatedByDisabilities.MapCollectionTo(target.EducationOrganizationStudentFactsAggregatedByDisabilities, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationStudentFactsAggregatedByDisabilitiesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationStudentFactsAggregatedGendersSupported)
            {    
                targetSynchSupport.IsEducationOrganizationStudentFactsAggregatedGenderIncluded = sourceSynchSupport.IsEducationOrganizationStudentFactsAggregatedGenderIncluded;
                source.EducationOrganizationStudentFactsAggregatedGenders.MapCollectionTo(target.EducationOrganizationStudentFactsAggregatedGenders, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationStudentFactsAggregatedGendersSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicitiesSupported)
            {    
                targetSynchSupport.IsEducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicityIncluded = sourceSynchSupport.IsEducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicityIncluded;
                source.EducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicities.MapCollectionTo(target.EducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicities, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicitiesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationStudentFactsAggregatedLanguagesSupported)
            {    
                targetSynchSupport.IsEducationOrganizationStudentFactsAggregatedLanguageIncluded = sourceSynchSupport.IsEducationOrganizationStudentFactsAggregatedLanguageIncluded;
                source.EducationOrganizationStudentFactsAggregatedLanguages.MapCollectionTo(target.EducationOrganizationStudentFactsAggregatedLanguages, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationStudentFactsAggregatedLanguagesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationStudentFactsAggregatedRacesSupported)
            {    
                targetSynchSupport.IsEducationOrganizationStudentFactsAggregatedRaceIncluded = sourceSynchSupport.IsEducationOrganizationStudentFactsAggregatedRaceIncluded;
                source.EducationOrganizationStudentFactsAggregatedRaces.MapCollectionTo(target.EducationOrganizationStudentFactsAggregatedRaces, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationStudentFactsAggregatedRacesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationStudentFactsAggregatedSchoolFoodServiceProgramServicesSupported)
            {    
                targetSynchSupport.IsEducationOrganizationStudentFactsAggregatedSchoolFoodServiceProgramServiceIncluded = sourceSynchSupport.IsEducationOrganizationStudentFactsAggregatedSchoolFoodServiceProgramServiceIncluded;
                source.EducationOrganizationStudentFactsAggregatedSchoolFoodServiceProgramServices.MapCollectionTo(target.EducationOrganizationStudentFactsAggregatedSchoolFoodServiceProgramServices, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationStudentFactsAggregatedSchoolFoodServiceProgramServicesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationStudentFactsAggregatedSexesSupported)
            {    
                targetSynchSupport.IsEducationOrganizationStudentFactsAggregatedSexIncluded = sourceSynchSupport.IsEducationOrganizationStudentFactsAggregatedSexIncluded;
                source.EducationOrganizationStudentFactsAggregatedSexes.MapCollectionTo(target.EducationOrganizationStudentFactsAggregatedSexes, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationStudentFactsAggregatedSexesSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationStudentFactsSynchronizationSourceSupport 
    {
        bool IsEducationOrganizationStudentFactsAggregatedByDisabilitiesSupported { get; set; }
        bool IsEducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabledSupported { get; set; }
        bool IsEducationOrganizationStudentFactsAggregatedELLEnrollmentSupported { get; set; }
        bool IsEducationOrganizationStudentFactsAggregatedESLEnrollmentSupported { get; set; }
        bool IsEducationOrganizationStudentFactsAggregatedGendersSupported { get; set; }
        bool IsEducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicitiesSupported { get; set; }
        bool IsEducationOrganizationStudentFactsAggregatedLanguagesSupported { get; set; }
        bool IsEducationOrganizationStudentFactsAggregatedRacesSupported { get; set; }
        bool IsEducationOrganizationStudentFactsAggregatedSchoolFoodServiceProgramServicesSupported { get; set; }
        bool IsEducationOrganizationStudentFactsAggregatedSection504EnrollmentSupported { get; set; }
        bool IsEducationOrganizationStudentFactsAggregatedSexesSupported { get; set; }
        bool IsEducationOrganizationStudentFactsAggregatedSPEDSupported { get; set; }
        bool IsEducationOrganizationStudentFactsAggregatedTitleIEnrollmentSupported { get; set; }
        bool IsEducationOrganizationStudentFactsStudentsEnrolledSupported { get; set; }
        Func<IEducationOrganizationStudentFactsAggregatedByDisability, bool> IsEducationOrganizationStudentFactsAggregatedByDisabilityIncluded { get; set; }
        Func<IEducationOrganizationStudentFactsAggregatedGender, bool> IsEducationOrganizationStudentFactsAggregatedGenderIncluded { get; set; }
        Func<IEducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity, bool> IsEducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicityIncluded { get; set; }
        Func<IEducationOrganizationStudentFactsAggregatedLanguage, bool> IsEducationOrganizationStudentFactsAggregatedLanguageIncluded { get; set; }
        Func<IEducationOrganizationStudentFactsAggregatedRace, bool> IsEducationOrganizationStudentFactsAggregatedRaceIncluded { get; set; }
        Func<IEducationOrganizationStudentFactsAggregatedSchoolFoodServiceProgramService, bool> IsEducationOrganizationStudentFactsAggregatedSchoolFoodServiceProgramServiceIncluded { get; set; }
        Func<IEducationOrganizationStudentFactsAggregatedSex, bool> IsEducationOrganizationStudentFactsAggregatedSexIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationStudentFactsAggregatedByDisabilityMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationStudentFactsAggregatedByDisability source, IEducationOrganizationStudentFactsAggregatedByDisability target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationStudentFactsAggregatedByDisabilitySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisabilityDescriptor != target.DisabilityDescriptor)
            {
                source.DisabilityDescriptor = target.DisabilityDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsPercentageSupported)
                && target.Percentage != source.Percentage)
            {
                target.Percentage = source.Percentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTypeNumberSupported)
                && target.TypeNumber != source.TypeNumber)
            {
                target.TypeNumber = source.TypeNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationStudentFactsAggregatedByDisability source, IEducationOrganizationStudentFactsAggregatedByDisability target, Action<IEducationOrganizationStudentFactsAggregatedByDisability, IEducationOrganizationStudentFactsAggregatedByDisability> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationStudentFactsAggregatedByDisabilitySynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationStudentFactsAggregatedByDisabilitySynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DisabilityDescriptor = source.DisabilityDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsPercentageSupported)
                target.Percentage = source.Percentage;
            else
                targetSynchSupport.IsPercentageSupported = false;

            if (sourceSynchSupport.IsTypeNumberSupported)
                target.TypeNumber = source.TypeNumber;
            else
                targetSynchSupport.IsTypeNumberSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationStudentFactsAggregatedByDisabilitySynchronizationSourceSupport 
    {
        bool IsPercentageSupported { get; set; }
        bool IsTypeNumberSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabledMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled source, IEducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabledSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsStudentsDisabledNumberSupported)
                && target.StudentsDisabledNumber != source.StudentsDisabledNumber)
            {
                target.StudentsDisabledNumber = source.StudentsDisabledNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStudentsDisabledPercentageSupported)
                && target.StudentsDisabledPercentage != source.StudentsDisabledPercentage)
            {
                target.StudentsDisabledPercentage = source.StudentsDisabledPercentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled source, IEducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled target, Action<IEducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled, IEducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabled> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabledSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabledSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsStudentsDisabledNumberSupported)
                target.StudentsDisabledNumber = source.StudentsDisabledNumber;
            else
                targetSynchSupport.IsStudentsDisabledNumberSupported = false;

            if (sourceSynchSupport.IsStudentsDisabledPercentageSupported)
                target.StudentsDisabledPercentage = source.StudentsDisabledPercentage;
            else
                targetSynchSupport.IsStudentsDisabledPercentageSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationStudentFactsAggregatedDisabilityTotalStudentsDisabledSynchronizationSourceSupport 
    {
        bool IsStudentsDisabledNumberSupported { get; set; }
        bool IsStudentsDisabledPercentageSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationStudentFactsAggregatedELLEnrollmentMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationStudentFactsAggregatedELLEnrollment source, IEducationOrganizationStudentFactsAggregatedELLEnrollment target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationStudentFactsAggregatedELLEnrollmentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsELLEnrollmentNumberSupported)
                && target.ELLEnrollmentNumber != source.ELLEnrollmentNumber)
            {
                target.ELLEnrollmentNumber = source.ELLEnrollmentNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsELLEnrollmentPercentageSupported)
                && target.ELLEnrollmentPercentage != source.ELLEnrollmentPercentage)
            {
                target.ELLEnrollmentPercentage = source.ELLEnrollmentPercentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationStudentFactsAggregatedELLEnrollment source, IEducationOrganizationStudentFactsAggregatedELLEnrollment target, Action<IEducationOrganizationStudentFactsAggregatedELLEnrollment, IEducationOrganizationStudentFactsAggregatedELLEnrollment> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationStudentFactsAggregatedELLEnrollmentSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationStudentFactsAggregatedELLEnrollmentSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsELLEnrollmentNumberSupported)
                target.ELLEnrollmentNumber = source.ELLEnrollmentNumber;
            else
                targetSynchSupport.IsELLEnrollmentNumberSupported = false;

            if (sourceSynchSupport.IsELLEnrollmentPercentageSupported)
                target.ELLEnrollmentPercentage = source.ELLEnrollmentPercentage;
            else
                targetSynchSupport.IsELLEnrollmentPercentageSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationStudentFactsAggregatedELLEnrollmentSynchronizationSourceSupport 
    {
        bool IsELLEnrollmentNumberSupported { get; set; }
        bool IsELLEnrollmentPercentageSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationStudentFactsAggregatedESLEnrollmentMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationStudentFactsAggregatedESLEnrollment source, IEducationOrganizationStudentFactsAggregatedESLEnrollment target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationStudentFactsAggregatedESLEnrollmentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsESLEnrollmentNumberSupported)
                && target.ESLEnrollmentNumber != source.ESLEnrollmentNumber)
            {
                target.ESLEnrollmentNumber = source.ESLEnrollmentNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsESLEnrollmentPercentageSupported)
                && target.ESLEnrollmentPercentage != source.ESLEnrollmentPercentage)
            {
                target.ESLEnrollmentPercentage = source.ESLEnrollmentPercentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationStudentFactsAggregatedESLEnrollment source, IEducationOrganizationStudentFactsAggregatedESLEnrollment target, Action<IEducationOrganizationStudentFactsAggregatedESLEnrollment, IEducationOrganizationStudentFactsAggregatedESLEnrollment> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationStudentFactsAggregatedESLEnrollmentSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationStudentFactsAggregatedESLEnrollmentSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsESLEnrollmentNumberSupported)
                target.ESLEnrollmentNumber = source.ESLEnrollmentNumber;
            else
                targetSynchSupport.IsESLEnrollmentNumberSupported = false;

            if (sourceSynchSupport.IsESLEnrollmentPercentageSupported)
                target.ESLEnrollmentPercentage = source.ESLEnrollmentPercentage;
            else
                targetSynchSupport.IsESLEnrollmentPercentageSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationStudentFactsAggregatedESLEnrollmentSynchronizationSourceSupport 
    {
        bool IsESLEnrollmentNumberSupported { get; set; }
        bool IsESLEnrollmentPercentageSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationStudentFactsAggregatedGenderMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationStudentFactsAggregatedGender source, IEducationOrganizationStudentFactsAggregatedGender target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationStudentFactsAggregatedGenderSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GenderDescriptor != target.GenderDescriptor)
            {
                source.GenderDescriptor = target.GenderDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsGenderTypeNumberSupported)
                && target.GenderTypeNumber != source.GenderTypeNumber)
            {
                target.GenderTypeNumber = source.GenderTypeNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGenderTypePercentageSupported)
                && target.GenderTypePercentage != source.GenderTypePercentage)
            {
                target.GenderTypePercentage = source.GenderTypePercentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationStudentFactsAggregatedGender source, IEducationOrganizationStudentFactsAggregatedGender target, Action<IEducationOrganizationStudentFactsAggregatedGender, IEducationOrganizationStudentFactsAggregatedGender> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationStudentFactsAggregatedGenderSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationStudentFactsAggregatedGenderSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GenderDescriptor = source.GenderDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsGenderTypeNumberSupported)
                target.GenderTypeNumber = source.GenderTypeNumber;
            else
                targetSynchSupport.IsGenderTypeNumberSupported = false;

            if (sourceSynchSupport.IsGenderTypePercentageSupported)
                target.GenderTypePercentage = source.GenderTypePercentage;
            else
                targetSynchSupport.IsGenderTypePercentageSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationStudentFactsAggregatedGenderSynchronizationSourceSupport 
    {
        bool IsGenderTypeNumberSupported { get; set; }
        bool IsGenderTypePercentageSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicityMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity source, IEducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicitySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.HispanicLatinoEthnicity != target.HispanicLatinoEthnicity)
            {
                source.HispanicLatinoEthnicity = target.HispanicLatinoEthnicity;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsHispanicLatinoEthnicityNumberSupported)
                && target.HispanicLatinoEthnicityNumber != source.HispanicLatinoEthnicityNumber)
            {
                target.HispanicLatinoEthnicityNumber = source.HispanicLatinoEthnicityNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHispanicLatinoEthnicityPercentageSupported)
                && target.HispanicLatinoEthnicityPercentage != source.HispanicLatinoEthnicityPercentage)
            {
                target.HispanicLatinoEthnicityPercentage = source.HispanicLatinoEthnicityPercentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity source, IEducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity target, Action<IEducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity, IEducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicity> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicitySynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicitySynchronizationSourceSupport;

            // Copy contextual primary key values
            target.HispanicLatinoEthnicity = source.HispanicLatinoEthnicity;

            // Copy non-PK properties

            if (sourceSynchSupport.IsHispanicLatinoEthnicityNumberSupported)
                target.HispanicLatinoEthnicityNumber = source.HispanicLatinoEthnicityNumber;
            else
                targetSynchSupport.IsHispanicLatinoEthnicityNumberSupported = false;

            if (sourceSynchSupport.IsHispanicLatinoEthnicityPercentageSupported)
                target.HispanicLatinoEthnicityPercentage = source.HispanicLatinoEthnicityPercentage;
            else
                targetSynchSupport.IsHispanicLatinoEthnicityPercentageSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationStudentFactsAggregatedHispanicLatinoEthnicitySynchronizationSourceSupport 
    {
        bool IsHispanicLatinoEthnicityNumberSupported { get; set; }
        bool IsHispanicLatinoEthnicityPercentageSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationStudentFactsAggregatedLanguageMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationStudentFactsAggregatedLanguage source, IEducationOrganizationStudentFactsAggregatedLanguage target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationStudentFactsAggregatedLanguageSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LanguageDescriptor != target.LanguageDescriptor)
            {
                source.LanguageDescriptor = target.LanguageDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsLanguageTypeNumberSupported)
                && target.LanguageTypeNumber != source.LanguageTypeNumber)
            {
                target.LanguageTypeNumber = source.LanguageTypeNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLanguageTypePercentageSupported)
                && target.LanguageTypePercentage != source.LanguageTypePercentage)
            {
                target.LanguageTypePercentage = source.LanguageTypePercentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationStudentFactsAggregatedLanguage source, IEducationOrganizationStudentFactsAggregatedLanguage target, Action<IEducationOrganizationStudentFactsAggregatedLanguage, IEducationOrganizationStudentFactsAggregatedLanguage> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationStudentFactsAggregatedLanguageSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationStudentFactsAggregatedLanguageSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LanguageDescriptor = source.LanguageDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsLanguageTypeNumberSupported)
                target.LanguageTypeNumber = source.LanguageTypeNumber;
            else
                targetSynchSupport.IsLanguageTypeNumberSupported = false;

            if (sourceSynchSupport.IsLanguageTypePercentageSupported)
                target.LanguageTypePercentage = source.LanguageTypePercentage;
            else
                targetSynchSupport.IsLanguageTypePercentageSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationStudentFactsAggregatedLanguageSynchronizationSourceSupport 
    {
        bool IsLanguageTypeNumberSupported { get; set; }
        bool IsLanguageTypePercentageSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationStudentFactsAggregatedRaceMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationStudentFactsAggregatedRace source, IEducationOrganizationStudentFactsAggregatedRace target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationStudentFactsAggregatedRaceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.RaceDescriptor != target.RaceDescriptor)
            {
                source.RaceDescriptor = target.RaceDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsRaceTypeNumberSupported)
                && target.RaceTypeNumber != source.RaceTypeNumber)
            {
                target.RaceTypeNumber = source.RaceTypeNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRaceTypePercentageSupported)
                && target.RaceTypePercentage != source.RaceTypePercentage)
            {
                target.RaceTypePercentage = source.RaceTypePercentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationStudentFactsAggregatedRace source, IEducationOrganizationStudentFactsAggregatedRace target, Action<IEducationOrganizationStudentFactsAggregatedRace, IEducationOrganizationStudentFactsAggregatedRace> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationStudentFactsAggregatedRaceSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationStudentFactsAggregatedRaceSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.RaceDescriptor = source.RaceDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsRaceTypeNumberSupported)
                target.RaceTypeNumber = source.RaceTypeNumber;
            else
                targetSynchSupport.IsRaceTypeNumberSupported = false;

            if (sourceSynchSupport.IsRaceTypePercentageSupported)
                target.RaceTypePercentage = source.RaceTypePercentage;
            else
                targetSynchSupport.IsRaceTypePercentageSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationStudentFactsAggregatedRaceSynchronizationSourceSupport 
    {
        bool IsRaceTypeNumberSupported { get; set; }
        bool IsRaceTypePercentageSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationStudentFactsAggregatedSchoolFoodServiceProgramServiceMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationStudentFactsAggregatedSchoolFoodServiceProgramService source, IEducationOrganizationStudentFactsAggregatedSchoolFoodServiceProgramService target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationStudentFactsAggregatedSchoolFoodServiceProgramServiceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SchoolFoodServiceProgramServiceDescriptor != target.SchoolFoodServiceProgramServiceDescriptor)
            {
                source.SchoolFoodServiceProgramServiceDescriptor = target.SchoolFoodServiceProgramServiceDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsTypeNumberSupported)
                && target.TypeNumber != source.TypeNumber)
            {
                target.TypeNumber = source.TypeNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTypePercentageSupported)
                && target.TypePercentage != source.TypePercentage)
            {
                target.TypePercentage = source.TypePercentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationStudentFactsAggregatedSchoolFoodServiceProgramService source, IEducationOrganizationStudentFactsAggregatedSchoolFoodServiceProgramService target, Action<IEducationOrganizationStudentFactsAggregatedSchoolFoodServiceProgramService, IEducationOrganizationStudentFactsAggregatedSchoolFoodServiceProgramService> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationStudentFactsAggregatedSchoolFoodServiceProgramServiceSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationStudentFactsAggregatedSchoolFoodServiceProgramServiceSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.SchoolFoodServiceProgramServiceDescriptor = source.SchoolFoodServiceProgramServiceDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsTypeNumberSupported)
                target.TypeNumber = source.TypeNumber;
            else
                targetSynchSupport.IsTypeNumberSupported = false;

            if (sourceSynchSupport.IsTypePercentageSupported)
                target.TypePercentage = source.TypePercentage;
            else
                targetSynchSupport.IsTypePercentageSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationStudentFactsAggregatedSchoolFoodServiceProgramServiceSynchronizationSourceSupport 
    {
        bool IsTypeNumberSupported { get; set; }
        bool IsTypePercentageSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationStudentFactsAggregatedSection504EnrollmentMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationStudentFactsAggregatedSection504Enrollment source, IEducationOrganizationStudentFactsAggregatedSection504Enrollment target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationStudentFactsAggregatedSection504EnrollmentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsNumber504EnrolledSupported)
                && target.Number504Enrolled != source.Number504Enrolled)
            {
                target.Number504Enrolled = source.Number504Enrolled;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPercentage504EnrolledSupported)
                && target.Percentage504Enrolled != source.Percentage504Enrolled)
            {
                target.Percentage504Enrolled = source.Percentage504Enrolled;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationStudentFactsAggregatedSection504Enrollment source, IEducationOrganizationStudentFactsAggregatedSection504Enrollment target, Action<IEducationOrganizationStudentFactsAggregatedSection504Enrollment, IEducationOrganizationStudentFactsAggregatedSection504Enrollment> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationStudentFactsAggregatedSection504EnrollmentSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationStudentFactsAggregatedSection504EnrollmentSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsNumber504EnrolledSupported)
                target.Number504Enrolled = source.Number504Enrolled;
            else
                targetSynchSupport.IsNumber504EnrolledSupported = false;

            if (sourceSynchSupport.IsPercentage504EnrolledSupported)
                target.Percentage504Enrolled = source.Percentage504Enrolled;
            else
                targetSynchSupport.IsPercentage504EnrolledSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationStudentFactsAggregatedSection504EnrollmentSynchronizationSourceSupport 
    {
        bool IsNumber504EnrolledSupported { get; set; }
        bool IsPercentage504EnrolledSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationStudentFactsAggregatedSexMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationStudentFactsAggregatedSex source, IEducationOrganizationStudentFactsAggregatedSex target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationStudentFactsAggregatedSexSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SexDescriptor != target.SexDescriptor)
            {
                source.SexDescriptor = target.SexDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsSexTypeNumberSupported)
                && target.SexTypeNumber != source.SexTypeNumber)
            {
                target.SexTypeNumber = source.SexTypeNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSexTypePercentageSupported)
                && target.SexTypePercentage != source.SexTypePercentage)
            {
                target.SexTypePercentage = source.SexTypePercentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationStudentFactsAggregatedSex source, IEducationOrganizationStudentFactsAggregatedSex target, Action<IEducationOrganizationStudentFactsAggregatedSex, IEducationOrganizationStudentFactsAggregatedSex> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationStudentFactsAggregatedSexSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationStudentFactsAggregatedSexSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.SexDescriptor = source.SexDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsSexTypeNumberSupported)
                target.SexTypeNumber = source.SexTypeNumber;
            else
                targetSynchSupport.IsSexTypeNumberSupported = false;

            if (sourceSynchSupport.IsSexTypePercentageSupported)
                target.SexTypePercentage = source.SexTypePercentage;
            else
                targetSynchSupport.IsSexTypePercentageSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationStudentFactsAggregatedSexSynchronizationSourceSupport 
    {
        bool IsSexTypeNumberSupported { get; set; }
        bool IsSexTypePercentageSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationStudentFactsAggregatedSPEDMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationStudentFactsAggregatedSPED source, IEducationOrganizationStudentFactsAggregatedSPED target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationStudentFactsAggregatedSPEDSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsSPEDEnrollmentNumberSupported)
                && target.SPEDEnrollmentNumber != source.SPEDEnrollmentNumber)
            {
                target.SPEDEnrollmentNumber = source.SPEDEnrollmentNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSPEDEnrollmentPercentageSupported)
                && target.SPEDEnrollmentPercentage != source.SPEDEnrollmentPercentage)
            {
                target.SPEDEnrollmentPercentage = source.SPEDEnrollmentPercentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationStudentFactsAggregatedSPED source, IEducationOrganizationStudentFactsAggregatedSPED target, Action<IEducationOrganizationStudentFactsAggregatedSPED, IEducationOrganizationStudentFactsAggregatedSPED> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationStudentFactsAggregatedSPEDSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationStudentFactsAggregatedSPEDSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsSPEDEnrollmentNumberSupported)
                target.SPEDEnrollmentNumber = source.SPEDEnrollmentNumber;
            else
                targetSynchSupport.IsSPEDEnrollmentNumberSupported = false;

            if (sourceSynchSupport.IsSPEDEnrollmentPercentageSupported)
                target.SPEDEnrollmentPercentage = source.SPEDEnrollmentPercentage;
            else
                targetSynchSupport.IsSPEDEnrollmentPercentageSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationStudentFactsAggregatedSPEDSynchronizationSourceSupport 
    {
        bool IsSPEDEnrollmentNumberSupported { get; set; }
        bool IsSPEDEnrollmentPercentageSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationStudentFactsAggregatedTitleIEnrollmentMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationStudentFactsAggregatedTitleIEnrollment source, IEducationOrganizationStudentFactsAggregatedTitleIEnrollment target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationStudentFactsAggregatedTitleIEnrollmentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsTitleIEnrollmentNumberSupported)
                && target.TitleIEnrollmentNumber != source.TitleIEnrollmentNumber)
            {
                target.TitleIEnrollmentNumber = source.TitleIEnrollmentNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTitleIEnrollmentPercentageSupported)
                && target.TitleIEnrollmentPercentage != source.TitleIEnrollmentPercentage)
            {
                target.TitleIEnrollmentPercentage = source.TitleIEnrollmentPercentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationStudentFactsAggregatedTitleIEnrollment source, IEducationOrganizationStudentFactsAggregatedTitleIEnrollment target, Action<IEducationOrganizationStudentFactsAggregatedTitleIEnrollment, IEducationOrganizationStudentFactsAggregatedTitleIEnrollment> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationStudentFactsAggregatedTitleIEnrollmentSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationStudentFactsAggregatedTitleIEnrollmentSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsTitleIEnrollmentNumberSupported)
                target.TitleIEnrollmentNumber = source.TitleIEnrollmentNumber;
            else
                targetSynchSupport.IsTitleIEnrollmentNumberSupported = false;

            if (sourceSynchSupport.IsTitleIEnrollmentPercentageSupported)
                target.TitleIEnrollmentPercentage = source.TitleIEnrollmentPercentage;
            else
                targetSynchSupport.IsTitleIEnrollmentPercentageSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationStudentFactsAggregatedTitleIEnrollmentSynchronizationSourceSupport 
    {
        bool IsTitleIEnrollmentNumberSupported { get; set; }
        bool IsTitleIEnrollmentPercentageSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationStudentFactsStudentsEnrolledMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationStudentFactsStudentsEnrolled source, IEducationOrganizationStudentFactsStudentsEnrolled target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationStudentFactsStudentsEnrolledSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsNumberStudentsEnrolledSupported)
                && target.NumberStudentsEnrolled != source.NumberStudentsEnrolled)
            {
                target.NumberStudentsEnrolled = source.NumberStudentsEnrolled;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPercentAtRiskSupported)
                && target.PercentAtRisk != source.PercentAtRisk)
            {
                target.PercentAtRisk = source.PercentAtRisk;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPercentMobilitySupported)
                && target.PercentMobility != source.PercentMobility)
            {
                target.PercentMobility = source.PercentMobility;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationStudentFactsStudentsEnrolled source, IEducationOrganizationStudentFactsStudentsEnrolled target, Action<IEducationOrganizationStudentFactsStudentsEnrolled, IEducationOrganizationStudentFactsStudentsEnrolled> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationStudentFactsStudentsEnrolledSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationStudentFactsStudentsEnrolledSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsNumberStudentsEnrolledSupported)
                target.NumberStudentsEnrolled = source.NumberStudentsEnrolled;
            else
                targetSynchSupport.IsNumberStudentsEnrolledSupported = false;

            if (sourceSynchSupport.IsPercentAtRiskSupported)
                target.PercentAtRisk = source.PercentAtRisk;
            else
                targetSynchSupport.IsPercentAtRiskSupported = false;

            if (sourceSynchSupport.IsPercentMobilitySupported)
                target.PercentMobility = source.PercentMobility;
            else
                targetSynchSupport.IsPercentMobilitySupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationStudentFactsStudentsEnrolledSynchronizationSourceSupport 
    {
        bool IsNumberStudentsEnrolledSupported { get; set; }
        bool IsPercentAtRiskSupported { get; set; }
        bool IsPercentMobilitySupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
}
// Aggregate: EducationServiceCenter

namespace EdFi.Ods.Entities.Common.TPDM //.EducationServiceCenterAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EducationServiceCenterExtensionMapper 
    {
        public static bool SynchronizeTo(this IEducationServiceCenterExtension source, IEducationServiceCenterExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationServiceCenterExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.EducationServiceCenter as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsFederalLocaleCodeDescriptorSupported)
                && target.FederalLocaleCodeDescriptor != source.FederalLocaleCodeDescriptor)
            {
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEducationServiceCenterExtension source, IEducationServiceCenterExtension target, Action<IEducationServiceCenterExtension, IEducationServiceCenterExtension> onMapped)
        {
            var sourceSynchSupport = source as IEducationServiceCenterExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationServiceCenterExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsFederalLocaleCodeDescriptorSupported)
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
            else
                targetSynchSupport.IsFederalLocaleCodeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationServiceCenterExtensionSynchronizationSourceSupport 
    {
        bool IsFederalLocaleCodeDescriptorSupported { get; set; }
    }
 
}
// Aggregate: EmploymentEvent

namespace EdFi.Ods.Entities.Common.TPDM //.EmploymentEventAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EmploymentEventMapper 
    {
        public static bool SynchronizeTo(this IEmploymentEvent source, IEmploymentEvent target)
        {
            bool isModified = false;

            var sourceSupport = source as IEmploymentEventSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EmploymentEventTypeDescriptor != target.EmploymentEventTypeDescriptor)
            {
                source.EmploymentEventTypeDescriptor = target.EmploymentEventTypeDescriptor;
            }
            if (source.RequisitionNumber != target.RequisitionNumber)
            {
                source.RequisitionNumber = target.RequisitionNumber;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEarlyHireSupported)
                && target.EarlyHire != source.EarlyHire)
            {
                target.EarlyHire = source.EarlyHire;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHireDateSupported)
                && target.HireDate != source.HireDate)
            {
                target.HireDate = source.HireDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsInternalExternalHireDescriptorSupported)
                && target.InternalExternalHireDescriptor != source.InternalExternalHireDescriptor)
            {
                target.InternalExternalHireDescriptor = source.InternalExternalHireDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMutualConsentSupported)
                && target.MutualConsent != source.MutualConsent)
            {
                target.MutualConsent = source.MutualConsent;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRestrictedChoiceSupported)
                && target.RestrictedChoice != source.RestrictedChoice)
            {
                target.RestrictedChoice = source.RestrictedChoice;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEmploymentEvent source, IEmploymentEvent target, Action<IEmploymentEvent, IEmploymentEvent> onMapped)
        {
            var sourceSynchSupport = source as IEmploymentEventSynchronizationSourceSupport;
            var targetSynchSupport = target as IEmploymentEventSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EmploymentEventTypeDescriptor = source.EmploymentEventTypeDescriptor;
            target.RequisitionNumber = source.RequisitionNumber;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEarlyHireSupported)
                target.EarlyHire = source.EarlyHire;
            else
                targetSynchSupport.IsEarlyHireSupported = false;

            if (sourceSynchSupport.IsHireDateSupported)
                target.HireDate = source.HireDate;
            else
                targetSynchSupport.IsHireDateSupported = false;

            if (sourceSynchSupport.IsInternalExternalHireDescriptorSupported)
                target.InternalExternalHireDescriptor = source.InternalExternalHireDescriptor;
            else
                targetSynchSupport.IsInternalExternalHireDescriptorSupported = false;

            if (sourceSynchSupport.IsMutualConsentSupported)
                target.MutualConsent = source.MutualConsent;
            else
                targetSynchSupport.IsMutualConsentSupported = false;

            if (sourceSynchSupport.IsRestrictedChoiceSupported)
                target.RestrictedChoice = source.RestrictedChoice;
            else
                targetSynchSupport.IsRestrictedChoiceSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.OpenStaffPositionResourceId = source.OpenStaffPositionResourceId;
                target.OpenStaffPositionDiscriminator = source.OpenStaffPositionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEmploymentEventSynchronizationSourceSupport 
    {
        bool IsEarlyHireSupported { get; set; }
        bool IsHireDateSupported { get; set; }
        bool IsInternalExternalHireDescriptorSupported { get; set; }
        bool IsMutualConsentSupported { get; set; }
        bool IsRestrictedChoiceSupported { get; set; }
    }
 
}
// Aggregate: EmploymentEventTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.EmploymentEventTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EmploymentEventTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IEmploymentEventTypeDescriptor source, IEmploymentEventTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IEmploymentEventTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EmploymentEventTypeDescriptorId != target.EmploymentEventTypeDescriptorId)
            {
                source.EmploymentEventTypeDescriptorId = target.EmploymentEventTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEmploymentEventTypeDescriptor source, IEmploymentEventTypeDescriptor target, Action<IEmploymentEventTypeDescriptor, IEmploymentEventTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IEmploymentEventTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IEmploymentEventTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EmploymentEventTypeDescriptorId = source.EmploymentEventTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEmploymentEventTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: EmploymentSeparationEvent

namespace EdFi.Ods.Entities.Common.TPDM //.EmploymentSeparationEventAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EmploymentSeparationEventMapper 
    {
        public static bool SynchronizeTo(this IEmploymentSeparationEvent source, IEmploymentSeparationEvent target)
        {
            bool isModified = false;

            var sourceSupport = source as IEmploymentSeparationEventSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EmploymentSeparationDate != target.EmploymentSeparationDate)
            {
                source.EmploymentSeparationDate = target.EmploymentSeparationDate;
            }
            if (source.RequisitionNumber != target.RequisitionNumber)
            {
                source.RequisitionNumber = target.RequisitionNumber;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEmploymentSeparationEnteredDateSupported)
                && target.EmploymentSeparationEnteredDate != source.EmploymentSeparationEnteredDate)
            {
                target.EmploymentSeparationEnteredDate = source.EmploymentSeparationEnteredDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEmploymentSeparationReasonDescriptorSupported)
                && target.EmploymentSeparationReasonDescriptor != source.EmploymentSeparationReasonDescriptor)
            {
                target.EmploymentSeparationReasonDescriptor = source.EmploymentSeparationReasonDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEmploymentSeparationTypeDescriptorSupported)
                && target.EmploymentSeparationTypeDescriptor != source.EmploymentSeparationTypeDescriptor)
            {
                target.EmploymentSeparationTypeDescriptor = source.EmploymentSeparationTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRemainingInDistrictSupported)
                && target.RemainingInDistrict != source.RemainingInDistrict)
            {
                target.RemainingInDistrict = source.RemainingInDistrict;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEmploymentSeparationEvent source, IEmploymentSeparationEvent target, Action<IEmploymentSeparationEvent, IEmploymentSeparationEvent> onMapped)
        {
            var sourceSynchSupport = source as IEmploymentSeparationEventSynchronizationSourceSupport;
            var targetSynchSupport = target as IEmploymentSeparationEventSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EmploymentSeparationDate = source.EmploymentSeparationDate;
            target.RequisitionNumber = source.RequisitionNumber;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEmploymentSeparationEnteredDateSupported)
                target.EmploymentSeparationEnteredDate = source.EmploymentSeparationEnteredDate;
            else
                targetSynchSupport.IsEmploymentSeparationEnteredDateSupported = false;

            if (sourceSynchSupport.IsEmploymentSeparationReasonDescriptorSupported)
                target.EmploymentSeparationReasonDescriptor = source.EmploymentSeparationReasonDescriptor;
            else
                targetSynchSupport.IsEmploymentSeparationReasonDescriptorSupported = false;

            if (sourceSynchSupport.IsEmploymentSeparationTypeDescriptorSupported)
                target.EmploymentSeparationTypeDescriptor = source.EmploymentSeparationTypeDescriptor;
            else
                targetSynchSupport.IsEmploymentSeparationTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsRemainingInDistrictSupported)
                target.RemainingInDistrict = source.RemainingInDistrict;
            else
                targetSynchSupport.IsRemainingInDistrictSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.OpenStaffPositionResourceId = source.OpenStaffPositionResourceId;
                target.OpenStaffPositionDiscriminator = source.OpenStaffPositionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEmploymentSeparationEventSynchronizationSourceSupport 
    {
        bool IsEmploymentSeparationEnteredDateSupported { get; set; }
        bool IsEmploymentSeparationReasonDescriptorSupported { get; set; }
        bool IsEmploymentSeparationTypeDescriptorSupported { get; set; }
        bool IsRemainingInDistrictSupported { get; set; }
    }
 
}
// Aggregate: EmploymentSeparationReasonDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.EmploymentSeparationReasonDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EmploymentSeparationReasonDescriptorMapper 
    {
        public static bool SynchronizeTo(this IEmploymentSeparationReasonDescriptor source, IEmploymentSeparationReasonDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IEmploymentSeparationReasonDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EmploymentSeparationReasonDescriptorId != target.EmploymentSeparationReasonDescriptorId)
            {
                source.EmploymentSeparationReasonDescriptorId = target.EmploymentSeparationReasonDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEmploymentSeparationReasonDescriptor source, IEmploymentSeparationReasonDescriptor target, Action<IEmploymentSeparationReasonDescriptor, IEmploymentSeparationReasonDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IEmploymentSeparationReasonDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IEmploymentSeparationReasonDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EmploymentSeparationReasonDescriptorId = source.EmploymentSeparationReasonDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEmploymentSeparationReasonDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: EmploymentSeparationTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.EmploymentSeparationTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EmploymentSeparationTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IEmploymentSeparationTypeDescriptor source, IEmploymentSeparationTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IEmploymentSeparationTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EmploymentSeparationTypeDescriptorId != target.EmploymentSeparationTypeDescriptorId)
            {
                source.EmploymentSeparationTypeDescriptorId = target.EmploymentSeparationTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEmploymentSeparationTypeDescriptor source, IEmploymentSeparationTypeDescriptor target, Action<IEmploymentSeparationTypeDescriptor, IEmploymentSeparationTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IEmploymentSeparationTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IEmploymentSeparationTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EmploymentSeparationTypeDescriptorId = source.EmploymentSeparationTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEmploymentSeparationTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: EnglishLanguageExamDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.EnglishLanguageExamDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EnglishLanguageExamDescriptorMapper 
    {
        public static bool SynchronizeTo(this IEnglishLanguageExamDescriptor source, IEnglishLanguageExamDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IEnglishLanguageExamDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EnglishLanguageExamDescriptorId != target.EnglishLanguageExamDescriptorId)
            {
                source.EnglishLanguageExamDescriptorId = target.EnglishLanguageExamDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEnglishLanguageExamDescriptor source, IEnglishLanguageExamDescriptor target, Action<IEnglishLanguageExamDescriptor, IEnglishLanguageExamDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IEnglishLanguageExamDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IEnglishLanguageExamDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EnglishLanguageExamDescriptorId = source.EnglishLanguageExamDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEnglishLanguageExamDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: FederalLocaleCodeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.FederalLocaleCodeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class FederalLocaleCodeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IFederalLocaleCodeDescriptor source, IFederalLocaleCodeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IFederalLocaleCodeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.FederalLocaleCodeDescriptorId != target.FederalLocaleCodeDescriptorId)
            {
                source.FederalLocaleCodeDescriptorId = target.FederalLocaleCodeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IFederalLocaleCodeDescriptor source, IFederalLocaleCodeDescriptor target, Action<IFederalLocaleCodeDescriptor, IFederalLocaleCodeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IFederalLocaleCodeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IFederalLocaleCodeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.FederalLocaleCodeDescriptorId = source.FederalLocaleCodeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IFederalLocaleCodeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: FieldworkTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.FieldworkTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class FieldworkTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IFieldworkTypeDescriptor source, IFieldworkTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IFieldworkTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.FieldworkTypeDescriptorId != target.FieldworkTypeDescriptorId)
            {
                source.FieldworkTypeDescriptorId = target.FieldworkTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IFieldworkTypeDescriptor source, IFieldworkTypeDescriptor target, Action<IFieldworkTypeDescriptor, IFieldworkTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IFieldworkTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IFieldworkTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.FieldworkTypeDescriptorId = source.FieldworkTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IFieldworkTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: FundingSourceDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.FundingSourceDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class FundingSourceDescriptorMapper 
    {
        public static bool SynchronizeTo(this IFundingSourceDescriptor source, IFundingSourceDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IFundingSourceDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.FundingSourceDescriptorId != target.FundingSourceDescriptorId)
            {
                source.FundingSourceDescriptorId = target.FundingSourceDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IFundingSourceDescriptor source, IFundingSourceDescriptor target, Action<IFundingSourceDescriptor, IFundingSourceDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IFundingSourceDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IFundingSourceDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.FundingSourceDescriptorId = source.FundingSourceDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IFundingSourceDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: GenderDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.GenderDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class GenderDescriptorMapper 
    {
        public static bool SynchronizeTo(this IGenderDescriptor source, IGenderDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IGenderDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GenderDescriptorId != target.GenderDescriptorId)
            {
                source.GenderDescriptorId = target.GenderDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IGenderDescriptor source, IGenderDescriptor target, Action<IGenderDescriptor, IGenderDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IGenderDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IGenderDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.GenderDescriptorId = source.GenderDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IGenderDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: GradebookEntry

namespace EdFi.Ods.Entities.Common.TPDM //.GradebookEntryAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class GradebookEntryExtensionMapper 
    {
        public static bool SynchronizeTo(this IGradebookEntryExtension source, IGradebookEntryExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as IGradebookEntryExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.GradebookEntry as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsProgramGatewayDescriptorSupported)
                && target.ProgramGatewayDescriptor != source.ProgramGatewayDescriptor)
            {
                target.ProgramGatewayDescriptor = source.ProgramGatewayDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IGradebookEntryExtension source, IGradebookEntryExtension target, Action<IGradebookEntryExtension, IGradebookEntryExtension> onMapped)
        {
            var sourceSynchSupport = source as IGradebookEntryExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as IGradebookEntryExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsProgramGatewayDescriptorSupported)
                target.ProgramGatewayDescriptor = source.ProgramGatewayDescriptor;
            else
                targetSynchSupport.IsProgramGatewayDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IGradebookEntryExtensionSynchronizationSourceSupport 
    {
        bool IsProgramGatewayDescriptorSupported { get; set; }
    }
 
}
// Aggregate: HireStatusDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.HireStatusDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class HireStatusDescriptorMapper 
    {
        public static bool SynchronizeTo(this IHireStatusDescriptor source, IHireStatusDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IHireStatusDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.HireStatusDescriptorId != target.HireStatusDescriptorId)
            {
                source.HireStatusDescriptorId = target.HireStatusDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IHireStatusDescriptor source, IHireStatusDescriptor target, Action<IHireStatusDescriptor, IHireStatusDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IHireStatusDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IHireStatusDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.HireStatusDescriptorId = source.HireStatusDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IHireStatusDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: HiringSourceDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.HiringSourceDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class HiringSourceDescriptorMapper 
    {
        public static bool SynchronizeTo(this IHiringSourceDescriptor source, IHiringSourceDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IHiringSourceDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.HiringSourceDescriptorId != target.HiringSourceDescriptorId)
            {
                source.HiringSourceDescriptorId = target.HiringSourceDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IHiringSourceDescriptor source, IHiringSourceDescriptor target, Action<IHiringSourceDescriptor, IHiringSourceDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IHiringSourceDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IHiringSourceDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.HiringSourceDescriptorId = source.HiringSourceDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IHiringSourceDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: InternalExternalHireDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.InternalExternalHireDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class InternalExternalHireDescriptorMapper 
    {
        public static bool SynchronizeTo(this IInternalExternalHireDescriptor source, IInternalExternalHireDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IInternalExternalHireDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.InternalExternalHireDescriptorId != target.InternalExternalHireDescriptorId)
            {
                source.InternalExternalHireDescriptorId = target.InternalExternalHireDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IInternalExternalHireDescriptor source, IInternalExternalHireDescriptor target, Action<IInternalExternalHireDescriptor, IInternalExternalHireDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IInternalExternalHireDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IInternalExternalHireDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.InternalExternalHireDescriptorId = source.InternalExternalHireDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IInternalExternalHireDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: LevelOfDegreeAwardedDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.LevelOfDegreeAwardedDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class LevelOfDegreeAwardedDescriptorMapper 
    {
        public static bool SynchronizeTo(this ILevelOfDegreeAwardedDescriptor source, ILevelOfDegreeAwardedDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ILevelOfDegreeAwardedDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LevelOfDegreeAwardedDescriptorId != target.LevelOfDegreeAwardedDescriptorId)
            {
                source.LevelOfDegreeAwardedDescriptorId = target.LevelOfDegreeAwardedDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ILevelOfDegreeAwardedDescriptor source, ILevelOfDegreeAwardedDescriptor target, Action<ILevelOfDegreeAwardedDescriptor, ILevelOfDegreeAwardedDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ILevelOfDegreeAwardedDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ILevelOfDegreeAwardedDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LevelOfDegreeAwardedDescriptorId = source.LevelOfDegreeAwardedDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ILevelOfDegreeAwardedDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: LevelTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.LevelTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class LevelTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this ILevelTypeDescriptor source, ILevelTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ILevelTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LevelTypeDescriptorId != target.LevelTypeDescriptorId)
            {
                source.LevelTypeDescriptorId = target.LevelTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ILevelTypeDescriptor source, ILevelTypeDescriptor target, Action<ILevelTypeDescriptor, ILevelTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ILevelTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ILevelTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LevelTypeDescriptorId = source.LevelTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ILevelTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: LocalEducationAgency

namespace EdFi.Ods.Entities.Common.TPDM //.LocalEducationAgencyAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class LocalEducationAgencyExtensionMapper 
    {
        public static bool SynchronizeTo(this ILocalEducationAgencyExtension source, ILocalEducationAgencyExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as ILocalEducationAgencyExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.LocalEducationAgency as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsFederalLocaleCodeDescriptorSupported)
                && target.FederalLocaleCodeDescriptor != source.FederalLocaleCodeDescriptor)
            {
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ILocalEducationAgencyExtension source, ILocalEducationAgencyExtension target, Action<ILocalEducationAgencyExtension, ILocalEducationAgencyExtension> onMapped)
        {
            var sourceSynchSupport = source as ILocalEducationAgencyExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as ILocalEducationAgencyExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsFederalLocaleCodeDescriptorSupported)
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
            else
                targetSynchSupport.IsFederalLocaleCodeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ILocalEducationAgencyExtensionSynchronizationSourceSupport 
    {
        bool IsFederalLocaleCodeDescriptorSupported { get; set; }
    }
 
}
// Aggregate: OpenStaffPosition

namespace EdFi.Ods.Entities.Common.TPDM //.OpenStaffPositionAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class OpenStaffPositionExtensionMapper 
    {
        public static bool SynchronizeTo(this IOpenStaffPositionExtension source, IOpenStaffPositionExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as IOpenStaffPositionExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.OpenStaffPosition as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsFullTimeEquivalencySupported)
                && target.FullTimeEquivalency != source.FullTimeEquivalency)
            {
                target.FullTimeEquivalency = source.FullTimeEquivalency;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFundingSourceDescriptorSupported)
                && target.FundingSourceDescriptor != source.FundingSourceDescriptor)
            {
                target.FundingSourceDescriptor = source.FundingSourceDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHighNeedAcademicSubjectSupported)
                && target.HighNeedAcademicSubject != source.HighNeedAcademicSubject)
            {
                target.HighNeedAcademicSubject = source.HighNeedAcademicSubject;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIsActiveSupported)
                && target.IsActive != source.IsActive)
            {
                target.IsActive = source.IsActive;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaxSalarySupported)
                && target.MaxSalary != source.MaxSalary)
            {
                target.MaxSalary = source.MaxSalary;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinSalarySupported)
                && target.MinSalary != source.MinSalary)
            {
                target.MinSalary = source.MinSalary;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOpenStaffPositionReasonDescriptorSupported)
                && target.OpenStaffPositionReasonDescriptor != source.OpenStaffPositionReasonDescriptor)
            {
                target.OpenStaffPositionReasonDescriptor = source.OpenStaffPositionReasonDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPositionControlNumberSupported)
                && target.PositionControlNumber != source.PositionControlNumber)
            {
                target.PositionControlNumber = source.PositionControlNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolYearSupported)
                && target.SchoolYear != source.SchoolYear)
            {
                target.SchoolYear = source.SchoolYear;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTermDescriptorSupported)
                && target.TermDescriptor != source.TermDescriptor)
            {
                target.TermDescriptor = source.TermDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTotalBudgetedSupported)
                && target.TotalBudgeted != source.TotalBudgeted)
            {
                target.TotalBudgeted = source.TotalBudgeted;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IOpenStaffPositionExtension source, IOpenStaffPositionExtension target, Action<IOpenStaffPositionExtension, IOpenStaffPositionExtension> onMapped)
        {
            var sourceSynchSupport = source as IOpenStaffPositionExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as IOpenStaffPositionExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsFullTimeEquivalencySupported)
                target.FullTimeEquivalency = source.FullTimeEquivalency;
            else
                targetSynchSupport.IsFullTimeEquivalencySupported = false;

            if (sourceSynchSupport.IsFundingSourceDescriptorSupported)
                target.FundingSourceDescriptor = source.FundingSourceDescriptor;
            else
                targetSynchSupport.IsFundingSourceDescriptorSupported = false;

            if (sourceSynchSupport.IsHighNeedAcademicSubjectSupported)
                target.HighNeedAcademicSubject = source.HighNeedAcademicSubject;
            else
                targetSynchSupport.IsHighNeedAcademicSubjectSupported = false;

            if (sourceSynchSupport.IsIsActiveSupported)
                target.IsActive = source.IsActive;
            else
                targetSynchSupport.IsIsActiveSupported = false;

            if (sourceSynchSupport.IsMaxSalarySupported)
                target.MaxSalary = source.MaxSalary;
            else
                targetSynchSupport.IsMaxSalarySupported = false;

            if (sourceSynchSupport.IsMinSalarySupported)
                target.MinSalary = source.MinSalary;
            else
                targetSynchSupport.IsMinSalarySupported = false;

            if (sourceSynchSupport.IsOpenStaffPositionReasonDescriptorSupported)
                target.OpenStaffPositionReasonDescriptor = source.OpenStaffPositionReasonDescriptor;
            else
                targetSynchSupport.IsOpenStaffPositionReasonDescriptorSupported = false;

            if (sourceSynchSupport.IsPositionControlNumberSupported)
                target.PositionControlNumber = source.PositionControlNumber;
            else
                targetSynchSupport.IsPositionControlNumberSupported = false;

            if (sourceSynchSupport.IsSchoolYearSupported)
                target.SchoolYear = source.SchoolYear;
            else
                targetSynchSupport.IsSchoolYearSupported = false;

            if (sourceSynchSupport.IsTermDescriptorSupported)
                target.TermDescriptor = source.TermDescriptor;
            else
                targetSynchSupport.IsTermDescriptorSupported = false;

            if (sourceSynchSupport.IsTotalBudgetedSupported)
                target.TotalBudgeted = source.TotalBudgeted;
            else
                targetSynchSupport.IsTotalBudgetedSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IOpenStaffPositionExtensionSynchronizationSourceSupport 
    {
        bool IsFullTimeEquivalencySupported { get; set; }
        bool IsFundingSourceDescriptorSupported { get; set; }
        bool IsHighNeedAcademicSubjectSupported { get; set; }
        bool IsIsActiveSupported { get; set; }
        bool IsMaxSalarySupported { get; set; }
        bool IsMinSalarySupported { get; set; }
        bool IsOpenStaffPositionReasonDescriptorSupported { get; set; }
        bool IsPositionControlNumberSupported { get; set; }
        bool IsSchoolYearSupported { get; set; }
        bool IsTermDescriptorSupported { get; set; }
        bool IsTotalBudgetedSupported { get; set; }
    }
 
}
// Aggregate: OpenStaffPositionEvent

namespace EdFi.Ods.Entities.Common.TPDM //.OpenStaffPositionEventAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class OpenStaffPositionEventMapper 
    {
        public static bool SynchronizeTo(this IOpenStaffPositionEvent source, IOpenStaffPositionEvent target)
        {
            bool isModified = false;

            var sourceSupport = source as IOpenStaffPositionEventSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EventDate != target.EventDate)
            {
                source.EventDate = target.EventDate;
            }
            if (source.OpenStaffPositionEventTypeDescriptor != target.OpenStaffPositionEventTypeDescriptor)
            {
                source.OpenStaffPositionEventTypeDescriptor = target.OpenStaffPositionEventTypeDescriptor;
            }
            if (source.RequisitionNumber != target.RequisitionNumber)
            {
                source.RequisitionNumber = target.RequisitionNumber;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsOpenStaffPositionEventStatusDescriptorSupported)
                && target.OpenStaffPositionEventStatusDescriptor != source.OpenStaffPositionEventStatusDescriptor)
            {
                target.OpenStaffPositionEventStatusDescriptor = source.OpenStaffPositionEventStatusDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IOpenStaffPositionEvent source, IOpenStaffPositionEvent target, Action<IOpenStaffPositionEvent, IOpenStaffPositionEvent> onMapped)
        {
            var sourceSynchSupport = source as IOpenStaffPositionEventSynchronizationSourceSupport;
            var targetSynchSupport = target as IOpenStaffPositionEventSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EventDate = source.EventDate;
            target.OpenStaffPositionEventTypeDescriptor = source.OpenStaffPositionEventTypeDescriptor;
            target.RequisitionNumber = source.RequisitionNumber;

            // Copy non-PK properties

            if (sourceSynchSupport.IsOpenStaffPositionEventStatusDescriptorSupported)
                target.OpenStaffPositionEventStatusDescriptor = source.OpenStaffPositionEventStatusDescriptor;
            else
                targetSynchSupport.IsOpenStaffPositionEventStatusDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.OpenStaffPositionResourceId = source.OpenStaffPositionResourceId;
                target.OpenStaffPositionDiscriminator = source.OpenStaffPositionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IOpenStaffPositionEventSynchronizationSourceSupport 
    {
        bool IsOpenStaffPositionEventStatusDescriptorSupported { get; set; }
    }
 
}
// Aggregate: OpenStaffPositionEventStatusDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.OpenStaffPositionEventStatusDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class OpenStaffPositionEventStatusDescriptorMapper 
    {
        public static bool SynchronizeTo(this IOpenStaffPositionEventStatusDescriptor source, IOpenStaffPositionEventStatusDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IOpenStaffPositionEventStatusDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.OpenStaffPositionEventStatusDescriptorId != target.OpenStaffPositionEventStatusDescriptorId)
            {
                source.OpenStaffPositionEventStatusDescriptorId = target.OpenStaffPositionEventStatusDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IOpenStaffPositionEventStatusDescriptor source, IOpenStaffPositionEventStatusDescriptor target, Action<IOpenStaffPositionEventStatusDescriptor, IOpenStaffPositionEventStatusDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IOpenStaffPositionEventStatusDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IOpenStaffPositionEventStatusDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.OpenStaffPositionEventStatusDescriptorId = source.OpenStaffPositionEventStatusDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IOpenStaffPositionEventStatusDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: OpenStaffPositionEventTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.OpenStaffPositionEventTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class OpenStaffPositionEventTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IOpenStaffPositionEventTypeDescriptor source, IOpenStaffPositionEventTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IOpenStaffPositionEventTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.OpenStaffPositionEventTypeDescriptorId != target.OpenStaffPositionEventTypeDescriptorId)
            {
                source.OpenStaffPositionEventTypeDescriptorId = target.OpenStaffPositionEventTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IOpenStaffPositionEventTypeDescriptor source, IOpenStaffPositionEventTypeDescriptor target, Action<IOpenStaffPositionEventTypeDescriptor, IOpenStaffPositionEventTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IOpenStaffPositionEventTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IOpenStaffPositionEventTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.OpenStaffPositionEventTypeDescriptorId = source.OpenStaffPositionEventTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IOpenStaffPositionEventTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: OpenStaffPositionReasonDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.OpenStaffPositionReasonDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class OpenStaffPositionReasonDescriptorMapper 
    {
        public static bool SynchronizeTo(this IOpenStaffPositionReasonDescriptor source, IOpenStaffPositionReasonDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IOpenStaffPositionReasonDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.OpenStaffPositionReasonDescriptorId != target.OpenStaffPositionReasonDescriptorId)
            {
                source.OpenStaffPositionReasonDescriptorId = target.OpenStaffPositionReasonDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IOpenStaffPositionReasonDescriptor source, IOpenStaffPositionReasonDescriptor target, Action<IOpenStaffPositionReasonDescriptor, IOpenStaffPositionReasonDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IOpenStaffPositionReasonDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IOpenStaffPositionReasonDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.OpenStaffPositionReasonDescriptorId = source.OpenStaffPositionReasonDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IOpenStaffPositionReasonDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: PerformanceMeasure

namespace EdFi.Ods.Entities.Common.TPDM //.PerformanceMeasureAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class PerformanceMeasureMapper 
    {
        public static bool SynchronizeTo(this IPerformanceMeasure source, IPerformanceMeasure target)
        {
            bool isModified = false;

            var sourceSupport = source as IPerformanceMeasureSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.PerformanceMeasureIdentifier != target.PerformanceMeasureIdentifier)
            {
                source.PerformanceMeasureIdentifier = target.PerformanceMeasureIdentifier;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAcademicSubjectDescriptorSupported)
                && target.AcademicSubjectDescriptor != source.AcademicSubjectDescriptor)
            {
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsActualDateOfPerformanceMeasureSupported)
                && target.ActualDateOfPerformanceMeasure != source.ActualDateOfPerformanceMeasure)
            {
                target.ActualDateOfPerformanceMeasure = source.ActualDateOfPerformanceMeasure;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAnnouncedSupported)
                && target.Announced != source.Announced)
            {
                target.Announced = source.Announced;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCommentsSupported)
                && target.Comments != source.Comments)
            {
                target.Comments = source.Comments;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCoteachingStyleObservedDescriptorSupported)
                && target.CoteachingStyleObservedDescriptor != source.CoteachingStyleObservedDescriptor)
            {
                target.CoteachingStyleObservedDescriptor = source.CoteachingStyleObservedDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDurationOfPerformanceMeasureSupported)
                && target.DurationOfPerformanceMeasure != source.DurationOfPerformanceMeasure)
            {
                target.DurationOfPerformanceMeasure = source.DurationOfPerformanceMeasure;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPerformanceMeasureInstanceDescriptorSupported)
                && target.PerformanceMeasureInstanceDescriptor != source.PerformanceMeasureInstanceDescriptor)
            {
                target.PerformanceMeasureInstanceDescriptor = source.PerformanceMeasureInstanceDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPerformanceMeasureTypeDescriptorSupported)
                && target.PerformanceMeasureTypeDescriptor != source.PerformanceMeasureTypeDescriptor)
            {
                target.PerformanceMeasureTypeDescriptor = source.PerformanceMeasureTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsScheduleDateOfPerformanceMeasureSupported)
                && target.ScheduleDateOfPerformanceMeasure != source.ScheduleDateOfPerformanceMeasure)
            {
                target.ScheduleDateOfPerformanceMeasure = source.ScheduleDateOfPerformanceMeasure;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTermDescriptorSupported)
                && target.TermDescriptor != source.TermDescriptor)
            {
                target.TermDescriptor = source.TermDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTimeOfPerformanceMeasureSupported)
                && target.TimeOfPerformanceMeasure != source.TimeOfPerformanceMeasure)
            {
                target.TimeOfPerformanceMeasure = source.TimeOfPerformanceMeasure;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // PerformanceMeasurePersonBeingReviewed
            if (sourceSupport == null || sourceSupport.IsPerformanceMeasurePersonBeingReviewedSupported)
            {
                if (source.PerformanceMeasurePersonBeingReviewed == null)
                {
                    if (target.PerformanceMeasurePersonBeingReviewed != null)
                    {
                        target.PerformanceMeasurePersonBeingReviewed = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.PerformanceMeasurePersonBeingReviewed == null)
                    {
                        var itemType = target.GetType().GetProperty("PerformanceMeasurePersonBeingReviewed").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.PerformanceMeasurePersonBeingReviewed = (IPerformanceMeasurePersonBeingReviewed) newItem;
                    }

                    isModified |= source.PerformanceMeasurePersonBeingReviewed.Synchronize(target.PerformanceMeasurePersonBeingReviewed);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsPerformanceMeasureGradeLevelsSupported)
            {
                isModified |= 
                    source.PerformanceMeasureGradeLevels.SynchronizeCollectionTo(
                        target.PerformanceMeasureGradeLevels, 
                        onChildAdded: child => 
                            {
                                child.PerformanceMeasure = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsPerformanceMeasureGradeLevelIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsPerformanceMeasureProgramGatewaysSupported)
            {
                isModified |= 
                    source.PerformanceMeasureProgramGateways.SynchronizeCollectionTo(
                        target.PerformanceMeasureProgramGateways, 
                        onChildAdded: child => 
                            {
                                child.PerformanceMeasure = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsPerformanceMeasureProgramGatewayIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsPerformanceMeasureReviewersSupported)
            {
                isModified |= 
                    source.PerformanceMeasureReviewers.SynchronizeCollectionTo(
                        target.PerformanceMeasureReviewers, 
                        onChildAdded: child => 
                            {
                                child.PerformanceMeasure = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsPerformanceMeasureReviewerIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsPerformanceMeasureRubricsSupported)
            {
                isModified |= 
                    source.PerformanceMeasureRubrics.SynchronizeCollectionTo(
                        target.PerformanceMeasureRubrics, 
                        onChildAdded: child => 
                            {
                                child.PerformanceMeasure = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsPerformanceMeasureRubricIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IPerformanceMeasure source, IPerformanceMeasure target, Action<IPerformanceMeasure, IPerformanceMeasure> onMapped)
        {
            var sourceSynchSupport = source as IPerformanceMeasureSynchronizationSourceSupport;
            var targetSynchSupport = target as IPerformanceMeasureSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.PerformanceMeasureIdentifier = source.PerformanceMeasureIdentifier;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAcademicSubjectDescriptorSupported)
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
            else
                targetSynchSupport.IsAcademicSubjectDescriptorSupported = false;

            if (sourceSynchSupport.IsActualDateOfPerformanceMeasureSupported)
                target.ActualDateOfPerformanceMeasure = source.ActualDateOfPerformanceMeasure;
            else
                targetSynchSupport.IsActualDateOfPerformanceMeasureSupported = false;

            if (sourceSynchSupport.IsAnnouncedSupported)
                target.Announced = source.Announced;
            else
                targetSynchSupport.IsAnnouncedSupported = false;

            if (sourceSynchSupport.IsCommentsSupported)
                target.Comments = source.Comments;
            else
                targetSynchSupport.IsCommentsSupported = false;

            if (sourceSynchSupport.IsCoteachingStyleObservedDescriptorSupported)
                target.CoteachingStyleObservedDescriptor = source.CoteachingStyleObservedDescriptor;
            else
                targetSynchSupport.IsCoteachingStyleObservedDescriptorSupported = false;

            if (sourceSynchSupport.IsDurationOfPerformanceMeasureSupported)
                target.DurationOfPerformanceMeasure = source.DurationOfPerformanceMeasure;
            else
                targetSynchSupport.IsDurationOfPerformanceMeasureSupported = false;

            if (sourceSynchSupport.IsPerformanceMeasureInstanceDescriptorSupported)
                target.PerformanceMeasureInstanceDescriptor = source.PerformanceMeasureInstanceDescriptor;
            else
                targetSynchSupport.IsPerformanceMeasureInstanceDescriptorSupported = false;

            if (sourceSynchSupport.IsPerformanceMeasureTypeDescriptorSupported)
                target.PerformanceMeasureTypeDescriptor = source.PerformanceMeasureTypeDescriptor;
            else
                targetSynchSupport.IsPerformanceMeasureTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsScheduleDateOfPerformanceMeasureSupported)
                target.ScheduleDateOfPerformanceMeasure = source.ScheduleDateOfPerformanceMeasure;
            else
                targetSynchSupport.IsScheduleDateOfPerformanceMeasureSupported = false;

            if (sourceSynchSupport.IsTermDescriptorSupported)
                target.TermDescriptor = source.TermDescriptor;
            else
                targetSynchSupport.IsTermDescriptorSupported = false;

            if (sourceSynchSupport.IsTimeOfPerformanceMeasureSupported)
                target.TimeOfPerformanceMeasure = source.TimeOfPerformanceMeasure;
            else
                targetSynchSupport.IsTimeOfPerformanceMeasureSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // PerformanceMeasurePersonBeingReviewed (Source)
            if (sourceSynchSupport.IsPerformanceMeasurePersonBeingReviewedSupported)
            {
                var itemProperty = target.GetType().GetProperty("PerformanceMeasurePersonBeingReviewed");
                
                if (itemProperty != null)
                {                    
                    if (source.PerformanceMeasurePersonBeingReviewed == null)
                    {
                        target.PerformanceMeasurePersonBeingReviewed = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetPerformanceMeasurePersonBeingReviewed = Activator.CreateInstance(itemType);
                        (targetPerformanceMeasurePersonBeingReviewed as IChildEntity)?.SetParent(target);
                        source.PerformanceMeasurePersonBeingReviewed.Map(targetPerformanceMeasurePersonBeingReviewed);
                        
                        // Update the target reference appropriately
                        target.PerformanceMeasurePersonBeingReviewed = (IPerformanceMeasurePersonBeingReviewed) targetPerformanceMeasurePersonBeingReviewed;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsPerformanceMeasurePersonBeingReviewedSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists

            if (sourceSynchSupport.IsPerformanceMeasureGradeLevelsSupported)
            {    
                targetSynchSupport.IsPerformanceMeasureGradeLevelIncluded = sourceSynchSupport.IsPerformanceMeasureGradeLevelIncluded;
                source.PerformanceMeasureGradeLevels.MapCollectionTo(target.PerformanceMeasureGradeLevels, target);
            }
            else
            {
                targetSynchSupport.IsPerformanceMeasureGradeLevelsSupported = false;
            }

            if (sourceSynchSupport.IsPerformanceMeasureProgramGatewaysSupported)
            {    
                targetSynchSupport.IsPerformanceMeasureProgramGatewayIncluded = sourceSynchSupport.IsPerformanceMeasureProgramGatewayIncluded;
                source.PerformanceMeasureProgramGateways.MapCollectionTo(target.PerformanceMeasureProgramGateways, target);
            }
            else
            {
                targetSynchSupport.IsPerformanceMeasureProgramGatewaysSupported = false;
            }

            if (sourceSynchSupport.IsPerformanceMeasureReviewersSupported)
            {    
                targetSynchSupport.IsPerformanceMeasureReviewerIncluded = sourceSynchSupport.IsPerformanceMeasureReviewerIncluded;
                source.PerformanceMeasureReviewers.MapCollectionTo(target.PerformanceMeasureReviewers, target);
            }
            else
            {
                targetSynchSupport.IsPerformanceMeasureReviewersSupported = false;
            }

            if (sourceSynchSupport.IsPerformanceMeasureRubricsSupported)
            {    
                targetSynchSupport.IsPerformanceMeasureRubricIncluded = sourceSynchSupport.IsPerformanceMeasureRubricIncluded;
                source.PerformanceMeasureRubrics.MapCollectionTo(target.PerformanceMeasureRubrics, target);
            }
            else
            {
                targetSynchSupport.IsPerformanceMeasureRubricsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPerformanceMeasureSynchronizationSourceSupport 
    {
        bool IsAcademicSubjectDescriptorSupported { get; set; }
        bool IsActualDateOfPerformanceMeasureSupported { get; set; }
        bool IsAnnouncedSupported { get; set; }
        bool IsCommentsSupported { get; set; }
        bool IsCoteachingStyleObservedDescriptorSupported { get; set; }
        bool IsDurationOfPerformanceMeasureSupported { get; set; }
        bool IsPerformanceMeasureGradeLevelsSupported { get; set; }
        bool IsPerformanceMeasureInstanceDescriptorSupported { get; set; }
        bool IsPerformanceMeasurePersonBeingReviewedSupported { get; set; }
        bool IsPerformanceMeasureProgramGatewaysSupported { get; set; }
        bool IsPerformanceMeasureReviewersSupported { get; set; }
        bool IsPerformanceMeasureRubricsSupported { get; set; }
        bool IsPerformanceMeasureTypeDescriptorSupported { get; set; }
        bool IsScheduleDateOfPerformanceMeasureSupported { get; set; }
        bool IsTermDescriptorSupported { get; set; }
        bool IsTimeOfPerformanceMeasureSupported { get; set; }
        Func<IPerformanceMeasureGradeLevel, bool> IsPerformanceMeasureGradeLevelIncluded { get; set; }
        Func<IPerformanceMeasureProgramGateway, bool> IsPerformanceMeasureProgramGatewayIncluded { get; set; }
        Func<IPerformanceMeasureReviewer, bool> IsPerformanceMeasureReviewerIncluded { get; set; }
        Func<IPerformanceMeasureRubric, bool> IsPerformanceMeasureRubricIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class PerformanceMeasureGradeLevelMapper 
    {
        public static bool SynchronizeTo(this IPerformanceMeasureGradeLevel source, IPerformanceMeasureGradeLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IPerformanceMeasureGradeLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPerformanceMeasureGradeLevel source, IPerformanceMeasureGradeLevel target, Action<IPerformanceMeasureGradeLevel, IPerformanceMeasureGradeLevel> onMapped)
        {
            var sourceSynchSupport = source as IPerformanceMeasureGradeLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IPerformanceMeasureGradeLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPerformanceMeasureGradeLevelSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class PerformanceMeasurePersonBeingReviewedMapper 
    {
        public static bool SynchronizeTo(this IPerformanceMeasurePersonBeingReviewed source, IPerformanceMeasurePersonBeingReviewed target)
        {
            bool isModified = false;

            var sourceSupport = source as IPerformanceMeasurePersonBeingReviewedSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEducationOrganizationIdSupported)
                && target.EducationOrganizationId != source.EducationOrganizationId)
            {
                target.EducationOrganizationId = source.EducationOrganizationId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFirstNameSupported)
                && target.FirstName != source.FirstName)
            {
                target.FirstName = source.FirstName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLastSurnameSupported)
                && target.LastSurname != source.LastSurname)
            {
                target.LastSurname = source.LastSurname;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProspectIdentifierSupported)
                && target.ProspectIdentifier != source.ProspectIdentifier)
            {
                target.ProspectIdentifier = source.ProspectIdentifier;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStaffUniqueIdSupported)
                && target.StaffUniqueId != source.StaffUniqueId)
            {
                target.StaffUniqueId = source.StaffUniqueId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTeacherCandidateIdentifierSupported)
                && target.TeacherCandidateIdentifier != source.TeacherCandidateIdentifier)
            {
                target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPerformanceMeasurePersonBeingReviewed source, IPerformanceMeasurePersonBeingReviewed target, Action<IPerformanceMeasurePersonBeingReviewed, IPerformanceMeasurePersonBeingReviewed> onMapped)
        {
            var sourceSynchSupport = source as IPerformanceMeasurePersonBeingReviewedSynchronizationSourceSupport;
            var targetSynchSupport = target as IPerformanceMeasurePersonBeingReviewedSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsEducationOrganizationIdSupported)
                target.EducationOrganizationId = source.EducationOrganizationId;
            else
                targetSynchSupport.IsEducationOrganizationIdSupported = false;

            if (sourceSynchSupport.IsFirstNameSupported)
                target.FirstName = source.FirstName;
            else
                targetSynchSupport.IsFirstNameSupported = false;

            if (sourceSynchSupport.IsLastSurnameSupported)
                target.LastSurname = source.LastSurname;
            else
                targetSynchSupport.IsLastSurnameSupported = false;

            if (sourceSynchSupport.IsProspectIdentifierSupported)
                target.ProspectIdentifier = source.ProspectIdentifier;
            else
                targetSynchSupport.IsProspectIdentifierSupported = false;

            if (sourceSynchSupport.IsStaffUniqueIdSupported)
                target.StaffUniqueId = source.StaffUniqueId;
            else
                targetSynchSupport.IsStaffUniqueIdSupported = false;

            if (sourceSynchSupport.IsTeacherCandidateIdentifierSupported)
                target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;
            else
                targetSynchSupport.IsTeacherCandidateIdentifierSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ProspectResourceId = source.ProspectResourceId;
                target.ProspectDiscriminator = source.ProspectDiscriminator;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
                target.TeacherCandidateResourceId = source.TeacherCandidateResourceId;
                target.TeacherCandidateDiscriminator = source.TeacherCandidateDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPerformanceMeasurePersonBeingReviewedSynchronizationSourceSupport 
    {
        bool IsEducationOrganizationIdSupported { get; set; }
        bool IsFirstNameSupported { get; set; }
        bool IsLastSurnameSupported { get; set; }
        bool IsProspectIdentifierSupported { get; set; }
        bool IsStaffUniqueIdSupported { get; set; }
        bool IsTeacherCandidateIdentifierSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class PerformanceMeasureProgramGatewayMapper 
    {
        public static bool SynchronizeTo(this IPerformanceMeasureProgramGateway source, IPerformanceMeasureProgramGateway target)
        {
            bool isModified = false;

            var sourceSupport = source as IPerformanceMeasureProgramGatewaySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ProgramGatewayDescriptor != target.ProgramGatewayDescriptor)
            {
                source.ProgramGatewayDescriptor = target.ProgramGatewayDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPerformanceMeasureProgramGateway source, IPerformanceMeasureProgramGateway target, Action<IPerformanceMeasureProgramGateway, IPerformanceMeasureProgramGateway> onMapped)
        {
            var sourceSynchSupport = source as IPerformanceMeasureProgramGatewaySynchronizationSourceSupport;
            var targetSynchSupport = target as IPerformanceMeasureProgramGatewaySynchronizationSourceSupport;

            // Copy contextual primary key values
            target.ProgramGatewayDescriptor = source.ProgramGatewayDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPerformanceMeasureProgramGatewaySynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class PerformanceMeasureReviewerMapper 
    {
        public static bool SynchronizeTo(this IPerformanceMeasureReviewer source, IPerformanceMeasureReviewer target)
        {
            bool isModified = false;

            var sourceSupport = source as IPerformanceMeasureReviewerSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.FirstName != target.FirstName)
            {
                source.FirstName = target.FirstName;
            }
            if (source.LastSurname != target.LastSurname)
            {
                source.LastSurname = target.LastSurname;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsStaffUniqueIdSupported)
                && target.StaffUniqueId != source.StaffUniqueId)
            {
                target.StaffUniqueId = source.StaffUniqueId;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // PerformanceMeasureReviewerReceivedTraining
            if (sourceSupport == null || sourceSupport.IsPerformanceMeasureReviewerReceivedTrainingSupported)
            {
                if (source.PerformanceMeasureReviewerReceivedTraining == null)
                {
                    if (target.PerformanceMeasureReviewerReceivedTraining != null)
                    {
                        target.PerformanceMeasureReviewerReceivedTraining = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.PerformanceMeasureReviewerReceivedTraining == null)
                    {
                        var itemType = target.GetType().GetProperty("PerformanceMeasureReviewerReceivedTraining").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.PerformanceMeasureReviewerReceivedTraining = (IPerformanceMeasureReviewerReceivedTraining) newItem;
                    }

                    isModified |= source.PerformanceMeasureReviewerReceivedTraining.Synchronize(target.PerformanceMeasureReviewerReceivedTraining);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPerformanceMeasureReviewer source, IPerformanceMeasureReviewer target, Action<IPerformanceMeasureReviewer, IPerformanceMeasureReviewer> onMapped)
        {
            var sourceSynchSupport = source as IPerformanceMeasureReviewerSynchronizationSourceSupport;
            var targetSynchSupport = target as IPerformanceMeasureReviewerSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.FirstName = source.FirstName;
            target.LastSurname = source.LastSurname;

            // Copy non-PK properties

            if (sourceSynchSupport.IsStaffUniqueIdSupported)
                target.StaffUniqueId = source.StaffUniqueId;
            else
                targetSynchSupport.IsStaffUniqueIdSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // PerformanceMeasureReviewerReceivedTraining (Source)
            if (sourceSynchSupport.IsPerformanceMeasureReviewerReceivedTrainingSupported)
            {
                var itemProperty = target.GetType().GetProperty("PerformanceMeasureReviewerReceivedTraining");
                
                if (itemProperty != null)
                {                    
                    if (source.PerformanceMeasureReviewerReceivedTraining == null)
                    {
                        target.PerformanceMeasureReviewerReceivedTraining = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetPerformanceMeasureReviewerReceivedTraining = Activator.CreateInstance(itemType);
                        (targetPerformanceMeasureReviewerReceivedTraining as IChildEntity)?.SetParent(target);
                        source.PerformanceMeasureReviewerReceivedTraining.Map(targetPerformanceMeasureReviewerReceivedTraining);
                        
                        // Update the target reference appropriately
                        target.PerformanceMeasureReviewerReceivedTraining = (IPerformanceMeasureReviewerReceivedTraining) targetPerformanceMeasureReviewerReceivedTraining;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsPerformanceMeasureReviewerReceivedTrainingSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPerformanceMeasureReviewerSynchronizationSourceSupport 
    {
        bool IsPerformanceMeasureReviewerReceivedTrainingSupported { get; set; }
        bool IsStaffUniqueIdSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class PerformanceMeasureReviewerReceivedTrainingMapper 
    {
        public static bool SynchronizeTo(this IPerformanceMeasureReviewerReceivedTraining source, IPerformanceMeasureReviewerReceivedTraining target)
        {
            bool isModified = false;

            var sourceSupport = source as IPerformanceMeasureReviewerReceivedTrainingSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsInterRaterReliabilityScoreSupported)
                && target.InterRaterReliabilityScore != source.InterRaterReliabilityScore)
            {
                target.InterRaterReliabilityScore = source.InterRaterReliabilityScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsReceivedTrainingDateSupported)
                && target.ReceivedTrainingDate != source.ReceivedTrainingDate)
            {
                target.ReceivedTrainingDate = source.ReceivedTrainingDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPerformanceMeasureReviewerReceivedTraining source, IPerformanceMeasureReviewerReceivedTraining target, Action<IPerformanceMeasureReviewerReceivedTraining, IPerformanceMeasureReviewerReceivedTraining> onMapped)
        {
            var sourceSynchSupport = source as IPerformanceMeasureReviewerReceivedTrainingSynchronizationSourceSupport;
            var targetSynchSupport = target as IPerformanceMeasureReviewerReceivedTrainingSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsInterRaterReliabilityScoreSupported)
                target.InterRaterReliabilityScore = source.InterRaterReliabilityScore;
            else
                targetSynchSupport.IsInterRaterReliabilityScoreSupported = false;

            if (sourceSynchSupport.IsReceivedTrainingDateSupported)
                target.ReceivedTrainingDate = source.ReceivedTrainingDate;
            else
                targetSynchSupport.IsReceivedTrainingDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPerformanceMeasureReviewerReceivedTrainingSynchronizationSourceSupport 
    {
        bool IsInterRaterReliabilityScoreSupported { get; set; }
        bool IsReceivedTrainingDateSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class PerformanceMeasureRubricMapper 
    {
        public static bool SynchronizeTo(this IPerformanceMeasureRubric source, IPerformanceMeasureRubric target)
        {
            bool isModified = false;

            var sourceSupport = source as IPerformanceMeasureRubricSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.RubricTitle != target.RubricTitle)
            {
                source.RubricTitle = target.RubricTitle;
            }
            if (source.RubricTypeDescriptor != target.RubricTypeDescriptor)
            {
                source.RubricTypeDescriptor = target.RubricTypeDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPerformanceMeasureRubric source, IPerformanceMeasureRubric target, Action<IPerformanceMeasureRubric, IPerformanceMeasureRubric> onMapped)
        {
            var sourceSynchSupport = source as IPerformanceMeasureRubricSynchronizationSourceSupport;
            var targetSynchSupport = target as IPerformanceMeasureRubricSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.RubricTitle = source.RubricTitle;
            target.RubricTypeDescriptor = source.RubricTypeDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.RubricResourceId = source.RubricResourceId;
                target.RubricDiscriminator = source.RubricDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPerformanceMeasureRubricSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: PerformanceMeasureCourseAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.PerformanceMeasureCourseAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class PerformanceMeasureCourseAssociationMapper 
    {
        public static bool SynchronizeTo(this IPerformanceMeasureCourseAssociation source, IPerformanceMeasureCourseAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IPerformanceMeasureCourseAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CourseCode != target.CourseCode)
            {
                source.CourseCode = target.CourseCode;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.PerformanceMeasureIdentifier != target.PerformanceMeasureIdentifier)
            {
                source.PerformanceMeasureIdentifier = target.PerformanceMeasureIdentifier;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPerformanceMeasureCourseAssociation source, IPerformanceMeasureCourseAssociation target, Action<IPerformanceMeasureCourseAssociation, IPerformanceMeasureCourseAssociation> onMapped)
        {
            var sourceSynchSupport = source as IPerformanceMeasureCourseAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IPerformanceMeasureCourseAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CourseCode = source.CourseCode;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.PerformanceMeasureIdentifier = source.PerformanceMeasureIdentifier;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CourseResourceId = source.CourseResourceId;
                target.CourseDiscriminator = source.CourseDiscriminator;
                target.PerformanceMeasureResourceId = source.PerformanceMeasureResourceId;
                target.PerformanceMeasureDiscriminator = source.PerformanceMeasureDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPerformanceMeasureCourseAssociationSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: PerformanceMeasureFacts

namespace EdFi.Ods.Entities.Common.TPDM //.PerformanceMeasureFactsAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class PerformanceMeasureFactsMapper 
    {
        public static bool SynchronizeTo(this IPerformanceMeasureFacts source, IPerformanceMeasureFacts target)
        {
            bool isModified = false;

            var sourceSupport = source as IPerformanceMeasureFactsSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.FactsAsOfDate != target.FactsAsOfDate)
            {
                source.FactsAsOfDate = target.FactsAsOfDate;
            }
            if (source.RubricTitle != target.RubricTitle)
            {
                source.RubricTitle = target.RubricTitle;
            }
            if (source.RubricTypeDescriptor != target.RubricTypeDescriptor)
            {
                source.RubricTypeDescriptor = target.RubricTypeDescriptor;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAcademicSubjectDescriptorSupported)
                && target.AcademicSubjectDescriptor != source.AcademicSubjectDescriptor)
            {
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPerformanceMeasureTypeDescriptorSupported)
                && target.PerformanceMeasureTypeDescriptor != source.PerformanceMeasureTypeDescriptor)
            {
                target.PerformanceMeasureTypeDescriptor = source.PerformanceMeasureTypeDescriptor;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsPerformanceMeasureFactsGradeLevelsSupported)
            {
                isModified |= 
                    source.PerformanceMeasureFactsGradeLevels.SynchronizeCollectionTo(
                        target.PerformanceMeasureFactsGradeLevels, 
                        onChildAdded: child => 
                            {
                                child.PerformanceMeasureFacts = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsPerformanceMeasureFactsGradeLevelIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IPerformanceMeasureFacts source, IPerformanceMeasureFacts target, Action<IPerformanceMeasureFacts, IPerformanceMeasureFacts> onMapped)
        {
            var sourceSynchSupport = source as IPerformanceMeasureFactsSynchronizationSourceSupport;
            var targetSynchSupport = target as IPerformanceMeasureFactsSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FactsAsOfDate = source.FactsAsOfDate;
            target.RubricTitle = source.RubricTitle;
            target.RubricTypeDescriptor = source.RubricTypeDescriptor;
            target.SchoolYear = source.SchoolYear;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAcademicSubjectDescriptorSupported)
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
            else
                targetSynchSupport.IsAcademicSubjectDescriptorSupported = false;

            if (sourceSynchSupport.IsPerformanceMeasureTypeDescriptorSupported)
                target.PerformanceMeasureTypeDescriptor = source.PerformanceMeasureTypeDescriptor;
            else
                targetSynchSupport.IsPerformanceMeasureTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.RubricResourceId = source.RubricResourceId;
                target.RubricDiscriminator = source.RubricDiscriminator;
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsPerformanceMeasureFactsGradeLevelsSupported)
            {    
                targetSynchSupport.IsPerformanceMeasureFactsGradeLevelIncluded = sourceSynchSupport.IsPerformanceMeasureFactsGradeLevelIncluded;
                source.PerformanceMeasureFactsGradeLevels.MapCollectionTo(target.PerformanceMeasureFactsGradeLevels, target);
            }
            else
            {
                targetSynchSupport.IsPerformanceMeasureFactsGradeLevelsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPerformanceMeasureFactsSynchronizationSourceSupport 
    {
        bool IsAcademicSubjectDescriptorSupported { get; set; }
        bool IsPerformanceMeasureFactsGradeLevelsSupported { get; set; }
        bool IsPerformanceMeasureTypeDescriptorSupported { get; set; }
        Func<IPerformanceMeasureFactsGradeLevel, bool> IsPerformanceMeasureFactsGradeLevelIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class PerformanceMeasureFactsGradeLevelMapper 
    {
        public static bool SynchronizeTo(this IPerformanceMeasureFactsGradeLevel source, IPerformanceMeasureFactsGradeLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IPerformanceMeasureFactsGradeLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPerformanceMeasureFactsGradeLevel source, IPerformanceMeasureFactsGradeLevel target, Action<IPerformanceMeasureFactsGradeLevel, IPerformanceMeasureFactsGradeLevel> onMapped)
        {
            var sourceSynchSupport = source as IPerformanceMeasureFactsGradeLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IPerformanceMeasureFactsGradeLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPerformanceMeasureFactsGradeLevelSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: PerformanceMeasureInstanceDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.PerformanceMeasureInstanceDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class PerformanceMeasureInstanceDescriptorMapper 
    {
        public static bool SynchronizeTo(this IPerformanceMeasureInstanceDescriptor source, IPerformanceMeasureInstanceDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IPerformanceMeasureInstanceDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.PerformanceMeasureInstanceDescriptorId != target.PerformanceMeasureInstanceDescriptorId)
            {
                source.PerformanceMeasureInstanceDescriptorId = target.PerformanceMeasureInstanceDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPerformanceMeasureInstanceDescriptor source, IPerformanceMeasureInstanceDescriptor target, Action<IPerformanceMeasureInstanceDescriptor, IPerformanceMeasureInstanceDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IPerformanceMeasureInstanceDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IPerformanceMeasureInstanceDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.PerformanceMeasureInstanceDescriptorId = source.PerformanceMeasureInstanceDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPerformanceMeasureInstanceDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: PerformanceMeasureTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.PerformanceMeasureTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class PerformanceMeasureTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IPerformanceMeasureTypeDescriptor source, IPerformanceMeasureTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IPerformanceMeasureTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.PerformanceMeasureTypeDescriptorId != target.PerformanceMeasureTypeDescriptorId)
            {
                source.PerformanceMeasureTypeDescriptorId = target.PerformanceMeasureTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPerformanceMeasureTypeDescriptor source, IPerformanceMeasureTypeDescriptor target, Action<IPerformanceMeasureTypeDescriptor, IPerformanceMeasureTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IPerformanceMeasureTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IPerformanceMeasureTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.PerformanceMeasureTypeDescriptorId = source.PerformanceMeasureTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPerformanceMeasureTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: PostSecondaryInstitution

namespace EdFi.Ods.Entities.Common.TPDM //.PostSecondaryInstitutionAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class PostSecondaryInstitutionExtensionMapper 
    {
        public static bool SynchronizeTo(this IPostSecondaryInstitutionExtension source, IPostSecondaryInstitutionExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as IPostSecondaryInstitutionExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.PostSecondaryInstitution as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsFederalLocaleCodeDescriptorSupported)
                && target.FederalLocaleCodeDescriptor != source.FederalLocaleCodeDescriptor)
            {
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPostSecondaryInstitutionExtension source, IPostSecondaryInstitutionExtension target, Action<IPostSecondaryInstitutionExtension, IPostSecondaryInstitutionExtension> onMapped)
        {
            var sourceSynchSupport = source as IPostSecondaryInstitutionExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as IPostSecondaryInstitutionExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsFederalLocaleCodeDescriptorSupported)
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
            else
                targetSynchSupport.IsFederalLocaleCodeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPostSecondaryInstitutionExtensionSynchronizationSourceSupport 
    {
        bool IsFederalLocaleCodeDescriptorSupported { get; set; }
    }
 
}
// Aggregate: PreviousCareerDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.PreviousCareerDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class PreviousCareerDescriptorMapper 
    {
        public static bool SynchronizeTo(this IPreviousCareerDescriptor source, IPreviousCareerDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IPreviousCareerDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.PreviousCareerDescriptorId != target.PreviousCareerDescriptorId)
            {
                source.PreviousCareerDescriptorId = target.PreviousCareerDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPreviousCareerDescriptor source, IPreviousCareerDescriptor target, Action<IPreviousCareerDescriptor, IPreviousCareerDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IPreviousCareerDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IPreviousCareerDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.PreviousCareerDescriptorId = source.PreviousCareerDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPreviousCareerDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: ProfessionalDevelopmentEvent

namespace EdFi.Ods.Entities.Common.TPDM //.ProfessionalDevelopmentEventAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ProfessionalDevelopmentEventMapper 
    {
        public static bool SynchronizeTo(this IProfessionalDevelopmentEvent source, IProfessionalDevelopmentEvent target)
        {
            bool isModified = false;

            var sourceSupport = source as IProfessionalDevelopmentEventSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ProfessionalDevelopmentTitle != target.ProfessionalDevelopmentTitle)
            {
                source.ProfessionalDevelopmentTitle = target.ProfessionalDevelopmentTitle;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsMultipleSessionSupported)
                && target.MultipleSession != source.MultipleSession)
            {
                target.MultipleSession = source.MultipleSession;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProfessionalDevelopmentOfferedByDescriptorSupported)
                && target.ProfessionalDevelopmentOfferedByDescriptor != source.ProfessionalDevelopmentOfferedByDescriptor)
            {
                target.ProfessionalDevelopmentOfferedByDescriptor = source.ProfessionalDevelopmentOfferedByDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProfessionalDevelopmentReasonSupported)
                && target.ProfessionalDevelopmentReason != source.ProfessionalDevelopmentReason)
            {
                target.ProfessionalDevelopmentReason = source.ProfessionalDevelopmentReason;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRequiredSupported)
                && target.Required != source.Required)
            {
                target.Required = source.Required;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTotalHoursSupported)
                && target.TotalHours != source.TotalHours)
            {
                target.TotalHours = source.TotalHours;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProfessionalDevelopmentEvent source, IProfessionalDevelopmentEvent target, Action<IProfessionalDevelopmentEvent, IProfessionalDevelopmentEvent> onMapped)
        {
            var sourceSynchSupport = source as IProfessionalDevelopmentEventSynchronizationSourceSupport;
            var targetSynchSupport = target as IProfessionalDevelopmentEventSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ProfessionalDevelopmentTitle = source.ProfessionalDevelopmentTitle;

            // Copy non-PK properties

            if (sourceSynchSupport.IsMultipleSessionSupported)
                target.MultipleSession = source.MultipleSession;
            else
                targetSynchSupport.IsMultipleSessionSupported = false;

            if (sourceSynchSupport.IsProfessionalDevelopmentOfferedByDescriptorSupported)
                target.ProfessionalDevelopmentOfferedByDescriptor = source.ProfessionalDevelopmentOfferedByDescriptor;
            else
                targetSynchSupport.IsProfessionalDevelopmentOfferedByDescriptorSupported = false;

            if (sourceSynchSupport.IsProfessionalDevelopmentReasonSupported)
                target.ProfessionalDevelopmentReason = source.ProfessionalDevelopmentReason;
            else
                targetSynchSupport.IsProfessionalDevelopmentReasonSupported = false;

            if (sourceSynchSupport.IsRequiredSupported)
                target.Required = source.Required;
            else
                targetSynchSupport.IsRequiredSupported = false;

            if (sourceSynchSupport.IsTotalHoursSupported)
                target.TotalHours = source.TotalHours;
            else
                targetSynchSupport.IsTotalHoursSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProfessionalDevelopmentEventSynchronizationSourceSupport 
    {
        bool IsMultipleSessionSupported { get; set; }
        bool IsProfessionalDevelopmentOfferedByDescriptorSupported { get; set; }
        bool IsProfessionalDevelopmentReasonSupported { get; set; }
        bool IsRequiredSupported { get; set; }
        bool IsTotalHoursSupported { get; set; }
    }
 
}
// Aggregate: ProfessionalDevelopmentOfferedByDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.ProfessionalDevelopmentOfferedByDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ProfessionalDevelopmentOfferedByDescriptorMapper 
    {
        public static bool SynchronizeTo(this IProfessionalDevelopmentOfferedByDescriptor source, IProfessionalDevelopmentOfferedByDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IProfessionalDevelopmentOfferedByDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ProfessionalDevelopmentOfferedByDescriptorId != target.ProfessionalDevelopmentOfferedByDescriptorId)
            {
                source.ProfessionalDevelopmentOfferedByDescriptorId = target.ProfessionalDevelopmentOfferedByDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProfessionalDevelopmentOfferedByDescriptor source, IProfessionalDevelopmentOfferedByDescriptor target, Action<IProfessionalDevelopmentOfferedByDescriptor, IProfessionalDevelopmentOfferedByDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IProfessionalDevelopmentOfferedByDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IProfessionalDevelopmentOfferedByDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ProfessionalDevelopmentOfferedByDescriptorId = source.ProfessionalDevelopmentOfferedByDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProfessionalDevelopmentOfferedByDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: ProgramGatewayDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.ProgramGatewayDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ProgramGatewayDescriptorMapper 
    {
        public static bool SynchronizeTo(this IProgramGatewayDescriptor source, IProgramGatewayDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IProgramGatewayDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ProgramGatewayDescriptorId != target.ProgramGatewayDescriptorId)
            {
                source.ProgramGatewayDescriptorId = target.ProgramGatewayDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProgramGatewayDescriptor source, IProgramGatewayDescriptor target, Action<IProgramGatewayDescriptor, IProgramGatewayDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IProgramGatewayDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IProgramGatewayDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ProgramGatewayDescriptorId = source.ProgramGatewayDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProgramGatewayDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: Prospect

namespace EdFi.Ods.Entities.Common.TPDM //.ProspectAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ProspectMapper 
    {
        public static bool SynchronizeTo(this IProspect source, IProspect target)
        {
            bool isModified = false;

            var sourceSupport = source as IProspectSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.ProspectIdentifier != target.ProspectIdentifier)
            {
                source.ProspectIdentifier = target.ProspectIdentifier;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAppliedSupported)
                && target.Applied != source.Applied)
            {
                target.Applied = source.Applied;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEconomicDisadvantagedSupported)
                && target.EconomicDisadvantaged != source.EconomicDisadvantaged)
            {
                target.EconomicDisadvantaged = source.EconomicDisadvantaged;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsElectronicMailAddressSupported)
                && target.ElectronicMailAddress != source.ElectronicMailAddress)
            {
                target.ElectronicMailAddress = source.ElectronicMailAddress;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFirstGenerationStudentSupported)
                && target.FirstGenerationStudent != source.FirstGenerationStudent)
            {
                target.FirstGenerationStudent = source.FirstGenerationStudent;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFirstNameSupported)
                && target.FirstName != source.FirstName)
            {
                target.FirstName = source.FirstName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGenderDescriptorSupported)
                && target.GenderDescriptor != source.GenderDescriptor)
            {
                target.GenderDescriptor = source.GenderDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGenerationCodeSuffixSupported)
                && target.GenerationCodeSuffix != source.GenerationCodeSuffix)
            {
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHispanicLatinoEthnicitySupported)
                && target.HispanicLatinoEthnicity != source.HispanicLatinoEthnicity)
            {
                target.HispanicLatinoEthnicity = source.HispanicLatinoEthnicity;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLastSurnameSupported)
                && target.LastSurname != source.LastSurname)
            {
                target.LastSurname = source.LastSurname;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaidenNameSupported)
                && target.MaidenName != source.MaidenName)
            {
                target.MaidenName = source.MaidenName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMetSupported)
                && target.Met != source.Met)
            {
                target.Met = source.Met;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMiddleNameSupported)
                && target.MiddleName != source.MiddleName)
            {
                target.MiddleName = source.MiddleName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNotesSupported)
                && target.Notes != source.Notes)
            {
                target.Notes = source.Notes;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPersonalTitlePrefixSupported)
                && target.PersonalTitlePrefix != source.PersonalTitlePrefix)
            {
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPreScreeningRatingSupported)
                && target.PreScreeningRating != source.PreScreeningRating)
            {
                target.PreScreeningRating = source.PreScreeningRating;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProspectTypeDescriptorSupported)
                && target.ProspectTypeDescriptor != source.ProspectTypeDescriptor)
            {
                target.ProspectTypeDescriptor = source.ProspectTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsReferralSupported)
                && target.Referral != source.Referral)
            {
                target.Referral = source.Referral;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsReferredBySupported)
                && target.ReferredBy != source.ReferredBy)
            {
                target.ReferredBy = source.ReferredBy;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSexDescriptorSupported)
                && target.SexDescriptor != source.SexDescriptor)
            {
                target.SexDescriptor = source.SexDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSocialMediaNetworkNameSupported)
                && target.SocialMediaNetworkName != source.SocialMediaNetworkName)
            {
                target.SocialMediaNetworkName = source.SocialMediaNetworkName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSocialMediaUserNameSupported)
                && target.SocialMediaUserName != source.SocialMediaUserName)
            {
                target.SocialMediaUserName = source.SocialMediaUserName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTeacherCandidateIdentifierSupported)
                && target.TeacherCandidateIdentifier != source.TeacherCandidateIdentifier)
            {
                target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // ProspectAid
            if (sourceSupport == null || sourceSupport.IsProspectAidSupported)
            {
                if (source.ProspectAid == null)
                {
                    if (target.ProspectAid != null)
                    {
                        target.ProspectAid = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.ProspectAid == null)
                    {
                        var itemType = target.GetType().GetProperty("ProspectAid").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.ProspectAid = (IProspectAid) newItem;
                    }

                    isModified |= source.ProspectAid.Synchronize(target.ProspectAid);
                }
            }
            // ProspectCurrentPosition
            if (sourceSupport == null || sourceSupport.IsProspectCurrentPositionSupported)
            {
                if (source.ProspectCurrentPosition == null)
                {
                    if (target.ProspectCurrentPosition != null)
                    {
                        target.ProspectCurrentPosition = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.ProspectCurrentPosition == null)
                    {
                        var itemType = target.GetType().GetProperty("ProspectCurrentPosition").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.ProspectCurrentPosition = (IProspectCurrentPosition) newItem;
                    }

                    isModified |= source.ProspectCurrentPosition.Synchronize(target.ProspectCurrentPosition);
                }
            }
            // ProspectQualifications
            if (sourceSupport == null || sourceSupport.IsProspectQualificationsSupported)
            {
                if (source.ProspectQualifications == null)
                {
                    if (target.ProspectQualifications != null)
                    {
                        target.ProspectQualifications = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.ProspectQualifications == null)
                    {
                        var itemType = target.GetType().GetProperty("ProspectQualifications").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.ProspectQualifications = (IProspectQualifications) newItem;
                    }

                    isModified |= source.ProspectQualifications.Synchronize(target.ProspectQualifications);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsProspectCredentialsSupported)
            {
                isModified |= 
                    source.ProspectCredentials.SynchronizeCollectionTo(
                        target.ProspectCredentials, 
                        onChildAdded: child => 
                            {
                                child.Prospect = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsProspectCredentialIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsProspectDisabilitiesSupported)
            {
                isModified |= 
                    source.ProspectDisabilities.SynchronizeCollectionTo(
                        target.ProspectDisabilities, 
                        onChildAdded: child => 
                            {
                                child.Prospect = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsProspectDisabilityIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsProspectPersonalIdentificationDocumentsSupported)
            {
                isModified |= 
                    source.ProspectPersonalIdentificationDocuments.SynchronizeCollectionTo(
                        target.ProspectPersonalIdentificationDocuments, 
                        onChildAdded: child => 
                            {
                                child.Prospect = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsProspectPersonalIdentificationDocumentIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsProspectRacesSupported)
            {
                isModified |= 
                    source.ProspectRaces.SynchronizeCollectionTo(
                        target.ProspectRaces, 
                        onChildAdded: child => 
                            {
                                child.Prospect = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsProspectRaceIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsProspectRecruitmentEventsSupported)
            {
                isModified |= 
                    source.ProspectRecruitmentEvents.SynchronizeCollectionTo(
                        target.ProspectRecruitmentEvents, 
                        onChildAdded: child => 
                            {
                                child.Prospect = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsProspectRecruitmentEventIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsProspectTelephonesSupported)
            {
                isModified |= 
                    source.ProspectTelephones.SynchronizeCollectionTo(
                        target.ProspectTelephones, 
                        onChildAdded: child => 
                            {
                                child.Prospect = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsProspectTelephoneIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsProspectTouchpointsSupported)
            {
                isModified |= 
                    source.ProspectTouchpoints.SynchronizeCollectionTo(
                        target.ProspectTouchpoints, 
                        onChildAdded: child => 
                            {
                                child.Prospect = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsProspectTouchpointIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IProspect source, IProspect target, Action<IProspect, IProspect> onMapped)
        {
            var sourceSynchSupport = source as IProspectSynchronizationSourceSupport;
            var targetSynchSupport = target as IProspectSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProspectIdentifier = source.ProspectIdentifier;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAppliedSupported)
                target.Applied = source.Applied;
            else
                targetSynchSupport.IsAppliedSupported = false;

            if (sourceSynchSupport.IsEconomicDisadvantagedSupported)
                target.EconomicDisadvantaged = source.EconomicDisadvantaged;
            else
                targetSynchSupport.IsEconomicDisadvantagedSupported = false;

            if (sourceSynchSupport.IsElectronicMailAddressSupported)
                target.ElectronicMailAddress = source.ElectronicMailAddress;
            else
                targetSynchSupport.IsElectronicMailAddressSupported = false;

            if (sourceSynchSupport.IsFirstGenerationStudentSupported)
                target.FirstGenerationStudent = source.FirstGenerationStudent;
            else
                targetSynchSupport.IsFirstGenerationStudentSupported = false;

            if (sourceSynchSupport.IsFirstNameSupported)
                target.FirstName = source.FirstName;
            else
                targetSynchSupport.IsFirstNameSupported = false;

            if (sourceSynchSupport.IsGenderDescriptorSupported)
                target.GenderDescriptor = source.GenderDescriptor;
            else
                targetSynchSupport.IsGenderDescriptorSupported = false;

            if (sourceSynchSupport.IsGenerationCodeSuffixSupported)
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
            else
                targetSynchSupport.IsGenerationCodeSuffixSupported = false;

            if (sourceSynchSupport.IsHispanicLatinoEthnicitySupported)
                target.HispanicLatinoEthnicity = source.HispanicLatinoEthnicity;
            else
                targetSynchSupport.IsHispanicLatinoEthnicitySupported = false;

            if (sourceSynchSupport.IsLastSurnameSupported)
                target.LastSurname = source.LastSurname;
            else
                targetSynchSupport.IsLastSurnameSupported = false;

            if (sourceSynchSupport.IsMaidenNameSupported)
                target.MaidenName = source.MaidenName;
            else
                targetSynchSupport.IsMaidenNameSupported = false;

            if (sourceSynchSupport.IsMetSupported)
                target.Met = source.Met;
            else
                targetSynchSupport.IsMetSupported = false;

            if (sourceSynchSupport.IsMiddleNameSupported)
                target.MiddleName = source.MiddleName;
            else
                targetSynchSupport.IsMiddleNameSupported = false;

            if (sourceSynchSupport.IsNotesSupported)
                target.Notes = source.Notes;
            else
                targetSynchSupport.IsNotesSupported = false;

            if (sourceSynchSupport.IsPersonalTitlePrefixSupported)
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
            else
                targetSynchSupport.IsPersonalTitlePrefixSupported = false;

            if (sourceSynchSupport.IsPreScreeningRatingSupported)
                target.PreScreeningRating = source.PreScreeningRating;
            else
                targetSynchSupport.IsPreScreeningRatingSupported = false;

            if (sourceSynchSupport.IsProspectTypeDescriptorSupported)
                target.ProspectTypeDescriptor = source.ProspectTypeDescriptor;
            else
                targetSynchSupport.IsProspectTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsReferralSupported)
                target.Referral = source.Referral;
            else
                targetSynchSupport.IsReferralSupported = false;

            if (sourceSynchSupport.IsReferredBySupported)
                target.ReferredBy = source.ReferredBy;
            else
                targetSynchSupport.IsReferredBySupported = false;

            if (sourceSynchSupport.IsSexDescriptorSupported)
                target.SexDescriptor = source.SexDescriptor;
            else
                targetSynchSupport.IsSexDescriptorSupported = false;

            if (sourceSynchSupport.IsSocialMediaNetworkNameSupported)
                target.SocialMediaNetworkName = source.SocialMediaNetworkName;
            else
                targetSynchSupport.IsSocialMediaNetworkNameSupported = false;

            if (sourceSynchSupport.IsSocialMediaUserNameSupported)
                target.SocialMediaUserName = source.SocialMediaUserName;
            else
                targetSynchSupport.IsSocialMediaUserNameSupported = false;

            if (sourceSynchSupport.IsTeacherCandidateIdentifierSupported)
                target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;
            else
                targetSynchSupport.IsTeacherCandidateIdentifierSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.TeacherCandidateResourceId = source.TeacherCandidateResourceId;
                target.TeacherCandidateDiscriminator = source.TeacherCandidateDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // ProspectAid (Source)
            if (sourceSynchSupport.IsProspectAidSupported)
            {
                var itemProperty = target.GetType().GetProperty("ProspectAid");
                
                if (itemProperty != null)
                {                    
                    if (source.ProspectAid == null)
                    {
                        target.ProspectAid = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetProspectAid = Activator.CreateInstance(itemType);
                        (targetProspectAid as IChildEntity)?.SetParent(target);
                        source.ProspectAid.Map(targetProspectAid);
                        
                        // Update the target reference appropriately
                        target.ProspectAid = (IProspectAid) targetProspectAid;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsProspectAidSupported = false; 
            }
            // ProspectCurrentPosition (Source)
            if (sourceSynchSupport.IsProspectCurrentPositionSupported)
            {
                var itemProperty = target.GetType().GetProperty("ProspectCurrentPosition");
                
                if (itemProperty != null)
                {                    
                    if (source.ProspectCurrentPosition == null)
                    {
                        target.ProspectCurrentPosition = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetProspectCurrentPosition = Activator.CreateInstance(itemType);
                        (targetProspectCurrentPosition as IChildEntity)?.SetParent(target);
                        source.ProspectCurrentPosition.Map(targetProspectCurrentPosition);
                        
                        // Update the target reference appropriately
                        target.ProspectCurrentPosition = (IProspectCurrentPosition) targetProspectCurrentPosition;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsProspectCurrentPositionSupported = false; 
            }
            // ProspectQualifications (Source)
            if (sourceSynchSupport.IsProspectQualificationsSupported)
            {
                var itemProperty = target.GetType().GetProperty("ProspectQualifications");
                
                if (itemProperty != null)
                {                    
                    if (source.ProspectQualifications == null)
                    {
                        target.ProspectQualifications = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetProspectQualifications = Activator.CreateInstance(itemType);
                        (targetProspectQualifications as IChildEntity)?.SetParent(target);
                        source.ProspectQualifications.Map(targetProspectQualifications);
                        
                        // Update the target reference appropriately
                        target.ProspectQualifications = (IProspectQualifications) targetProspectQualifications;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsProspectQualificationsSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists

            if (sourceSynchSupport.IsProspectCredentialsSupported)
            {    
                targetSynchSupport.IsProspectCredentialIncluded = sourceSynchSupport.IsProspectCredentialIncluded;
                source.ProspectCredentials.MapCollectionTo(target.ProspectCredentials, target);
            }
            else
            {
                targetSynchSupport.IsProspectCredentialsSupported = false;
            }

            if (sourceSynchSupport.IsProspectDisabilitiesSupported)
            {    
                targetSynchSupport.IsProspectDisabilityIncluded = sourceSynchSupport.IsProspectDisabilityIncluded;
                source.ProspectDisabilities.MapCollectionTo(target.ProspectDisabilities, target);
            }
            else
            {
                targetSynchSupport.IsProspectDisabilitiesSupported = false;
            }

            if (sourceSynchSupport.IsProspectPersonalIdentificationDocumentsSupported)
            {    
                targetSynchSupport.IsProspectPersonalIdentificationDocumentIncluded = sourceSynchSupport.IsProspectPersonalIdentificationDocumentIncluded;
                source.ProspectPersonalIdentificationDocuments.MapCollectionTo(target.ProspectPersonalIdentificationDocuments, target);
            }
            else
            {
                targetSynchSupport.IsProspectPersonalIdentificationDocumentsSupported = false;
            }

            if (sourceSynchSupport.IsProspectRacesSupported)
            {    
                targetSynchSupport.IsProspectRaceIncluded = sourceSynchSupport.IsProspectRaceIncluded;
                source.ProspectRaces.MapCollectionTo(target.ProspectRaces, target);
            }
            else
            {
                targetSynchSupport.IsProspectRacesSupported = false;
            }

            if (sourceSynchSupport.IsProspectRecruitmentEventsSupported)
            {    
                targetSynchSupport.IsProspectRecruitmentEventIncluded = sourceSynchSupport.IsProspectRecruitmentEventIncluded;
                source.ProspectRecruitmentEvents.MapCollectionTo(target.ProspectRecruitmentEvents, target);
            }
            else
            {
                targetSynchSupport.IsProspectRecruitmentEventsSupported = false;
            }

            if (sourceSynchSupport.IsProspectTelephonesSupported)
            {    
                targetSynchSupport.IsProspectTelephoneIncluded = sourceSynchSupport.IsProspectTelephoneIncluded;
                source.ProspectTelephones.MapCollectionTo(target.ProspectTelephones, target);
            }
            else
            {
                targetSynchSupport.IsProspectTelephonesSupported = false;
            }

            if (sourceSynchSupport.IsProspectTouchpointsSupported)
            {    
                targetSynchSupport.IsProspectTouchpointIncluded = sourceSynchSupport.IsProspectTouchpointIncluded;
                source.ProspectTouchpoints.MapCollectionTo(target.ProspectTouchpoints, target);
            }
            else
            {
                targetSynchSupport.IsProspectTouchpointsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProspectSynchronizationSourceSupport 
    {
        bool IsAppliedSupported { get; set; }
        bool IsEconomicDisadvantagedSupported { get; set; }
        bool IsElectronicMailAddressSupported { get; set; }
        bool IsFirstGenerationStudentSupported { get; set; }
        bool IsFirstNameSupported { get; set; }
        bool IsGenderDescriptorSupported { get; set; }
        bool IsGenerationCodeSuffixSupported { get; set; }
        bool IsHispanicLatinoEthnicitySupported { get; set; }
        bool IsLastSurnameSupported { get; set; }
        bool IsMaidenNameSupported { get; set; }
        bool IsMetSupported { get; set; }
        bool IsMiddleNameSupported { get; set; }
        bool IsNotesSupported { get; set; }
        bool IsPersonalTitlePrefixSupported { get; set; }
        bool IsPreScreeningRatingSupported { get; set; }
        bool IsProspectAidSupported { get; set; }
        bool IsProspectCredentialsSupported { get; set; }
        bool IsProspectCurrentPositionSupported { get; set; }
        bool IsProspectDisabilitiesSupported { get; set; }
        bool IsProspectPersonalIdentificationDocumentsSupported { get; set; }
        bool IsProspectQualificationsSupported { get; set; }
        bool IsProspectRacesSupported { get; set; }
        bool IsProspectRecruitmentEventsSupported { get; set; }
        bool IsProspectTelephonesSupported { get; set; }
        bool IsProspectTouchpointsSupported { get; set; }
        bool IsProspectTypeDescriptorSupported { get; set; }
        bool IsReferralSupported { get; set; }
        bool IsReferredBySupported { get; set; }
        bool IsSexDescriptorSupported { get; set; }
        bool IsSocialMediaNetworkNameSupported { get; set; }
        bool IsSocialMediaUserNameSupported { get; set; }
        bool IsTeacherCandidateIdentifierSupported { get; set; }
        Func<IProspectCredential, bool> IsProspectCredentialIncluded { get; set; }
        Func<IProspectDisability, bool> IsProspectDisabilityIncluded { get; set; }
        Func<IProspectPersonalIdentificationDocument, bool> IsProspectPersonalIdentificationDocumentIncluded { get; set; }
        Func<IProspectRace, bool> IsProspectRaceIncluded { get; set; }
        Func<IProspectRecruitmentEvent, bool> IsProspectRecruitmentEventIncluded { get; set; }
        Func<IProspectTelephone, bool> IsProspectTelephoneIncluded { get; set; }
        Func<IProspectTouchpoint, bool> IsProspectTouchpointIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ProspectAidMapper 
    {
        public static bool SynchronizeTo(this IProspectAid source, IProspectAid target)
        {
            bool isModified = false;

            var sourceSupport = source as IProspectAidSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAidAmountSupported)
                && target.AidAmount != source.AidAmount)
            {
                target.AidAmount = source.AidAmount;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAidConditionDescriptionSupported)
                && target.AidConditionDescription != source.AidConditionDescription)
            {
                target.AidConditionDescription = source.AidConditionDescription;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAidTypeDescriptorSupported)
                && target.AidTypeDescriptor != source.AidTypeDescriptor)
            {
                target.AidTypeDescriptor = source.AidTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPellGrantRecipientSupported)
                && target.PellGrantRecipient != source.PellGrantRecipient)
            {
                target.PellGrantRecipient = source.PellGrantRecipient;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProspectAid source, IProspectAid target, Action<IProspectAid, IProspectAid> onMapped)
        {
            var sourceSynchSupport = source as IProspectAidSynchronizationSourceSupport;
            var targetSynchSupport = target as IProspectAidSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsAidAmountSupported)
                target.AidAmount = source.AidAmount;
            else
                targetSynchSupport.IsAidAmountSupported = false;

            if (sourceSynchSupport.IsAidConditionDescriptionSupported)
                target.AidConditionDescription = source.AidConditionDescription;
            else
                targetSynchSupport.IsAidConditionDescriptionSupported = false;

            if (sourceSynchSupport.IsAidTypeDescriptorSupported)
                target.AidTypeDescriptor = source.AidTypeDescriptor;
            else
                targetSynchSupport.IsAidTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsPellGrantRecipientSupported)
                target.PellGrantRecipient = source.PellGrantRecipient;
            else
                targetSynchSupport.IsPellGrantRecipientSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProspectAidSynchronizationSourceSupport 
    {
        bool IsAidAmountSupported { get; set; }
        bool IsAidConditionDescriptionSupported { get; set; }
        bool IsAidTypeDescriptorSupported { get; set; }
        bool IsBeginDateSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsPellGrantRecipientSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ProspectCredentialMapper 
    {
        public static bool SynchronizeTo(this IProspectCredential source, IProspectCredential target)
        {
            bool isModified = false;

            var sourceSupport = source as IProspectCredentialSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CredentialIdentifier != target.CredentialIdentifier)
            {
                source.CredentialIdentifier = target.CredentialIdentifier;
            }
            if (source.StateOfIssueStateAbbreviationDescriptor != target.StateOfIssueStateAbbreviationDescriptor)
            {
                source.StateOfIssueStateAbbreviationDescriptor = target.StateOfIssueStateAbbreviationDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProspectCredential source, IProspectCredential target, Action<IProspectCredential, IProspectCredential> onMapped)
        {
            var sourceSynchSupport = source as IProspectCredentialSynchronizationSourceSupport;
            var targetSynchSupport = target as IProspectCredentialSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.CredentialIdentifier = source.CredentialIdentifier;
            target.StateOfIssueStateAbbreviationDescriptor = source.StateOfIssueStateAbbreviationDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CredentialResourceId = source.CredentialResourceId;
                target.CredentialDiscriminator = source.CredentialDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProspectCredentialSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class ProspectCurrentPositionMapper 
    {
        public static bool SynchronizeTo(this IProspectCurrentPosition source, IProspectCurrentPosition target)
        {
            bool isModified = false;

            var sourceSupport = source as IProspectCurrentPositionSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAcademicSubjectDescriptorSupported)
                && target.AcademicSubjectDescriptor != source.AcademicSubjectDescriptor)
            {
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLocationSupported)
                && target.Location != source.Location)
            {
                target.Location = source.Location;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNameOfInstitutionSupported)
                && target.NameOfInstitution != source.NameOfInstitution)
            {
                target.NameOfInstitution = source.NameOfInstitution;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPositionTitleSupported)
                && target.PositionTitle != source.PositionTitle)
            {
                target.PositionTitle = source.PositionTitle;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsProspectCurrentPositionGradeLevelsSupported)
            {
                isModified |= 
                    source.ProspectCurrentPositionGradeLevels.SynchronizeCollectionTo(
                        target.ProspectCurrentPositionGradeLevels, 
                        onChildAdded: child => 
                            {
                                child.ProspectCurrentPosition = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsProspectCurrentPositionGradeLevelIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IProspectCurrentPosition source, IProspectCurrentPosition target, Action<IProspectCurrentPosition, IProspectCurrentPosition> onMapped)
        {
            var sourceSynchSupport = source as IProspectCurrentPositionSynchronizationSourceSupport;
            var targetSynchSupport = target as IProspectCurrentPositionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsAcademicSubjectDescriptorSupported)
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
            else
                targetSynchSupport.IsAcademicSubjectDescriptorSupported = false;

            if (sourceSynchSupport.IsLocationSupported)
                target.Location = source.Location;
            else
                targetSynchSupport.IsLocationSupported = false;

            if (sourceSynchSupport.IsNameOfInstitutionSupported)
                target.NameOfInstitution = source.NameOfInstitution;
            else
                targetSynchSupport.IsNameOfInstitutionSupported = false;

            if (sourceSynchSupport.IsPositionTitleSupported)
                target.PositionTitle = source.PositionTitle;
            else
                targetSynchSupport.IsPositionTitleSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsProspectCurrentPositionGradeLevelsSupported)
            {    
                targetSynchSupport.IsProspectCurrentPositionGradeLevelIncluded = sourceSynchSupport.IsProspectCurrentPositionGradeLevelIncluded;
                source.ProspectCurrentPositionGradeLevels.MapCollectionTo(target.ProspectCurrentPositionGradeLevels, target);
            }
            else
            {
                targetSynchSupport.IsProspectCurrentPositionGradeLevelsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProspectCurrentPositionSynchronizationSourceSupport 
    {
        bool IsAcademicSubjectDescriptorSupported { get; set; }
        bool IsLocationSupported { get; set; }
        bool IsNameOfInstitutionSupported { get; set; }
        bool IsPositionTitleSupported { get; set; }
        bool IsProspectCurrentPositionGradeLevelsSupported { get; set; }
        Func<IProspectCurrentPositionGradeLevel, bool> IsProspectCurrentPositionGradeLevelIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ProspectCurrentPositionGradeLevelMapper 
    {
        public static bool SynchronizeTo(this IProspectCurrentPositionGradeLevel source, IProspectCurrentPositionGradeLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IProspectCurrentPositionGradeLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProspectCurrentPositionGradeLevel source, IProspectCurrentPositionGradeLevel target, Action<IProspectCurrentPositionGradeLevel, IProspectCurrentPositionGradeLevel> onMapped)
        {
            var sourceSynchSupport = source as IProspectCurrentPositionGradeLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IProspectCurrentPositionGradeLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProspectCurrentPositionGradeLevelSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class ProspectDisabilityMapper 
    {
        public static bool SynchronizeTo(this IProspectDisability source, IProspectDisability target)
        {
            bool isModified = false;

            var sourceSupport = source as IProspectDisabilitySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisabilityDescriptor != target.DisabilityDescriptor)
            {
                source.DisabilityDescriptor = target.DisabilityDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported)
                && target.DisabilityDeterminationSourceTypeDescriptor != source.DisabilityDeterminationSourceTypeDescriptor)
            {
                target.DisabilityDeterminationSourceTypeDescriptor = source.DisabilityDeterminationSourceTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDisabilityDiagnosisSupported)
                && target.DisabilityDiagnosis != source.DisabilityDiagnosis)
            {
                target.DisabilityDiagnosis = source.DisabilityDiagnosis;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOrderOfDisabilitySupported)
                && target.OrderOfDisability != source.OrderOfDisability)
            {
                target.OrderOfDisability = source.OrderOfDisability;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsProspectDisabilityDesignationsSupported)
            {
                isModified |= 
                    source.ProspectDisabilityDesignations.SynchronizeCollectionTo(
                        target.ProspectDisabilityDesignations, 
                        onChildAdded: child => 
                            {
                                child.ProspectDisability = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsProspectDisabilityDesignationIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IProspectDisability source, IProspectDisability target, Action<IProspectDisability, IProspectDisability> onMapped)
        {
            var sourceSynchSupport = source as IProspectDisabilitySynchronizationSourceSupport;
            var targetSynchSupport = target as IProspectDisabilitySynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DisabilityDescriptor = source.DisabilityDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported)
                target.DisabilityDeterminationSourceTypeDescriptor = source.DisabilityDeterminationSourceTypeDescriptor;
            else
                targetSynchSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsDisabilityDiagnosisSupported)
                target.DisabilityDiagnosis = source.DisabilityDiagnosis;
            else
                targetSynchSupport.IsDisabilityDiagnosisSupported = false;

            if (sourceSynchSupport.IsOrderOfDisabilitySupported)
                target.OrderOfDisability = source.OrderOfDisability;
            else
                targetSynchSupport.IsOrderOfDisabilitySupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsProspectDisabilityDesignationsSupported)
            {    
                targetSynchSupport.IsProspectDisabilityDesignationIncluded = sourceSynchSupport.IsProspectDisabilityDesignationIncluded;
                source.ProspectDisabilityDesignations.MapCollectionTo(target.ProspectDisabilityDesignations, target);
            }
            else
            {
                targetSynchSupport.IsProspectDisabilityDesignationsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProspectDisabilitySynchronizationSourceSupport 
    {
        bool IsDisabilityDeterminationSourceTypeDescriptorSupported { get; set; }
        bool IsDisabilityDiagnosisSupported { get; set; }
        bool IsOrderOfDisabilitySupported { get; set; }
        bool IsProspectDisabilityDesignationsSupported { get; set; }
        Func<IProspectDisabilityDesignation, bool> IsProspectDisabilityDesignationIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ProspectDisabilityDesignationMapper 
    {
        public static bool SynchronizeTo(this IProspectDisabilityDesignation source, IProspectDisabilityDesignation target)
        {
            bool isModified = false;

            var sourceSupport = source as IProspectDisabilityDesignationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisabilityDesignationDescriptor != target.DisabilityDesignationDescriptor)
            {
                source.DisabilityDesignationDescriptor = target.DisabilityDesignationDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProspectDisabilityDesignation source, IProspectDisabilityDesignation target, Action<IProspectDisabilityDesignation, IProspectDisabilityDesignation> onMapped)
        {
            var sourceSynchSupport = source as IProspectDisabilityDesignationSynchronizationSourceSupport;
            var targetSynchSupport = target as IProspectDisabilityDesignationSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DisabilityDesignationDescriptor = source.DisabilityDesignationDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProspectDisabilityDesignationSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class ProspectPersonalIdentificationDocumentMapper 
    {
        public static bool SynchronizeTo(this IProspectPersonalIdentificationDocument source, IProspectPersonalIdentificationDocument target)
        {
            bool isModified = false;

            var sourceSupport = source as IProspectPersonalIdentificationDocumentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.IdentificationDocumentUseDescriptor != target.IdentificationDocumentUseDescriptor)
            {
                source.IdentificationDocumentUseDescriptor = target.IdentificationDocumentUseDescriptor;
            }
            if (source.PersonalInformationVerificationDescriptor != target.PersonalInformationVerificationDescriptor)
            {
                source.PersonalInformationVerificationDescriptor = target.PersonalInformationVerificationDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDocumentExpirationDateSupported)
                && target.DocumentExpirationDate != source.DocumentExpirationDate)
            {
                target.DocumentExpirationDate = source.DocumentExpirationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDocumentTitleSupported)
                && target.DocumentTitle != source.DocumentTitle)
            {
                target.DocumentTitle = source.DocumentTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerCountryDescriptorSupported)
                && target.IssuerCountryDescriptor != source.IssuerCountryDescriptor)
            {
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerDocumentIdentificationCodeSupported)
                && target.IssuerDocumentIdentificationCode != source.IssuerDocumentIdentificationCode)
            {
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerNameSupported)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProspectPersonalIdentificationDocument source, IProspectPersonalIdentificationDocument target, Action<IProspectPersonalIdentificationDocument, IProspectPersonalIdentificationDocument> onMapped)
        {
            var sourceSynchSupport = source as IProspectPersonalIdentificationDocumentSynchronizationSourceSupport;
            var targetSynchSupport = target as IProspectPersonalIdentificationDocumentSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.IdentificationDocumentUseDescriptor = source.IdentificationDocumentUseDescriptor;
            target.PersonalInformationVerificationDescriptor = source.PersonalInformationVerificationDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDocumentExpirationDateSupported)
                target.DocumentExpirationDate = source.DocumentExpirationDate;
            else
                targetSynchSupport.IsDocumentExpirationDateSupported = false;

            if (sourceSynchSupport.IsDocumentTitleSupported)
                target.DocumentTitle = source.DocumentTitle;
            else
                targetSynchSupport.IsDocumentTitleSupported = false;

            if (sourceSynchSupport.IsIssuerCountryDescriptorSupported)
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
            else
                targetSynchSupport.IsIssuerCountryDescriptorSupported = false;

            if (sourceSynchSupport.IsIssuerDocumentIdentificationCodeSupported)
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
            else
                targetSynchSupport.IsIssuerDocumentIdentificationCodeSupported = false;

            if (sourceSynchSupport.IsIssuerNameSupported)
                target.IssuerName = source.IssuerName;
            else
                targetSynchSupport.IsIssuerNameSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProspectPersonalIdentificationDocumentSynchronizationSourceSupport 
    {
        bool IsDocumentExpirationDateSupported { get; set; }
        bool IsDocumentTitleSupported { get; set; }
        bool IsIssuerCountryDescriptorSupported { get; set; }
        bool IsIssuerDocumentIdentificationCodeSupported { get; set; }
        bool IsIssuerNameSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ProspectQualificationsMapper 
    {
        public static bool SynchronizeTo(this IProspectQualifications source, IProspectQualifications target)
        {
            bool isModified = false;

            var sourceSupport = source as IProspectQualificationsSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCapacityToServeSupported)
                && target.CapacityToServe != source.CapacityToServe)
            {
                target.CapacityToServe = source.CapacityToServe;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEligibleSupported)
                && target.Eligible != source.Eligible)
            {
                target.Eligible = source.Eligible;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsYearsOfServiceCurrentPlacementSupported)
                && target.YearsOfServiceCurrentPlacement != source.YearsOfServiceCurrentPlacement)
            {
                target.YearsOfServiceCurrentPlacement = source.YearsOfServiceCurrentPlacement;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsYearsOfServiceTotalSupported)
                && target.YearsOfServiceTotal != source.YearsOfServiceTotal)
            {
                target.YearsOfServiceTotal = source.YearsOfServiceTotal;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProspectQualifications source, IProspectQualifications target, Action<IProspectQualifications, IProspectQualifications> onMapped)
        {
            var sourceSynchSupport = source as IProspectQualificationsSynchronizationSourceSupport;
            var targetSynchSupport = target as IProspectQualificationsSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsCapacityToServeSupported)
                target.CapacityToServe = source.CapacityToServe;
            else
                targetSynchSupport.IsCapacityToServeSupported = false;

            if (sourceSynchSupport.IsEligibleSupported)
                target.Eligible = source.Eligible;
            else
                targetSynchSupport.IsEligibleSupported = false;

            if (sourceSynchSupport.IsYearsOfServiceCurrentPlacementSupported)
                target.YearsOfServiceCurrentPlacement = source.YearsOfServiceCurrentPlacement;
            else
                targetSynchSupport.IsYearsOfServiceCurrentPlacementSupported = false;

            if (sourceSynchSupport.IsYearsOfServiceTotalSupported)
                target.YearsOfServiceTotal = source.YearsOfServiceTotal;
            else
                targetSynchSupport.IsYearsOfServiceTotalSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProspectQualificationsSynchronizationSourceSupport 
    {
        bool IsCapacityToServeSupported { get; set; }
        bool IsEligibleSupported { get; set; }
        bool IsYearsOfServiceCurrentPlacementSupported { get; set; }
        bool IsYearsOfServiceTotalSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ProspectRaceMapper 
    {
        public static bool SynchronizeTo(this IProspectRace source, IProspectRace target)
        {
            bool isModified = false;

            var sourceSupport = source as IProspectRaceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.RaceDescriptor != target.RaceDescriptor)
            {
                source.RaceDescriptor = target.RaceDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProspectRace source, IProspectRace target, Action<IProspectRace, IProspectRace> onMapped)
        {
            var sourceSynchSupport = source as IProspectRaceSynchronizationSourceSupport;
            var targetSynchSupport = target as IProspectRaceSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.RaceDescriptor = source.RaceDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProspectRaceSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class ProspectRecruitmentEventMapper 
    {
        public static bool SynchronizeTo(this IProspectRecruitmentEvent source, IProspectRecruitmentEvent target)
        {
            bool isModified = false;

            var sourceSupport = source as IProspectRecruitmentEventSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EventDate != target.EventDate)
            {
                source.EventDate = target.EventDate;
            }
            if (source.EventTitle != target.EventTitle)
            {
                source.EventTitle = target.EventTitle;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProspectRecruitmentEvent source, IProspectRecruitmentEvent target, Action<IProspectRecruitmentEvent, IProspectRecruitmentEvent> onMapped)
        {
            var sourceSynchSupport = source as IProspectRecruitmentEventSynchronizationSourceSupport;
            var targetSynchSupport = target as IProspectRecruitmentEventSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.EventDate = source.EventDate;
            target.EventTitle = source.EventTitle;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.RecruitmentEventResourceId = source.RecruitmentEventResourceId;
                target.RecruitmentEventDiscriminator = source.RecruitmentEventDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProspectRecruitmentEventSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class ProspectTelephoneMapper 
    {
        public static bool SynchronizeTo(this IProspectTelephone source, IProspectTelephone target)
        {
            bool isModified = false;

            var sourceSupport = source as IProspectTelephoneSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TelephoneNumber != target.TelephoneNumber)
            {
                source.TelephoneNumber = target.TelephoneNumber;
            }
            if (source.TelephoneNumberTypeDescriptor != target.TelephoneNumberTypeDescriptor)
            {
                source.TelephoneNumberTypeDescriptor = target.TelephoneNumberTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDoNotPublishIndicatorSupported)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOrderOfPrioritySupported)
                && target.OrderOfPriority != source.OrderOfPriority)
            {
                target.OrderOfPriority = source.OrderOfPriority;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTextMessageCapabilityIndicatorSupported)
                && target.TextMessageCapabilityIndicator != source.TextMessageCapabilityIndicator)
            {
                target.TextMessageCapabilityIndicator = source.TextMessageCapabilityIndicator;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProspectTelephone source, IProspectTelephone target, Action<IProspectTelephone, IProspectTelephone> onMapped)
        {
            var sourceSynchSupport = source as IProspectTelephoneSynchronizationSourceSupport;
            var targetSynchSupport = target as IProspectTelephoneSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.TelephoneNumber = source.TelephoneNumber;
            target.TelephoneNumberTypeDescriptor = source.TelephoneNumberTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDoNotPublishIndicatorSupported)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
            else
                targetSynchSupport.IsDoNotPublishIndicatorSupported = false;

            if (sourceSynchSupport.IsOrderOfPrioritySupported)
                target.OrderOfPriority = source.OrderOfPriority;
            else
                targetSynchSupport.IsOrderOfPrioritySupported = false;

            if (sourceSynchSupport.IsTextMessageCapabilityIndicatorSupported)
                target.TextMessageCapabilityIndicator = source.TextMessageCapabilityIndicator;
            else
                targetSynchSupport.IsTextMessageCapabilityIndicatorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProspectTelephoneSynchronizationSourceSupport 
    {
        bool IsDoNotPublishIndicatorSupported { get; set; }
        bool IsOrderOfPrioritySupported { get; set; }
        bool IsTextMessageCapabilityIndicatorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ProspectTouchpointMapper 
    {
        public static bool SynchronizeTo(this IProspectTouchpoint source, IProspectTouchpoint target)
        {
            bool isModified = false;

            var sourceSupport = source as IProspectTouchpointSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TouchpointContent != target.TouchpointContent)
            {
                source.TouchpointContent = target.TouchpointContent;
            }
            if (source.TouchpointDate != target.TouchpointDate)
            {
                source.TouchpointDate = target.TouchpointDate;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProspectTouchpoint source, IProspectTouchpoint target, Action<IProspectTouchpoint, IProspectTouchpoint> onMapped)
        {
            var sourceSynchSupport = source as IProspectTouchpointSynchronizationSourceSupport;
            var targetSynchSupport = target as IProspectTouchpointSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.TouchpointContent = source.TouchpointContent;
            target.TouchpointDate = source.TouchpointDate;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProspectTouchpointSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: ProspectProfessionalDevelopmentEventAttendance

namespace EdFi.Ods.Entities.Common.TPDM //.ProspectProfessionalDevelopmentEventAttendanceAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ProspectProfessionalDevelopmentEventAttendanceMapper 
    {
        public static bool SynchronizeTo(this IProspectProfessionalDevelopmentEventAttendance source, IProspectProfessionalDevelopmentEventAttendance target)
        {
            bool isModified = false;

            var sourceSupport = source as IProspectProfessionalDevelopmentEventAttendanceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AttendanceDate != target.AttendanceDate)
            {
                source.AttendanceDate = target.AttendanceDate;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.ProfessionalDevelopmentTitle != target.ProfessionalDevelopmentTitle)
            {
                source.ProfessionalDevelopmentTitle = target.ProfessionalDevelopmentTitle;
            }
            if (source.ProspectIdentifier != target.ProspectIdentifier)
            {
                source.ProspectIdentifier = target.ProspectIdentifier;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAttendanceEventCategoryDescriptorSupported)
                && target.AttendanceEventCategoryDescriptor != source.AttendanceEventCategoryDescriptor)
            {
                target.AttendanceEventCategoryDescriptor = source.AttendanceEventCategoryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAttendanceEventReasonSupported)
                && target.AttendanceEventReason != source.AttendanceEventReason)
            {
                target.AttendanceEventReason = source.AttendanceEventReason;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProspectProfessionalDevelopmentEventAttendance source, IProspectProfessionalDevelopmentEventAttendance target, Action<IProspectProfessionalDevelopmentEventAttendance, IProspectProfessionalDevelopmentEventAttendance> onMapped)
        {
            var sourceSynchSupport = source as IProspectProfessionalDevelopmentEventAttendanceSynchronizationSourceSupport;
            var targetSynchSupport = target as IProspectProfessionalDevelopmentEventAttendanceSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AttendanceDate = source.AttendanceDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProfessionalDevelopmentTitle = source.ProfessionalDevelopmentTitle;
            target.ProspectIdentifier = source.ProspectIdentifier;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAttendanceEventCategoryDescriptorSupported)
                target.AttendanceEventCategoryDescriptor = source.AttendanceEventCategoryDescriptor;
            else
                targetSynchSupport.IsAttendanceEventCategoryDescriptorSupported = false;

            if (sourceSynchSupport.IsAttendanceEventReasonSupported)
                target.AttendanceEventReason = source.AttendanceEventReason;
            else
                targetSynchSupport.IsAttendanceEventReasonSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ProfessionalDevelopmentEventResourceId = source.ProfessionalDevelopmentEventResourceId;
                target.ProfessionalDevelopmentEventDiscriminator = source.ProfessionalDevelopmentEventDiscriminator;
                target.ProspectResourceId = source.ProspectResourceId;
                target.ProspectDiscriminator = source.ProspectDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProspectProfessionalDevelopmentEventAttendanceSynchronizationSourceSupport 
    {
        bool IsAttendanceEventCategoryDescriptorSupported { get; set; }
        bool IsAttendanceEventReasonSupported { get; set; }
    }
 
}
// Aggregate: ProspectTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.ProspectTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ProspectTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IProspectTypeDescriptor source, IProspectTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IProspectTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ProspectTypeDescriptorId != target.ProspectTypeDescriptorId)
            {
                source.ProspectTypeDescriptorId = target.ProspectTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProspectTypeDescriptor source, IProspectTypeDescriptor target, Action<IProspectTypeDescriptor, IProspectTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IProspectTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IProspectTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ProspectTypeDescriptorId = source.ProspectTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProspectTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: RecruitmentEvent

namespace EdFi.Ods.Entities.Common.TPDM //.RecruitmentEventAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class RecruitmentEventMapper 
    {
        public static bool SynchronizeTo(this IRecruitmentEvent source, IRecruitmentEvent target)
        {
            bool isModified = false;

            var sourceSupport = source as IRecruitmentEventSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EventDate != target.EventDate)
            {
                source.EventDate = target.EventDate;
            }
            if (source.EventTitle != target.EventTitle)
            {
                source.EventTitle = target.EventTitle;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEventDescriptionSupported)
                && target.EventDescription != source.EventDescription)
            {
                target.EventDescription = source.EventDescription;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEventLocationSupported)
                && target.EventLocation != source.EventLocation)
            {
                target.EventLocation = source.EventLocation;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRecruitmentEventTypeDescriptorSupported)
                && target.RecruitmentEventTypeDescriptor != source.RecruitmentEventTypeDescriptor)
            {
                target.RecruitmentEventTypeDescriptor = source.RecruitmentEventTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IRecruitmentEvent source, IRecruitmentEvent target, Action<IRecruitmentEvent, IRecruitmentEvent> onMapped)
        {
            var sourceSynchSupport = source as IRecruitmentEventSynchronizationSourceSupport;
            var targetSynchSupport = target as IRecruitmentEventSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EventDate = source.EventDate;
            target.EventTitle = source.EventTitle;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEventDescriptionSupported)
                target.EventDescription = source.EventDescription;
            else
                targetSynchSupport.IsEventDescriptionSupported = false;

            if (sourceSynchSupport.IsEventLocationSupported)
                target.EventLocation = source.EventLocation;
            else
                targetSynchSupport.IsEventLocationSupported = false;

            if (sourceSynchSupport.IsRecruitmentEventTypeDescriptorSupported)
                target.RecruitmentEventTypeDescriptor = source.RecruitmentEventTypeDescriptor;
            else
                targetSynchSupport.IsRecruitmentEventTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRecruitmentEventSynchronizationSourceSupport 
    {
        bool IsEventDescriptionSupported { get; set; }
        bool IsEventLocationSupported { get; set; }
        bool IsRecruitmentEventTypeDescriptorSupported { get; set; }
    }
 
}
// Aggregate: RecruitmentEventTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.RecruitmentEventTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class RecruitmentEventTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IRecruitmentEventTypeDescriptor source, IRecruitmentEventTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IRecruitmentEventTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.RecruitmentEventTypeDescriptorId != target.RecruitmentEventTypeDescriptorId)
            {
                source.RecruitmentEventTypeDescriptorId = target.RecruitmentEventTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IRecruitmentEventTypeDescriptor source, IRecruitmentEventTypeDescriptor target, Action<IRecruitmentEventTypeDescriptor, IRecruitmentEventTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IRecruitmentEventTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IRecruitmentEventTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.RecruitmentEventTypeDescriptorId = source.RecruitmentEventTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRecruitmentEventTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: Rubric

namespace EdFi.Ods.Entities.Common.TPDM //.RubricAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class RubricMapper 
    {
        public static bool SynchronizeTo(this IRubric source, IRubric target)
        {
            bool isModified = false;

            var sourceSupport = source as IRubricSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.RubricTitle != target.RubricTitle)
            {
                source.RubricTitle = target.RubricTitle;
            }
            if (source.RubricTypeDescriptor != target.RubricTypeDescriptor)
            {
                source.RubricTypeDescriptor = target.RubricTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsInterRaterReliabilityScoreSupported)
                && target.InterRaterReliabilityScore != source.InterRaterReliabilityScore)
            {
                target.InterRaterReliabilityScore = source.InterRaterReliabilityScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRubricDescriptionSupported)
                && target.RubricDescription != source.RubricDescription)
            {
                target.RubricDescription = source.RubricDescription;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IRubric source, IRubric target, Action<IRubric, IRubric> onMapped)
        {
            var sourceSynchSupport = source as IRubricSynchronizationSourceSupport;
            var targetSynchSupport = target as IRubricSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.RubricTitle = source.RubricTitle;
            target.RubricTypeDescriptor = source.RubricTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsInterRaterReliabilityScoreSupported)
                target.InterRaterReliabilityScore = source.InterRaterReliabilityScore;
            else
                targetSynchSupport.IsInterRaterReliabilityScoreSupported = false;

            if (sourceSynchSupport.IsRubricDescriptionSupported)
                target.RubricDescription = source.RubricDescription;
            else
                targetSynchSupport.IsRubricDescriptionSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRubricSynchronizationSourceSupport 
    {
        bool IsInterRaterReliabilityScoreSupported { get; set; }
        bool IsRubricDescriptionSupported { get; set; }
    }
 
}
// Aggregate: RubricLevel

namespace EdFi.Ods.Entities.Common.TPDM //.RubricLevelAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class RubricLevelMapper 
    {
        public static bool SynchronizeTo(this IRubricLevel source, IRubricLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IRubricLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.RubricLevelCode != target.RubricLevelCode)
            {
                source.RubricLevelCode = target.RubricLevelCode;
            }
            if (source.RubricTitle != target.RubricTitle)
            {
                source.RubricTitle = target.RubricTitle;
            }
            if (source.RubricTypeDescriptor != target.RubricTypeDescriptor)
            {
                source.RubricTypeDescriptor = target.RubricTypeDescriptor;
            }

            // Copy non-PK properties

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // RubricLevelInformation
            if (sourceSupport == null || sourceSupport.IsRubricLevelInformationSupported)
            {
                if (source.RubricLevelInformation == null)
                {
                    if (target.RubricLevelInformation != null)
                    {
                        target.RubricLevelInformation = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.RubricLevelInformation == null)
                    {
                        var itemType = target.GetType().GetProperty("RubricLevelInformation").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.RubricLevelInformation = (IRubricLevelInformation) newItem;
                    }

                    isModified |= source.RubricLevelInformation.Synchronize(target.RubricLevelInformation);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsRubricLevelThemesSupported)
            {
                isModified |= 
                    source.RubricLevelThemes.SynchronizeCollectionTo(
                        target.RubricLevelThemes, 
                        onChildAdded: child => 
                            {
                                child.RubricLevel = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsRubricLevelThemeIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IRubricLevel source, IRubricLevel target, Action<IRubricLevel, IRubricLevel> onMapped)
        {
            var sourceSynchSupport = source as IRubricLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IRubricLevelSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.RubricLevelCode = source.RubricLevelCode;
            target.RubricTitle = source.RubricTitle;
            target.RubricTypeDescriptor = source.RubricTypeDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.RubricResourceId = source.RubricResourceId;
                target.RubricDiscriminator = source.RubricDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // RubricLevelInformation (Source)
            if (sourceSynchSupport.IsRubricLevelInformationSupported)
            {
                var itemProperty = target.GetType().GetProperty("RubricLevelInformation");
                
                if (itemProperty != null)
                {                    
                    if (source.RubricLevelInformation == null)
                    {
                        target.RubricLevelInformation = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetRubricLevelInformation = Activator.CreateInstance(itemType);
                        (targetRubricLevelInformation as IChildEntity)?.SetParent(target);
                        source.RubricLevelInformation.Map(targetRubricLevelInformation);
                        
                        // Update the target reference appropriately
                        target.RubricLevelInformation = (IRubricLevelInformation) targetRubricLevelInformation;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsRubricLevelInformationSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists

            if (sourceSynchSupport.IsRubricLevelThemesSupported)
            {    
                targetSynchSupport.IsRubricLevelThemeIncluded = sourceSynchSupport.IsRubricLevelThemeIncluded;
                source.RubricLevelThemes.MapCollectionTo(target.RubricLevelThemes, target);
            }
            else
            {
                targetSynchSupport.IsRubricLevelThemesSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRubricLevelSynchronizationSourceSupport 
    {
        bool IsRubricLevelInformationSupported { get; set; }
        bool IsRubricLevelThemesSupported { get; set; }
        Func<IRubricLevelTheme, bool> IsRubricLevelThemeIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class RubricLevelInformationMapper 
    {
        public static bool SynchronizeTo(this IRubricLevelInformation source, IRubricLevelInformation target)
        {
            bool isModified = false;

            var sourceSupport = source as IRubricLevelInformationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsLevelDescriptionSupported)
                && target.LevelDescription != source.LevelDescription)
            {
                target.LevelDescription = source.LevelDescription;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLevelTitleSupported)
                && target.LevelTitle != source.LevelTitle)
            {
                target.LevelTitle = source.LevelTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLevelTypeDescriptorSupported)
                && target.LevelTypeDescriptor != source.LevelTypeDescriptor)
            {
                target.LevelTypeDescriptor = source.LevelTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaximumScoreSupported)
                && target.MaximumScore != source.MaximumScore)
            {
                target.MaximumScore = source.MaximumScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinimumScoreSupported)
                && target.MinimumScore != source.MinimumScore)
            {
                target.MinimumScore = source.MinimumScore;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IRubricLevelInformation source, IRubricLevelInformation target, Action<IRubricLevelInformation, IRubricLevelInformation> onMapped)
        {
            var sourceSynchSupport = source as IRubricLevelInformationSynchronizationSourceSupport;
            var targetSynchSupport = target as IRubricLevelInformationSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsLevelDescriptionSupported)
                target.LevelDescription = source.LevelDescription;
            else
                targetSynchSupport.IsLevelDescriptionSupported = false;

            if (sourceSynchSupport.IsLevelTitleSupported)
                target.LevelTitle = source.LevelTitle;
            else
                targetSynchSupport.IsLevelTitleSupported = false;

            if (sourceSynchSupport.IsLevelTypeDescriptorSupported)
                target.LevelTypeDescriptor = source.LevelTypeDescriptor;
            else
                targetSynchSupport.IsLevelTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsMaximumScoreSupported)
                target.MaximumScore = source.MaximumScore;
            else
                targetSynchSupport.IsMaximumScoreSupported = false;

            if (sourceSynchSupport.IsMinimumScoreSupported)
                target.MinimumScore = source.MinimumScore;
            else
                targetSynchSupport.IsMinimumScoreSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRubricLevelInformationSynchronizationSourceSupport 
    {
        bool IsLevelDescriptionSupported { get; set; }
        bool IsLevelTitleSupported { get; set; }
        bool IsLevelTypeDescriptorSupported { get; set; }
        bool IsMaximumScoreSupported { get; set; }
        bool IsMinimumScoreSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class RubricLevelThemeMapper 
    {
        public static bool SynchronizeTo(this IRubricLevelTheme source, IRubricLevelTheme target)
        {
            bool isModified = false;

            var sourceSupport = source as IRubricLevelThemeSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ThemeDescriptor != target.ThemeDescriptor)
            {
                source.ThemeDescriptor = target.ThemeDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IRubricLevelTheme source, IRubricLevelTheme target, Action<IRubricLevelTheme, IRubricLevelTheme> onMapped)
        {
            var sourceSynchSupport = source as IRubricLevelThemeSynchronizationSourceSupport;
            var targetSynchSupport = target as IRubricLevelThemeSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.ThemeDescriptor = source.ThemeDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRubricLevelThemeSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: RubricLevelResponse

namespace EdFi.Ods.Entities.Common.TPDM //.RubricLevelResponseAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class RubricLevelResponseMapper 
    {
        public static bool SynchronizeTo(this IRubricLevelResponse source, IRubricLevelResponse target)
        {
            bool isModified = false;

            var sourceSupport = source as IRubricLevelResponseSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.PerformanceMeasureIdentifier != target.PerformanceMeasureIdentifier)
            {
                source.PerformanceMeasureIdentifier = target.PerformanceMeasureIdentifier;
            }
            if (source.RubricLevelCode != target.RubricLevelCode)
            {
                source.RubricLevelCode = target.RubricLevelCode;
            }
            if (source.RubricTitle != target.RubricTitle)
            {
                source.RubricTitle = target.RubricTitle;
            }
            if (source.RubricTypeDescriptor != target.RubricTypeDescriptor)
            {
                source.RubricTypeDescriptor = target.RubricTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAreaOfRefinementSupported)
                && target.AreaOfRefinement != source.AreaOfRefinement)
            {
                target.AreaOfRefinement = source.AreaOfRefinement;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAreaOfReinforcementSupported)
                && target.AreaOfReinforcement != source.AreaOfReinforcement)
            {
                target.AreaOfReinforcement = source.AreaOfReinforcement;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCommentsSupported)
                && target.Comments != source.Comments)
            {
                target.Comments = source.Comments;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNumericResponseSupported)
                && target.NumericResponse != source.NumericResponse)
            {
                target.NumericResponse = source.NumericResponse;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTextResponseSupported)
                && target.TextResponse != source.TextResponse)
            {
                target.TextResponse = source.TextResponse;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IRubricLevelResponse source, IRubricLevelResponse target, Action<IRubricLevelResponse, IRubricLevelResponse> onMapped)
        {
            var sourceSynchSupport = source as IRubricLevelResponseSynchronizationSourceSupport;
            var targetSynchSupport = target as IRubricLevelResponseSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.PerformanceMeasureIdentifier = source.PerformanceMeasureIdentifier;
            target.RubricLevelCode = source.RubricLevelCode;
            target.RubricTitle = source.RubricTitle;
            target.RubricTypeDescriptor = source.RubricTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAreaOfRefinementSupported)
                target.AreaOfRefinement = source.AreaOfRefinement;
            else
                targetSynchSupport.IsAreaOfRefinementSupported = false;

            if (sourceSynchSupport.IsAreaOfReinforcementSupported)
                target.AreaOfReinforcement = source.AreaOfReinforcement;
            else
                targetSynchSupport.IsAreaOfReinforcementSupported = false;

            if (sourceSynchSupport.IsCommentsSupported)
                target.Comments = source.Comments;
            else
                targetSynchSupport.IsCommentsSupported = false;

            if (sourceSynchSupport.IsNumericResponseSupported)
                target.NumericResponse = source.NumericResponse;
            else
                targetSynchSupport.IsNumericResponseSupported = false;

            if (sourceSynchSupport.IsTextResponseSupported)
                target.TextResponse = source.TextResponse;
            else
                targetSynchSupport.IsTextResponseSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.PerformanceMeasureResourceId = source.PerformanceMeasureResourceId;
                target.PerformanceMeasureDiscriminator = source.PerformanceMeasureDiscriminator;
                target.RubricLevelResourceId = source.RubricLevelResourceId;
                target.RubricLevelDiscriminator = source.RubricLevelDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRubricLevelResponseSynchronizationSourceSupport 
    {
        bool IsAreaOfRefinementSupported { get; set; }
        bool IsAreaOfReinforcementSupported { get; set; }
        bool IsCommentsSupported { get; set; }
        bool IsNumericResponseSupported { get; set; }
        bool IsTextResponseSupported { get; set; }
    }
 
}
// Aggregate: RubricLevelResponseFacts

namespace EdFi.Ods.Entities.Common.TPDM //.RubricLevelResponseFactsAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class RubricLevelResponseFactsMapper 
    {
        public static bool SynchronizeTo(this IRubricLevelResponseFacts source, IRubricLevelResponseFacts target)
        {
            bool isModified = false;

            var sourceSupport = source as IRubricLevelResponseFactsSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.FactsAsOfDate != target.FactsAsOfDate)
            {
                source.FactsAsOfDate = target.FactsAsOfDate;
            }
            if (source.RubricLevelCode != target.RubricLevelCode)
            {
                source.RubricLevelCode = target.RubricLevelCode;
            }
            if (source.RubricTitle != target.RubricTitle)
            {
                source.RubricTitle = target.RubricTitle;
            }
            if (source.RubricTypeDescriptor != target.RubricTypeDescriptor)
            {
                source.RubricTypeDescriptor = target.RubricTypeDescriptor;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }

            // Copy non-PK properties

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // RubricLevelResponseFactsAggregatedNumericResponse
            if (sourceSupport == null || sourceSupport.IsRubricLevelResponseFactsAggregatedNumericResponseSupported)
            {
                if (source.RubricLevelResponseFactsAggregatedNumericResponse == null)
                {
                    if (target.RubricLevelResponseFactsAggregatedNumericResponse != null)
                    {
                        target.RubricLevelResponseFactsAggregatedNumericResponse = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.RubricLevelResponseFactsAggregatedNumericResponse == null)
                    {
                        var itemType = target.GetType().GetProperty("RubricLevelResponseFactsAggregatedNumericResponse").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.RubricLevelResponseFactsAggregatedNumericResponse = (IRubricLevelResponseFactsAggregatedNumericResponse) newItem;
                    }

                    isModified |= source.RubricLevelResponseFactsAggregatedNumericResponse.Synchronize(target.RubricLevelResponseFactsAggregatedNumericResponse);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IRubricLevelResponseFacts source, IRubricLevelResponseFacts target, Action<IRubricLevelResponseFacts, IRubricLevelResponseFacts> onMapped)
        {
            var sourceSynchSupport = source as IRubricLevelResponseFactsSynchronizationSourceSupport;
            var targetSynchSupport = target as IRubricLevelResponseFactsSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FactsAsOfDate = source.FactsAsOfDate;
            target.RubricLevelCode = source.RubricLevelCode;
            target.RubricTitle = source.RubricTitle;
            target.RubricTypeDescriptor = source.RubricTypeDescriptor;
            target.SchoolYear = source.SchoolYear;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.PerformanceMeasureFactsResourceId = source.PerformanceMeasureFactsResourceId;
                target.PerformanceMeasureFactsDiscriminator = source.PerformanceMeasureFactsDiscriminator;
                target.RubricLevelResourceId = source.RubricLevelResourceId;
                target.RubricLevelDiscriminator = source.RubricLevelDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // RubricLevelResponseFactsAggregatedNumericResponse (Source)
            if (sourceSynchSupport.IsRubricLevelResponseFactsAggregatedNumericResponseSupported)
            {
                var itemProperty = target.GetType().GetProperty("RubricLevelResponseFactsAggregatedNumericResponse");
                
                if (itemProperty != null)
                {                    
                    if (source.RubricLevelResponseFactsAggregatedNumericResponse == null)
                    {
                        target.RubricLevelResponseFactsAggregatedNumericResponse = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetRubricLevelResponseFactsAggregatedNumericResponse = Activator.CreateInstance(itemType);
                        (targetRubricLevelResponseFactsAggregatedNumericResponse as IChildEntity)?.SetParent(target);
                        source.RubricLevelResponseFactsAggregatedNumericResponse.Map(targetRubricLevelResponseFactsAggregatedNumericResponse);
                        
                        // Update the target reference appropriately
                        target.RubricLevelResponseFactsAggregatedNumericResponse = (IRubricLevelResponseFactsAggregatedNumericResponse) targetRubricLevelResponseFactsAggregatedNumericResponse;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsRubricLevelResponseFactsAggregatedNumericResponseSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRubricLevelResponseFactsSynchronizationSourceSupport 
    {
        bool IsRubricLevelResponseFactsAggregatedNumericResponseSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class RubricLevelResponseFactsAggregatedNumericResponseMapper 
    {
        public static bool SynchronizeTo(this IRubricLevelResponseFactsAggregatedNumericResponse source, IRubricLevelResponseFactsAggregatedNumericResponse target)
        {
            bool isModified = false;

            var sourceSupport = source as IRubricLevelResponseFactsAggregatedNumericResponseSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAverageNumericResponseSupported)
                && target.AverageNumericResponse != source.AverageNumericResponse)
            {
                target.AverageNumericResponse = source.AverageNumericResponse;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNumericResponseNCountSupported)
                && target.NumericResponseNCount != source.NumericResponseNCount)
            {
                target.NumericResponseNCount = source.NumericResponseNCount;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNumericResponseStandardDeviationSupported)
                && target.NumericResponseStandardDeviation != source.NumericResponseStandardDeviation)
            {
                target.NumericResponseStandardDeviation = source.NumericResponseStandardDeviation;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IRubricLevelResponseFactsAggregatedNumericResponse source, IRubricLevelResponseFactsAggregatedNumericResponse target, Action<IRubricLevelResponseFactsAggregatedNumericResponse, IRubricLevelResponseFactsAggregatedNumericResponse> onMapped)
        {
            var sourceSynchSupport = source as IRubricLevelResponseFactsAggregatedNumericResponseSynchronizationSourceSupport;
            var targetSynchSupport = target as IRubricLevelResponseFactsAggregatedNumericResponseSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsAverageNumericResponseSupported)
                target.AverageNumericResponse = source.AverageNumericResponse;
            else
                targetSynchSupport.IsAverageNumericResponseSupported = false;

            if (sourceSynchSupport.IsNumericResponseNCountSupported)
                target.NumericResponseNCount = source.NumericResponseNCount;
            else
                targetSynchSupport.IsNumericResponseNCountSupported = false;

            if (sourceSynchSupport.IsNumericResponseStandardDeviationSupported)
                target.NumericResponseStandardDeviation = source.NumericResponseStandardDeviation;
            else
                targetSynchSupport.IsNumericResponseStandardDeviationSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRubricLevelResponseFactsAggregatedNumericResponseSynchronizationSourceSupport 
    {
        bool IsAverageNumericResponseSupported { get; set; }
        bool IsNumericResponseNCountSupported { get; set; }
        bool IsNumericResponseStandardDeviationSupported { get; set; }
    }
 
}
// Aggregate: RubricTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.RubricTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class RubricTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IRubricTypeDescriptor source, IRubricTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IRubricTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.RubricTypeDescriptorId != target.RubricTypeDescriptorId)
            {
                source.RubricTypeDescriptorId = target.RubricTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IRubricTypeDescriptor source, IRubricTypeDescriptor target, Action<IRubricTypeDescriptor, IRubricTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IRubricTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IRubricTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.RubricTypeDescriptorId = source.RubricTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRubricTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: SalaryTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.SalaryTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SalaryTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this ISalaryTypeDescriptor source, ISalaryTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ISalaryTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SalaryTypeDescriptorId != target.SalaryTypeDescriptorId)
            {
                source.SalaryTypeDescriptorId = target.SalaryTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISalaryTypeDescriptor source, ISalaryTypeDescriptor target, Action<ISalaryTypeDescriptor, ISalaryTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ISalaryTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ISalaryTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SalaryTypeDescriptorId = source.SalaryTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISalaryTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: School

namespace EdFi.Ods.Entities.Common.TPDM //.SchoolAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SchoolExtensionMapper 
    {
        public static bool SynchronizeTo(this ISchoolExtension source, ISchoolExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as ISchoolExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.School as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsFederalLocaleCodeDescriptorSupported)
                && target.FederalLocaleCodeDescriptor != source.FederalLocaleCodeDescriptor)
            {
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsImprovingSchoolSupported)
                && target.ImprovingSchool != source.ImprovingSchool)
            {
                target.ImprovingSchool = source.ImprovingSchool;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolStatusDescriptorSupported)
                && target.SchoolStatusDescriptor != source.SchoolStatusDescriptor)
            {
                target.SchoolStatusDescriptor = source.SchoolStatusDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISchoolExtension source, ISchoolExtension target, Action<ISchoolExtension, ISchoolExtension> onMapped)
        {
            var sourceSynchSupport = source as ISchoolExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as ISchoolExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsFederalLocaleCodeDescriptorSupported)
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
            else
                targetSynchSupport.IsFederalLocaleCodeDescriptorSupported = false;

            if (sourceSynchSupport.IsImprovingSchoolSupported)
                target.ImprovingSchool = source.ImprovingSchool;
            else
                targetSynchSupport.IsImprovingSchoolSupported = false;

            if (sourceSynchSupport.IsSchoolStatusDescriptorSupported)
                target.SchoolStatusDescriptor = source.SchoolStatusDescriptor;
            else
                targetSynchSupport.IsSchoolStatusDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISchoolExtensionSynchronizationSourceSupport 
    {
        bool IsFederalLocaleCodeDescriptorSupported { get; set; }
        bool IsImprovingSchoolSupported { get; set; }
        bool IsSchoolStatusDescriptorSupported { get; set; }
    }
 
}
// Aggregate: SchoolStatusDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.SchoolStatusDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SchoolStatusDescriptorMapper 
    {
        public static bool SynchronizeTo(this ISchoolStatusDescriptor source, ISchoolStatusDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ISchoolStatusDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SchoolStatusDescriptorId != target.SchoolStatusDescriptorId)
            {
                source.SchoolStatusDescriptorId = target.SchoolStatusDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISchoolStatusDescriptor source, ISchoolStatusDescriptor target, Action<ISchoolStatusDescriptor, ISchoolStatusDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ISchoolStatusDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ISchoolStatusDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SchoolStatusDescriptorId = source.SchoolStatusDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISchoolStatusDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: SectionCourseTranscriptFacts

namespace EdFi.Ods.Entities.Common.TPDM //.SectionCourseTranscriptFactsAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SectionCourseTranscriptFactsMapper 
    {
        public static bool SynchronizeTo(this ISectionCourseTranscriptFacts source, ISectionCourseTranscriptFacts target)
        {
            bool isModified = false;

            var sourceSupport = source as ISectionCourseTranscriptFactsSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.FactAsOfDate != target.FactAsOfDate)
            {
                source.FactAsOfDate = target.FactAsOfDate;
            }
            if (source.FactsAsOfDate != target.FactsAsOfDate)
            {
                source.FactsAsOfDate = target.FactsAsOfDate;
            }
            if (source.LocalCourseCode != target.LocalCourseCode)
            {
                source.LocalCourseCode = target.LocalCourseCode;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SectionIdentifier != target.SectionIdentifier)
            {
                source.SectionIdentifier = target.SectionIdentifier;
            }
            if (source.SessionName != target.SessionName)
            {
                source.SessionName = target.SessionName;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCourseTitleSupported)
                && target.CourseTitle != source.CourseTitle)
            {
                target.CourseTitle = source.CourseTitle;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // SectionCourseTranscriptFactsAggregatedNumericGradeEarned
            if (sourceSupport == null || sourceSupport.IsSectionCourseTranscriptFactsAggregatedNumericGradeEarnedSupported)
            {
                if (source.SectionCourseTranscriptFactsAggregatedNumericGradeEarned == null)
                {
                    if (target.SectionCourseTranscriptFactsAggregatedNumericGradeEarned != null)
                    {
                        target.SectionCourseTranscriptFactsAggregatedNumericGradeEarned = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.SectionCourseTranscriptFactsAggregatedNumericGradeEarned == null)
                    {
                        var itemType = target.GetType().GetProperty("SectionCourseTranscriptFactsAggregatedNumericGradeEarned").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.SectionCourseTranscriptFactsAggregatedNumericGradeEarned = (ISectionCourseTranscriptFactsAggregatedNumericGradeEarned) newItem;
                    }

                    isModified |= source.SectionCourseTranscriptFactsAggregatedNumericGradeEarned.Synchronize(target.SectionCourseTranscriptFactsAggregatedNumericGradeEarned);
                }
            }
            // SectionCourseTranscriptFactsStudentsEnrolled
            if (sourceSupport == null || sourceSupport.IsSectionCourseTranscriptFactsStudentsEnrolledSupported)
            {
                if (source.SectionCourseTranscriptFactsStudentsEnrolled == null)
                {
                    if (target.SectionCourseTranscriptFactsStudentsEnrolled != null)
                    {
                        target.SectionCourseTranscriptFactsStudentsEnrolled = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.SectionCourseTranscriptFactsStudentsEnrolled == null)
                    {
                        var itemType = target.GetType().GetProperty("SectionCourseTranscriptFactsStudentsEnrolled").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.SectionCourseTranscriptFactsStudentsEnrolled = (ISectionCourseTranscriptFactsStudentsEnrolled) newItem;
                    }

                    isModified |= source.SectionCourseTranscriptFactsStudentsEnrolled.Synchronize(target.SectionCourseTranscriptFactsStudentsEnrolled);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsSectionCourseTranscriptFactsAggregatedFinalLetterGradeEarnedsSupported)
            {
                isModified |= 
                    source.SectionCourseTranscriptFactsAggregatedFinalLetterGradeEarneds.SynchronizeCollectionTo(
                        target.SectionCourseTranscriptFactsAggregatedFinalLetterGradeEarneds, 
                        onChildAdded: child => 
                            {
                                child.SectionCourseTranscriptFacts = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsSectionCourseTranscriptFactsAggregatedFinalLetterGradeEarnedIncluded);
            }


            return isModified;
        }



        public static void MapTo(this ISectionCourseTranscriptFacts source, ISectionCourseTranscriptFacts target, Action<ISectionCourseTranscriptFacts, ISectionCourseTranscriptFacts> onMapped)
        {
            var sourceSynchSupport = source as ISectionCourseTranscriptFactsSynchronizationSourceSupport;
            var targetSynchSupport = target as ISectionCourseTranscriptFactsSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.FactAsOfDate = source.FactAsOfDate;
            target.FactsAsOfDate = source.FactsAsOfDate;
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCourseTitleSupported)
                target.CourseTitle = source.CourseTitle;
            else
                targetSynchSupport.IsCourseTitleSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SectionStudentAcademicRecordFactsResourceId = source.SectionStudentAcademicRecordFactsResourceId;
                target.SectionStudentAcademicRecordFactsDiscriminator = source.SectionStudentAcademicRecordFactsDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // SectionCourseTranscriptFactsAggregatedNumericGradeEarned (Source)
            if (sourceSynchSupport.IsSectionCourseTranscriptFactsAggregatedNumericGradeEarnedSupported)
            {
                var itemProperty = target.GetType().GetProperty("SectionCourseTranscriptFactsAggregatedNumericGradeEarned");
                
                if (itemProperty != null)
                {                    
                    if (source.SectionCourseTranscriptFactsAggregatedNumericGradeEarned == null)
                    {
                        target.SectionCourseTranscriptFactsAggregatedNumericGradeEarned = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetSectionCourseTranscriptFactsAggregatedNumericGradeEarned = Activator.CreateInstance(itemType);
                        (targetSectionCourseTranscriptFactsAggregatedNumericGradeEarned as IChildEntity)?.SetParent(target);
                        source.SectionCourseTranscriptFactsAggregatedNumericGradeEarned.Map(targetSectionCourseTranscriptFactsAggregatedNumericGradeEarned);
                        
                        // Update the target reference appropriately
                        target.SectionCourseTranscriptFactsAggregatedNumericGradeEarned = (ISectionCourseTranscriptFactsAggregatedNumericGradeEarned) targetSectionCourseTranscriptFactsAggregatedNumericGradeEarned;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsSectionCourseTranscriptFactsAggregatedNumericGradeEarnedSupported = false; 
            }
            // SectionCourseTranscriptFactsStudentsEnrolled (Source)
            if (sourceSynchSupport.IsSectionCourseTranscriptFactsStudentsEnrolledSupported)
            {
                var itemProperty = target.GetType().GetProperty("SectionCourseTranscriptFactsStudentsEnrolled");
                
                if (itemProperty != null)
                {                    
                    if (source.SectionCourseTranscriptFactsStudentsEnrolled == null)
                    {
                        target.SectionCourseTranscriptFactsStudentsEnrolled = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetSectionCourseTranscriptFactsStudentsEnrolled = Activator.CreateInstance(itemType);
                        (targetSectionCourseTranscriptFactsStudentsEnrolled as IChildEntity)?.SetParent(target);
                        source.SectionCourseTranscriptFactsStudentsEnrolled.Map(targetSectionCourseTranscriptFactsStudentsEnrolled);
                        
                        // Update the target reference appropriately
                        target.SectionCourseTranscriptFactsStudentsEnrolled = (ISectionCourseTranscriptFactsStudentsEnrolled) targetSectionCourseTranscriptFactsStudentsEnrolled;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsSectionCourseTranscriptFactsStudentsEnrolledSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists

            if (sourceSynchSupport.IsSectionCourseTranscriptFactsAggregatedFinalLetterGradeEarnedsSupported)
            {    
                targetSynchSupport.IsSectionCourseTranscriptFactsAggregatedFinalLetterGradeEarnedIncluded = sourceSynchSupport.IsSectionCourseTranscriptFactsAggregatedFinalLetterGradeEarnedIncluded;
                source.SectionCourseTranscriptFactsAggregatedFinalLetterGradeEarneds.MapCollectionTo(target.SectionCourseTranscriptFactsAggregatedFinalLetterGradeEarneds, target);
            }
            else
            {
                targetSynchSupport.IsSectionCourseTranscriptFactsAggregatedFinalLetterGradeEarnedsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISectionCourseTranscriptFactsSynchronizationSourceSupport 
    {
        bool IsCourseTitleSupported { get; set; }
        bool IsSectionCourseTranscriptFactsAggregatedFinalLetterGradeEarnedsSupported { get; set; }
        bool IsSectionCourseTranscriptFactsAggregatedNumericGradeEarnedSupported { get; set; }
        bool IsSectionCourseTranscriptFactsStudentsEnrolledSupported { get; set; }
        Func<ISectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned, bool> IsSectionCourseTranscriptFactsAggregatedFinalLetterGradeEarnedIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class SectionCourseTranscriptFactsAggregatedFinalLetterGradeEarnedMapper 
    {
        public static bool SynchronizeTo(this ISectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned source, ISectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned target)
        {
            bool isModified = false;

            var sourceSupport = source as ISectionCourseTranscriptFactsAggregatedFinalLetterGradeEarnedSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.FinalLetterGrade != target.FinalLetterGrade)
            {
                source.FinalLetterGrade = target.FinalLetterGrade;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsLetterGradeTypeNumberSupported)
                && target.LetterGradeTypeNumber != source.LetterGradeTypeNumber)
            {
                target.LetterGradeTypeNumber = source.LetterGradeTypeNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLetterGradeTypePercentageSupported)
                && target.LetterGradeTypePercentage != source.LetterGradeTypePercentage)
            {
                target.LetterGradeTypePercentage = source.LetterGradeTypePercentage;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned source, ISectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned target, Action<ISectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned, ISectionCourseTranscriptFactsAggregatedFinalLetterGradeEarned> onMapped)
        {
            var sourceSynchSupport = source as ISectionCourseTranscriptFactsAggregatedFinalLetterGradeEarnedSynchronizationSourceSupport;
            var targetSynchSupport = target as ISectionCourseTranscriptFactsAggregatedFinalLetterGradeEarnedSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.FinalLetterGrade = source.FinalLetterGrade;

            // Copy non-PK properties

            if (sourceSynchSupport.IsLetterGradeTypeNumberSupported)
                target.LetterGradeTypeNumber = source.LetterGradeTypeNumber;
            else
                targetSynchSupport.IsLetterGradeTypeNumberSupported = false;

            if (sourceSynchSupport.IsLetterGradeTypePercentageSupported)
                target.LetterGradeTypePercentage = source.LetterGradeTypePercentage;
            else
                targetSynchSupport.IsLetterGradeTypePercentageSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISectionCourseTranscriptFactsAggregatedFinalLetterGradeEarnedSynchronizationSourceSupport 
    {
        bool IsLetterGradeTypeNumberSupported { get; set; }
        bool IsLetterGradeTypePercentageSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class SectionCourseTranscriptFactsAggregatedNumericGradeEarnedMapper 
    {
        public static bool SynchronizeTo(this ISectionCourseTranscriptFactsAggregatedNumericGradeEarned source, ISectionCourseTranscriptFactsAggregatedNumericGradeEarned target)
        {
            bool isModified = false;

            var sourceSupport = source as ISectionCourseTranscriptFactsAggregatedNumericGradeEarnedSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAverageFinalNumericGradeEarnedSupported)
                && target.AverageFinalNumericGradeEarned != source.AverageFinalNumericGradeEarned)
            {
                target.AverageFinalNumericGradeEarned = source.AverageFinalNumericGradeEarned;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNumericGradeNCountSupported)
                && target.NumericGradeNCount != source.NumericGradeNCount)
            {
                target.NumericGradeNCount = source.NumericGradeNCount;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNumericGradeStandardDeviationSupported)
                && target.NumericGradeStandardDeviation != source.NumericGradeStandardDeviation)
            {
                target.NumericGradeStandardDeviation = source.NumericGradeStandardDeviation;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISectionCourseTranscriptFactsAggregatedNumericGradeEarned source, ISectionCourseTranscriptFactsAggregatedNumericGradeEarned target, Action<ISectionCourseTranscriptFactsAggregatedNumericGradeEarned, ISectionCourseTranscriptFactsAggregatedNumericGradeEarned> onMapped)
        {
            var sourceSynchSupport = source as ISectionCourseTranscriptFactsAggregatedNumericGradeEarnedSynchronizationSourceSupport;
            var targetSynchSupport = target as ISectionCourseTranscriptFactsAggregatedNumericGradeEarnedSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsAverageFinalNumericGradeEarnedSupported)
                target.AverageFinalNumericGradeEarned = source.AverageFinalNumericGradeEarned;
            else
                targetSynchSupport.IsAverageFinalNumericGradeEarnedSupported = false;

            if (sourceSynchSupport.IsNumericGradeNCountSupported)
                target.NumericGradeNCount = source.NumericGradeNCount;
            else
                targetSynchSupport.IsNumericGradeNCountSupported = false;

            if (sourceSynchSupport.IsNumericGradeStandardDeviationSupported)
                target.NumericGradeStandardDeviation = source.NumericGradeStandardDeviation;
            else
                targetSynchSupport.IsNumericGradeStandardDeviationSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISectionCourseTranscriptFactsAggregatedNumericGradeEarnedSynchronizationSourceSupport 
    {
        bool IsAverageFinalNumericGradeEarnedSupported { get; set; }
        bool IsNumericGradeNCountSupported { get; set; }
        bool IsNumericGradeStandardDeviationSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class SectionCourseTranscriptFactsStudentsEnrolledMapper 
    {
        public static bool SynchronizeTo(this ISectionCourseTranscriptFactsStudentsEnrolled source, ISectionCourseTranscriptFactsStudentsEnrolled target)
        {
            bool isModified = false;

            var sourceSupport = source as ISectionCourseTranscriptFactsStudentsEnrolledSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsNumberStudentsEnrolledSupported)
                && target.NumberStudentsEnrolled != source.NumberStudentsEnrolled)
            {
                target.NumberStudentsEnrolled = source.NumberStudentsEnrolled;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPercentAtRiskSupported)
                && target.PercentAtRisk != source.PercentAtRisk)
            {
                target.PercentAtRisk = source.PercentAtRisk;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPercentMobilitySupported)
                && target.PercentMobility != source.PercentMobility)
            {
                target.PercentMobility = source.PercentMobility;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISectionCourseTranscriptFactsStudentsEnrolled source, ISectionCourseTranscriptFactsStudentsEnrolled target, Action<ISectionCourseTranscriptFactsStudentsEnrolled, ISectionCourseTranscriptFactsStudentsEnrolled> onMapped)
        {
            var sourceSynchSupport = source as ISectionCourseTranscriptFactsStudentsEnrolledSynchronizationSourceSupport;
            var targetSynchSupport = target as ISectionCourseTranscriptFactsStudentsEnrolledSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsNumberStudentsEnrolledSupported)
                target.NumberStudentsEnrolled = source.NumberStudentsEnrolled;
            else
                targetSynchSupport.IsNumberStudentsEnrolledSupported = false;

            if (sourceSynchSupport.IsPercentAtRiskSupported)
                target.PercentAtRisk = source.PercentAtRisk;
            else
                targetSynchSupport.IsPercentAtRiskSupported = false;

            if (sourceSynchSupport.IsPercentMobilitySupported)
                target.PercentMobility = source.PercentMobility;
            else
                targetSynchSupport.IsPercentMobilitySupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISectionCourseTranscriptFactsStudentsEnrolledSynchronizationSourceSupport 
    {
        bool IsNumberStudentsEnrolledSupported { get; set; }
        bool IsPercentAtRiskSupported { get; set; }
        bool IsPercentMobilitySupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
}
// Aggregate: SectionStudentAcademicRecordFacts

namespace EdFi.Ods.Entities.Common.TPDM //.SectionStudentAcademicRecordFactsAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SectionStudentAcademicRecordFactsMapper 
    {
        public static bool SynchronizeTo(this ISectionStudentAcademicRecordFacts source, ISectionStudentAcademicRecordFacts target)
        {
            bool isModified = false;

            var sourceSupport = source as ISectionStudentAcademicRecordFactsSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.FactAsOfDate != target.FactAsOfDate)
            {
                source.FactAsOfDate = target.FactAsOfDate;
            }
            if (source.LocalCourseCode != target.LocalCourseCode)
            {
                source.LocalCourseCode = target.LocalCourseCode;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SectionIdentifier != target.SectionIdentifier)
            {
                source.SectionIdentifier = target.SectionIdentifier;
            }
            if (source.SessionName != target.SessionName)
            {
                source.SessionName = target.SessionName;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAggregatedGPAMaxSupported)
                && target.AggregatedGPAMax != source.AggregatedGPAMax)
            {
                target.AggregatedGPAMax = source.AggregatedGPAMax;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage
            if (sourceSupport == null || sourceSupport.IsSectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageSupported)
            {
                if (source.SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage == null)
                {
                    if (target.SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage != null)
                    {
                        target.SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage == null)
                    {
                        var itemType = target.GetType().GetProperty("SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage = (ISectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage) newItem;
                    }

                    isModified |= source.SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage.Synchronize(target.SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage);
                }
            }
            // SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage
            if (sourceSupport == null || sourceSupport.IsSectionStudentAcademicRecordFactsAggregatedSessionGradePointAverageSupported)
            {
                if (source.SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage == null)
                {
                    if (target.SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage != null)
                    {
                        target.SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage == null)
                    {
                        var itemType = target.GetType().GetProperty("SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage = (ISectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage) newItem;
                    }

                    isModified |= source.SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage.Synchronize(target.SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage);
                }
            }
            // SectionStudentAcademicRecordFactsStudentsEnrolled
            if (sourceSupport == null || sourceSupport.IsSectionStudentAcademicRecordFactsStudentsEnrolledSupported)
            {
                if (source.SectionStudentAcademicRecordFactsStudentsEnrolled == null)
                {
                    if (target.SectionStudentAcademicRecordFactsStudentsEnrolled != null)
                    {
                        target.SectionStudentAcademicRecordFactsStudentsEnrolled = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.SectionStudentAcademicRecordFactsStudentsEnrolled == null)
                    {
                        var itemType = target.GetType().GetProperty("SectionStudentAcademicRecordFactsStudentsEnrolled").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.SectionStudentAcademicRecordFactsStudentsEnrolled = (ISectionStudentAcademicRecordFactsStudentsEnrolled) newItem;
                    }

                    isModified |= source.SectionStudentAcademicRecordFactsStudentsEnrolled.Synchronize(target.SectionStudentAcademicRecordFactsStudentsEnrolled);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISectionStudentAcademicRecordFacts source, ISectionStudentAcademicRecordFacts target, Action<ISectionStudentAcademicRecordFacts, ISectionStudentAcademicRecordFacts> onMapped)
        {
            var sourceSynchSupport = source as ISectionStudentAcademicRecordFactsSynchronizationSourceSupport;
            var targetSynchSupport = target as ISectionStudentAcademicRecordFactsSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.FactAsOfDate = source.FactAsOfDate;
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAggregatedGPAMaxSupported)
                target.AggregatedGPAMax = source.AggregatedGPAMax;
            else
                targetSynchSupport.IsAggregatedGPAMaxSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SectionResourceId = source.SectionResourceId;
                target.SectionDiscriminator = source.SectionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage (Source)
            if (sourceSynchSupport.IsSectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageSupported)
            {
                var itemProperty = target.GetType().GetProperty("SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage");
                
                if (itemProperty != null)
                {                    
                    if (source.SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage == null)
                    {
                        target.SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetSectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage = Activator.CreateInstance(itemType);
                        (targetSectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage as IChildEntity)?.SetParent(target);
                        source.SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage.Map(targetSectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage);
                        
                        // Update the target reference appropriately
                        target.SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage = (ISectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage) targetSectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsSectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageSupported = false; 
            }
            // SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage (Source)
            if (sourceSynchSupport.IsSectionStudentAcademicRecordFactsAggregatedSessionGradePointAverageSupported)
            {
                var itemProperty = target.GetType().GetProperty("SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage");
                
                if (itemProperty != null)
                {                    
                    if (source.SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage == null)
                    {
                        target.SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetSectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage = Activator.CreateInstance(itemType);
                        (targetSectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage as IChildEntity)?.SetParent(target);
                        source.SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage.Map(targetSectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage);
                        
                        // Update the target reference appropriately
                        target.SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage = (ISectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage) targetSectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsSectionStudentAcademicRecordFactsAggregatedSessionGradePointAverageSupported = false; 
            }
            // SectionStudentAcademicRecordFactsStudentsEnrolled (Source)
            if (sourceSynchSupport.IsSectionStudentAcademicRecordFactsStudentsEnrolledSupported)
            {
                var itemProperty = target.GetType().GetProperty("SectionStudentAcademicRecordFactsStudentsEnrolled");
                
                if (itemProperty != null)
                {                    
                    if (source.SectionStudentAcademicRecordFactsStudentsEnrolled == null)
                    {
                        target.SectionStudentAcademicRecordFactsStudentsEnrolled = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetSectionStudentAcademicRecordFactsStudentsEnrolled = Activator.CreateInstance(itemType);
                        (targetSectionStudentAcademicRecordFactsStudentsEnrolled as IChildEntity)?.SetParent(target);
                        source.SectionStudentAcademicRecordFactsStudentsEnrolled.Map(targetSectionStudentAcademicRecordFactsStudentsEnrolled);
                        
                        // Update the target reference appropriately
                        target.SectionStudentAcademicRecordFactsStudentsEnrolled = (ISectionStudentAcademicRecordFactsStudentsEnrolled) targetSectionStudentAcademicRecordFactsStudentsEnrolled;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsSectionStudentAcademicRecordFactsStudentsEnrolledSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISectionStudentAcademicRecordFactsSynchronizationSourceSupport 
    {
        bool IsAggregatedGPAMaxSupported { get; set; }
        bool IsSectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageSupported { get; set; }
        bool IsSectionStudentAcademicRecordFactsAggregatedSessionGradePointAverageSupported { get; set; }
        bool IsSectionStudentAcademicRecordFactsStudentsEnrolledSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class SectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageMapper 
    {
        public static bool SynchronizeTo(this ISectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage source, ISectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage target)
        {
            bool isModified = false;

            var sourceSupport = source as ISectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsGradePointAverageSupported)
                && target.GradePointAverage != source.GradePointAverage)
            {
                target.GradePointAverage = source.GradePointAverage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGradePointNCountSupported)
                && target.GradePointNCount != source.GradePointNCount)
            {
                target.GradePointNCount = source.GradePointNCount;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGradePointStandardDeviationSupported)
                && target.GradePointStandardDeviation != source.GradePointStandardDeviation)
            {
                target.GradePointStandardDeviation = source.GradePointStandardDeviation;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage source, ISectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage target, Action<ISectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage, ISectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverage> onMapped)
        {
            var sourceSynchSupport = source as ISectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageSynchronizationSourceSupport;
            var targetSynchSupport = target as ISectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsGradePointAverageSupported)
                target.GradePointAverage = source.GradePointAverage;
            else
                targetSynchSupport.IsGradePointAverageSupported = false;

            if (sourceSynchSupport.IsGradePointNCountSupported)
                target.GradePointNCount = source.GradePointNCount;
            else
                targetSynchSupport.IsGradePointNCountSupported = false;

            if (sourceSynchSupport.IsGradePointStandardDeviationSupported)
                target.GradePointStandardDeviation = source.GradePointStandardDeviation;
            else
                targetSynchSupport.IsGradePointStandardDeviationSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISectionStudentAcademicRecordFactsAggregatedCumulativeGradePointAverageSynchronizationSourceSupport 
    {
        bool IsGradePointAverageSupported { get; set; }
        bool IsGradePointNCountSupported { get; set; }
        bool IsGradePointStandardDeviationSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class SectionStudentAcademicRecordFactsAggregatedSessionGradePointAverageMapper 
    {
        public static bool SynchronizeTo(this ISectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage source, ISectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage target)
        {
            bool isModified = false;

            var sourceSupport = source as ISectionStudentAcademicRecordFactsAggregatedSessionGradePointAverageSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsGradePointAverageSupported)
                && target.GradePointAverage != source.GradePointAverage)
            {
                target.GradePointAverage = source.GradePointAverage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGradePointNCountSupported)
                && target.GradePointNCount != source.GradePointNCount)
            {
                target.GradePointNCount = source.GradePointNCount;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGradePointStandardDeviationSupported)
                && target.GradePointStandardDeviation != source.GradePointStandardDeviation)
            {
                target.GradePointStandardDeviation = source.GradePointStandardDeviation;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage source, ISectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage target, Action<ISectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage, ISectionStudentAcademicRecordFactsAggregatedSessionGradePointAverage> onMapped)
        {
            var sourceSynchSupport = source as ISectionStudentAcademicRecordFactsAggregatedSessionGradePointAverageSynchronizationSourceSupport;
            var targetSynchSupport = target as ISectionStudentAcademicRecordFactsAggregatedSessionGradePointAverageSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsGradePointAverageSupported)
                target.GradePointAverage = source.GradePointAverage;
            else
                targetSynchSupport.IsGradePointAverageSupported = false;

            if (sourceSynchSupport.IsGradePointNCountSupported)
                target.GradePointNCount = source.GradePointNCount;
            else
                targetSynchSupport.IsGradePointNCountSupported = false;

            if (sourceSynchSupport.IsGradePointStandardDeviationSupported)
                target.GradePointStandardDeviation = source.GradePointStandardDeviation;
            else
                targetSynchSupport.IsGradePointStandardDeviationSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISectionStudentAcademicRecordFactsAggregatedSessionGradePointAverageSynchronizationSourceSupport 
    {
        bool IsGradePointAverageSupported { get; set; }
        bool IsGradePointNCountSupported { get; set; }
        bool IsGradePointStandardDeviationSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class SectionStudentAcademicRecordFactsStudentsEnrolledMapper 
    {
        public static bool SynchronizeTo(this ISectionStudentAcademicRecordFactsStudentsEnrolled source, ISectionStudentAcademicRecordFactsStudentsEnrolled target)
        {
            bool isModified = false;

            var sourceSupport = source as ISectionStudentAcademicRecordFactsStudentsEnrolledSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsNumberStudentsEnrolledSupported)
                && target.NumberStudentsEnrolled != source.NumberStudentsEnrolled)
            {
                target.NumberStudentsEnrolled = source.NumberStudentsEnrolled;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPercentAtRiskSupported)
                && target.PercentAtRisk != source.PercentAtRisk)
            {
                target.PercentAtRisk = source.PercentAtRisk;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPercentMobilitySupported)
                && target.PercentMobility != source.PercentMobility)
            {
                target.PercentMobility = source.PercentMobility;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISectionStudentAcademicRecordFactsStudentsEnrolled source, ISectionStudentAcademicRecordFactsStudentsEnrolled target, Action<ISectionStudentAcademicRecordFactsStudentsEnrolled, ISectionStudentAcademicRecordFactsStudentsEnrolled> onMapped)
        {
            var sourceSynchSupport = source as ISectionStudentAcademicRecordFactsStudentsEnrolledSynchronizationSourceSupport;
            var targetSynchSupport = target as ISectionStudentAcademicRecordFactsStudentsEnrolledSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsNumberStudentsEnrolledSupported)
                target.NumberStudentsEnrolled = source.NumberStudentsEnrolled;
            else
                targetSynchSupport.IsNumberStudentsEnrolledSupported = false;

            if (sourceSynchSupport.IsPercentAtRiskSupported)
                target.PercentAtRisk = source.PercentAtRisk;
            else
                targetSynchSupport.IsPercentAtRiskSupported = false;

            if (sourceSynchSupport.IsPercentMobilitySupported)
                target.PercentMobility = source.PercentMobility;
            else
                targetSynchSupport.IsPercentMobilitySupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISectionStudentAcademicRecordFactsStudentsEnrolledSynchronizationSourceSupport 
    {
        bool IsNumberStudentsEnrolledSupported { get; set; }
        bool IsPercentAtRiskSupported { get; set; }
        bool IsPercentMobilitySupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
}
// Aggregate: SectionStudentAssessmentFacts

namespace EdFi.Ods.Entities.Common.TPDM //.SectionStudentAssessmentFactsAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SectionStudentAssessmentFactsMapper 
    {
        public static bool SynchronizeTo(this ISectionStudentAssessmentFacts source, ISectionStudentAssessmentFacts target)
        {
            bool isModified = false;

            var sourceSupport = source as ISectionStudentAssessmentFactsSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.FactAsOfDate != target.FactAsOfDate)
            {
                source.FactAsOfDate = target.FactAsOfDate;
            }
            if (source.LocalCourseCode != target.LocalCourseCode)
            {
                source.LocalCourseCode = target.LocalCourseCode;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SectionIdentifier != target.SectionIdentifier)
            {
                source.SectionIdentifier = target.SectionIdentifier;
            }
            if (source.SessionName != target.SessionName)
            {
                source.SessionName = target.SessionName;
            }
            if (source.TakenSchoolYear != target.TakenSchoolYear)
            {
                source.TakenSchoolYear = target.TakenSchoolYear;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAcademicSubjectDescriptorSupported)
                && target.AcademicSubjectDescriptor != source.AcademicSubjectDescriptor)
            {
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAdministrationDateSupported)
                && target.AdministrationDate != source.AdministrationDate)
            {
                target.AdministrationDate = source.AdministrationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAssessmentCategoryDescriptorSupported)
                && target.AssessmentCategoryDescriptor != source.AssessmentCategoryDescriptor)
            {
                target.AssessmentCategoryDescriptor = source.AssessmentCategoryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAssessmentTitleSupported)
                && target.AssessmentTitle != source.AssessmentTitle)
            {
                target.AssessmentTitle = source.AssessmentTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGradeLevelDescriptorSupported)
                && target.GradeLevelDescriptor != source.GradeLevelDescriptor)
            {
                target.GradeLevelDescriptor = source.GradeLevelDescriptor;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // SectionStudentAssessmentFactsAggregatedScoreResult
            if (sourceSupport == null || sourceSupport.IsSectionStudentAssessmentFactsAggregatedScoreResultSupported)
            {
                if (source.SectionStudentAssessmentFactsAggregatedScoreResult == null)
                {
                    if (target.SectionStudentAssessmentFactsAggregatedScoreResult != null)
                    {
                        target.SectionStudentAssessmentFactsAggregatedScoreResult = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.SectionStudentAssessmentFactsAggregatedScoreResult == null)
                    {
                        var itemType = target.GetType().GetProperty("SectionStudentAssessmentFactsAggregatedScoreResult").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.SectionStudentAssessmentFactsAggregatedScoreResult = (ISectionStudentAssessmentFactsAggregatedScoreResult) newItem;
                    }

                    isModified |= source.SectionStudentAssessmentFactsAggregatedScoreResult.Synchronize(target.SectionStudentAssessmentFactsAggregatedScoreResult);
                }
            }
            // SectionStudentAssessmentFactsStudentsEnrolled
            if (sourceSupport == null || sourceSupport.IsSectionStudentAssessmentFactsStudentsEnrolledSupported)
            {
                if (source.SectionStudentAssessmentFactsStudentsEnrolled == null)
                {
                    if (target.SectionStudentAssessmentFactsStudentsEnrolled != null)
                    {
                        target.SectionStudentAssessmentFactsStudentsEnrolled = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.SectionStudentAssessmentFactsStudentsEnrolled == null)
                    {
                        var itemType = target.GetType().GetProperty("SectionStudentAssessmentFactsStudentsEnrolled").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.SectionStudentAssessmentFactsStudentsEnrolled = (ISectionStudentAssessmentFactsStudentsEnrolled) newItem;
                    }

                    isModified |= source.SectionStudentAssessmentFactsStudentsEnrolled.Synchronize(target.SectionStudentAssessmentFactsStudentsEnrolled);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsSectionStudentAssessmentFactsAggregatedPerformanceLevelsSupported)
            {
                isModified |= 
                    source.SectionStudentAssessmentFactsAggregatedPerformanceLevels.SynchronizeCollectionTo(
                        target.SectionStudentAssessmentFactsAggregatedPerformanceLevels, 
                        onChildAdded: child => 
                            {
                                child.SectionStudentAssessmentFacts = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsSectionStudentAssessmentFactsAggregatedPerformanceLevelIncluded);
            }


            return isModified;
        }



        public static void MapTo(this ISectionStudentAssessmentFacts source, ISectionStudentAssessmentFacts target, Action<ISectionStudentAssessmentFacts, ISectionStudentAssessmentFacts> onMapped)
        {
            var sourceSynchSupport = source as ISectionStudentAssessmentFactsSynchronizationSourceSupport;
            var targetSynchSupport = target as ISectionStudentAssessmentFactsSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.FactAsOfDate = source.FactAsOfDate;
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;
            target.TakenSchoolYear = source.TakenSchoolYear;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAcademicSubjectDescriptorSupported)
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
            else
                targetSynchSupport.IsAcademicSubjectDescriptorSupported = false;

            if (sourceSynchSupport.IsAdministrationDateSupported)
                target.AdministrationDate = source.AdministrationDate;
            else
                targetSynchSupport.IsAdministrationDateSupported = false;

            if (sourceSynchSupport.IsAssessmentCategoryDescriptorSupported)
                target.AssessmentCategoryDescriptor = source.AssessmentCategoryDescriptor;
            else
                targetSynchSupport.IsAssessmentCategoryDescriptorSupported = false;

            if (sourceSynchSupport.IsAssessmentTitleSupported)
                target.AssessmentTitle = source.AssessmentTitle;
            else
                targetSynchSupport.IsAssessmentTitleSupported = false;

            if (sourceSynchSupport.IsGradeLevelDescriptorSupported)
                target.GradeLevelDescriptor = source.GradeLevelDescriptor;
            else
                targetSynchSupport.IsGradeLevelDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SectionResourceId = source.SectionResourceId;
                target.SectionDiscriminator = source.SectionDiscriminator;
                target.TakenSchoolYearTypeResourceId = source.TakenSchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // SectionStudentAssessmentFactsAggregatedScoreResult (Source)
            if (sourceSynchSupport.IsSectionStudentAssessmentFactsAggregatedScoreResultSupported)
            {
                var itemProperty = target.GetType().GetProperty("SectionStudentAssessmentFactsAggregatedScoreResult");
                
                if (itemProperty != null)
                {                    
                    if (source.SectionStudentAssessmentFactsAggregatedScoreResult == null)
                    {
                        target.SectionStudentAssessmentFactsAggregatedScoreResult = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetSectionStudentAssessmentFactsAggregatedScoreResult = Activator.CreateInstance(itemType);
                        (targetSectionStudentAssessmentFactsAggregatedScoreResult as IChildEntity)?.SetParent(target);
                        source.SectionStudentAssessmentFactsAggregatedScoreResult.Map(targetSectionStudentAssessmentFactsAggregatedScoreResult);
                        
                        // Update the target reference appropriately
                        target.SectionStudentAssessmentFactsAggregatedScoreResult = (ISectionStudentAssessmentFactsAggregatedScoreResult) targetSectionStudentAssessmentFactsAggregatedScoreResult;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsSectionStudentAssessmentFactsAggregatedScoreResultSupported = false; 
            }
            // SectionStudentAssessmentFactsStudentsEnrolled (Source)
            if (sourceSynchSupport.IsSectionStudentAssessmentFactsStudentsEnrolledSupported)
            {
                var itemProperty = target.GetType().GetProperty("SectionStudentAssessmentFactsStudentsEnrolled");
                
                if (itemProperty != null)
                {                    
                    if (source.SectionStudentAssessmentFactsStudentsEnrolled == null)
                    {
                        target.SectionStudentAssessmentFactsStudentsEnrolled = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetSectionStudentAssessmentFactsStudentsEnrolled = Activator.CreateInstance(itemType);
                        (targetSectionStudentAssessmentFactsStudentsEnrolled as IChildEntity)?.SetParent(target);
                        source.SectionStudentAssessmentFactsStudentsEnrolled.Map(targetSectionStudentAssessmentFactsStudentsEnrolled);
                        
                        // Update the target reference appropriately
                        target.SectionStudentAssessmentFactsStudentsEnrolled = (ISectionStudentAssessmentFactsStudentsEnrolled) targetSectionStudentAssessmentFactsStudentsEnrolled;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsSectionStudentAssessmentFactsStudentsEnrolledSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists

            if (sourceSynchSupport.IsSectionStudentAssessmentFactsAggregatedPerformanceLevelsSupported)
            {    
                targetSynchSupport.IsSectionStudentAssessmentFactsAggregatedPerformanceLevelIncluded = sourceSynchSupport.IsSectionStudentAssessmentFactsAggregatedPerformanceLevelIncluded;
                source.SectionStudentAssessmentFactsAggregatedPerformanceLevels.MapCollectionTo(target.SectionStudentAssessmentFactsAggregatedPerformanceLevels, target);
            }
            else
            {
                targetSynchSupport.IsSectionStudentAssessmentFactsAggregatedPerformanceLevelsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISectionStudentAssessmentFactsSynchronizationSourceSupport 
    {
        bool IsAcademicSubjectDescriptorSupported { get; set; }
        bool IsAdministrationDateSupported { get; set; }
        bool IsAssessmentCategoryDescriptorSupported { get; set; }
        bool IsAssessmentTitleSupported { get; set; }
        bool IsGradeLevelDescriptorSupported { get; set; }
        bool IsSectionStudentAssessmentFactsAggregatedPerformanceLevelsSupported { get; set; }
        bool IsSectionStudentAssessmentFactsAggregatedScoreResultSupported { get; set; }
        bool IsSectionStudentAssessmentFactsStudentsEnrolledSupported { get; set; }
        Func<ISectionStudentAssessmentFactsAggregatedPerformanceLevel, bool> IsSectionStudentAssessmentFactsAggregatedPerformanceLevelIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class SectionStudentAssessmentFactsAggregatedPerformanceLevelMapper 
    {
        public static bool SynchronizeTo(this ISectionStudentAssessmentFactsAggregatedPerformanceLevel source, ISectionStudentAssessmentFactsAggregatedPerformanceLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as ISectionStudentAssessmentFactsAggregatedPerformanceLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.PerformanceLevelDescriptor != target.PerformanceLevelDescriptor)
            {
                source.PerformanceLevelDescriptor = target.PerformanceLevelDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsPerformanceLevelMetNumberSupported)
                && target.PerformanceLevelMetNumber != source.PerformanceLevelMetNumber)
            {
                target.PerformanceLevelMetNumber = source.PerformanceLevelMetNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPerformanceLevelMetPercentageSupported)
                && target.PerformanceLevelMetPercentage != source.PerformanceLevelMetPercentage)
            {
                target.PerformanceLevelMetPercentage = source.PerformanceLevelMetPercentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPerformanceLevelTypeNumberSupported)
                && target.PerformanceLevelTypeNumber != source.PerformanceLevelTypeNumber)
            {
                target.PerformanceLevelTypeNumber = source.PerformanceLevelTypeNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPerformanceLevelTypePercentageSupported)
                && target.PerformanceLevelTypePercentage != source.PerformanceLevelTypePercentage)
            {
                target.PerformanceLevelTypePercentage = source.PerformanceLevelTypePercentage;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISectionStudentAssessmentFactsAggregatedPerformanceLevel source, ISectionStudentAssessmentFactsAggregatedPerformanceLevel target, Action<ISectionStudentAssessmentFactsAggregatedPerformanceLevel, ISectionStudentAssessmentFactsAggregatedPerformanceLevel> onMapped)
        {
            var sourceSynchSupport = source as ISectionStudentAssessmentFactsAggregatedPerformanceLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as ISectionStudentAssessmentFactsAggregatedPerformanceLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.PerformanceLevelDescriptor = source.PerformanceLevelDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsPerformanceLevelMetNumberSupported)
                target.PerformanceLevelMetNumber = source.PerformanceLevelMetNumber;
            else
                targetSynchSupport.IsPerformanceLevelMetNumberSupported = false;

            if (sourceSynchSupport.IsPerformanceLevelMetPercentageSupported)
                target.PerformanceLevelMetPercentage = source.PerformanceLevelMetPercentage;
            else
                targetSynchSupport.IsPerformanceLevelMetPercentageSupported = false;

            if (sourceSynchSupport.IsPerformanceLevelTypeNumberSupported)
                target.PerformanceLevelTypeNumber = source.PerformanceLevelTypeNumber;
            else
                targetSynchSupport.IsPerformanceLevelTypeNumberSupported = false;

            if (sourceSynchSupport.IsPerformanceLevelTypePercentageSupported)
                target.PerformanceLevelTypePercentage = source.PerformanceLevelTypePercentage;
            else
                targetSynchSupport.IsPerformanceLevelTypePercentageSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISectionStudentAssessmentFactsAggregatedPerformanceLevelSynchronizationSourceSupport 
    {
        bool IsPerformanceLevelMetNumberSupported { get; set; }
        bool IsPerformanceLevelMetPercentageSupported { get; set; }
        bool IsPerformanceLevelTypeNumberSupported { get; set; }
        bool IsPerformanceLevelTypePercentageSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class SectionStudentAssessmentFactsAggregatedScoreResultMapper 
    {
        public static bool SynchronizeTo(this ISectionStudentAssessmentFactsAggregatedScoreResult source, ISectionStudentAssessmentFactsAggregatedScoreResult target)
        {
            bool isModified = false;

            var sourceSupport = source as ISectionStudentAssessmentFactsAggregatedScoreResultSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAssessmentReportingMethodDescriptorSupported)
                && target.AssessmentReportingMethodDescriptor != source.AssessmentReportingMethodDescriptor)
            {
                target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAverageScoreResultSupported)
                && target.AverageScoreResult != source.AverageScoreResult)
            {
                target.AverageScoreResult = source.AverageScoreResult;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAverageScoreResultDatatypeTypeDescriptorSupported)
                && target.AverageScoreResultDatatypeTypeDescriptor != source.AverageScoreResultDatatypeTypeDescriptor)
            {
                target.AverageScoreResultDatatypeTypeDescriptor = source.AverageScoreResultDatatypeTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsScoreNCountSupported)
                && target.ScoreNCount != source.ScoreNCount)
            {
                target.ScoreNCount = source.ScoreNCount;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsScoreStandardDeviationSupported)
                && target.ScoreStandardDeviation != source.ScoreStandardDeviation)
            {
                target.ScoreStandardDeviation = source.ScoreStandardDeviation;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISectionStudentAssessmentFactsAggregatedScoreResult source, ISectionStudentAssessmentFactsAggregatedScoreResult target, Action<ISectionStudentAssessmentFactsAggregatedScoreResult, ISectionStudentAssessmentFactsAggregatedScoreResult> onMapped)
        {
            var sourceSynchSupport = source as ISectionStudentAssessmentFactsAggregatedScoreResultSynchronizationSourceSupport;
            var targetSynchSupport = target as ISectionStudentAssessmentFactsAggregatedScoreResultSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsAssessmentReportingMethodDescriptorSupported)
                target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;
            else
                targetSynchSupport.IsAssessmentReportingMethodDescriptorSupported = false;

            if (sourceSynchSupport.IsAverageScoreResultSupported)
                target.AverageScoreResult = source.AverageScoreResult;
            else
                targetSynchSupport.IsAverageScoreResultSupported = false;

            if (sourceSynchSupport.IsAverageScoreResultDatatypeTypeDescriptorSupported)
                target.AverageScoreResultDatatypeTypeDescriptor = source.AverageScoreResultDatatypeTypeDescriptor;
            else
                targetSynchSupport.IsAverageScoreResultDatatypeTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsScoreNCountSupported)
                target.ScoreNCount = source.ScoreNCount;
            else
                targetSynchSupport.IsScoreNCountSupported = false;

            if (sourceSynchSupport.IsScoreStandardDeviationSupported)
                target.ScoreStandardDeviation = source.ScoreStandardDeviation;
            else
                targetSynchSupport.IsScoreStandardDeviationSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISectionStudentAssessmentFactsAggregatedScoreResultSynchronizationSourceSupport 
    {
        bool IsAssessmentReportingMethodDescriptorSupported { get; set; }
        bool IsAverageScoreResultSupported { get; set; }
        bool IsAverageScoreResultDatatypeTypeDescriptorSupported { get; set; }
        bool IsScoreNCountSupported { get; set; }
        bool IsScoreStandardDeviationSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class SectionStudentAssessmentFactsStudentsEnrolledMapper 
    {
        public static bool SynchronizeTo(this ISectionStudentAssessmentFactsStudentsEnrolled source, ISectionStudentAssessmentFactsStudentsEnrolled target)
        {
            bool isModified = false;

            var sourceSupport = source as ISectionStudentAssessmentFactsStudentsEnrolledSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsNumberStudentsEnrolledSupported)
                && target.NumberStudentsEnrolled != source.NumberStudentsEnrolled)
            {
                target.NumberStudentsEnrolled = source.NumberStudentsEnrolled;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPercentAtRiskSupported)
                && target.PercentAtRisk != source.PercentAtRisk)
            {
                target.PercentAtRisk = source.PercentAtRisk;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPercentMobilitySupported)
                && target.PercentMobility != source.PercentMobility)
            {
                target.PercentMobility = source.PercentMobility;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISectionStudentAssessmentFactsStudentsEnrolled source, ISectionStudentAssessmentFactsStudentsEnrolled target, Action<ISectionStudentAssessmentFactsStudentsEnrolled, ISectionStudentAssessmentFactsStudentsEnrolled> onMapped)
        {
            var sourceSynchSupport = source as ISectionStudentAssessmentFactsStudentsEnrolledSynchronizationSourceSupport;
            var targetSynchSupport = target as ISectionStudentAssessmentFactsStudentsEnrolledSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsNumberStudentsEnrolledSupported)
                target.NumberStudentsEnrolled = source.NumberStudentsEnrolled;
            else
                targetSynchSupport.IsNumberStudentsEnrolledSupported = false;

            if (sourceSynchSupport.IsPercentAtRiskSupported)
                target.PercentAtRisk = source.PercentAtRisk;
            else
                targetSynchSupport.IsPercentAtRiskSupported = false;

            if (sourceSynchSupport.IsPercentMobilitySupported)
                target.PercentMobility = source.PercentMobility;
            else
                targetSynchSupport.IsPercentMobilitySupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISectionStudentAssessmentFactsStudentsEnrolledSynchronizationSourceSupport 
    {
        bool IsNumberStudentsEnrolledSupported { get; set; }
        bool IsPercentAtRiskSupported { get; set; }
        bool IsPercentMobilitySupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
}
// Aggregate: SectionStudentFacts

namespace EdFi.Ods.Entities.Common.TPDM //.SectionStudentFactsAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SectionStudentFactsMapper 
    {
        public static bool SynchronizeTo(this ISectionStudentFacts source, ISectionStudentFacts target)
        {
            bool isModified = false;

            var sourceSupport = source as ISectionStudentFactsSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.FactAsOfDate != target.FactAsOfDate)
            {
                source.FactAsOfDate = target.FactAsOfDate;
            }
            if (source.LocalCourseCode != target.LocalCourseCode)
            {
                source.LocalCourseCode = target.LocalCourseCode;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SectionIdentifier != target.SectionIdentifier)
            {
                source.SectionIdentifier = target.SectionIdentifier;
            }
            if (source.SessionName != target.SessionName)
            {
                source.SessionName = target.SessionName;
            }

            // Copy non-PK properties

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled
            if (sourceSupport == null || sourceSupport.IsSectionStudentFactsAggregatedDisabilityTotalStudentsDisabledSupported)
            {
                if (source.SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled == null)
                {
                    if (target.SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled != null)
                    {
                        target.SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled == null)
                    {
                        var itemType = target.GetType().GetProperty("SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled = (ISectionStudentFactsAggregatedDisabilityTotalStudentsDisabled) newItem;
                    }

                    isModified |= source.SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled.Synchronize(target.SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled);
                }
            }
            // SectionStudentFactsAggregatedELLEnrollment
            if (sourceSupport == null || sourceSupport.IsSectionStudentFactsAggregatedELLEnrollmentSupported)
            {
                if (source.SectionStudentFactsAggregatedELLEnrollment == null)
                {
                    if (target.SectionStudentFactsAggregatedELLEnrollment != null)
                    {
                        target.SectionStudentFactsAggregatedELLEnrollment = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.SectionStudentFactsAggregatedELLEnrollment == null)
                    {
                        var itemType = target.GetType().GetProperty("SectionStudentFactsAggregatedELLEnrollment").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.SectionStudentFactsAggregatedELLEnrollment = (ISectionStudentFactsAggregatedELLEnrollment) newItem;
                    }

                    isModified |= source.SectionStudentFactsAggregatedELLEnrollment.Synchronize(target.SectionStudentFactsAggregatedELLEnrollment);
                }
            }
            // SectionStudentFactsAggregatedESLEnrollment
            if (sourceSupport == null || sourceSupport.IsSectionStudentFactsAggregatedESLEnrollmentSupported)
            {
                if (source.SectionStudentFactsAggregatedESLEnrollment == null)
                {
                    if (target.SectionStudentFactsAggregatedESLEnrollment != null)
                    {
                        target.SectionStudentFactsAggregatedESLEnrollment = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.SectionStudentFactsAggregatedESLEnrollment == null)
                    {
                        var itemType = target.GetType().GetProperty("SectionStudentFactsAggregatedESLEnrollment").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.SectionStudentFactsAggregatedESLEnrollment = (ISectionStudentFactsAggregatedESLEnrollment) newItem;
                    }

                    isModified |= source.SectionStudentFactsAggregatedESLEnrollment.Synchronize(target.SectionStudentFactsAggregatedESLEnrollment);
                }
            }
            // SectionStudentFactsAggregatedSection504Enrollment
            if (sourceSupport == null || sourceSupport.IsSectionStudentFactsAggregatedSection504EnrollmentSupported)
            {
                if (source.SectionStudentFactsAggregatedSection504Enrollment == null)
                {
                    if (target.SectionStudentFactsAggregatedSection504Enrollment != null)
                    {
                        target.SectionStudentFactsAggregatedSection504Enrollment = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.SectionStudentFactsAggregatedSection504Enrollment == null)
                    {
                        var itemType = target.GetType().GetProperty("SectionStudentFactsAggregatedSection504Enrollment").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.SectionStudentFactsAggregatedSection504Enrollment = (ISectionStudentFactsAggregatedSection504Enrollment) newItem;
                    }

                    isModified |= source.SectionStudentFactsAggregatedSection504Enrollment.Synchronize(target.SectionStudentFactsAggregatedSection504Enrollment);
                }
            }
            // SectionStudentFactsAggregatedSPED
            if (sourceSupport == null || sourceSupport.IsSectionStudentFactsAggregatedSPEDSupported)
            {
                if (source.SectionStudentFactsAggregatedSPED == null)
                {
                    if (target.SectionStudentFactsAggregatedSPED != null)
                    {
                        target.SectionStudentFactsAggregatedSPED = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.SectionStudentFactsAggregatedSPED == null)
                    {
                        var itemType = target.GetType().GetProperty("SectionStudentFactsAggregatedSPED").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.SectionStudentFactsAggregatedSPED = (ISectionStudentFactsAggregatedSPED) newItem;
                    }

                    isModified |= source.SectionStudentFactsAggregatedSPED.Synchronize(target.SectionStudentFactsAggregatedSPED);
                }
            }
            // SectionStudentFactsAggregatedTitleIEnrollment
            if (sourceSupport == null || sourceSupport.IsSectionStudentFactsAggregatedTitleIEnrollmentSupported)
            {
                if (source.SectionStudentFactsAggregatedTitleIEnrollment == null)
                {
                    if (target.SectionStudentFactsAggregatedTitleIEnrollment != null)
                    {
                        target.SectionStudentFactsAggregatedTitleIEnrollment = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.SectionStudentFactsAggregatedTitleIEnrollment == null)
                    {
                        var itemType = target.GetType().GetProperty("SectionStudentFactsAggregatedTitleIEnrollment").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.SectionStudentFactsAggregatedTitleIEnrollment = (ISectionStudentFactsAggregatedTitleIEnrollment) newItem;
                    }

                    isModified |= source.SectionStudentFactsAggregatedTitleIEnrollment.Synchronize(target.SectionStudentFactsAggregatedTitleIEnrollment);
                }
            }
            // SectionStudentFactsStudentsEnrolled
            if (sourceSupport == null || sourceSupport.IsSectionStudentFactsStudentsEnrolledSupported)
            {
                if (source.SectionStudentFactsStudentsEnrolled == null)
                {
                    if (target.SectionStudentFactsStudentsEnrolled != null)
                    {
                        target.SectionStudentFactsStudentsEnrolled = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.SectionStudentFactsStudentsEnrolled == null)
                    {
                        var itemType = target.GetType().GetProperty("SectionStudentFactsStudentsEnrolled").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.SectionStudentFactsStudentsEnrolled = (ISectionStudentFactsStudentsEnrolled) newItem;
                    }

                    isModified |= source.SectionStudentFactsStudentsEnrolled.Synchronize(target.SectionStudentFactsStudentsEnrolled);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsSectionStudentFactsAggregatedByDisabilitiesSupported)
            {
                isModified |= 
                    source.SectionStudentFactsAggregatedByDisabilities.SynchronizeCollectionTo(
                        target.SectionStudentFactsAggregatedByDisabilities, 
                        onChildAdded: child => 
                            {
                                child.SectionStudentFacts = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsSectionStudentFactsAggregatedByDisabilityIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsSectionStudentFactsAggregatedGendersSupported)
            {
                isModified |= 
                    source.SectionStudentFactsAggregatedGenders.SynchronizeCollectionTo(
                        target.SectionStudentFactsAggregatedGenders, 
                        onChildAdded: child => 
                            {
                                child.SectionStudentFacts = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsSectionStudentFactsAggregatedGenderIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsSectionStudentFactsAggregatedHispanicLatinoEthnicitiesSupported)
            {
                isModified |= 
                    source.SectionStudentFactsAggregatedHispanicLatinoEthnicities.SynchronizeCollectionTo(
                        target.SectionStudentFactsAggregatedHispanicLatinoEthnicities, 
                        onChildAdded: child => 
                            {
                                child.SectionStudentFacts = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsSectionStudentFactsAggregatedHispanicLatinoEthnicityIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsSectionStudentFactsAggregatedLanguagesSupported)
            {
                isModified |= 
                    source.SectionStudentFactsAggregatedLanguages.SynchronizeCollectionTo(
                        target.SectionStudentFactsAggregatedLanguages, 
                        onChildAdded: child => 
                            {
                                child.SectionStudentFacts = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsSectionStudentFactsAggregatedLanguageIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsSectionStudentFactsAggregatedRacesSupported)
            {
                isModified |= 
                    source.SectionStudentFactsAggregatedRaces.SynchronizeCollectionTo(
                        target.SectionStudentFactsAggregatedRaces, 
                        onChildAdded: child => 
                            {
                                child.SectionStudentFacts = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsSectionStudentFactsAggregatedRaceIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsSectionStudentFactsAggregatedSchoolFoodServiceProgramServicesSupported)
            {
                isModified |= 
                    source.SectionStudentFactsAggregatedSchoolFoodServiceProgramServices.SynchronizeCollectionTo(
                        target.SectionStudentFactsAggregatedSchoolFoodServiceProgramServices, 
                        onChildAdded: child => 
                            {
                                child.SectionStudentFacts = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsSectionStudentFactsAggregatedSchoolFoodServiceProgramServiceIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsSectionStudentFactsAggregatedSexesSupported)
            {
                isModified |= 
                    source.SectionStudentFactsAggregatedSexes.SynchronizeCollectionTo(
                        target.SectionStudentFactsAggregatedSexes, 
                        onChildAdded: child => 
                            {
                                child.SectionStudentFacts = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsSectionStudentFactsAggregatedSexIncluded);
            }


            return isModified;
        }



        public static void MapTo(this ISectionStudentFacts source, ISectionStudentFacts target, Action<ISectionStudentFacts, ISectionStudentFacts> onMapped)
        {
            var sourceSynchSupport = source as ISectionStudentFactsSynchronizationSourceSupport;
            var targetSynchSupport = target as ISectionStudentFactsSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.FactAsOfDate = source.FactAsOfDate;
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SectionResourceId = source.SectionResourceId;
                target.SectionDiscriminator = source.SectionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled (Source)
            if (sourceSynchSupport.IsSectionStudentFactsAggregatedDisabilityTotalStudentsDisabledSupported)
            {
                var itemProperty = target.GetType().GetProperty("SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled");
                
                if (itemProperty != null)
                {                    
                    if (source.SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled == null)
                    {
                        target.SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetSectionStudentFactsAggregatedDisabilityTotalStudentsDisabled = Activator.CreateInstance(itemType);
                        (targetSectionStudentFactsAggregatedDisabilityTotalStudentsDisabled as IChildEntity)?.SetParent(target);
                        source.SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled.Map(targetSectionStudentFactsAggregatedDisabilityTotalStudentsDisabled);
                        
                        // Update the target reference appropriately
                        target.SectionStudentFactsAggregatedDisabilityTotalStudentsDisabled = (ISectionStudentFactsAggregatedDisabilityTotalStudentsDisabled) targetSectionStudentFactsAggregatedDisabilityTotalStudentsDisabled;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsSectionStudentFactsAggregatedDisabilityTotalStudentsDisabledSupported = false; 
            }
            // SectionStudentFactsAggregatedELLEnrollment (Source)
            if (sourceSynchSupport.IsSectionStudentFactsAggregatedELLEnrollmentSupported)
            {
                var itemProperty = target.GetType().GetProperty("SectionStudentFactsAggregatedELLEnrollment");
                
                if (itemProperty != null)
                {                    
                    if (source.SectionStudentFactsAggregatedELLEnrollment == null)
                    {
                        target.SectionStudentFactsAggregatedELLEnrollment = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetSectionStudentFactsAggregatedELLEnrollment = Activator.CreateInstance(itemType);
                        (targetSectionStudentFactsAggregatedELLEnrollment as IChildEntity)?.SetParent(target);
                        source.SectionStudentFactsAggregatedELLEnrollment.Map(targetSectionStudentFactsAggregatedELLEnrollment);
                        
                        // Update the target reference appropriately
                        target.SectionStudentFactsAggregatedELLEnrollment = (ISectionStudentFactsAggregatedELLEnrollment) targetSectionStudentFactsAggregatedELLEnrollment;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsSectionStudentFactsAggregatedELLEnrollmentSupported = false; 
            }
            // SectionStudentFactsAggregatedESLEnrollment (Source)
            if (sourceSynchSupport.IsSectionStudentFactsAggregatedESLEnrollmentSupported)
            {
                var itemProperty = target.GetType().GetProperty("SectionStudentFactsAggregatedESLEnrollment");
                
                if (itemProperty != null)
                {                    
                    if (source.SectionStudentFactsAggregatedESLEnrollment == null)
                    {
                        target.SectionStudentFactsAggregatedESLEnrollment = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetSectionStudentFactsAggregatedESLEnrollment = Activator.CreateInstance(itemType);
                        (targetSectionStudentFactsAggregatedESLEnrollment as IChildEntity)?.SetParent(target);
                        source.SectionStudentFactsAggregatedESLEnrollment.Map(targetSectionStudentFactsAggregatedESLEnrollment);
                        
                        // Update the target reference appropriately
                        target.SectionStudentFactsAggregatedESLEnrollment = (ISectionStudentFactsAggregatedESLEnrollment) targetSectionStudentFactsAggregatedESLEnrollment;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsSectionStudentFactsAggregatedESLEnrollmentSupported = false; 
            }
            // SectionStudentFactsAggregatedSection504Enrollment (Source)
            if (sourceSynchSupport.IsSectionStudentFactsAggregatedSection504EnrollmentSupported)
            {
                var itemProperty = target.GetType().GetProperty("SectionStudentFactsAggregatedSection504Enrollment");
                
                if (itemProperty != null)
                {                    
                    if (source.SectionStudentFactsAggregatedSection504Enrollment == null)
                    {
                        target.SectionStudentFactsAggregatedSection504Enrollment = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetSectionStudentFactsAggregatedSection504Enrollment = Activator.CreateInstance(itemType);
                        (targetSectionStudentFactsAggregatedSection504Enrollment as IChildEntity)?.SetParent(target);
                        source.SectionStudentFactsAggregatedSection504Enrollment.Map(targetSectionStudentFactsAggregatedSection504Enrollment);
                        
                        // Update the target reference appropriately
                        target.SectionStudentFactsAggregatedSection504Enrollment = (ISectionStudentFactsAggregatedSection504Enrollment) targetSectionStudentFactsAggregatedSection504Enrollment;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsSectionStudentFactsAggregatedSection504EnrollmentSupported = false; 
            }
            // SectionStudentFactsAggregatedSPED (Source)
            if (sourceSynchSupport.IsSectionStudentFactsAggregatedSPEDSupported)
            {
                var itemProperty = target.GetType().GetProperty("SectionStudentFactsAggregatedSPED");
                
                if (itemProperty != null)
                {                    
                    if (source.SectionStudentFactsAggregatedSPED == null)
                    {
                        target.SectionStudentFactsAggregatedSPED = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetSectionStudentFactsAggregatedSPED = Activator.CreateInstance(itemType);
                        (targetSectionStudentFactsAggregatedSPED as IChildEntity)?.SetParent(target);
                        source.SectionStudentFactsAggregatedSPED.Map(targetSectionStudentFactsAggregatedSPED);
                        
                        // Update the target reference appropriately
                        target.SectionStudentFactsAggregatedSPED = (ISectionStudentFactsAggregatedSPED) targetSectionStudentFactsAggregatedSPED;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsSectionStudentFactsAggregatedSPEDSupported = false; 
            }
            // SectionStudentFactsAggregatedTitleIEnrollment (Source)
            if (sourceSynchSupport.IsSectionStudentFactsAggregatedTitleIEnrollmentSupported)
            {
                var itemProperty = target.GetType().GetProperty("SectionStudentFactsAggregatedTitleIEnrollment");
                
                if (itemProperty != null)
                {                    
                    if (source.SectionStudentFactsAggregatedTitleIEnrollment == null)
                    {
                        target.SectionStudentFactsAggregatedTitleIEnrollment = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetSectionStudentFactsAggregatedTitleIEnrollment = Activator.CreateInstance(itemType);
                        (targetSectionStudentFactsAggregatedTitleIEnrollment as IChildEntity)?.SetParent(target);
                        source.SectionStudentFactsAggregatedTitleIEnrollment.Map(targetSectionStudentFactsAggregatedTitleIEnrollment);
                        
                        // Update the target reference appropriately
                        target.SectionStudentFactsAggregatedTitleIEnrollment = (ISectionStudentFactsAggregatedTitleIEnrollment) targetSectionStudentFactsAggregatedTitleIEnrollment;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsSectionStudentFactsAggregatedTitleIEnrollmentSupported = false; 
            }
            // SectionStudentFactsStudentsEnrolled (Source)
            if (sourceSynchSupport.IsSectionStudentFactsStudentsEnrolledSupported)
            {
                var itemProperty = target.GetType().GetProperty("SectionStudentFactsStudentsEnrolled");
                
                if (itemProperty != null)
                {                    
                    if (source.SectionStudentFactsStudentsEnrolled == null)
                    {
                        target.SectionStudentFactsStudentsEnrolled = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetSectionStudentFactsStudentsEnrolled = Activator.CreateInstance(itemType);
                        (targetSectionStudentFactsStudentsEnrolled as IChildEntity)?.SetParent(target);
                        source.SectionStudentFactsStudentsEnrolled.Map(targetSectionStudentFactsStudentsEnrolled);
                        
                        // Update the target reference appropriately
                        target.SectionStudentFactsStudentsEnrolled = (ISectionStudentFactsStudentsEnrolled) targetSectionStudentFactsStudentsEnrolled;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsSectionStudentFactsStudentsEnrolledSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists

            if (sourceSynchSupport.IsSectionStudentFactsAggregatedByDisabilitiesSupported)
            {    
                targetSynchSupport.IsSectionStudentFactsAggregatedByDisabilityIncluded = sourceSynchSupport.IsSectionStudentFactsAggregatedByDisabilityIncluded;
                source.SectionStudentFactsAggregatedByDisabilities.MapCollectionTo(target.SectionStudentFactsAggregatedByDisabilities, target);
            }
            else
            {
                targetSynchSupport.IsSectionStudentFactsAggregatedByDisabilitiesSupported = false;
            }

            if (sourceSynchSupport.IsSectionStudentFactsAggregatedGendersSupported)
            {    
                targetSynchSupport.IsSectionStudentFactsAggregatedGenderIncluded = sourceSynchSupport.IsSectionStudentFactsAggregatedGenderIncluded;
                source.SectionStudentFactsAggregatedGenders.MapCollectionTo(target.SectionStudentFactsAggregatedGenders, target);
            }
            else
            {
                targetSynchSupport.IsSectionStudentFactsAggregatedGendersSupported = false;
            }

            if (sourceSynchSupport.IsSectionStudentFactsAggregatedHispanicLatinoEthnicitiesSupported)
            {    
                targetSynchSupport.IsSectionStudentFactsAggregatedHispanicLatinoEthnicityIncluded = sourceSynchSupport.IsSectionStudentFactsAggregatedHispanicLatinoEthnicityIncluded;
                source.SectionStudentFactsAggregatedHispanicLatinoEthnicities.MapCollectionTo(target.SectionStudentFactsAggregatedHispanicLatinoEthnicities, target);
            }
            else
            {
                targetSynchSupport.IsSectionStudentFactsAggregatedHispanicLatinoEthnicitiesSupported = false;
            }

            if (sourceSynchSupport.IsSectionStudentFactsAggregatedLanguagesSupported)
            {    
                targetSynchSupport.IsSectionStudentFactsAggregatedLanguageIncluded = sourceSynchSupport.IsSectionStudentFactsAggregatedLanguageIncluded;
                source.SectionStudentFactsAggregatedLanguages.MapCollectionTo(target.SectionStudentFactsAggregatedLanguages, target);
            }
            else
            {
                targetSynchSupport.IsSectionStudentFactsAggregatedLanguagesSupported = false;
            }

            if (sourceSynchSupport.IsSectionStudentFactsAggregatedRacesSupported)
            {    
                targetSynchSupport.IsSectionStudentFactsAggregatedRaceIncluded = sourceSynchSupport.IsSectionStudentFactsAggregatedRaceIncluded;
                source.SectionStudentFactsAggregatedRaces.MapCollectionTo(target.SectionStudentFactsAggregatedRaces, target);
            }
            else
            {
                targetSynchSupport.IsSectionStudentFactsAggregatedRacesSupported = false;
            }

            if (sourceSynchSupport.IsSectionStudentFactsAggregatedSchoolFoodServiceProgramServicesSupported)
            {    
                targetSynchSupport.IsSectionStudentFactsAggregatedSchoolFoodServiceProgramServiceIncluded = sourceSynchSupport.IsSectionStudentFactsAggregatedSchoolFoodServiceProgramServiceIncluded;
                source.SectionStudentFactsAggregatedSchoolFoodServiceProgramServices.MapCollectionTo(target.SectionStudentFactsAggregatedSchoolFoodServiceProgramServices, target);
            }
            else
            {
                targetSynchSupport.IsSectionStudentFactsAggregatedSchoolFoodServiceProgramServicesSupported = false;
            }

            if (sourceSynchSupport.IsSectionStudentFactsAggregatedSexesSupported)
            {    
                targetSynchSupport.IsSectionStudentFactsAggregatedSexIncluded = sourceSynchSupport.IsSectionStudentFactsAggregatedSexIncluded;
                source.SectionStudentFactsAggregatedSexes.MapCollectionTo(target.SectionStudentFactsAggregatedSexes, target);
            }
            else
            {
                targetSynchSupport.IsSectionStudentFactsAggregatedSexesSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISectionStudentFactsSynchronizationSourceSupport 
    {
        bool IsSectionStudentFactsAggregatedByDisabilitiesSupported { get; set; }
        bool IsSectionStudentFactsAggregatedDisabilityTotalStudentsDisabledSupported { get; set; }
        bool IsSectionStudentFactsAggregatedELLEnrollmentSupported { get; set; }
        bool IsSectionStudentFactsAggregatedESLEnrollmentSupported { get; set; }
        bool IsSectionStudentFactsAggregatedGendersSupported { get; set; }
        bool IsSectionStudentFactsAggregatedHispanicLatinoEthnicitiesSupported { get; set; }
        bool IsSectionStudentFactsAggregatedLanguagesSupported { get; set; }
        bool IsSectionStudentFactsAggregatedRacesSupported { get; set; }
        bool IsSectionStudentFactsAggregatedSchoolFoodServiceProgramServicesSupported { get; set; }
        bool IsSectionStudentFactsAggregatedSection504EnrollmentSupported { get; set; }
        bool IsSectionStudentFactsAggregatedSexesSupported { get; set; }
        bool IsSectionStudentFactsAggregatedSPEDSupported { get; set; }
        bool IsSectionStudentFactsAggregatedTitleIEnrollmentSupported { get; set; }
        bool IsSectionStudentFactsStudentsEnrolledSupported { get; set; }
        Func<ISectionStudentFactsAggregatedByDisability, bool> IsSectionStudentFactsAggregatedByDisabilityIncluded { get; set; }
        Func<ISectionStudentFactsAggregatedGender, bool> IsSectionStudentFactsAggregatedGenderIncluded { get; set; }
        Func<ISectionStudentFactsAggregatedHispanicLatinoEthnicity, bool> IsSectionStudentFactsAggregatedHispanicLatinoEthnicityIncluded { get; set; }
        Func<ISectionStudentFactsAggregatedLanguage, bool> IsSectionStudentFactsAggregatedLanguageIncluded { get; set; }
        Func<ISectionStudentFactsAggregatedRace, bool> IsSectionStudentFactsAggregatedRaceIncluded { get; set; }
        Func<ISectionStudentFactsAggregatedSchoolFoodServiceProgramService, bool> IsSectionStudentFactsAggregatedSchoolFoodServiceProgramServiceIncluded { get; set; }
        Func<ISectionStudentFactsAggregatedSex, bool> IsSectionStudentFactsAggregatedSexIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class SectionStudentFactsAggregatedByDisabilityMapper 
    {
        public static bool SynchronizeTo(this ISectionStudentFactsAggregatedByDisability source, ISectionStudentFactsAggregatedByDisability target)
        {
            bool isModified = false;

            var sourceSupport = source as ISectionStudentFactsAggregatedByDisabilitySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisabilityDescriptor != target.DisabilityDescriptor)
            {
                source.DisabilityDescriptor = target.DisabilityDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsPercentageSupported)
                && target.Percentage != source.Percentage)
            {
                target.Percentage = source.Percentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTypeNumberSupported)
                && target.TypeNumber != source.TypeNumber)
            {
                target.TypeNumber = source.TypeNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISectionStudentFactsAggregatedByDisability source, ISectionStudentFactsAggregatedByDisability target, Action<ISectionStudentFactsAggregatedByDisability, ISectionStudentFactsAggregatedByDisability> onMapped)
        {
            var sourceSynchSupport = source as ISectionStudentFactsAggregatedByDisabilitySynchronizationSourceSupport;
            var targetSynchSupport = target as ISectionStudentFactsAggregatedByDisabilitySynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DisabilityDescriptor = source.DisabilityDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsPercentageSupported)
                target.Percentage = source.Percentage;
            else
                targetSynchSupport.IsPercentageSupported = false;

            if (sourceSynchSupport.IsTypeNumberSupported)
                target.TypeNumber = source.TypeNumber;
            else
                targetSynchSupport.IsTypeNumberSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISectionStudentFactsAggregatedByDisabilitySynchronizationSourceSupport 
    {
        bool IsPercentageSupported { get; set; }
        bool IsTypeNumberSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class SectionStudentFactsAggregatedDisabilityTotalStudentsDisabledMapper 
    {
        public static bool SynchronizeTo(this ISectionStudentFactsAggregatedDisabilityTotalStudentsDisabled source, ISectionStudentFactsAggregatedDisabilityTotalStudentsDisabled target)
        {
            bool isModified = false;

            var sourceSupport = source as ISectionStudentFactsAggregatedDisabilityTotalStudentsDisabledSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsStudentsDisabledNumberSupported)
                && target.StudentsDisabledNumber != source.StudentsDisabledNumber)
            {
                target.StudentsDisabledNumber = source.StudentsDisabledNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStudentsDisabledPercentageSupported)
                && target.StudentsDisabledPercentage != source.StudentsDisabledPercentage)
            {
                target.StudentsDisabledPercentage = source.StudentsDisabledPercentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISectionStudentFactsAggregatedDisabilityTotalStudentsDisabled source, ISectionStudentFactsAggregatedDisabilityTotalStudentsDisabled target, Action<ISectionStudentFactsAggregatedDisabilityTotalStudentsDisabled, ISectionStudentFactsAggregatedDisabilityTotalStudentsDisabled> onMapped)
        {
            var sourceSynchSupport = source as ISectionStudentFactsAggregatedDisabilityTotalStudentsDisabledSynchronizationSourceSupport;
            var targetSynchSupport = target as ISectionStudentFactsAggregatedDisabilityTotalStudentsDisabledSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsStudentsDisabledNumberSupported)
                target.StudentsDisabledNumber = source.StudentsDisabledNumber;
            else
                targetSynchSupport.IsStudentsDisabledNumberSupported = false;

            if (sourceSynchSupport.IsStudentsDisabledPercentageSupported)
                target.StudentsDisabledPercentage = source.StudentsDisabledPercentage;
            else
                targetSynchSupport.IsStudentsDisabledPercentageSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISectionStudentFactsAggregatedDisabilityTotalStudentsDisabledSynchronizationSourceSupport 
    {
        bool IsStudentsDisabledNumberSupported { get; set; }
        bool IsStudentsDisabledPercentageSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class SectionStudentFactsAggregatedELLEnrollmentMapper 
    {
        public static bool SynchronizeTo(this ISectionStudentFactsAggregatedELLEnrollment source, ISectionStudentFactsAggregatedELLEnrollment target)
        {
            bool isModified = false;

            var sourceSupport = source as ISectionStudentFactsAggregatedELLEnrollmentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsELLEnrollmentNumberSupported)
                && target.ELLEnrollmentNumber != source.ELLEnrollmentNumber)
            {
                target.ELLEnrollmentNumber = source.ELLEnrollmentNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsELLEnrollmentPercentageSupported)
                && target.ELLEnrollmentPercentage != source.ELLEnrollmentPercentage)
            {
                target.ELLEnrollmentPercentage = source.ELLEnrollmentPercentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISectionStudentFactsAggregatedELLEnrollment source, ISectionStudentFactsAggregatedELLEnrollment target, Action<ISectionStudentFactsAggregatedELLEnrollment, ISectionStudentFactsAggregatedELLEnrollment> onMapped)
        {
            var sourceSynchSupport = source as ISectionStudentFactsAggregatedELLEnrollmentSynchronizationSourceSupport;
            var targetSynchSupport = target as ISectionStudentFactsAggregatedELLEnrollmentSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsELLEnrollmentNumberSupported)
                target.ELLEnrollmentNumber = source.ELLEnrollmentNumber;
            else
                targetSynchSupport.IsELLEnrollmentNumberSupported = false;

            if (sourceSynchSupport.IsELLEnrollmentPercentageSupported)
                target.ELLEnrollmentPercentage = source.ELLEnrollmentPercentage;
            else
                targetSynchSupport.IsELLEnrollmentPercentageSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISectionStudentFactsAggregatedELLEnrollmentSynchronizationSourceSupport 
    {
        bool IsELLEnrollmentNumberSupported { get; set; }
        bool IsELLEnrollmentPercentageSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class SectionStudentFactsAggregatedESLEnrollmentMapper 
    {
        public static bool SynchronizeTo(this ISectionStudentFactsAggregatedESLEnrollment source, ISectionStudentFactsAggregatedESLEnrollment target)
        {
            bool isModified = false;

            var sourceSupport = source as ISectionStudentFactsAggregatedESLEnrollmentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsESLEnrollmentNumberSupported)
                && target.ESLEnrollmentNumber != source.ESLEnrollmentNumber)
            {
                target.ESLEnrollmentNumber = source.ESLEnrollmentNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsESLEnrollmentPercentageSupported)
                && target.ESLEnrollmentPercentage != source.ESLEnrollmentPercentage)
            {
                target.ESLEnrollmentPercentage = source.ESLEnrollmentPercentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISectionStudentFactsAggregatedESLEnrollment source, ISectionStudentFactsAggregatedESLEnrollment target, Action<ISectionStudentFactsAggregatedESLEnrollment, ISectionStudentFactsAggregatedESLEnrollment> onMapped)
        {
            var sourceSynchSupport = source as ISectionStudentFactsAggregatedESLEnrollmentSynchronizationSourceSupport;
            var targetSynchSupport = target as ISectionStudentFactsAggregatedESLEnrollmentSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsESLEnrollmentNumberSupported)
                target.ESLEnrollmentNumber = source.ESLEnrollmentNumber;
            else
                targetSynchSupport.IsESLEnrollmentNumberSupported = false;

            if (sourceSynchSupport.IsESLEnrollmentPercentageSupported)
                target.ESLEnrollmentPercentage = source.ESLEnrollmentPercentage;
            else
                targetSynchSupport.IsESLEnrollmentPercentageSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISectionStudentFactsAggregatedESLEnrollmentSynchronizationSourceSupport 
    {
        bool IsESLEnrollmentNumberSupported { get; set; }
        bool IsESLEnrollmentPercentageSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class SectionStudentFactsAggregatedGenderMapper 
    {
        public static bool SynchronizeTo(this ISectionStudentFactsAggregatedGender source, ISectionStudentFactsAggregatedGender target)
        {
            bool isModified = false;

            var sourceSupport = source as ISectionStudentFactsAggregatedGenderSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GenderDescriptor != target.GenderDescriptor)
            {
                source.GenderDescriptor = target.GenderDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsGenderTypeNumberSupported)
                && target.GenderTypeNumber != source.GenderTypeNumber)
            {
                target.GenderTypeNumber = source.GenderTypeNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGenderTypePercentageSupported)
                && target.GenderTypePercentage != source.GenderTypePercentage)
            {
                target.GenderTypePercentage = source.GenderTypePercentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISectionStudentFactsAggregatedGender source, ISectionStudentFactsAggregatedGender target, Action<ISectionStudentFactsAggregatedGender, ISectionStudentFactsAggregatedGender> onMapped)
        {
            var sourceSynchSupport = source as ISectionStudentFactsAggregatedGenderSynchronizationSourceSupport;
            var targetSynchSupport = target as ISectionStudentFactsAggregatedGenderSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GenderDescriptor = source.GenderDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsGenderTypeNumberSupported)
                target.GenderTypeNumber = source.GenderTypeNumber;
            else
                targetSynchSupport.IsGenderTypeNumberSupported = false;

            if (sourceSynchSupport.IsGenderTypePercentageSupported)
                target.GenderTypePercentage = source.GenderTypePercentage;
            else
                targetSynchSupport.IsGenderTypePercentageSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISectionStudentFactsAggregatedGenderSynchronizationSourceSupport 
    {
        bool IsGenderTypeNumberSupported { get; set; }
        bool IsGenderTypePercentageSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class SectionStudentFactsAggregatedHispanicLatinoEthnicityMapper 
    {
        public static bool SynchronizeTo(this ISectionStudentFactsAggregatedHispanicLatinoEthnicity source, ISectionStudentFactsAggregatedHispanicLatinoEthnicity target)
        {
            bool isModified = false;

            var sourceSupport = source as ISectionStudentFactsAggregatedHispanicLatinoEthnicitySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.HispanicLatinoEthnicity != target.HispanicLatinoEthnicity)
            {
                source.HispanicLatinoEthnicity = target.HispanicLatinoEthnicity;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsHispanicLatinoEthnicityNumberSupported)
                && target.HispanicLatinoEthnicityNumber != source.HispanicLatinoEthnicityNumber)
            {
                target.HispanicLatinoEthnicityNumber = source.HispanicLatinoEthnicityNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHispanicLatinoEthnicityPercentageSupported)
                && target.HispanicLatinoEthnicityPercentage != source.HispanicLatinoEthnicityPercentage)
            {
                target.HispanicLatinoEthnicityPercentage = source.HispanicLatinoEthnicityPercentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISectionStudentFactsAggregatedHispanicLatinoEthnicity source, ISectionStudentFactsAggregatedHispanicLatinoEthnicity target, Action<ISectionStudentFactsAggregatedHispanicLatinoEthnicity, ISectionStudentFactsAggregatedHispanicLatinoEthnicity> onMapped)
        {
            var sourceSynchSupport = source as ISectionStudentFactsAggregatedHispanicLatinoEthnicitySynchronizationSourceSupport;
            var targetSynchSupport = target as ISectionStudentFactsAggregatedHispanicLatinoEthnicitySynchronizationSourceSupport;

            // Copy contextual primary key values
            target.HispanicLatinoEthnicity = source.HispanicLatinoEthnicity;

            // Copy non-PK properties

            if (sourceSynchSupport.IsHispanicLatinoEthnicityNumberSupported)
                target.HispanicLatinoEthnicityNumber = source.HispanicLatinoEthnicityNumber;
            else
                targetSynchSupport.IsHispanicLatinoEthnicityNumberSupported = false;

            if (sourceSynchSupport.IsHispanicLatinoEthnicityPercentageSupported)
                target.HispanicLatinoEthnicityPercentage = source.HispanicLatinoEthnicityPercentage;
            else
                targetSynchSupport.IsHispanicLatinoEthnicityPercentageSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISectionStudentFactsAggregatedHispanicLatinoEthnicitySynchronizationSourceSupport 
    {
        bool IsHispanicLatinoEthnicityNumberSupported { get; set; }
        bool IsHispanicLatinoEthnicityPercentageSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class SectionStudentFactsAggregatedLanguageMapper 
    {
        public static bool SynchronizeTo(this ISectionStudentFactsAggregatedLanguage source, ISectionStudentFactsAggregatedLanguage target)
        {
            bool isModified = false;

            var sourceSupport = source as ISectionStudentFactsAggregatedLanguageSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LanguageDescriptor != target.LanguageDescriptor)
            {
                source.LanguageDescriptor = target.LanguageDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsLanguageTypeNumberSupported)
                && target.LanguageTypeNumber != source.LanguageTypeNumber)
            {
                target.LanguageTypeNumber = source.LanguageTypeNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLanguageTypePercentageSupported)
                && target.LanguageTypePercentage != source.LanguageTypePercentage)
            {
                target.LanguageTypePercentage = source.LanguageTypePercentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISectionStudentFactsAggregatedLanguage source, ISectionStudentFactsAggregatedLanguage target, Action<ISectionStudentFactsAggregatedLanguage, ISectionStudentFactsAggregatedLanguage> onMapped)
        {
            var sourceSynchSupport = source as ISectionStudentFactsAggregatedLanguageSynchronizationSourceSupport;
            var targetSynchSupport = target as ISectionStudentFactsAggregatedLanguageSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LanguageDescriptor = source.LanguageDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsLanguageTypeNumberSupported)
                target.LanguageTypeNumber = source.LanguageTypeNumber;
            else
                targetSynchSupport.IsLanguageTypeNumberSupported = false;

            if (sourceSynchSupport.IsLanguageTypePercentageSupported)
                target.LanguageTypePercentage = source.LanguageTypePercentage;
            else
                targetSynchSupport.IsLanguageTypePercentageSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISectionStudentFactsAggregatedLanguageSynchronizationSourceSupport 
    {
        bool IsLanguageTypeNumberSupported { get; set; }
        bool IsLanguageTypePercentageSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class SectionStudentFactsAggregatedRaceMapper 
    {
        public static bool SynchronizeTo(this ISectionStudentFactsAggregatedRace source, ISectionStudentFactsAggregatedRace target)
        {
            bool isModified = false;

            var sourceSupport = source as ISectionStudentFactsAggregatedRaceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.RaceDescriptor != target.RaceDescriptor)
            {
                source.RaceDescriptor = target.RaceDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsRaceTypeNumberSupported)
                && target.RaceTypeNumber != source.RaceTypeNumber)
            {
                target.RaceTypeNumber = source.RaceTypeNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRaceTypePercentageSupported)
                && target.RaceTypePercentage != source.RaceTypePercentage)
            {
                target.RaceTypePercentage = source.RaceTypePercentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISectionStudentFactsAggregatedRace source, ISectionStudentFactsAggregatedRace target, Action<ISectionStudentFactsAggregatedRace, ISectionStudentFactsAggregatedRace> onMapped)
        {
            var sourceSynchSupport = source as ISectionStudentFactsAggregatedRaceSynchronizationSourceSupport;
            var targetSynchSupport = target as ISectionStudentFactsAggregatedRaceSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.RaceDescriptor = source.RaceDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsRaceTypeNumberSupported)
                target.RaceTypeNumber = source.RaceTypeNumber;
            else
                targetSynchSupport.IsRaceTypeNumberSupported = false;

            if (sourceSynchSupport.IsRaceTypePercentageSupported)
                target.RaceTypePercentage = source.RaceTypePercentage;
            else
                targetSynchSupport.IsRaceTypePercentageSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISectionStudentFactsAggregatedRaceSynchronizationSourceSupport 
    {
        bool IsRaceTypeNumberSupported { get; set; }
        bool IsRaceTypePercentageSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class SectionStudentFactsAggregatedSchoolFoodServiceProgramServiceMapper 
    {
        public static bool SynchronizeTo(this ISectionStudentFactsAggregatedSchoolFoodServiceProgramService source, ISectionStudentFactsAggregatedSchoolFoodServiceProgramService target)
        {
            bool isModified = false;

            var sourceSupport = source as ISectionStudentFactsAggregatedSchoolFoodServiceProgramServiceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SchoolFoodServiceProgramServiceDescriptor != target.SchoolFoodServiceProgramServiceDescriptor)
            {
                source.SchoolFoodServiceProgramServiceDescriptor = target.SchoolFoodServiceProgramServiceDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsTypeNumberSupported)
                && target.TypeNumber != source.TypeNumber)
            {
                target.TypeNumber = source.TypeNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTypePercentageSupported)
                && target.TypePercentage != source.TypePercentage)
            {
                target.TypePercentage = source.TypePercentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISectionStudentFactsAggregatedSchoolFoodServiceProgramService source, ISectionStudentFactsAggregatedSchoolFoodServiceProgramService target, Action<ISectionStudentFactsAggregatedSchoolFoodServiceProgramService, ISectionStudentFactsAggregatedSchoolFoodServiceProgramService> onMapped)
        {
            var sourceSynchSupport = source as ISectionStudentFactsAggregatedSchoolFoodServiceProgramServiceSynchronizationSourceSupport;
            var targetSynchSupport = target as ISectionStudentFactsAggregatedSchoolFoodServiceProgramServiceSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.SchoolFoodServiceProgramServiceDescriptor = source.SchoolFoodServiceProgramServiceDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsTypeNumberSupported)
                target.TypeNumber = source.TypeNumber;
            else
                targetSynchSupport.IsTypeNumberSupported = false;

            if (sourceSynchSupport.IsTypePercentageSupported)
                target.TypePercentage = source.TypePercentage;
            else
                targetSynchSupport.IsTypePercentageSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISectionStudentFactsAggregatedSchoolFoodServiceProgramServiceSynchronizationSourceSupport 
    {
        bool IsTypeNumberSupported { get; set; }
        bool IsTypePercentageSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class SectionStudentFactsAggregatedSection504EnrollmentMapper 
    {
        public static bool SynchronizeTo(this ISectionStudentFactsAggregatedSection504Enrollment source, ISectionStudentFactsAggregatedSection504Enrollment target)
        {
            bool isModified = false;

            var sourceSupport = source as ISectionStudentFactsAggregatedSection504EnrollmentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsNumber504EnrolledSupported)
                && target.Number504Enrolled != source.Number504Enrolled)
            {
                target.Number504Enrolled = source.Number504Enrolled;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPercentage504EnrolledSupported)
                && target.Percentage504Enrolled != source.Percentage504Enrolled)
            {
                target.Percentage504Enrolled = source.Percentage504Enrolled;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISectionStudentFactsAggregatedSection504Enrollment source, ISectionStudentFactsAggregatedSection504Enrollment target, Action<ISectionStudentFactsAggregatedSection504Enrollment, ISectionStudentFactsAggregatedSection504Enrollment> onMapped)
        {
            var sourceSynchSupport = source as ISectionStudentFactsAggregatedSection504EnrollmentSynchronizationSourceSupport;
            var targetSynchSupport = target as ISectionStudentFactsAggregatedSection504EnrollmentSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsNumber504EnrolledSupported)
                target.Number504Enrolled = source.Number504Enrolled;
            else
                targetSynchSupport.IsNumber504EnrolledSupported = false;

            if (sourceSynchSupport.IsPercentage504EnrolledSupported)
                target.Percentage504Enrolled = source.Percentage504Enrolled;
            else
                targetSynchSupport.IsPercentage504EnrolledSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISectionStudentFactsAggregatedSection504EnrollmentSynchronizationSourceSupport 
    {
        bool IsNumber504EnrolledSupported { get; set; }
        bool IsPercentage504EnrolledSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class SectionStudentFactsAggregatedSexMapper 
    {
        public static bool SynchronizeTo(this ISectionStudentFactsAggregatedSex source, ISectionStudentFactsAggregatedSex target)
        {
            bool isModified = false;

            var sourceSupport = source as ISectionStudentFactsAggregatedSexSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SexDescriptor != target.SexDescriptor)
            {
                source.SexDescriptor = target.SexDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsSexTypeNumberSupported)
                && target.SexTypeNumber != source.SexTypeNumber)
            {
                target.SexTypeNumber = source.SexTypeNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSexTypePercentageSupported)
                && target.SexTypePercentage != source.SexTypePercentage)
            {
                target.SexTypePercentage = source.SexTypePercentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISectionStudentFactsAggregatedSex source, ISectionStudentFactsAggregatedSex target, Action<ISectionStudentFactsAggregatedSex, ISectionStudentFactsAggregatedSex> onMapped)
        {
            var sourceSynchSupport = source as ISectionStudentFactsAggregatedSexSynchronizationSourceSupport;
            var targetSynchSupport = target as ISectionStudentFactsAggregatedSexSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.SexDescriptor = source.SexDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsSexTypeNumberSupported)
                target.SexTypeNumber = source.SexTypeNumber;
            else
                targetSynchSupport.IsSexTypeNumberSupported = false;

            if (sourceSynchSupport.IsSexTypePercentageSupported)
                target.SexTypePercentage = source.SexTypePercentage;
            else
                targetSynchSupport.IsSexTypePercentageSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISectionStudentFactsAggregatedSexSynchronizationSourceSupport 
    {
        bool IsSexTypeNumberSupported { get; set; }
        bool IsSexTypePercentageSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class SectionStudentFactsAggregatedSPEDMapper 
    {
        public static bool SynchronizeTo(this ISectionStudentFactsAggregatedSPED source, ISectionStudentFactsAggregatedSPED target)
        {
            bool isModified = false;

            var sourceSupport = source as ISectionStudentFactsAggregatedSPEDSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsSPEDEnrollmentNumberSupported)
                && target.SPEDEnrollmentNumber != source.SPEDEnrollmentNumber)
            {
                target.SPEDEnrollmentNumber = source.SPEDEnrollmentNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSPEDEnrollmentPercentageSupported)
                && target.SPEDEnrollmentPercentage != source.SPEDEnrollmentPercentage)
            {
                target.SPEDEnrollmentPercentage = source.SPEDEnrollmentPercentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISectionStudentFactsAggregatedSPED source, ISectionStudentFactsAggregatedSPED target, Action<ISectionStudentFactsAggregatedSPED, ISectionStudentFactsAggregatedSPED> onMapped)
        {
            var sourceSynchSupport = source as ISectionStudentFactsAggregatedSPEDSynchronizationSourceSupport;
            var targetSynchSupport = target as ISectionStudentFactsAggregatedSPEDSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsSPEDEnrollmentNumberSupported)
                target.SPEDEnrollmentNumber = source.SPEDEnrollmentNumber;
            else
                targetSynchSupport.IsSPEDEnrollmentNumberSupported = false;

            if (sourceSynchSupport.IsSPEDEnrollmentPercentageSupported)
                target.SPEDEnrollmentPercentage = source.SPEDEnrollmentPercentage;
            else
                targetSynchSupport.IsSPEDEnrollmentPercentageSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISectionStudentFactsAggregatedSPEDSynchronizationSourceSupport 
    {
        bool IsSPEDEnrollmentNumberSupported { get; set; }
        bool IsSPEDEnrollmentPercentageSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class SectionStudentFactsAggregatedTitleIEnrollmentMapper 
    {
        public static bool SynchronizeTo(this ISectionStudentFactsAggregatedTitleIEnrollment source, ISectionStudentFactsAggregatedTitleIEnrollment target)
        {
            bool isModified = false;

            var sourceSupport = source as ISectionStudentFactsAggregatedTitleIEnrollmentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsTitleIEnrollmentNumberSupported)
                && target.TitleIEnrollmentNumber != source.TitleIEnrollmentNumber)
            {
                target.TitleIEnrollmentNumber = source.TitleIEnrollmentNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTitleIEnrollmentPercentageSupported)
                && target.TitleIEnrollmentPercentage != source.TitleIEnrollmentPercentage)
            {
                target.TitleIEnrollmentPercentage = source.TitleIEnrollmentPercentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISectionStudentFactsAggregatedTitleIEnrollment source, ISectionStudentFactsAggregatedTitleIEnrollment target, Action<ISectionStudentFactsAggregatedTitleIEnrollment, ISectionStudentFactsAggregatedTitleIEnrollment> onMapped)
        {
            var sourceSynchSupport = source as ISectionStudentFactsAggregatedTitleIEnrollmentSynchronizationSourceSupport;
            var targetSynchSupport = target as ISectionStudentFactsAggregatedTitleIEnrollmentSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsTitleIEnrollmentNumberSupported)
                target.TitleIEnrollmentNumber = source.TitleIEnrollmentNumber;
            else
                targetSynchSupport.IsTitleIEnrollmentNumberSupported = false;

            if (sourceSynchSupport.IsTitleIEnrollmentPercentageSupported)
                target.TitleIEnrollmentPercentage = source.TitleIEnrollmentPercentage;
            else
                targetSynchSupport.IsTitleIEnrollmentPercentageSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISectionStudentFactsAggregatedTitleIEnrollmentSynchronizationSourceSupport 
    {
        bool IsTitleIEnrollmentNumberSupported { get; set; }
        bool IsTitleIEnrollmentPercentageSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class SectionStudentFactsStudentsEnrolledMapper 
    {
        public static bool SynchronizeTo(this ISectionStudentFactsStudentsEnrolled source, ISectionStudentFactsStudentsEnrolled target)
        {
            bool isModified = false;

            var sourceSupport = source as ISectionStudentFactsStudentsEnrolledSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsNumberStudentsEnrolledSupported)
                && target.NumberStudentsEnrolled != source.NumberStudentsEnrolled)
            {
                target.NumberStudentsEnrolled = source.NumberStudentsEnrolled;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPercentAtRiskSupported)
                && target.PercentAtRisk != source.PercentAtRisk)
            {
                target.PercentAtRisk = source.PercentAtRisk;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPercentMobilitySupported)
                && target.PercentMobility != source.PercentMobility)
            {
                target.PercentMobility = source.PercentMobility;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISectionStudentFactsStudentsEnrolled source, ISectionStudentFactsStudentsEnrolled target, Action<ISectionStudentFactsStudentsEnrolled, ISectionStudentFactsStudentsEnrolled> onMapped)
        {
            var sourceSynchSupport = source as ISectionStudentFactsStudentsEnrolledSynchronizationSourceSupport;
            var targetSynchSupport = target as ISectionStudentFactsStudentsEnrolledSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsNumberStudentsEnrolledSupported)
                target.NumberStudentsEnrolled = source.NumberStudentsEnrolled;
            else
                targetSynchSupport.IsNumberStudentsEnrolledSupported = false;

            if (sourceSynchSupport.IsPercentAtRiskSupported)
                target.PercentAtRisk = source.PercentAtRisk;
            else
                targetSynchSupport.IsPercentAtRiskSupported = false;

            if (sourceSynchSupport.IsPercentMobilitySupported)
                target.PercentMobility = source.PercentMobility;
            else
                targetSynchSupport.IsPercentMobilitySupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISectionStudentFactsStudentsEnrolledSynchronizationSourceSupport 
    {
        bool IsNumberStudentsEnrolledSupported { get; set; }
        bool IsPercentAtRiskSupported { get; set; }
        bool IsPercentMobilitySupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
    }
 
}
// Aggregate: Staff

namespace EdFi.Ods.Entities.Common.TPDM //.StaffAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffBackgroundCheckMapper 
    {
        public static bool SynchronizeTo(this IStaffBackgroundCheck source, IStaffBackgroundCheck target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffBackgroundCheckSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BackgroundCheckTypeDescriptor != target.BackgroundCheckTypeDescriptor)
            {
                source.BackgroundCheckTypeDescriptor = target.BackgroundCheckTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBackgroundCheckCompletedDateSupported)
                && target.BackgroundCheckCompletedDate != source.BackgroundCheckCompletedDate)
            {
                target.BackgroundCheckCompletedDate = source.BackgroundCheckCompletedDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBackgroundCheckRequestedDateSupported)
                && target.BackgroundCheckRequestedDate != source.BackgroundCheckRequestedDate)
            {
                target.BackgroundCheckRequestedDate = source.BackgroundCheckRequestedDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBackgroundCheckStatusDescriptorSupported)
                && target.BackgroundCheckStatusDescriptor != source.BackgroundCheckStatusDescriptor)
            {
                target.BackgroundCheckStatusDescriptor = source.BackgroundCheckStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFingerprintSupported)
                && target.Fingerprint != source.Fingerprint)
            {
                target.Fingerprint = source.Fingerprint;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffBackgroundCheck source, IStaffBackgroundCheck target, Action<IStaffBackgroundCheck, IStaffBackgroundCheck> onMapped)
        {
            var sourceSynchSupport = source as IStaffBackgroundCheckSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffBackgroundCheckSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.BackgroundCheckTypeDescriptor = source.BackgroundCheckTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBackgroundCheckCompletedDateSupported)
                target.BackgroundCheckCompletedDate = source.BackgroundCheckCompletedDate;
            else
                targetSynchSupport.IsBackgroundCheckCompletedDateSupported = false;

            if (sourceSynchSupport.IsBackgroundCheckRequestedDateSupported)
                target.BackgroundCheckRequestedDate = source.BackgroundCheckRequestedDate;
            else
                targetSynchSupport.IsBackgroundCheckRequestedDateSupported = false;

            if (sourceSynchSupport.IsBackgroundCheckStatusDescriptorSupported)
                target.BackgroundCheckStatusDescriptor = source.BackgroundCheckStatusDescriptor;
            else
                targetSynchSupport.IsBackgroundCheckStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsFingerprintSupported)
                target.Fingerprint = source.Fingerprint;
            else
                targetSynchSupport.IsFingerprintSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffBackgroundCheckSynchronizationSourceSupport 
    {
        bool IsBackgroundCheckCompletedDateSupported { get; set; }
        bool IsBackgroundCheckRequestedDateSupported { get; set; }
        bool IsBackgroundCheckStatusDescriptorSupported { get; set; }
        bool IsFingerprintSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffExtensionMapper 
    {
        public static bool SynchronizeTo(this IStaffExtension source, IStaffExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.Staff as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsGenderDescriptorSupported)
                && target.GenderDescriptor != source.GenderDescriptor)
            {
                target.GenderDescriptor = source.GenderDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProbationCompleteDateSupported)
                && target.ProbationCompleteDate != source.ProbationCompleteDate)
            {
                target.ProbationCompleteDate = source.ProbationCompleteDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTenuredSupported)
                && target.Tenured != source.Tenured)
            {
                target.Tenured = source.Tenured;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTenureTrackSupported)
                && target.TenureTrack != source.TenureTrack)
            {
                target.TenureTrack = source.TenureTrack;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // StaffSalary
            if (sourceSupport == null || sourceSupport.IsStaffSalarySupported)
            {
                if (source.StaffSalary == null)
                {
                    if (target.StaffSalary != null)
                    {
                        target.StaffSalary = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.StaffSalary == null)
                    {
                        var itemType = target.GetType().GetProperty("StaffSalary").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.StaffSalary = (IStaffSalary) newItem;
                    }

                    isModified |= source.StaffSalary.Synchronize(target.StaffSalary);
                }
            }
            // StaffTeacherEducatorResearch
            if (sourceSupport == null || sourceSupport.IsStaffTeacherEducatorResearchSupported)
            {
                if (source.StaffTeacherEducatorResearch == null)
                {
                    if (target.StaffTeacherEducatorResearch != null)
                    {
                        target.StaffTeacherEducatorResearch = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.StaffTeacherEducatorResearch == null)
                    {
                        var itemType = target.GetType().GetProperty("StaffTeacherEducatorResearch").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.StaffTeacherEducatorResearch = (IStaffTeacherEducatorResearch) newItem;
                    }

                    isModified |= source.StaffTeacherEducatorResearch.Synchronize(target.StaffTeacherEducatorResearch);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStaffBackgroundChecksSupported)
            {
                isModified |= 
                    source.StaffBackgroundChecks.SynchronizeCollectionTo(
                        target.StaffBackgroundChecks, 
                        onChildAdded: child => 
                            {
                                child.StaffExtension = target;

                                // Extension class "children" need to reference the Ed-Fi Standard entity as the parent
                                (child as IChildEntity)?.SetParent(target.Staff);
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffBackgroundCheckIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStaffHighlyQualifiedAcademicSubjectsSupported)
            {
                isModified |= 
                    source.StaffHighlyQualifiedAcademicSubjects.SynchronizeCollectionTo(
                        target.StaffHighlyQualifiedAcademicSubjects, 
                        onChildAdded: child => 
                            {
                                child.StaffExtension = target;

                                // Extension class "children" need to reference the Ed-Fi Standard entity as the parent
                                (child as IChildEntity)?.SetParent(target.Staff);
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffHighlyQualifiedAcademicSubjectIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStaffSenioritiesSupported)
            {
                isModified |= 
                    source.StaffSeniorities.SynchronizeCollectionTo(
                        target.StaffSeniorities, 
                        onChildAdded: child => 
                            {
                                child.StaffExtension = target;

                                // Extension class "children" need to reference the Ed-Fi Standard entity as the parent
                                (child as IChildEntity)?.SetParent(target.Staff);
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffSeniorityIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStaffTeacherPreparationProgramsSupported)
            {
                isModified |= 
                    source.StaffTeacherPreparationPrograms.SynchronizeCollectionTo(
                        target.StaffTeacherPreparationPrograms, 
                        onChildAdded: child => 
                            {
                                child.StaffExtension = target;

                                // Extension class "children" need to reference the Ed-Fi Standard entity as the parent
                                (child as IChildEntity)?.SetParent(target.Staff);
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffTeacherPreparationProgramIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IStaffExtension source, IStaffExtension target, Action<IStaffExtension, IStaffExtension> onMapped)
        {
            var sourceSynchSupport = source as IStaffExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsGenderDescriptorSupported)
                target.GenderDescriptor = source.GenderDescriptor;
            else
                targetSynchSupport.IsGenderDescriptorSupported = false;

            if (sourceSynchSupport.IsProbationCompleteDateSupported)
                target.ProbationCompleteDate = source.ProbationCompleteDate;
            else
                targetSynchSupport.IsProbationCompleteDateSupported = false;

            if (sourceSynchSupport.IsTenuredSupported)
                target.Tenured = source.Tenured;
            else
                targetSynchSupport.IsTenuredSupported = false;

            if (sourceSynchSupport.IsTenureTrackSupported)
                target.TenureTrack = source.TenureTrack;
            else
                targetSynchSupport.IsTenureTrackSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // StaffSalary (Source)
            if (sourceSynchSupport.IsStaffSalarySupported)
            {
                var itemProperty = target.GetType().GetProperty("StaffSalary");
                
                if (itemProperty != null)
                {                    
                    if (source.StaffSalary == null)
                    {
                        target.StaffSalary = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetStaffSalary = Activator.CreateInstance(itemType);
                        (targetStaffSalary as IChildEntity)?.SetParent(target.Staff);
                        source.StaffSalary.Map(targetStaffSalary);
                        
                        // Update the target reference appropriately
                        target.StaffSalary = (IStaffSalary) targetStaffSalary;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsStaffSalarySupported = false; 
            }
            // StaffTeacherEducatorResearch (Source)
            if (sourceSynchSupport.IsStaffTeacherEducatorResearchSupported)
            {
                var itemProperty = target.GetType().GetProperty("StaffTeacherEducatorResearch");
                
                if (itemProperty != null)
                {                    
                    if (source.StaffTeacherEducatorResearch == null)
                    {
                        target.StaffTeacherEducatorResearch = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetStaffTeacherEducatorResearch = Activator.CreateInstance(itemType);
                        (targetStaffTeacherEducatorResearch as IChildEntity)?.SetParent(target.Staff);
                        source.StaffTeacherEducatorResearch.Map(targetStaffTeacherEducatorResearch);
                        
                        // Update the target reference appropriately
                        target.StaffTeacherEducatorResearch = (IStaffTeacherEducatorResearch) targetStaffTeacherEducatorResearch;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsStaffTeacherEducatorResearchSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists

            if (sourceSynchSupport.IsStaffBackgroundChecksSupported)
            {    
                targetSynchSupport.IsStaffBackgroundCheckIncluded = sourceSynchSupport.IsStaffBackgroundCheckIncluded;
                source.StaffBackgroundChecks.MapCollectionTo(target.StaffBackgroundChecks, target.Staff);
            }
            else
            {
                targetSynchSupport.IsStaffBackgroundChecksSupported = false;
            }

            if (sourceSynchSupport.IsStaffHighlyQualifiedAcademicSubjectsSupported)
            {    
                targetSynchSupport.IsStaffHighlyQualifiedAcademicSubjectIncluded = sourceSynchSupport.IsStaffHighlyQualifiedAcademicSubjectIncluded;
                source.StaffHighlyQualifiedAcademicSubjects.MapCollectionTo(target.StaffHighlyQualifiedAcademicSubjects, target.Staff);
            }
            else
            {
                targetSynchSupport.IsStaffHighlyQualifiedAcademicSubjectsSupported = false;
            }

            if (sourceSynchSupport.IsStaffSenioritiesSupported)
            {    
                targetSynchSupport.IsStaffSeniorityIncluded = sourceSynchSupport.IsStaffSeniorityIncluded;
                source.StaffSeniorities.MapCollectionTo(target.StaffSeniorities, target.Staff);
            }
            else
            {
                targetSynchSupport.IsStaffSenioritiesSupported = false;
            }

            if (sourceSynchSupport.IsStaffTeacherPreparationProgramsSupported)
            {    
                targetSynchSupport.IsStaffTeacherPreparationProgramIncluded = sourceSynchSupport.IsStaffTeacherPreparationProgramIncluded;
                source.StaffTeacherPreparationPrograms.MapCollectionTo(target.StaffTeacherPreparationPrograms, target.Staff);
            }
            else
            {
                targetSynchSupport.IsStaffTeacherPreparationProgramsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffExtensionSynchronizationSourceSupport 
    {
        bool IsGenderDescriptorSupported { get; set; }
        bool IsProbationCompleteDateSupported { get; set; }
        bool IsStaffBackgroundChecksSupported { get; set; }
        bool IsStaffHighlyQualifiedAcademicSubjectsSupported { get; set; }
        bool IsStaffSalarySupported { get; set; }
        bool IsStaffSenioritiesSupported { get; set; }
        bool IsStaffTeacherEducatorResearchSupported { get; set; }
        bool IsStaffTeacherPreparationProgramsSupported { get; set; }
        bool IsTenuredSupported { get; set; }
        bool IsTenureTrackSupported { get; set; }
        Func<IStaffBackgroundCheck, bool> IsStaffBackgroundCheckIncluded { get; set; }
        Func<IStaffHighlyQualifiedAcademicSubject, bool> IsStaffHighlyQualifiedAcademicSubjectIncluded { get; set; }
        Func<IStaffSeniority, bool> IsStaffSeniorityIncluded { get; set; }
        Func<IStaffTeacherPreparationProgram, bool> IsStaffTeacherPreparationProgramIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffHighlyQualifiedAcademicSubjectMapper 
    {
        public static bool SynchronizeTo(this IStaffHighlyQualifiedAcademicSubject source, IStaffHighlyQualifiedAcademicSubject target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffHighlyQualifiedAcademicSubjectSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AcademicSubjectDescriptor != target.AcademicSubjectDescriptor)
            {
                source.AcademicSubjectDescriptor = target.AcademicSubjectDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffHighlyQualifiedAcademicSubject source, IStaffHighlyQualifiedAcademicSubject target, Action<IStaffHighlyQualifiedAcademicSubject, IStaffHighlyQualifiedAcademicSubject> onMapped)
        {
            var sourceSynchSupport = source as IStaffHighlyQualifiedAcademicSubjectSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffHighlyQualifiedAcademicSubjectSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffHighlyQualifiedAcademicSubjectSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffSalaryMapper 
    {
        public static bool SynchronizeTo(this IStaffSalary source, IStaffSalary target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffSalarySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsSalaryAmountSupported)
                && target.SalaryAmount != source.SalaryAmount)
            {
                target.SalaryAmount = source.SalaryAmount;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSalaryMaxRangeSupported)
                && target.SalaryMaxRange != source.SalaryMaxRange)
            {
                target.SalaryMaxRange = source.SalaryMaxRange;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSalaryMinRangeSupported)
                && target.SalaryMinRange != source.SalaryMinRange)
            {
                target.SalaryMinRange = source.SalaryMinRange;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSalaryTypeDescriptorSupported)
                && target.SalaryTypeDescriptor != source.SalaryTypeDescriptor)
            {
                target.SalaryTypeDescriptor = source.SalaryTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffSalary source, IStaffSalary target, Action<IStaffSalary, IStaffSalary> onMapped)
        {
            var sourceSynchSupport = source as IStaffSalarySynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffSalarySynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsSalaryAmountSupported)
                target.SalaryAmount = source.SalaryAmount;
            else
                targetSynchSupport.IsSalaryAmountSupported = false;

            if (sourceSynchSupport.IsSalaryMaxRangeSupported)
                target.SalaryMaxRange = source.SalaryMaxRange;
            else
                targetSynchSupport.IsSalaryMaxRangeSupported = false;

            if (sourceSynchSupport.IsSalaryMinRangeSupported)
                target.SalaryMinRange = source.SalaryMinRange;
            else
                targetSynchSupport.IsSalaryMinRangeSupported = false;

            if (sourceSynchSupport.IsSalaryTypeDescriptorSupported)
                target.SalaryTypeDescriptor = source.SalaryTypeDescriptor;
            else
                targetSynchSupport.IsSalaryTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffSalarySynchronizationSourceSupport 
    {
        bool IsSalaryAmountSupported { get; set; }
        bool IsSalaryMaxRangeSupported { get; set; }
        bool IsSalaryMinRangeSupported { get; set; }
        bool IsSalaryTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffSeniorityMapper 
    {
        public static bool SynchronizeTo(this IStaffSeniority source, IStaffSeniority target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffSenioritySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CredentialFieldDescriptor != target.CredentialFieldDescriptor)
            {
                source.CredentialFieldDescriptor = target.CredentialFieldDescriptor;
            }
            if (source.NameOfInstitution != target.NameOfInstitution)
            {
                source.NameOfInstitution = target.NameOfInstitution;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsYearsExperienceSupported)
                && target.YearsExperience != source.YearsExperience)
            {
                target.YearsExperience = source.YearsExperience;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffSeniority source, IStaffSeniority target, Action<IStaffSeniority, IStaffSeniority> onMapped)
        {
            var sourceSynchSupport = source as IStaffSenioritySynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffSenioritySynchronizationSourceSupport;

            // Copy contextual primary key values
            target.CredentialFieldDescriptor = source.CredentialFieldDescriptor;
            target.NameOfInstitution = source.NameOfInstitution;

            // Copy non-PK properties

            if (sourceSynchSupport.IsYearsExperienceSupported)
                target.YearsExperience = source.YearsExperience;
            else
                targetSynchSupport.IsYearsExperienceSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffSenioritySynchronizationSourceSupport 
    {
        bool IsYearsExperienceSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffTeacherEducatorResearchMapper 
    {
        public static bool SynchronizeTo(this IStaffTeacherEducatorResearch source, IStaffTeacherEducatorResearch target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffTeacherEducatorResearchSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsResearchExperienceDateSupported)
                && target.ResearchExperienceDate != source.ResearchExperienceDate)
            {
                target.ResearchExperienceDate = source.ResearchExperienceDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsResearchExperienceDescriptionSupported)
                && target.ResearchExperienceDescription != source.ResearchExperienceDescription)
            {
                target.ResearchExperienceDescription = source.ResearchExperienceDescription;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsResearchExperienceTitleSupported)
                && target.ResearchExperienceTitle != source.ResearchExperienceTitle)
            {
                target.ResearchExperienceTitle = source.ResearchExperienceTitle;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffTeacherEducatorResearch source, IStaffTeacherEducatorResearch target, Action<IStaffTeacherEducatorResearch, IStaffTeacherEducatorResearch> onMapped)
        {
            var sourceSynchSupport = source as IStaffTeacherEducatorResearchSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffTeacherEducatorResearchSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsResearchExperienceDateSupported)
                target.ResearchExperienceDate = source.ResearchExperienceDate;
            else
                targetSynchSupport.IsResearchExperienceDateSupported = false;

            if (sourceSynchSupport.IsResearchExperienceDescriptionSupported)
                target.ResearchExperienceDescription = source.ResearchExperienceDescription;
            else
                targetSynchSupport.IsResearchExperienceDescriptionSupported = false;

            if (sourceSynchSupport.IsResearchExperienceTitleSupported)
                target.ResearchExperienceTitle = source.ResearchExperienceTitle;
            else
                targetSynchSupport.IsResearchExperienceTitleSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffTeacherEducatorResearchSynchronizationSourceSupport 
    {
        bool IsResearchExperienceDateSupported { get; set; }
        bool IsResearchExperienceDescriptionSupported { get; set; }
        bool IsResearchExperienceTitleSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffTeacherPreparationProgramMapper 
    {
        public static bool SynchronizeTo(this IStaffTeacherPreparationProgram source, IStaffTeacherPreparationProgram target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffTeacherPreparationProgramSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TeacherPreparationProgramName != target.TeacherPreparationProgramName)
            {
                source.TeacherPreparationProgramName = target.TeacherPreparationProgramName;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsGPASupported)
                && target.GPA != source.GPA)
            {
                target.GPA = source.GPA;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLevelOfDegreeAwardedDescriptorSupported)
                && target.LevelOfDegreeAwardedDescriptor != source.LevelOfDegreeAwardedDescriptor)
            {
                target.LevelOfDegreeAwardedDescriptor = source.LevelOfDegreeAwardedDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMajorSpecializationSupported)
                && target.MajorSpecialization != source.MajorSpecialization)
            {
                target.MajorSpecialization = source.MajorSpecialization;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNameOfInstitutionSupported)
                && target.NameOfInstitution != source.NameOfInstitution)
            {
                target.NameOfInstitution = source.NameOfInstitution;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTeacherPreparationProgramIdentifierSupported)
                && target.TeacherPreparationProgramIdentifier != source.TeacherPreparationProgramIdentifier)
            {
                target.TeacherPreparationProgramIdentifier = source.TeacherPreparationProgramIdentifier;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTeacherPreparationProgramTypeDescriptorSupported)
                && target.TeacherPreparationProgramTypeDescriptor != source.TeacherPreparationProgramTypeDescriptor)
            {
                target.TeacherPreparationProgramTypeDescriptor = source.TeacherPreparationProgramTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffTeacherPreparationProgram source, IStaffTeacherPreparationProgram target, Action<IStaffTeacherPreparationProgram, IStaffTeacherPreparationProgram> onMapped)
        {
            var sourceSynchSupport = source as IStaffTeacherPreparationProgramSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffTeacherPreparationProgramSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.TeacherPreparationProgramName = source.TeacherPreparationProgramName;

            // Copy non-PK properties

            if (sourceSynchSupport.IsGPASupported)
                target.GPA = source.GPA;
            else
                targetSynchSupport.IsGPASupported = false;

            if (sourceSynchSupport.IsLevelOfDegreeAwardedDescriptorSupported)
                target.LevelOfDegreeAwardedDescriptor = source.LevelOfDegreeAwardedDescriptor;
            else
                targetSynchSupport.IsLevelOfDegreeAwardedDescriptorSupported = false;

            if (sourceSynchSupport.IsMajorSpecializationSupported)
                target.MajorSpecialization = source.MajorSpecialization;
            else
                targetSynchSupport.IsMajorSpecializationSupported = false;

            if (sourceSynchSupport.IsNameOfInstitutionSupported)
                target.NameOfInstitution = source.NameOfInstitution;
            else
                targetSynchSupport.IsNameOfInstitutionSupported = false;

            if (sourceSynchSupport.IsTeacherPreparationProgramIdentifierSupported)
                target.TeacherPreparationProgramIdentifier = source.TeacherPreparationProgramIdentifier;
            else
                targetSynchSupport.IsTeacherPreparationProgramIdentifierSupported = false;

            if (sourceSynchSupport.IsTeacherPreparationProgramTypeDescriptorSupported)
                target.TeacherPreparationProgramTypeDescriptor = source.TeacherPreparationProgramTypeDescriptor;
            else
                targetSynchSupport.IsTeacherPreparationProgramTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffTeacherPreparationProgramSynchronizationSourceSupport 
    {
        bool IsGPASupported { get; set; }
        bool IsLevelOfDegreeAwardedDescriptorSupported { get; set; }
        bool IsMajorSpecializationSupported { get; set; }
        bool IsNameOfInstitutionSupported { get; set; }
        bool IsTeacherPreparationProgramIdentifierSupported { get; set; }
        bool IsTeacherPreparationProgramTypeDescriptorSupported { get; set; }
    }
 
}
// Aggregate: StaffApplicantAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.StaffApplicantAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffApplicantAssociationMapper 
    {
        public static bool SynchronizeTo(this IStaffApplicantAssociation source, IStaffApplicantAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffApplicantAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ApplicantIdentifier != target.ApplicantIdentifier)
            {
                source.ApplicantIdentifier = target.ApplicantIdentifier;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffApplicantAssociation source, IStaffApplicantAssociation target, Action<IStaffApplicantAssociation, IStaffApplicantAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStaffApplicantAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffApplicantAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ApplicantIdentifier = source.ApplicantIdentifier;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ApplicantResourceId = source.ApplicantResourceId;
                target.ApplicantDiscriminator = source.ApplicantDiscriminator;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffApplicantAssociationSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: StaffEducationOrganizationAssignmentAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.StaffEducationOrganizationAssignmentAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffEducationOrganizationAssignmentAssociationExtensionMapper 
    {
        public static bool SynchronizeTo(this IStaffEducationOrganizationAssignmentAssociationExtension source, IStaffEducationOrganizationAssignmentAssociationExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffEducationOrganizationAssignmentAssociationExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.StaffEducationOrganizationAssignmentAssociation as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsYearsOfExperienceAtCurrentEducationOrganizationSupported)
                && target.YearsOfExperienceAtCurrentEducationOrganization != source.YearsOfExperienceAtCurrentEducationOrganization)
            {
                target.YearsOfExperienceAtCurrentEducationOrganization = source.YearsOfExperienceAtCurrentEducationOrganization;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffEducationOrganizationAssignmentAssociationExtension source, IStaffEducationOrganizationAssignmentAssociationExtension target, Action<IStaffEducationOrganizationAssignmentAssociationExtension, IStaffEducationOrganizationAssignmentAssociationExtension> onMapped)
        {
            var sourceSynchSupport = source as IStaffEducationOrganizationAssignmentAssociationExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffEducationOrganizationAssignmentAssociationExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsYearsOfExperienceAtCurrentEducationOrganizationSupported)
                target.YearsOfExperienceAtCurrentEducationOrganization = source.YearsOfExperienceAtCurrentEducationOrganization;
            else
                targetSynchSupport.IsYearsOfExperienceAtCurrentEducationOrganizationSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffEducationOrganizationAssignmentAssociationExtensionSynchronizationSourceSupport 
    {
        bool IsYearsOfExperienceAtCurrentEducationOrganizationSupported { get; set; }
    }
 
}
// Aggregate: StaffEvaluation

namespace EdFi.Ods.Entities.Common.TPDM //.StaffEvaluationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffEvaluationMapper 
    {
        public static bool SynchronizeTo(this IStaffEvaluation source, IStaffEvaluation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffEvaluationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.StaffEvaluationTitle != target.StaffEvaluationTitle)
            {
                source.StaffEvaluationTitle = target.StaffEvaluationTitle;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsMaxRatingSupported)
                && target.MaxRating != source.MaxRating)
            {
                target.MaxRating = source.MaxRating;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinRatingSupported)
                && target.MinRating != source.MinRating)
            {
                target.MinRating = source.MinRating;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStaffEvaluationPeriodDescriptorSupported)
                && target.StaffEvaluationPeriodDescriptor != source.StaffEvaluationPeriodDescriptor)
            {
                target.StaffEvaluationPeriodDescriptor = source.StaffEvaluationPeriodDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStaffEvaluationTypeDescriptorSupported)
                && target.StaffEvaluationTypeDescriptor != source.StaffEvaluationTypeDescriptor)
            {
                target.StaffEvaluationTypeDescriptor = source.StaffEvaluationTypeDescriptor;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStaffEvaluationStaffRatingLevelsSupported)
            {
                isModified |= 
                    source.StaffEvaluationStaffRatingLevels.SynchronizeCollectionTo(
                        target.StaffEvaluationStaffRatingLevels, 
                        onChildAdded: child => 
                            {
                                child.StaffEvaluation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffEvaluationStaffRatingLevelIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IStaffEvaluation source, IStaffEvaluation target, Action<IStaffEvaluation, IStaffEvaluation> onMapped)
        {
            var sourceSynchSupport = source as IStaffEvaluationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffEvaluationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.SchoolYear = source.SchoolYear;
            target.StaffEvaluationTitle = source.StaffEvaluationTitle;

            // Copy non-PK properties

            if (sourceSynchSupport.IsMaxRatingSupported)
                target.MaxRating = source.MaxRating;
            else
                targetSynchSupport.IsMaxRatingSupported = false;

            if (sourceSynchSupport.IsMinRatingSupported)
                target.MinRating = source.MinRating;
            else
                targetSynchSupport.IsMinRatingSupported = false;

            if (sourceSynchSupport.IsStaffEvaluationPeriodDescriptorSupported)
                target.StaffEvaluationPeriodDescriptor = source.StaffEvaluationPeriodDescriptor;
            else
                targetSynchSupport.IsStaffEvaluationPeriodDescriptorSupported = false;

            if (sourceSynchSupport.IsStaffEvaluationTypeDescriptorSupported)
                target.StaffEvaluationTypeDescriptor = source.StaffEvaluationTypeDescriptor;
            else
                targetSynchSupport.IsStaffEvaluationTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsStaffEvaluationStaffRatingLevelsSupported)
            {    
                targetSynchSupport.IsStaffEvaluationStaffRatingLevelIncluded = sourceSynchSupport.IsStaffEvaluationStaffRatingLevelIncluded;
                source.StaffEvaluationStaffRatingLevels.MapCollectionTo(target.StaffEvaluationStaffRatingLevels, target);
            }
            else
            {
                targetSynchSupport.IsStaffEvaluationStaffRatingLevelsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffEvaluationSynchronizationSourceSupport 
    {
        bool IsMaxRatingSupported { get; set; }
        bool IsMinRatingSupported { get; set; }
        bool IsStaffEvaluationPeriodDescriptorSupported { get; set; }
        bool IsStaffEvaluationStaffRatingLevelsSupported { get; set; }
        bool IsStaffEvaluationTypeDescriptorSupported { get; set; }
        Func<IStaffEvaluationStaffRatingLevel, bool> IsStaffEvaluationStaffRatingLevelIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffEvaluationStaffRatingLevelMapper 
    {
        public static bool SynchronizeTo(this IStaffEvaluationStaffRatingLevel source, IStaffEvaluationStaffRatingLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffEvaluationStaffRatingLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.StaffEvaluationLevel != target.StaffEvaluationLevel)
            {
                source.StaffEvaluationLevel = target.StaffEvaluationLevel;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsMaxLevelSupported)
                && target.MaxLevel != source.MaxLevel)
            {
                target.MaxLevel = source.MaxLevel;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinLevelSupported)
                && target.MinLevel != source.MinLevel)
            {
                target.MinLevel = source.MinLevel;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffEvaluationStaffRatingLevel source, IStaffEvaluationStaffRatingLevel target, Action<IStaffEvaluationStaffRatingLevel, IStaffEvaluationStaffRatingLevel> onMapped)
        {
            var sourceSynchSupport = source as IStaffEvaluationStaffRatingLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffEvaluationStaffRatingLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.StaffEvaluationLevel = source.StaffEvaluationLevel;

            // Copy non-PK properties

            if (sourceSynchSupport.IsMaxLevelSupported)
                target.MaxLevel = source.MaxLevel;
            else
                targetSynchSupport.IsMaxLevelSupported = false;

            if (sourceSynchSupport.IsMinLevelSupported)
                target.MinLevel = source.MinLevel;
            else
                targetSynchSupport.IsMinLevelSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffEvaluationStaffRatingLevelSynchronizationSourceSupport 
    {
        bool IsMaxLevelSupported { get; set; }
        bool IsMinLevelSupported { get; set; }
    }
 
}
// Aggregate: StaffEvaluationComponent

namespace EdFi.Ods.Entities.Common.TPDM //.StaffEvaluationComponentAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffEvaluationComponentMapper 
    {
        public static bool SynchronizeTo(this IStaffEvaluationComponent source, IStaffEvaluationComponent target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffEvaluationComponentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EvaluationComponent != target.EvaluationComponent)
            {
                source.EvaluationComponent = target.EvaluationComponent;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.StaffEvaluationTitle != target.StaffEvaluationTitle)
            {
                source.StaffEvaluationTitle = target.StaffEvaluationTitle;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsMaxRatingSupported)
                && target.MaxRating != source.MaxRating)
            {
                target.MaxRating = source.MaxRating;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinRatingSupported)
                && target.MinRating != source.MinRating)
            {
                target.MinRating = source.MinRating;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRubricReferenceSupported)
                && target.RubricReference != source.RubricReference)
            {
                target.RubricReference = source.RubricReference;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStaffEvaluationTypeDescriptorSupported)
                && target.StaffEvaluationTypeDescriptor != source.StaffEvaluationTypeDescriptor)
            {
                target.StaffEvaluationTypeDescriptor = source.StaffEvaluationTypeDescriptor;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStaffEvaluationComponentStaffRatingLevelsSupported)
            {
                isModified |= 
                    source.StaffEvaluationComponentStaffRatingLevels.SynchronizeCollectionTo(
                        target.StaffEvaluationComponentStaffRatingLevels, 
                        onChildAdded: child => 
                            {
                                child.StaffEvaluationComponent = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffEvaluationComponentStaffRatingLevelIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IStaffEvaluationComponent source, IStaffEvaluationComponent target, Action<IStaffEvaluationComponent, IStaffEvaluationComponent> onMapped)
        {
            var sourceSynchSupport = source as IStaffEvaluationComponentSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffEvaluationComponentSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EvaluationComponent = source.EvaluationComponent;
            target.SchoolYear = source.SchoolYear;
            target.StaffEvaluationTitle = source.StaffEvaluationTitle;

            // Copy non-PK properties

            if (sourceSynchSupport.IsMaxRatingSupported)
                target.MaxRating = source.MaxRating;
            else
                targetSynchSupport.IsMaxRatingSupported = false;

            if (sourceSynchSupport.IsMinRatingSupported)
                target.MinRating = source.MinRating;
            else
                targetSynchSupport.IsMinRatingSupported = false;

            if (sourceSynchSupport.IsRubricReferenceSupported)
                target.RubricReference = source.RubricReference;
            else
                targetSynchSupport.IsRubricReferenceSupported = false;

            if (sourceSynchSupport.IsStaffEvaluationTypeDescriptorSupported)
                target.StaffEvaluationTypeDescriptor = source.StaffEvaluationTypeDescriptor;
            else
                targetSynchSupport.IsStaffEvaluationTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StaffEvaluationResourceId = source.StaffEvaluationResourceId;
                target.StaffEvaluationDiscriminator = source.StaffEvaluationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsStaffEvaluationComponentStaffRatingLevelsSupported)
            {    
                targetSynchSupport.IsStaffEvaluationComponentStaffRatingLevelIncluded = sourceSynchSupport.IsStaffEvaluationComponentStaffRatingLevelIncluded;
                source.StaffEvaluationComponentStaffRatingLevels.MapCollectionTo(target.StaffEvaluationComponentStaffRatingLevels, target);
            }
            else
            {
                targetSynchSupport.IsStaffEvaluationComponentStaffRatingLevelsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffEvaluationComponentSynchronizationSourceSupport 
    {
        bool IsMaxRatingSupported { get; set; }
        bool IsMinRatingSupported { get; set; }
        bool IsRubricReferenceSupported { get; set; }
        bool IsStaffEvaluationComponentStaffRatingLevelsSupported { get; set; }
        bool IsStaffEvaluationTypeDescriptorSupported { get; set; }
        Func<IStaffEvaluationComponentStaffRatingLevel, bool> IsStaffEvaluationComponentStaffRatingLevelIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffEvaluationComponentStaffRatingLevelMapper 
    {
        public static bool SynchronizeTo(this IStaffEvaluationComponentStaffRatingLevel source, IStaffEvaluationComponentStaffRatingLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffEvaluationComponentStaffRatingLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.StaffEvaluationLevel != target.StaffEvaluationLevel)
            {
                source.StaffEvaluationLevel = target.StaffEvaluationLevel;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsMaxLevelSupported)
                && target.MaxLevel != source.MaxLevel)
            {
                target.MaxLevel = source.MaxLevel;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinLevelSupported)
                && target.MinLevel != source.MinLevel)
            {
                target.MinLevel = source.MinLevel;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffEvaluationComponentStaffRatingLevel source, IStaffEvaluationComponentStaffRatingLevel target, Action<IStaffEvaluationComponentStaffRatingLevel, IStaffEvaluationComponentStaffRatingLevel> onMapped)
        {
            var sourceSynchSupport = source as IStaffEvaluationComponentStaffRatingLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffEvaluationComponentStaffRatingLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.StaffEvaluationLevel = source.StaffEvaluationLevel;

            // Copy non-PK properties

            if (sourceSynchSupport.IsMaxLevelSupported)
                target.MaxLevel = source.MaxLevel;
            else
                targetSynchSupport.IsMaxLevelSupported = false;

            if (sourceSynchSupport.IsMinLevelSupported)
                target.MinLevel = source.MinLevel;
            else
                targetSynchSupport.IsMinLevelSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffEvaluationComponentStaffRatingLevelSynchronizationSourceSupport 
    {
        bool IsMaxLevelSupported { get; set; }
        bool IsMinLevelSupported { get; set; }
    }
 
}
// Aggregate: StaffEvaluationComponentRating

namespace EdFi.Ods.Entities.Common.TPDM //.StaffEvaluationComponentRatingAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffEvaluationComponentRatingMapper 
    {
        public static bool SynchronizeTo(this IStaffEvaluationComponentRating source, IStaffEvaluationComponentRating target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffEvaluationComponentRatingSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ComponentRating != target.ComponentRating)
            {
                source.ComponentRating = target.ComponentRating;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EvaluationComponent != target.EvaluationComponent)
            {
                source.EvaluationComponent = target.EvaluationComponent;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.StaffEvaluationDate != target.StaffEvaluationDate)
            {
                source.StaffEvaluationDate = target.StaffEvaluationDate;
            }
            if (source.StaffEvaluationTitle != target.StaffEvaluationTitle)
            {
                source.StaffEvaluationTitle = target.StaffEvaluationTitle;
            }
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsStaffEvaluationRatingLevelDescriptorSupported)
                && target.StaffEvaluationRatingLevelDescriptor != source.StaffEvaluationRatingLevelDescriptor)
            {
                target.StaffEvaluationRatingLevelDescriptor = source.StaffEvaluationRatingLevelDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffEvaluationComponentRating source, IStaffEvaluationComponentRating target, Action<IStaffEvaluationComponentRating, IStaffEvaluationComponentRating> onMapped)
        {
            var sourceSynchSupport = source as IStaffEvaluationComponentRatingSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffEvaluationComponentRatingSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ComponentRating = source.ComponentRating;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EvaluationComponent = source.EvaluationComponent;
            target.SchoolYear = source.SchoolYear;
            target.StaffEvaluationDate = source.StaffEvaluationDate;
            target.StaffEvaluationTitle = source.StaffEvaluationTitle;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsStaffEvaluationRatingLevelDescriptorSupported)
                target.StaffEvaluationRatingLevelDescriptor = source.StaffEvaluationRatingLevelDescriptor;
            else
                targetSynchSupport.IsStaffEvaluationRatingLevelDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StaffEvaluationComponentResourceId = source.StaffEvaluationComponentResourceId;
                target.StaffEvaluationComponentDiscriminator = source.StaffEvaluationComponentDiscriminator;
                target.StaffEvaluationRatingResourceId = source.StaffEvaluationRatingResourceId;
                target.StaffEvaluationRatingDiscriminator = source.StaffEvaluationRatingDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffEvaluationComponentRatingSynchronizationSourceSupport 
    {
        bool IsStaffEvaluationRatingLevelDescriptorSupported { get; set; }
    }
 
}
// Aggregate: StaffEvaluationElement

namespace EdFi.Ods.Entities.Common.TPDM //.StaffEvaluationElementAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffEvaluationElementMapper 
    {
        public static bool SynchronizeTo(this IStaffEvaluationElement source, IStaffEvaluationElement target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffEvaluationElementSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EvaluationComponent != target.EvaluationComponent)
            {
                source.EvaluationComponent = target.EvaluationComponent;
            }
            if (source.EvaluationElement != target.EvaluationElement)
            {
                source.EvaluationElement = target.EvaluationElement;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.StaffEvaluationTitle != target.StaffEvaluationTitle)
            {
                source.StaffEvaluationTitle = target.StaffEvaluationTitle;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsMaxRatingSupported)
                && target.MaxRating != source.MaxRating)
            {
                target.MaxRating = source.MaxRating;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinRatingSupported)
                && target.MinRating != source.MinRating)
            {
                target.MinRating = source.MinRating;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRubricReferenceSupported)
                && target.RubricReference != source.RubricReference)
            {
                target.RubricReference = source.RubricReference;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStaffEvaluationElementStaffRatingLevelsSupported)
            {
                isModified |= 
                    source.StaffEvaluationElementStaffRatingLevels.SynchronizeCollectionTo(
                        target.StaffEvaluationElementStaffRatingLevels, 
                        onChildAdded: child => 
                            {
                                child.StaffEvaluationElement = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffEvaluationElementStaffRatingLevelIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IStaffEvaluationElement source, IStaffEvaluationElement target, Action<IStaffEvaluationElement, IStaffEvaluationElement> onMapped)
        {
            var sourceSynchSupport = source as IStaffEvaluationElementSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffEvaluationElementSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EvaluationComponent = source.EvaluationComponent;
            target.EvaluationElement = source.EvaluationElement;
            target.SchoolYear = source.SchoolYear;
            target.StaffEvaluationTitle = source.StaffEvaluationTitle;

            // Copy non-PK properties

            if (sourceSynchSupport.IsMaxRatingSupported)
                target.MaxRating = source.MaxRating;
            else
                targetSynchSupport.IsMaxRatingSupported = false;

            if (sourceSynchSupport.IsMinRatingSupported)
                target.MinRating = source.MinRating;
            else
                targetSynchSupport.IsMinRatingSupported = false;

            if (sourceSynchSupport.IsRubricReferenceSupported)
                target.RubricReference = source.RubricReference;
            else
                targetSynchSupport.IsRubricReferenceSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StaffEvaluationComponentResourceId = source.StaffEvaluationComponentResourceId;
                target.StaffEvaluationComponentDiscriminator = source.StaffEvaluationComponentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsStaffEvaluationElementStaffRatingLevelsSupported)
            {    
                targetSynchSupport.IsStaffEvaluationElementStaffRatingLevelIncluded = sourceSynchSupport.IsStaffEvaluationElementStaffRatingLevelIncluded;
                source.StaffEvaluationElementStaffRatingLevels.MapCollectionTo(target.StaffEvaluationElementStaffRatingLevels, target);
            }
            else
            {
                targetSynchSupport.IsStaffEvaluationElementStaffRatingLevelsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffEvaluationElementSynchronizationSourceSupport 
    {
        bool IsMaxRatingSupported { get; set; }
        bool IsMinRatingSupported { get; set; }
        bool IsRubricReferenceSupported { get; set; }
        bool IsStaffEvaluationElementStaffRatingLevelsSupported { get; set; }
        Func<IStaffEvaluationElementStaffRatingLevel, bool> IsStaffEvaluationElementStaffRatingLevelIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffEvaluationElementStaffRatingLevelMapper 
    {
        public static bool SynchronizeTo(this IStaffEvaluationElementStaffRatingLevel source, IStaffEvaluationElementStaffRatingLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffEvaluationElementStaffRatingLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.StaffEvaluationLevel != target.StaffEvaluationLevel)
            {
                source.StaffEvaluationLevel = target.StaffEvaluationLevel;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsMaxLevelSupported)
                && target.MaxLevel != source.MaxLevel)
            {
                target.MaxLevel = source.MaxLevel;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinLevelSupported)
                && target.MinLevel != source.MinLevel)
            {
                target.MinLevel = source.MinLevel;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffEvaluationElementStaffRatingLevel source, IStaffEvaluationElementStaffRatingLevel target, Action<IStaffEvaluationElementStaffRatingLevel, IStaffEvaluationElementStaffRatingLevel> onMapped)
        {
            var sourceSynchSupport = source as IStaffEvaluationElementStaffRatingLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffEvaluationElementStaffRatingLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.StaffEvaluationLevel = source.StaffEvaluationLevel;

            // Copy non-PK properties

            if (sourceSynchSupport.IsMaxLevelSupported)
                target.MaxLevel = source.MaxLevel;
            else
                targetSynchSupport.IsMaxLevelSupported = false;

            if (sourceSynchSupport.IsMinLevelSupported)
                target.MinLevel = source.MinLevel;
            else
                targetSynchSupport.IsMinLevelSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffEvaluationElementStaffRatingLevelSynchronizationSourceSupport 
    {
        bool IsMaxLevelSupported { get; set; }
        bool IsMinLevelSupported { get; set; }
    }
 
}
// Aggregate: StaffEvaluationElementRating

namespace EdFi.Ods.Entities.Common.TPDM //.StaffEvaluationElementRatingAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffEvaluationElementRatingMapper 
    {
        public static bool SynchronizeTo(this IStaffEvaluationElementRating source, IStaffEvaluationElementRating target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffEvaluationElementRatingSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EvaluationComponent != target.EvaluationComponent)
            {
                source.EvaluationComponent = target.EvaluationComponent;
            }
            if (source.EvaluationElement != target.EvaluationElement)
            {
                source.EvaluationElement = target.EvaluationElement;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.StaffEvaluationDate != target.StaffEvaluationDate)
            {
                source.StaffEvaluationDate = target.StaffEvaluationDate;
            }
            if (source.StaffEvaluationTitle != target.StaffEvaluationTitle)
            {
                source.StaffEvaluationTitle = target.StaffEvaluationTitle;
            }
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsElementRatingSupported)
                && target.ElementRating != source.ElementRating)
            {
                target.ElementRating = source.ElementRating;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStaffEvaluationRatingLevelDescriptorSupported)
                && target.StaffEvaluationRatingLevelDescriptor != source.StaffEvaluationRatingLevelDescriptor)
            {
                target.StaffEvaluationRatingLevelDescriptor = source.StaffEvaluationRatingLevelDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffEvaluationElementRating source, IStaffEvaluationElementRating target, Action<IStaffEvaluationElementRating, IStaffEvaluationElementRating> onMapped)
        {
            var sourceSynchSupport = source as IStaffEvaluationElementRatingSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffEvaluationElementRatingSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EvaluationComponent = source.EvaluationComponent;
            target.EvaluationElement = source.EvaluationElement;
            target.SchoolYear = source.SchoolYear;
            target.StaffEvaluationDate = source.StaffEvaluationDate;
            target.StaffEvaluationTitle = source.StaffEvaluationTitle;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsElementRatingSupported)
                target.ElementRating = source.ElementRating;
            else
                targetSynchSupport.IsElementRatingSupported = false;

            if (sourceSynchSupport.IsStaffEvaluationRatingLevelDescriptorSupported)
                target.StaffEvaluationRatingLevelDescriptor = source.StaffEvaluationRatingLevelDescriptor;
            else
                targetSynchSupport.IsStaffEvaluationRatingLevelDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StaffEvaluationElementResourceId = source.StaffEvaluationElementResourceId;
                target.StaffEvaluationElementDiscriminator = source.StaffEvaluationElementDiscriminator;
                target.StaffEvaluationRatingResourceId = source.StaffEvaluationRatingResourceId;
                target.StaffEvaluationRatingDiscriminator = source.StaffEvaluationRatingDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffEvaluationElementRatingSynchronizationSourceSupport 
    {
        bool IsElementRatingSupported { get; set; }
        bool IsStaffEvaluationRatingLevelDescriptorSupported { get; set; }
    }
 
}
// Aggregate: StaffEvaluationPeriodDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.StaffEvaluationPeriodDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffEvaluationPeriodDescriptorMapper 
    {
        public static bool SynchronizeTo(this IStaffEvaluationPeriodDescriptor source, IStaffEvaluationPeriodDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffEvaluationPeriodDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.StaffEvaluationPeriodDescriptorId != target.StaffEvaluationPeriodDescriptorId)
            {
                source.StaffEvaluationPeriodDescriptorId = target.StaffEvaluationPeriodDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffEvaluationPeriodDescriptor source, IStaffEvaluationPeriodDescriptor target, Action<IStaffEvaluationPeriodDescriptor, IStaffEvaluationPeriodDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IStaffEvaluationPeriodDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffEvaluationPeriodDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.StaffEvaluationPeriodDescriptorId = source.StaffEvaluationPeriodDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffEvaluationPeriodDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: StaffEvaluationRating

namespace EdFi.Ods.Entities.Common.TPDM //.StaffEvaluationRatingAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffEvaluationRatingMapper 
    {
        public static bool SynchronizeTo(this IStaffEvaluationRating source, IStaffEvaluationRating target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffEvaluationRatingSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.StaffEvaluationDate != target.StaffEvaluationDate)
            {
                source.StaffEvaluationDate = target.StaffEvaluationDate;
            }
            if (source.StaffEvaluationTitle != target.StaffEvaluationTitle)
            {
                source.StaffEvaluationTitle = target.StaffEvaluationTitle;
            }
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEvaluatedByStaffUniqueIdSupported)
                && target.EvaluatedByStaffUniqueId != source.EvaluatedByStaffUniqueId)
            {
                target.EvaluatedByStaffUniqueId = source.EvaluatedByStaffUniqueId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRatingSupported)
                && target.Rating != source.Rating)
            {
                target.Rating = source.Rating;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStaffEvaluationRatingLevelDescriptorSupported)
                && target.StaffEvaluationRatingLevelDescriptor != source.StaffEvaluationRatingLevelDescriptor)
            {
                target.StaffEvaluationRatingLevelDescriptor = source.StaffEvaluationRatingLevelDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffEvaluationRating source, IStaffEvaluationRating target, Action<IStaffEvaluationRating, IStaffEvaluationRating> onMapped)
        {
            var sourceSynchSupport = source as IStaffEvaluationRatingSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffEvaluationRatingSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.SchoolYear = source.SchoolYear;
            target.StaffEvaluationDate = source.StaffEvaluationDate;
            target.StaffEvaluationTitle = source.StaffEvaluationTitle;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEvaluatedByStaffUniqueIdSupported)
                target.EvaluatedByStaffUniqueId = source.EvaluatedByStaffUniqueId;
            else
                targetSynchSupport.IsEvaluatedByStaffUniqueIdSupported = false;

            if (sourceSynchSupport.IsRatingSupported)
                target.Rating = source.Rating;
            else
                targetSynchSupport.IsRatingSupported = false;

            if (sourceSynchSupport.IsStaffEvaluationRatingLevelDescriptorSupported)
                target.StaffEvaluationRatingLevelDescriptor = source.StaffEvaluationRatingLevelDescriptor;
            else
                targetSynchSupport.IsStaffEvaluationRatingLevelDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EvaluatedByStaffResourceId = source.EvaluatedByStaffResourceId;
                target.EvaluatedByStaffDiscriminator = source.EvaluatedByStaffDiscriminator;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
                target.StaffEvaluationResourceId = source.StaffEvaluationResourceId;
                target.StaffEvaluationDiscriminator = source.StaffEvaluationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffEvaluationRatingSynchronizationSourceSupport 
    {
        bool IsEvaluatedByStaffUniqueIdSupported { get; set; }
        bool IsRatingSupported { get; set; }
        bool IsStaffEvaluationRatingLevelDescriptorSupported { get; set; }
    }
 
}
// Aggregate: StaffEvaluationRatingLevelDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.StaffEvaluationRatingLevelDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffEvaluationRatingLevelDescriptorMapper 
    {
        public static bool SynchronizeTo(this IStaffEvaluationRatingLevelDescriptor source, IStaffEvaluationRatingLevelDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffEvaluationRatingLevelDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.StaffEvaluationRatingLevelDescriptorId != target.StaffEvaluationRatingLevelDescriptorId)
            {
                source.StaffEvaluationRatingLevelDescriptorId = target.StaffEvaluationRatingLevelDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffEvaluationRatingLevelDescriptor source, IStaffEvaluationRatingLevelDescriptor target, Action<IStaffEvaluationRatingLevelDescriptor, IStaffEvaluationRatingLevelDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IStaffEvaluationRatingLevelDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffEvaluationRatingLevelDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.StaffEvaluationRatingLevelDescriptorId = source.StaffEvaluationRatingLevelDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffEvaluationRatingLevelDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: StaffEvaluationTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.StaffEvaluationTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffEvaluationTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IStaffEvaluationTypeDescriptor source, IStaffEvaluationTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffEvaluationTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.StaffEvaluationTypeDescriptorId != target.StaffEvaluationTypeDescriptorId)
            {
                source.StaffEvaluationTypeDescriptorId = target.StaffEvaluationTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffEvaluationTypeDescriptor source, IStaffEvaluationTypeDescriptor target, Action<IStaffEvaluationTypeDescriptor, IStaffEvaluationTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IStaffEvaluationTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffEvaluationTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.StaffEvaluationTypeDescriptorId = source.StaffEvaluationTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffEvaluationTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: StaffFieldworkAbsenceEvent

namespace EdFi.Ods.Entities.Common.TPDM //.StaffFieldworkAbsenceEventAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffFieldworkAbsenceEventMapper 
    {
        public static bool SynchronizeTo(this IStaffFieldworkAbsenceEvent source, IStaffFieldworkAbsenceEvent target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffFieldworkAbsenceEventSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AbsenceEventCategoryDescriptor != target.AbsenceEventCategoryDescriptor)
            {
                source.AbsenceEventCategoryDescriptor = target.AbsenceEventCategoryDescriptor;
            }
            if (source.EventDate != target.EventDate)
            {
                source.EventDate = target.EventDate;
            }
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAbsenceEventReasonSupported)
                && target.AbsenceEventReason != source.AbsenceEventReason)
            {
                target.AbsenceEventReason = source.AbsenceEventReason;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHoursAbsentSupported)
                && target.HoursAbsent != source.HoursAbsent)
            {
                target.HoursAbsent = source.HoursAbsent;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffFieldworkAbsenceEvent source, IStaffFieldworkAbsenceEvent target, Action<IStaffFieldworkAbsenceEvent, IStaffFieldworkAbsenceEvent> onMapped)
        {
            var sourceSynchSupport = source as IStaffFieldworkAbsenceEventSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffFieldworkAbsenceEventSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AbsenceEventCategoryDescriptor = source.AbsenceEventCategoryDescriptor;
            target.EventDate = source.EventDate;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAbsenceEventReasonSupported)
                target.AbsenceEventReason = source.AbsenceEventReason;
            else
                targetSynchSupport.IsAbsenceEventReasonSupported = false;

            if (sourceSynchSupport.IsHoursAbsentSupported)
                target.HoursAbsent = source.HoursAbsent;
            else
                targetSynchSupport.IsHoursAbsentSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffFieldworkAbsenceEventSynchronizationSourceSupport 
    {
        bool IsAbsenceEventReasonSupported { get; set; }
        bool IsHoursAbsentSupported { get; set; }
    }
 
}
// Aggregate: StaffFieldworkExperience

namespace EdFi.Ods.Entities.Common.TPDM //.StaffFieldworkExperienceAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffFieldworkExperienceMapper 
    {
        public static bool SynchronizeTo(this IStaffFieldworkExperience source, IStaffFieldworkExperience target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffFieldworkExperienceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.FieldworkIdentifier != target.FieldworkIdentifier)
            {
                source.FieldworkIdentifier = target.FieldworkIdentifier;
            }
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFieldworkTypeDescriptorSupported)
                && target.FieldworkTypeDescriptor != source.FieldworkTypeDescriptor)
            {
                target.FieldworkTypeDescriptor = source.FieldworkTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHoursCompletedSupported)
                && target.HoursCompleted != source.HoursCompleted)
            {
                target.HoursCompleted = source.HoursCompleted;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProgramGatewayDescriptorSupported)
                && target.ProgramGatewayDescriptor != source.ProgramGatewayDescriptor)
            {
                target.ProgramGatewayDescriptor = source.ProgramGatewayDescriptor;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // StaffFieldworkExperienceCoteaching
            if (sourceSupport == null || sourceSupport.IsStaffFieldworkExperienceCoteachingSupported)
            {
                if (source.StaffFieldworkExperienceCoteaching == null)
                {
                    if (target.StaffFieldworkExperienceCoteaching != null)
                    {
                        target.StaffFieldworkExperienceCoteaching = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.StaffFieldworkExperienceCoteaching == null)
                    {
                        var itemType = target.GetType().GetProperty("StaffFieldworkExperienceCoteaching").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.StaffFieldworkExperienceCoteaching = (IStaffFieldworkExperienceCoteaching) newItem;
                    }

                    isModified |= source.StaffFieldworkExperienceCoteaching.Synchronize(target.StaffFieldworkExperienceCoteaching);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStaffFieldworkExperienceSchoolsSupported)
            {
                isModified |= 
                    source.StaffFieldworkExperienceSchools.SynchronizeCollectionTo(
                        target.StaffFieldworkExperienceSchools, 
                        onChildAdded: child => 
                            {
                                child.StaffFieldworkExperience = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffFieldworkExperienceSchoolIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IStaffFieldworkExperience source, IStaffFieldworkExperience target, Action<IStaffFieldworkExperience, IStaffFieldworkExperience> onMapped)
        {
            var sourceSynchSupport = source as IStaffFieldworkExperienceSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffFieldworkExperienceSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.FieldworkIdentifier = source.FieldworkIdentifier;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsFieldworkTypeDescriptorSupported)
                target.FieldworkTypeDescriptor = source.FieldworkTypeDescriptor;
            else
                targetSynchSupport.IsFieldworkTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsHoursCompletedSupported)
                target.HoursCompleted = source.HoursCompleted;
            else
                targetSynchSupport.IsHoursCompletedSupported = false;

            if (sourceSynchSupport.IsProgramGatewayDescriptorSupported)
                target.ProgramGatewayDescriptor = source.ProgramGatewayDescriptor;
            else
                targetSynchSupport.IsProgramGatewayDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // StaffFieldworkExperienceCoteaching (Source)
            if (sourceSynchSupport.IsStaffFieldworkExperienceCoteachingSupported)
            {
                var itemProperty = target.GetType().GetProperty("StaffFieldworkExperienceCoteaching");
                
                if (itemProperty != null)
                {                    
                    if (source.StaffFieldworkExperienceCoteaching == null)
                    {
                        target.StaffFieldworkExperienceCoteaching = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetStaffFieldworkExperienceCoteaching = Activator.CreateInstance(itemType);
                        (targetStaffFieldworkExperienceCoteaching as IChildEntity)?.SetParent(target);
                        source.StaffFieldworkExperienceCoteaching.Map(targetStaffFieldworkExperienceCoteaching);
                        
                        // Update the target reference appropriately
                        target.StaffFieldworkExperienceCoteaching = (IStaffFieldworkExperienceCoteaching) targetStaffFieldworkExperienceCoteaching;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsStaffFieldworkExperienceCoteachingSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists

            if (sourceSynchSupport.IsStaffFieldworkExperienceSchoolsSupported)
            {    
                targetSynchSupport.IsStaffFieldworkExperienceSchoolIncluded = sourceSynchSupport.IsStaffFieldworkExperienceSchoolIncluded;
                source.StaffFieldworkExperienceSchools.MapCollectionTo(target.StaffFieldworkExperienceSchools, target);
            }
            else
            {
                targetSynchSupport.IsStaffFieldworkExperienceSchoolsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffFieldworkExperienceSynchronizationSourceSupport 
    {
        bool IsEndDateSupported { get; set; }
        bool IsFieldworkTypeDescriptorSupported { get; set; }
        bool IsHoursCompletedSupported { get; set; }
        bool IsProgramGatewayDescriptorSupported { get; set; }
        bool IsStaffFieldworkExperienceCoteachingSupported { get; set; }
        bool IsStaffFieldworkExperienceSchoolsSupported { get; set; }
        Func<IStaffFieldworkExperienceSchool, bool> IsStaffFieldworkExperienceSchoolIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffFieldworkExperienceCoteachingMapper 
    {
        public static bool SynchronizeTo(this IStaffFieldworkExperienceCoteaching source, IStaffFieldworkExperienceCoteaching target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffFieldworkExperienceCoteachingSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCoteachingBeginDateSupported)
                && target.CoteachingBeginDate != source.CoteachingBeginDate)
            {
                target.CoteachingBeginDate = source.CoteachingBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCoteachingEndDateSupported)
                && target.CoteachingEndDate != source.CoteachingEndDate)
            {
                target.CoteachingEndDate = source.CoteachingEndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffFieldworkExperienceCoteaching source, IStaffFieldworkExperienceCoteaching target, Action<IStaffFieldworkExperienceCoteaching, IStaffFieldworkExperienceCoteaching> onMapped)
        {
            var sourceSynchSupport = source as IStaffFieldworkExperienceCoteachingSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffFieldworkExperienceCoteachingSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsCoteachingBeginDateSupported)
                target.CoteachingBeginDate = source.CoteachingBeginDate;
            else
                targetSynchSupport.IsCoteachingBeginDateSupported = false;

            if (sourceSynchSupport.IsCoteachingEndDateSupported)
                target.CoteachingEndDate = source.CoteachingEndDate;
            else
                targetSynchSupport.IsCoteachingEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffFieldworkExperienceCoteachingSynchronizationSourceSupport 
    {
        bool IsCoteachingBeginDateSupported { get; set; }
        bool IsCoteachingEndDateSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffFieldworkExperienceSchoolMapper 
    {
        public static bool SynchronizeTo(this IStaffFieldworkExperienceSchool source, IStaffFieldworkExperienceSchool target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffFieldworkExperienceSchoolSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffFieldworkExperienceSchool source, IStaffFieldworkExperienceSchool target, Action<IStaffFieldworkExperienceSchool, IStaffFieldworkExperienceSchool> onMapped)
        {
            var sourceSynchSupport = source as IStaffFieldworkExperienceSchoolSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffFieldworkExperienceSchoolSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.SchoolId = source.SchoolId;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolResourceId = source.SchoolResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffFieldworkExperienceSchoolSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: StaffFieldworkExperienceSectionAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.StaffFieldworkExperienceSectionAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffFieldworkExperienceSectionAssociationMapper 
    {
        public static bool SynchronizeTo(this IStaffFieldworkExperienceSectionAssociation source, IStaffFieldworkExperienceSectionAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffFieldworkExperienceSectionAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.FieldworkIdentifier != target.FieldworkIdentifier)
            {
                source.FieldworkIdentifier = target.FieldworkIdentifier;
            }
            if (source.LocalCourseCode != target.LocalCourseCode)
            {
                source.LocalCourseCode = target.LocalCourseCode;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SectionIdentifier != target.SectionIdentifier)
            {
                source.SectionIdentifier = target.SectionIdentifier;
            }
            if (source.SessionName != target.SessionName)
            {
                source.SessionName = target.SessionName;
            }
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffFieldworkExperienceSectionAssociation source, IStaffFieldworkExperienceSectionAssociation target, Action<IStaffFieldworkExperienceSectionAssociation, IStaffFieldworkExperienceSectionAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStaffFieldworkExperienceSectionAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffFieldworkExperienceSectionAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.FieldworkIdentifier = source.FieldworkIdentifier;
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SectionResourceId = source.SectionResourceId;
                target.SectionDiscriminator = source.SectionDiscriminator;
                target.StaffFieldworkExperienceResourceId = source.StaffFieldworkExperienceResourceId;
                target.StaffFieldworkExperienceDiscriminator = source.StaffFieldworkExperienceDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffFieldworkExperienceSectionAssociationSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: StaffProfessionalDevelopmentEventAttendance

namespace EdFi.Ods.Entities.Common.TPDM //.StaffProfessionalDevelopmentEventAttendanceAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffProfessionalDevelopmentEventAttendanceMapper 
    {
        public static bool SynchronizeTo(this IStaffProfessionalDevelopmentEventAttendance source, IStaffProfessionalDevelopmentEventAttendance target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffProfessionalDevelopmentEventAttendanceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AttendanceDate != target.AttendanceDate)
            {
                source.AttendanceDate = target.AttendanceDate;
            }
            if (source.ProfessionalDevelopmentTitle != target.ProfessionalDevelopmentTitle)
            {
                source.ProfessionalDevelopmentTitle = target.ProfessionalDevelopmentTitle;
            }
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAttendanceEventCategoryDescriptorSupported)
                && target.AttendanceEventCategoryDescriptor != source.AttendanceEventCategoryDescriptor)
            {
                target.AttendanceEventCategoryDescriptor = source.AttendanceEventCategoryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAttendanceEventReasonSupported)
                && target.AttendanceEventReason != source.AttendanceEventReason)
            {
                target.AttendanceEventReason = source.AttendanceEventReason;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffProfessionalDevelopmentEventAttendance source, IStaffProfessionalDevelopmentEventAttendance target, Action<IStaffProfessionalDevelopmentEventAttendance, IStaffProfessionalDevelopmentEventAttendance> onMapped)
        {
            var sourceSynchSupport = source as IStaffProfessionalDevelopmentEventAttendanceSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffProfessionalDevelopmentEventAttendanceSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AttendanceDate = source.AttendanceDate;
            target.ProfessionalDevelopmentTitle = source.ProfessionalDevelopmentTitle;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAttendanceEventCategoryDescriptorSupported)
                target.AttendanceEventCategoryDescriptor = source.AttendanceEventCategoryDescriptor;
            else
                targetSynchSupport.IsAttendanceEventCategoryDescriptorSupported = false;

            if (sourceSynchSupport.IsAttendanceEventReasonSupported)
                target.AttendanceEventReason = source.AttendanceEventReason;
            else
                targetSynchSupport.IsAttendanceEventReasonSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ProfessionalDevelopmentEventResourceId = source.ProfessionalDevelopmentEventResourceId;
                target.ProfessionalDevelopmentEventDiscriminator = source.ProfessionalDevelopmentEventDiscriminator;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffProfessionalDevelopmentEventAttendanceSynchronizationSourceSupport 
    {
        bool IsAttendanceEventCategoryDescriptorSupported { get; set; }
        bool IsAttendanceEventReasonSupported { get; set; }
    }
 
}
// Aggregate: StaffProspectAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.StaffProspectAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffProspectAssociationMapper 
    {
        public static bool SynchronizeTo(this IStaffProspectAssociation source, IStaffProspectAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffProspectAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.ProspectIdentifier != target.ProspectIdentifier)
            {
                source.ProspectIdentifier = target.ProspectIdentifier;
            }
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffProspectAssociation source, IStaffProspectAssociation target, Action<IStaffProspectAssociation, IStaffProspectAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStaffProspectAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffProspectAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProspectIdentifier = source.ProspectIdentifier;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ProspectResourceId = source.ProspectResourceId;
                target.ProspectDiscriminator = source.ProspectDiscriminator;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffProspectAssociationSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: StaffStudentGrowthMeasure

namespace EdFi.Ods.Entities.Common.TPDM //.StaffStudentGrowthMeasureAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffStudentGrowthMeasureMapper 
    {
        public static bool SynchronizeTo(this IStaffStudentGrowthMeasure source, IStaffStudentGrowthMeasure target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffStudentGrowthMeasureSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.FactAsOfDate != target.FactAsOfDate)
            {
                source.FactAsOfDate = target.FactAsOfDate;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.StaffStudentGrowthMeasureIdentifier != target.StaffStudentGrowthMeasureIdentifier)
            {
                source.StaffStudentGrowthMeasureIdentifier = target.StaffStudentGrowthMeasureIdentifier;
            }
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsResultDatatypeTypeDescriptorSupported)
                && target.ResultDatatypeTypeDescriptor != source.ResultDatatypeTypeDescriptor)
            {
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStandardErrorSupported)
                && target.StandardError != source.StandardError)
            {
                target.StandardError = source.StandardError;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStudentGrowthActualScoreSupported)
                && target.StudentGrowthActualScore != source.StudentGrowthActualScore)
            {
                target.StudentGrowthActualScore = source.StudentGrowthActualScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStudentGrowthMeasureDateSupported)
                && target.StudentGrowthMeasureDate != source.StudentGrowthMeasureDate)
            {
                target.StudentGrowthMeasureDate = source.StudentGrowthMeasureDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStudentGrowthMetSupported)
                && target.StudentGrowthMet != source.StudentGrowthMet)
            {
                target.StudentGrowthMet = source.StudentGrowthMet;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStudentGrowthNCountSupported)
                && target.StudentGrowthNCount != source.StudentGrowthNCount)
            {
                target.StudentGrowthNCount = source.StudentGrowthNCount;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStudentGrowthTargetScoreSupported)
                && target.StudentGrowthTargetScore != source.StudentGrowthTargetScore)
            {
                target.StudentGrowthTargetScore = source.StudentGrowthTargetScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStudentGrowthTypeDescriptorSupported)
                && target.StudentGrowthTypeDescriptor != source.StudentGrowthTypeDescriptor)
            {
                target.StudentGrowthTypeDescriptor = source.StudentGrowthTypeDescriptor;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStaffStudentGrowthMeasureAcademicSubjectsSupported)
            {
                isModified |= 
                    source.StaffStudentGrowthMeasureAcademicSubjects.SynchronizeCollectionTo(
                        target.StaffStudentGrowthMeasureAcademicSubjects, 
                        onChildAdded: child => 
                            {
                                child.StaffStudentGrowthMeasure = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffStudentGrowthMeasureAcademicSubjectIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStaffStudentGrowthMeasureGradeLevelsSupported)
            {
                isModified |= 
                    source.StaffStudentGrowthMeasureGradeLevels.SynchronizeCollectionTo(
                        target.StaffStudentGrowthMeasureGradeLevels, 
                        onChildAdded: child => 
                            {
                                child.StaffStudentGrowthMeasure = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffStudentGrowthMeasureGradeLevelIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IStaffStudentGrowthMeasure source, IStaffStudentGrowthMeasure target, Action<IStaffStudentGrowthMeasure, IStaffStudentGrowthMeasure> onMapped)
        {
            var sourceSynchSupport = source as IStaffStudentGrowthMeasureSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffStudentGrowthMeasureSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.FactAsOfDate = source.FactAsOfDate;
            target.SchoolYear = source.SchoolYear;
            target.StaffStudentGrowthMeasureIdentifier = source.StaffStudentGrowthMeasureIdentifier;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsResultDatatypeTypeDescriptorSupported)
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
            else
                targetSynchSupport.IsResultDatatypeTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsStandardErrorSupported)
                target.StandardError = source.StandardError;
            else
                targetSynchSupport.IsStandardErrorSupported = false;

            if (sourceSynchSupport.IsStudentGrowthActualScoreSupported)
                target.StudentGrowthActualScore = source.StudentGrowthActualScore;
            else
                targetSynchSupport.IsStudentGrowthActualScoreSupported = false;

            if (sourceSynchSupport.IsStudentGrowthMeasureDateSupported)
                target.StudentGrowthMeasureDate = source.StudentGrowthMeasureDate;
            else
                targetSynchSupport.IsStudentGrowthMeasureDateSupported = false;

            if (sourceSynchSupport.IsStudentGrowthMetSupported)
                target.StudentGrowthMet = source.StudentGrowthMet;
            else
                targetSynchSupport.IsStudentGrowthMetSupported = false;

            if (sourceSynchSupport.IsStudentGrowthNCountSupported)
                target.StudentGrowthNCount = source.StudentGrowthNCount;
            else
                targetSynchSupport.IsStudentGrowthNCountSupported = false;

            if (sourceSynchSupport.IsStudentGrowthTargetScoreSupported)
                target.StudentGrowthTargetScore = source.StudentGrowthTargetScore;
            else
                targetSynchSupport.IsStudentGrowthTargetScoreSupported = false;

            if (sourceSynchSupport.IsStudentGrowthTypeDescriptorSupported)
                target.StudentGrowthTypeDescriptor = source.StudentGrowthTypeDescriptor;
            else
                targetSynchSupport.IsStudentGrowthTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsStaffStudentGrowthMeasureAcademicSubjectsSupported)
            {    
                targetSynchSupport.IsStaffStudentGrowthMeasureAcademicSubjectIncluded = sourceSynchSupport.IsStaffStudentGrowthMeasureAcademicSubjectIncluded;
                source.StaffStudentGrowthMeasureAcademicSubjects.MapCollectionTo(target.StaffStudentGrowthMeasureAcademicSubjects, target);
            }
            else
            {
                targetSynchSupport.IsStaffStudentGrowthMeasureAcademicSubjectsSupported = false;
            }

            if (sourceSynchSupport.IsStaffStudentGrowthMeasureGradeLevelsSupported)
            {    
                targetSynchSupport.IsStaffStudentGrowthMeasureGradeLevelIncluded = sourceSynchSupport.IsStaffStudentGrowthMeasureGradeLevelIncluded;
                source.StaffStudentGrowthMeasureGradeLevels.MapCollectionTo(target.StaffStudentGrowthMeasureGradeLevels, target);
            }
            else
            {
                targetSynchSupport.IsStaffStudentGrowthMeasureGradeLevelsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffStudentGrowthMeasureSynchronizationSourceSupport 
    {
        bool IsResultDatatypeTypeDescriptorSupported { get; set; }
        bool IsStaffStudentGrowthMeasureAcademicSubjectsSupported { get; set; }
        bool IsStaffStudentGrowthMeasureGradeLevelsSupported { get; set; }
        bool IsStandardErrorSupported { get; set; }
        bool IsStudentGrowthActualScoreSupported { get; set; }
        bool IsStudentGrowthMeasureDateSupported { get; set; }
        bool IsStudentGrowthMetSupported { get; set; }
        bool IsStudentGrowthNCountSupported { get; set; }
        bool IsStudentGrowthTargetScoreSupported { get; set; }
        bool IsStudentGrowthTypeDescriptorSupported { get; set; }
        Func<IStaffStudentGrowthMeasureAcademicSubject, bool> IsStaffStudentGrowthMeasureAcademicSubjectIncluded { get; set; }
        Func<IStaffStudentGrowthMeasureGradeLevel, bool> IsStaffStudentGrowthMeasureGradeLevelIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffStudentGrowthMeasureAcademicSubjectMapper 
    {
        public static bool SynchronizeTo(this IStaffStudentGrowthMeasureAcademicSubject source, IStaffStudentGrowthMeasureAcademicSubject target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffStudentGrowthMeasureAcademicSubjectSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AcademicSubjectDescriptor != target.AcademicSubjectDescriptor)
            {
                source.AcademicSubjectDescriptor = target.AcademicSubjectDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffStudentGrowthMeasureAcademicSubject source, IStaffStudentGrowthMeasureAcademicSubject target, Action<IStaffStudentGrowthMeasureAcademicSubject, IStaffStudentGrowthMeasureAcademicSubject> onMapped)
        {
            var sourceSynchSupport = source as IStaffStudentGrowthMeasureAcademicSubjectSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffStudentGrowthMeasureAcademicSubjectSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffStudentGrowthMeasureAcademicSubjectSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffStudentGrowthMeasureGradeLevelMapper 
    {
        public static bool SynchronizeTo(this IStaffStudentGrowthMeasureGradeLevel source, IStaffStudentGrowthMeasureGradeLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffStudentGrowthMeasureGradeLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffStudentGrowthMeasureGradeLevel source, IStaffStudentGrowthMeasureGradeLevel target, Action<IStaffStudentGrowthMeasureGradeLevel, IStaffStudentGrowthMeasureGradeLevel> onMapped)
        {
            var sourceSynchSupport = source as IStaffStudentGrowthMeasureGradeLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffStudentGrowthMeasureGradeLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffStudentGrowthMeasureGradeLevelSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: StaffStudentGrowthMeasureCourseAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.StaffStudentGrowthMeasureCourseAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffStudentGrowthMeasureCourseAssociationMapper 
    {
        public static bool SynchronizeTo(this IStaffStudentGrowthMeasureCourseAssociation source, IStaffStudentGrowthMeasureCourseAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffStudentGrowthMeasureCourseAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CourseCode != target.CourseCode)
            {
                source.CourseCode = target.CourseCode;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.FactAsOfDate != target.FactAsOfDate)
            {
                source.FactAsOfDate = target.FactAsOfDate;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.StaffStudentGrowthMeasureIdentifier != target.StaffStudentGrowthMeasureIdentifier)
            {
                source.StaffStudentGrowthMeasureIdentifier = target.StaffStudentGrowthMeasureIdentifier;
            }
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffStudentGrowthMeasureCourseAssociation source, IStaffStudentGrowthMeasureCourseAssociation target, Action<IStaffStudentGrowthMeasureCourseAssociation, IStaffStudentGrowthMeasureCourseAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStaffStudentGrowthMeasureCourseAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffStudentGrowthMeasureCourseAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CourseCode = source.CourseCode;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FactAsOfDate = source.FactAsOfDate;
            target.SchoolYear = source.SchoolYear;
            target.StaffStudentGrowthMeasureIdentifier = source.StaffStudentGrowthMeasureIdentifier;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CourseResourceId = source.CourseResourceId;
                target.CourseDiscriminator = source.CourseDiscriminator;
                target.StaffStudentGrowthMeasureResourceId = source.StaffStudentGrowthMeasureResourceId;
                target.StaffStudentGrowthMeasureDiscriminator = source.StaffStudentGrowthMeasureDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffStudentGrowthMeasureCourseAssociationSynchronizationSourceSupport 
    {
        bool IsBeginDateSupported { get; set; }
        bool IsEndDateSupported { get; set; }
    }
 
}
// Aggregate: StaffStudentGrowthMeasureEducationOrganizationAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.StaffStudentGrowthMeasureEducationOrganizationAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffStudentGrowthMeasureEducationOrganizationAssociationMapper 
    {
        public static bool SynchronizeTo(this IStaffStudentGrowthMeasureEducationOrganizationAssociation source, IStaffStudentGrowthMeasureEducationOrganizationAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffStudentGrowthMeasureEducationOrganizationAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.FactAsOfDate != target.FactAsOfDate)
            {
                source.FactAsOfDate = target.FactAsOfDate;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.StaffStudentGrowthMeasureIdentifier != target.StaffStudentGrowthMeasureIdentifier)
            {
                source.StaffStudentGrowthMeasureIdentifier = target.StaffStudentGrowthMeasureIdentifier;
            }
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffStudentGrowthMeasureEducationOrganizationAssociation source, IStaffStudentGrowthMeasureEducationOrganizationAssociation target, Action<IStaffStudentGrowthMeasureEducationOrganizationAssociation, IStaffStudentGrowthMeasureEducationOrganizationAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStaffStudentGrowthMeasureEducationOrganizationAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffStudentGrowthMeasureEducationOrganizationAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FactAsOfDate = source.FactAsOfDate;
            target.SchoolYear = source.SchoolYear;
            target.StaffStudentGrowthMeasureIdentifier = source.StaffStudentGrowthMeasureIdentifier;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.StaffStudentGrowthMeasureResourceId = source.StaffStudentGrowthMeasureResourceId;
                target.StaffStudentGrowthMeasureDiscriminator = source.StaffStudentGrowthMeasureDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffStudentGrowthMeasureEducationOrganizationAssociationSynchronizationSourceSupport 
    {
        bool IsBeginDateSupported { get; set; }
        bool IsEndDateSupported { get; set; }
    }
 
}
// Aggregate: StaffStudentGrowthMeasureSectionAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.StaffStudentGrowthMeasureSectionAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffStudentGrowthMeasureSectionAssociationMapper 
    {
        public static bool SynchronizeTo(this IStaffStudentGrowthMeasureSectionAssociation source, IStaffStudentGrowthMeasureSectionAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffStudentGrowthMeasureSectionAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.FactAsOfDate != target.FactAsOfDate)
            {
                source.FactAsOfDate = target.FactAsOfDate;
            }
            if (source.LocalCourseCode != target.LocalCourseCode)
            {
                source.LocalCourseCode = target.LocalCourseCode;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SectionIdentifier != target.SectionIdentifier)
            {
                source.SectionIdentifier = target.SectionIdentifier;
            }
            if (source.SessionName != target.SessionName)
            {
                source.SessionName = target.SessionName;
            }
            if (source.StaffStudentGrowthMeasureIdentifier != target.StaffStudentGrowthMeasureIdentifier)
            {
                source.StaffStudentGrowthMeasureIdentifier = target.StaffStudentGrowthMeasureIdentifier;
            }
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffStudentGrowthMeasureSectionAssociation source, IStaffStudentGrowthMeasureSectionAssociation target, Action<IStaffStudentGrowthMeasureSectionAssociation, IStaffStudentGrowthMeasureSectionAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStaffStudentGrowthMeasureSectionAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffStudentGrowthMeasureSectionAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.FactAsOfDate = source.FactAsOfDate;
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;
            target.StaffStudentGrowthMeasureIdentifier = source.StaffStudentGrowthMeasureIdentifier;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SectionResourceId = source.SectionResourceId;
                target.SectionDiscriminator = source.SectionDiscriminator;
                target.StaffStudentGrowthMeasureResourceId = source.StaffStudentGrowthMeasureResourceId;
                target.StaffStudentGrowthMeasureDiscriminator = source.StaffStudentGrowthMeasureDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffStudentGrowthMeasureSectionAssociationSynchronizationSourceSupport 
    {
        bool IsBeginDateSupported { get; set; }
        bool IsEndDateSupported { get; set; }
    }
 
}
// Aggregate: StaffTeacherPreparationProviderAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.StaffTeacherPreparationProviderAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffTeacherPreparationProviderAssociationMapper 
    {
        public static bool SynchronizeTo(this IStaffTeacherPreparationProviderAssociation source, IStaffTeacherPreparationProviderAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffTeacherPreparationProviderAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }
            if (source.TeacherPreparationProviderId != target.TeacherPreparationProviderId)
            {
                source.TeacherPreparationProviderId = target.TeacherPreparationProviderId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsProgramAssignmentDescriptorSupported)
                && target.ProgramAssignmentDescriptor != source.ProgramAssignmentDescriptor)
            {
                target.ProgramAssignmentDescriptor = source.ProgramAssignmentDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolYearSupported)
                && target.SchoolYear != source.SchoolYear)
            {
                target.SchoolYear = source.SchoolYear;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStaffTeacherPreparationProviderAssociationAcademicSubjectsSupported)
            {
                isModified |= 
                    source.StaffTeacherPreparationProviderAssociationAcademicSubjects.SynchronizeCollectionTo(
                        target.StaffTeacherPreparationProviderAssociationAcademicSubjects, 
                        onChildAdded: child => 
                            {
                                child.StaffTeacherPreparationProviderAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffTeacherPreparationProviderAssociationAcademicSubjectIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStaffTeacherPreparationProviderAssociationGradeLevelsSupported)
            {
                isModified |= 
                    source.StaffTeacherPreparationProviderAssociationGradeLevels.SynchronizeCollectionTo(
                        target.StaffTeacherPreparationProviderAssociationGradeLevels, 
                        onChildAdded: child => 
                            {
                                child.StaffTeacherPreparationProviderAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffTeacherPreparationProviderAssociationGradeLevelIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IStaffTeacherPreparationProviderAssociation source, IStaffTeacherPreparationProviderAssociation target, Action<IStaffTeacherPreparationProviderAssociation, IStaffTeacherPreparationProviderAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStaffTeacherPreparationProviderAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffTeacherPreparationProviderAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.StaffUniqueId = source.StaffUniqueId;
            target.TeacherPreparationProviderId = source.TeacherPreparationProviderId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsProgramAssignmentDescriptorSupported)
                target.ProgramAssignmentDescriptor = source.ProgramAssignmentDescriptor;
            else
                targetSynchSupport.IsProgramAssignmentDescriptorSupported = false;

            if (sourceSynchSupport.IsSchoolYearSupported)
                target.SchoolYear = source.SchoolYear;
            else
                targetSynchSupport.IsSchoolYearSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
                target.TeacherPreparationProviderResourceId = source.TeacherPreparationProviderResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsStaffTeacherPreparationProviderAssociationAcademicSubjectsSupported)
            {    
                targetSynchSupport.IsStaffTeacherPreparationProviderAssociationAcademicSubjectIncluded = sourceSynchSupport.IsStaffTeacherPreparationProviderAssociationAcademicSubjectIncluded;
                source.StaffTeacherPreparationProviderAssociationAcademicSubjects.MapCollectionTo(target.StaffTeacherPreparationProviderAssociationAcademicSubjects, target);
            }
            else
            {
                targetSynchSupport.IsStaffTeacherPreparationProviderAssociationAcademicSubjectsSupported = false;
            }

            if (sourceSynchSupport.IsStaffTeacherPreparationProviderAssociationGradeLevelsSupported)
            {    
                targetSynchSupport.IsStaffTeacherPreparationProviderAssociationGradeLevelIncluded = sourceSynchSupport.IsStaffTeacherPreparationProviderAssociationGradeLevelIncluded;
                source.StaffTeacherPreparationProviderAssociationGradeLevels.MapCollectionTo(target.StaffTeacherPreparationProviderAssociationGradeLevels, target);
            }
            else
            {
                targetSynchSupport.IsStaffTeacherPreparationProviderAssociationGradeLevelsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffTeacherPreparationProviderAssociationSynchronizationSourceSupport 
    {
        bool IsProgramAssignmentDescriptorSupported { get; set; }
        bool IsSchoolYearSupported { get; set; }
        bool IsStaffTeacherPreparationProviderAssociationAcademicSubjectsSupported { get; set; }
        bool IsStaffTeacherPreparationProviderAssociationGradeLevelsSupported { get; set; }
        Func<IStaffTeacherPreparationProviderAssociationAcademicSubject, bool> IsStaffTeacherPreparationProviderAssociationAcademicSubjectIncluded { get; set; }
        Func<IStaffTeacherPreparationProviderAssociationGradeLevel, bool> IsStaffTeacherPreparationProviderAssociationGradeLevelIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffTeacherPreparationProviderAssociationAcademicSubjectMapper 
    {
        public static bool SynchronizeTo(this IStaffTeacherPreparationProviderAssociationAcademicSubject source, IStaffTeacherPreparationProviderAssociationAcademicSubject target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffTeacherPreparationProviderAssociationAcademicSubjectSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AcademicSubjectDescriptor != target.AcademicSubjectDescriptor)
            {
                source.AcademicSubjectDescriptor = target.AcademicSubjectDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffTeacherPreparationProviderAssociationAcademicSubject source, IStaffTeacherPreparationProviderAssociationAcademicSubject target, Action<IStaffTeacherPreparationProviderAssociationAcademicSubject, IStaffTeacherPreparationProviderAssociationAcademicSubject> onMapped)
        {
            var sourceSynchSupport = source as IStaffTeacherPreparationProviderAssociationAcademicSubjectSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffTeacherPreparationProviderAssociationAcademicSubjectSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffTeacherPreparationProviderAssociationAcademicSubjectSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffTeacherPreparationProviderAssociationGradeLevelMapper 
    {
        public static bool SynchronizeTo(this IStaffTeacherPreparationProviderAssociationGradeLevel source, IStaffTeacherPreparationProviderAssociationGradeLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffTeacherPreparationProviderAssociationGradeLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffTeacherPreparationProviderAssociationGradeLevel source, IStaffTeacherPreparationProviderAssociationGradeLevel target, Action<IStaffTeacherPreparationProviderAssociationGradeLevel, IStaffTeacherPreparationProviderAssociationGradeLevel> onMapped)
        {
            var sourceSynchSupport = source as IStaffTeacherPreparationProviderAssociationGradeLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffTeacherPreparationProviderAssociationGradeLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffTeacherPreparationProviderAssociationGradeLevelSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: StaffTeacherPreparationProviderProgramAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.StaffTeacherPreparationProviderProgramAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffTeacherPreparationProviderProgramAssociationMapper 
    {
        public static bool SynchronizeTo(this IStaffTeacherPreparationProviderProgramAssociation source, IStaffTeacherPreparationProviderProgramAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffTeacherPreparationProviderProgramAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.ProgramName != target.ProgramName)
            {
                source.ProgramName = target.ProgramName;
            }
            if (source.ProgramTypeDescriptor != target.ProgramTypeDescriptor)
            {
                source.ProgramTypeDescriptor = target.ProgramTypeDescriptor;
            }
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStudentRecordAccessSupported)
                && target.StudentRecordAccess != source.StudentRecordAccess)
            {
                target.StudentRecordAccess = source.StudentRecordAccess;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffTeacherPreparationProviderProgramAssociation source, IStaffTeacherPreparationProviderProgramAssociation target, Action<IStaffTeacherPreparationProviderProgramAssociation, IStaffTeacherPreparationProviderProgramAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStaffTeacherPreparationProviderProgramAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffTeacherPreparationProviderProgramAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsStudentRecordAccessSupported)
                target.StudentRecordAccess = source.StudentRecordAccess;
            else
                targetSynchSupport.IsStudentRecordAccessSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
                target.TeacherPreparationProviderProgramResourceId = source.TeacherPreparationProviderProgramResourceId;
                target.TeacherPreparationProviderProgramDiscriminator = source.TeacherPreparationProviderProgramDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffTeacherPreparationProviderProgramAssociationSynchronizationSourceSupport 
    {
        bool IsBeginDateSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsStudentRecordAccessSupported { get; set; }
    }
 
}
// Aggregate: StateEducationAgency

namespace EdFi.Ods.Entities.Common.TPDM //.StateEducationAgencyAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StateEducationAgencyExtensionMapper 
    {
        public static bool SynchronizeTo(this IStateEducationAgencyExtension source, IStateEducationAgencyExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as IStateEducationAgencyExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.StateEducationAgency as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsFederalLocaleCodeDescriptorSupported)
                && target.FederalLocaleCodeDescriptor != source.FederalLocaleCodeDescriptor)
            {
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStateEducationAgencyExtension source, IStateEducationAgencyExtension target, Action<IStateEducationAgencyExtension, IStateEducationAgencyExtension> onMapped)
        {
            var sourceSynchSupport = source as IStateEducationAgencyExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as IStateEducationAgencyExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsFederalLocaleCodeDescriptorSupported)
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
            else
                targetSynchSupport.IsFederalLocaleCodeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStateEducationAgencyExtensionSynchronizationSourceSupport 
    {
        bool IsFederalLocaleCodeDescriptorSupported { get; set; }
    }
 
}
// Aggregate: StudentGradebookEntry

namespace EdFi.Ods.Entities.Common.TPDM //.StudentGradebookEntryAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StudentGradebookEntryExtensionMapper 
    {
        public static bool SynchronizeTo(this IStudentGradebookEntryExtension source, IStudentGradebookEntryExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentGradebookEntryExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.StudentGradebookEntry as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAssignmentPassedSupported)
                && target.AssignmentPassed != source.AssignmentPassed)
            {
                target.AssignmentPassed = source.AssignmentPassed;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDateCompletedSupported)
                && target.DateCompleted != source.DateCompleted)
            {
                target.DateCompleted = source.DateCompleted;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStudentGradebookEntryExtension source, IStudentGradebookEntryExtension target, Action<IStudentGradebookEntryExtension, IStudentGradebookEntryExtension> onMapped)
        {
            var sourceSynchSupport = source as IStudentGradebookEntryExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentGradebookEntryExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsAssignmentPassedSupported)
                target.AssignmentPassed = source.AssignmentPassed;
            else
                targetSynchSupport.IsAssignmentPassedSupported = false;

            if (sourceSynchSupport.IsDateCompletedSupported)
                target.DateCompleted = source.DateCompleted;
            else
                targetSynchSupport.IsDateCompletedSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentGradebookEntryExtensionSynchronizationSourceSupport 
    {
        bool IsAssignmentPassedSupported { get; set; }
        bool IsDateCompletedSupported { get; set; }
    }
 
}
// Aggregate: StudentGrowthTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.StudentGrowthTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StudentGrowthTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IStudentGrowthTypeDescriptor source, IStudentGrowthTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentGrowthTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.StudentGrowthTypeDescriptorId != target.StudentGrowthTypeDescriptorId)
            {
                source.StudentGrowthTypeDescriptorId = target.StudentGrowthTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStudentGrowthTypeDescriptor source, IStudentGrowthTypeDescriptor target, Action<IStudentGrowthTypeDescriptor, IStudentGrowthTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IStudentGrowthTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentGrowthTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.StudentGrowthTypeDescriptorId = source.StudentGrowthTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentGrowthTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: TalentManagementGoal

namespace EdFi.Ods.Entities.Common.TPDM //.TalentManagementGoalAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TalentManagementGoalMapper 
    {
        public static bool SynchronizeTo(this ITalentManagementGoal source, ITalentManagementGoal target)
        {
            bool isModified = false;

            var sourceSupport = source as ITalentManagementGoalSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GoalTitle != target.GoalTitle)
            {
                source.GoalTitle = target.GoalTitle;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsGoalValueSupported)
                && target.GoalValue != source.GoalValue)
            {
                target.GoalValue = source.GoalValue;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsTalentManagementGoalEducationOrganizationsSupported)
            {
                isModified |= 
                    source.TalentManagementGoalEducationOrganizations.SynchronizeCollectionTo(
                        target.TalentManagementGoalEducationOrganizations, 
                        onChildAdded: child => 
                            {
                                child.TalentManagementGoal = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTalentManagementGoalEducationOrganizationIncluded);
            }


            return isModified;
        }



        public static void MapTo(this ITalentManagementGoal source, ITalentManagementGoal target, Action<ITalentManagementGoal, ITalentManagementGoal> onMapped)
        {
            var sourceSynchSupport = source as ITalentManagementGoalSynchronizationSourceSupport;
            var targetSynchSupport = target as ITalentManagementGoalSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.GoalTitle = source.GoalTitle;
            target.SchoolYear = source.SchoolYear;

            // Copy non-PK properties

            if (sourceSynchSupport.IsGoalValueSupported)
                target.GoalValue = source.GoalValue;
            else
                targetSynchSupport.IsGoalValueSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsTalentManagementGoalEducationOrganizationsSupported)
            {    
                targetSynchSupport.IsTalentManagementGoalEducationOrganizationIncluded = sourceSynchSupport.IsTalentManagementGoalEducationOrganizationIncluded;
                source.TalentManagementGoalEducationOrganizations.MapCollectionTo(target.TalentManagementGoalEducationOrganizations, target);
            }
            else
            {
                targetSynchSupport.IsTalentManagementGoalEducationOrganizationsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITalentManagementGoalSynchronizationSourceSupport 
    {
        bool IsGoalValueSupported { get; set; }
        bool IsTalentManagementGoalEducationOrganizationsSupported { get; set; }
        Func<ITalentManagementGoalEducationOrganization, bool> IsTalentManagementGoalEducationOrganizationIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TalentManagementGoalEducationOrganizationMapper 
    {
        public static bool SynchronizeTo(this ITalentManagementGoalEducationOrganization source, ITalentManagementGoalEducationOrganization target)
        {
            bool isModified = false;

            var sourceSupport = source as ITalentManagementGoalEducationOrganizationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITalentManagementGoalEducationOrganization source, ITalentManagementGoalEducationOrganization target, Action<ITalentManagementGoalEducationOrganization, ITalentManagementGoalEducationOrganization> onMapped)
        {
            var sourceSynchSupport = source as ITalentManagementGoalEducationOrganizationSynchronizationSourceSupport;
            var targetSynchSupport = target as ITalentManagementGoalEducationOrganizationSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITalentManagementGoalEducationOrganizationSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: TeacherCandidate

namespace EdFi.Ods.Entities.Common.TPDM //.TeacherCandidateAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidate source, ITeacherCandidate target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TeacherCandidateIdentifier != target.TeacherCandidateIdentifier)
            {
                source.TeacherCandidateIdentifier = target.TeacherCandidateIdentifier;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBirthCitySupported)
                && target.BirthCity != source.BirthCity)
            {
                target.BirthCity = source.BirthCity;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBirthCountryDescriptorSupported)
                && target.BirthCountryDescriptor != source.BirthCountryDescriptor)
            {
                target.BirthCountryDescriptor = source.BirthCountryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBirthDateSupported)
                && target.BirthDate != source.BirthDate)
            {
                target.BirthDate = source.BirthDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBirthInternationalProvinceSupported)
                && target.BirthInternationalProvince != source.BirthInternationalProvince)
            {
                target.BirthInternationalProvince = source.BirthInternationalProvince;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBirthSexDescriptorSupported)
                && target.BirthSexDescriptor != source.BirthSexDescriptor)
            {
                target.BirthSexDescriptor = source.BirthSexDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBirthStateAbbreviationDescriptorSupported)
                && target.BirthStateAbbreviationDescriptor != source.BirthStateAbbreviationDescriptor)
            {
                target.BirthStateAbbreviationDescriptor = source.BirthStateAbbreviationDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCitizenshipStatusDescriptorSupported)
                && target.CitizenshipStatusDescriptor != source.CitizenshipStatusDescriptor)
            {
                target.CitizenshipStatusDescriptor = source.CitizenshipStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDateEnteredUSSupported)
                && target.DateEnteredUS != source.DateEnteredUS)
            {
                target.DateEnteredUS = source.DateEnteredUS;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDisplacementStatusSupported)
                && target.DisplacementStatus != source.DisplacementStatus)
            {
                target.DisplacementStatus = source.DisplacementStatus;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEconomicDisadvantagedSupported)
                && target.EconomicDisadvantaged != source.EconomicDisadvantaged)
            {
                target.EconomicDisadvantaged = source.EconomicDisadvantaged;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEnglishLanguageExamDescriptorSupported)
                && target.EnglishLanguageExamDescriptor != source.EnglishLanguageExamDescriptor)
            {
                target.EnglishLanguageExamDescriptor = source.EnglishLanguageExamDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFirstGenerationStudentSupported)
                && target.FirstGenerationStudent != source.FirstGenerationStudent)
            {
                target.FirstGenerationStudent = source.FirstGenerationStudent;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFirstNameSupported)
                && target.FirstName != source.FirstName)
            {
                target.FirstName = source.FirstName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGenderDescriptorSupported)
                && target.GenderDescriptor != source.GenderDescriptor)
            {
                target.GenderDescriptor = source.GenderDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGenerationCodeSuffixSupported)
                && target.GenerationCodeSuffix != source.GenerationCodeSuffix)
            {
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHispanicLatinoEthnicitySupported)
                && target.HispanicLatinoEthnicity != source.HispanicLatinoEthnicity)
            {
                target.HispanicLatinoEthnicity = source.HispanicLatinoEthnicity;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLastSurnameSupported)
                && target.LastSurname != source.LastSurname)
            {
                target.LastSurname = source.LastSurname;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLimitedEnglishProficiencyDescriptorSupported)
                && target.LimitedEnglishProficiencyDescriptor != source.LimitedEnglishProficiencyDescriptor)
            {
                target.LimitedEnglishProficiencyDescriptor = source.LimitedEnglishProficiencyDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLoginIdSupported)
                && target.LoginId != source.LoginId)
            {
                target.LoginId = source.LoginId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaidenNameSupported)
                && target.MaidenName != source.MaidenName)
            {
                target.MaidenName = source.MaidenName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMiddleNameSupported)
                && target.MiddleName != source.MiddleName)
            {
                target.MiddleName = source.MiddleName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMultipleBirthStatusSupported)
                && target.MultipleBirthStatus != source.MultipleBirthStatus)
            {
                target.MultipleBirthStatus = source.MultipleBirthStatus;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOldEthnicityDescriptorSupported)
                && target.OldEthnicityDescriptor != source.OldEthnicityDescriptor)
            {
                target.OldEthnicityDescriptor = source.OldEthnicityDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPersonalTitlePrefixSupported)
                && target.PersonalTitlePrefix != source.PersonalTitlePrefix)
            {
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPreviousCareerDescriptorSupported)
                && target.PreviousCareerDescriptor != source.PreviousCareerDescriptor)
            {
                target.PreviousCareerDescriptor = source.PreviousCareerDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProfileThumbnailSupported)
                && target.ProfileThumbnail != source.ProfileThumbnail)
            {
                target.ProfileThumbnail = source.ProfileThumbnail;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProgramCompleteSupported)
                && target.ProgramComplete != source.ProgramComplete)
            {
                target.ProgramComplete = source.ProgramComplete;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSexDescriptorSupported)
                && target.SexDescriptor != source.SexDescriptor)
            {
                target.SexDescriptor = source.SexDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStudentUniqueIdSupported)
                && target.StudentUniqueId != source.StudentUniqueId)
            {
                target.StudentUniqueId = source.StudentUniqueId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTuitionCostSupported)
                && target.TuitionCost != source.TuitionCost)
            {
                target.TuitionCost = source.TuitionCost;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // TeacherCandidateBackgroundCheck
            if (sourceSupport == null || sourceSupport.IsTeacherCandidateBackgroundCheckSupported)
            {
                if (source.TeacherCandidateBackgroundCheck == null)
                {
                    if (target.TeacherCandidateBackgroundCheck != null)
                    {
                        target.TeacherCandidateBackgroundCheck = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.TeacherCandidateBackgroundCheck == null)
                    {
                        var itemType = target.GetType().GetProperty("TeacherCandidateBackgroundCheck").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.TeacherCandidateBackgroundCheck = (ITeacherCandidateBackgroundCheck) newItem;
                    }

                    isModified |= source.TeacherCandidateBackgroundCheck.Synchronize(target.TeacherCandidateBackgroundCheck);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsTeacherCandidateAddressesSupported)
            {
                isModified |= 
                    source.TeacherCandidateAddresses.SynchronizeCollectionTo(
                        target.TeacherCandidateAddresses, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateAddressIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateAidsSupported)
            {
                isModified |= 
                    source.TeacherCandidateAids.SynchronizeCollectionTo(
                        target.TeacherCandidateAids, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateAidIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateCharacteristicsSupported)
            {
                isModified |= 
                    source.TeacherCandidateCharacteristics.SynchronizeCollectionTo(
                        target.TeacherCandidateCharacteristics, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateCharacteristicIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateCohortYearsSupported)
            {
                isModified |= 
                    source.TeacherCandidateCohortYears.SynchronizeCollectionTo(
                        target.TeacherCandidateCohortYears, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateCohortYearIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateCredentialsSupported)
            {
                isModified |= 
                    source.TeacherCandidateCredentials.SynchronizeCollectionTo(
                        target.TeacherCandidateCredentials, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateCredentialIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateDegreeSpecializationsSupported)
            {
                isModified |= 
                    source.TeacherCandidateDegreeSpecializations.SynchronizeCollectionTo(
                        target.TeacherCandidateDegreeSpecializations, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateDegreeSpecializationIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateDisabilitiesSupported)
            {
                isModified |= 
                    source.TeacherCandidateDisabilities.SynchronizeCollectionTo(
                        target.TeacherCandidateDisabilities, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateDisabilityIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateElectronicMailsSupported)
            {
                isModified |= 
                    source.TeacherCandidateElectronicMails.SynchronizeCollectionTo(
                        target.TeacherCandidateElectronicMails, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateElectronicMailIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateIdentificationCodesSupported)
            {
                isModified |= 
                    source.TeacherCandidateIdentificationCodes.SynchronizeCollectionTo(
                        target.TeacherCandidateIdentificationCodes, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateIdentificationCodeIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateIdentificationDocumentsSupported)
            {
                isModified |= 
                    source.TeacherCandidateIdentificationDocuments.SynchronizeCollectionTo(
                        target.TeacherCandidateIdentificationDocuments, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateIdentificationDocumentIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateIndicatorsSupported)
            {
                isModified |= 
                    source.TeacherCandidateIndicators.SynchronizeCollectionTo(
                        target.TeacherCandidateIndicators, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateIndicatorIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateInternationalAddressesSupported)
            {
                isModified |= 
                    source.TeacherCandidateInternationalAddresses.SynchronizeCollectionTo(
                        target.TeacherCandidateInternationalAddresses, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateInternationalAddressIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateLanguagesSupported)
            {
                isModified |= 
                    source.TeacherCandidateLanguages.SynchronizeCollectionTo(
                        target.TeacherCandidateLanguages, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateLanguageIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateOtherNamesSupported)
            {
                isModified |= 
                    source.TeacherCandidateOtherNames.SynchronizeCollectionTo(
                        target.TeacherCandidateOtherNames, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateOtherNameIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidatePersonalIdentificationDocumentsSupported)
            {
                isModified |= 
                    source.TeacherCandidatePersonalIdentificationDocuments.SynchronizeCollectionTo(
                        target.TeacherCandidatePersonalIdentificationDocuments, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidatePersonalIdentificationDocumentIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateRacesSupported)
            {
                isModified |= 
                    source.TeacherCandidateRaces.SynchronizeCollectionTo(
                        target.TeacherCandidateRaces, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateRaceIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateTelephonesSupported)
            {
                isModified |= 
                    source.TeacherCandidateTelephones.SynchronizeCollectionTo(
                        target.TeacherCandidateTelephones, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateTelephoneIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateTPPProgramDegreesSupported)
            {
                isModified |= 
                    source.TeacherCandidateTPPProgramDegrees.SynchronizeCollectionTo(
                        target.TeacherCandidateTPPProgramDegrees, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateTPPProgramDegreeIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateVisasSupported)
            {
                isModified |= 
                    source.TeacherCandidateVisas.SynchronizeCollectionTo(
                        target.TeacherCandidateVisas, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateVisaIncluded);
            }


            return isModified;
        }



        public static void MapTo(this ITeacherCandidate source, ITeacherCandidate target, Action<ITeacherCandidate, ITeacherCandidate> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBirthCitySupported)
                target.BirthCity = source.BirthCity;
            else
                targetSynchSupport.IsBirthCitySupported = false;

            if (sourceSynchSupport.IsBirthCountryDescriptorSupported)
                target.BirthCountryDescriptor = source.BirthCountryDescriptor;
            else
                targetSynchSupport.IsBirthCountryDescriptorSupported = false;

            if (sourceSynchSupport.IsBirthDateSupported)
                target.BirthDate = source.BirthDate;
            else
                targetSynchSupport.IsBirthDateSupported = false;

            if (sourceSynchSupport.IsBirthInternationalProvinceSupported)
                target.BirthInternationalProvince = source.BirthInternationalProvince;
            else
                targetSynchSupport.IsBirthInternationalProvinceSupported = false;

            if (sourceSynchSupport.IsBirthSexDescriptorSupported)
                target.BirthSexDescriptor = source.BirthSexDescriptor;
            else
                targetSynchSupport.IsBirthSexDescriptorSupported = false;

            if (sourceSynchSupport.IsBirthStateAbbreviationDescriptorSupported)
                target.BirthStateAbbreviationDescriptor = source.BirthStateAbbreviationDescriptor;
            else
                targetSynchSupport.IsBirthStateAbbreviationDescriptorSupported = false;

            if (sourceSynchSupport.IsCitizenshipStatusDescriptorSupported)
                target.CitizenshipStatusDescriptor = source.CitizenshipStatusDescriptor;
            else
                targetSynchSupport.IsCitizenshipStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsDateEnteredUSSupported)
                target.DateEnteredUS = source.DateEnteredUS;
            else
                targetSynchSupport.IsDateEnteredUSSupported = false;

            if (sourceSynchSupport.IsDisplacementStatusSupported)
                target.DisplacementStatus = source.DisplacementStatus;
            else
                targetSynchSupport.IsDisplacementStatusSupported = false;

            if (sourceSynchSupport.IsEconomicDisadvantagedSupported)
                target.EconomicDisadvantaged = source.EconomicDisadvantaged;
            else
                targetSynchSupport.IsEconomicDisadvantagedSupported = false;

            if (sourceSynchSupport.IsEnglishLanguageExamDescriptorSupported)
                target.EnglishLanguageExamDescriptor = source.EnglishLanguageExamDescriptor;
            else
                targetSynchSupport.IsEnglishLanguageExamDescriptorSupported = false;

            if (sourceSynchSupport.IsFirstGenerationStudentSupported)
                target.FirstGenerationStudent = source.FirstGenerationStudent;
            else
                targetSynchSupport.IsFirstGenerationStudentSupported = false;

            if (sourceSynchSupport.IsFirstNameSupported)
                target.FirstName = source.FirstName;
            else
                targetSynchSupport.IsFirstNameSupported = false;

            if (sourceSynchSupport.IsGenderDescriptorSupported)
                target.GenderDescriptor = source.GenderDescriptor;
            else
                targetSynchSupport.IsGenderDescriptorSupported = false;

            if (sourceSynchSupport.IsGenerationCodeSuffixSupported)
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
            else
                targetSynchSupport.IsGenerationCodeSuffixSupported = false;

            if (sourceSynchSupport.IsHispanicLatinoEthnicitySupported)
                target.HispanicLatinoEthnicity = source.HispanicLatinoEthnicity;
            else
                targetSynchSupport.IsHispanicLatinoEthnicitySupported = false;

            if (sourceSynchSupport.IsLastSurnameSupported)
                target.LastSurname = source.LastSurname;
            else
                targetSynchSupport.IsLastSurnameSupported = false;

            if (sourceSynchSupport.IsLimitedEnglishProficiencyDescriptorSupported)
                target.LimitedEnglishProficiencyDescriptor = source.LimitedEnglishProficiencyDescriptor;
            else
                targetSynchSupport.IsLimitedEnglishProficiencyDescriptorSupported = false;

            if (sourceSynchSupport.IsLoginIdSupported)
                target.LoginId = source.LoginId;
            else
                targetSynchSupport.IsLoginIdSupported = false;

            if (sourceSynchSupport.IsMaidenNameSupported)
                target.MaidenName = source.MaidenName;
            else
                targetSynchSupport.IsMaidenNameSupported = false;

            if (sourceSynchSupport.IsMiddleNameSupported)
                target.MiddleName = source.MiddleName;
            else
                targetSynchSupport.IsMiddleNameSupported = false;

            if (sourceSynchSupport.IsMultipleBirthStatusSupported)
                target.MultipleBirthStatus = source.MultipleBirthStatus;
            else
                targetSynchSupport.IsMultipleBirthStatusSupported = false;

            if (sourceSynchSupport.IsOldEthnicityDescriptorSupported)
                target.OldEthnicityDescriptor = source.OldEthnicityDescriptor;
            else
                targetSynchSupport.IsOldEthnicityDescriptorSupported = false;

            if (sourceSynchSupport.IsPersonalTitlePrefixSupported)
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
            else
                targetSynchSupport.IsPersonalTitlePrefixSupported = false;

            if (sourceSynchSupport.IsPreviousCareerDescriptorSupported)
                target.PreviousCareerDescriptor = source.PreviousCareerDescriptor;
            else
                targetSynchSupport.IsPreviousCareerDescriptorSupported = false;

            if (sourceSynchSupport.IsProfileThumbnailSupported)
                target.ProfileThumbnail = source.ProfileThumbnail;
            else
                targetSynchSupport.IsProfileThumbnailSupported = false;

            if (sourceSynchSupport.IsProgramCompleteSupported)
                target.ProgramComplete = source.ProgramComplete;
            else
                targetSynchSupport.IsProgramCompleteSupported = false;

            if (sourceSynchSupport.IsSexDescriptorSupported)
                target.SexDescriptor = source.SexDescriptor;
            else
                targetSynchSupport.IsSexDescriptorSupported = false;

            if (sourceSynchSupport.IsStudentUniqueIdSupported)
                target.StudentUniqueId = source.StudentUniqueId;
            else
                targetSynchSupport.IsStudentUniqueIdSupported = false;

            if (sourceSynchSupport.IsTuitionCostSupported)
                target.TuitionCost = source.TuitionCost;
            else
                targetSynchSupport.IsTuitionCostSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // TeacherCandidateBackgroundCheck (Source)
            if (sourceSynchSupport.IsTeacherCandidateBackgroundCheckSupported)
            {
                var itemProperty = target.GetType().GetProperty("TeacherCandidateBackgroundCheck");
                
                if (itemProperty != null)
                {                    
                    if (source.TeacherCandidateBackgroundCheck == null)
                    {
                        target.TeacherCandidateBackgroundCheck = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetTeacherCandidateBackgroundCheck = Activator.CreateInstance(itemType);
                        (targetTeacherCandidateBackgroundCheck as IChildEntity)?.SetParent(target);
                        source.TeacherCandidateBackgroundCheck.Map(targetTeacherCandidateBackgroundCheck);
                        
                        // Update the target reference appropriately
                        target.TeacherCandidateBackgroundCheck = (ITeacherCandidateBackgroundCheck) targetTeacherCandidateBackgroundCheck;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateBackgroundCheckSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists

            if (sourceSynchSupport.IsTeacherCandidateAddressesSupported)
            {    
                targetSynchSupport.IsTeacherCandidateAddressIncluded = sourceSynchSupport.IsTeacherCandidateAddressIncluded;
                source.TeacherCandidateAddresses.MapCollectionTo(target.TeacherCandidateAddresses, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateAddressesSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateAidsSupported)
            {    
                targetSynchSupport.IsTeacherCandidateAidIncluded = sourceSynchSupport.IsTeacherCandidateAidIncluded;
                source.TeacherCandidateAids.MapCollectionTo(target.TeacherCandidateAids, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateAidsSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateCharacteristicsSupported)
            {    
                targetSynchSupport.IsTeacherCandidateCharacteristicIncluded = sourceSynchSupport.IsTeacherCandidateCharacteristicIncluded;
                source.TeacherCandidateCharacteristics.MapCollectionTo(target.TeacherCandidateCharacteristics, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateCharacteristicsSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateCohortYearsSupported)
            {    
                targetSynchSupport.IsTeacherCandidateCohortYearIncluded = sourceSynchSupport.IsTeacherCandidateCohortYearIncluded;
                source.TeacherCandidateCohortYears.MapCollectionTo(target.TeacherCandidateCohortYears, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateCohortYearsSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateCredentialsSupported)
            {    
                targetSynchSupport.IsTeacherCandidateCredentialIncluded = sourceSynchSupport.IsTeacherCandidateCredentialIncluded;
                source.TeacherCandidateCredentials.MapCollectionTo(target.TeacherCandidateCredentials, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateCredentialsSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateDegreeSpecializationsSupported)
            {    
                targetSynchSupport.IsTeacherCandidateDegreeSpecializationIncluded = sourceSynchSupport.IsTeacherCandidateDegreeSpecializationIncluded;
                source.TeacherCandidateDegreeSpecializations.MapCollectionTo(target.TeacherCandidateDegreeSpecializations, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateDegreeSpecializationsSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateDisabilitiesSupported)
            {    
                targetSynchSupport.IsTeacherCandidateDisabilityIncluded = sourceSynchSupport.IsTeacherCandidateDisabilityIncluded;
                source.TeacherCandidateDisabilities.MapCollectionTo(target.TeacherCandidateDisabilities, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateDisabilitiesSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateElectronicMailsSupported)
            {    
                targetSynchSupport.IsTeacherCandidateElectronicMailIncluded = sourceSynchSupport.IsTeacherCandidateElectronicMailIncluded;
                source.TeacherCandidateElectronicMails.MapCollectionTo(target.TeacherCandidateElectronicMails, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateElectronicMailsSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateIdentificationCodesSupported)
            {    
                targetSynchSupport.IsTeacherCandidateIdentificationCodeIncluded = sourceSynchSupport.IsTeacherCandidateIdentificationCodeIncluded;
                source.TeacherCandidateIdentificationCodes.MapCollectionTo(target.TeacherCandidateIdentificationCodes, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateIdentificationCodesSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateIdentificationDocumentsSupported)
            {    
                targetSynchSupport.IsTeacherCandidateIdentificationDocumentIncluded = sourceSynchSupport.IsTeacherCandidateIdentificationDocumentIncluded;
                source.TeacherCandidateIdentificationDocuments.MapCollectionTo(target.TeacherCandidateIdentificationDocuments, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateIdentificationDocumentsSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateIndicatorsSupported)
            {    
                targetSynchSupport.IsTeacherCandidateIndicatorIncluded = sourceSynchSupport.IsTeacherCandidateIndicatorIncluded;
                source.TeacherCandidateIndicators.MapCollectionTo(target.TeacherCandidateIndicators, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateIndicatorsSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateInternationalAddressesSupported)
            {    
                targetSynchSupport.IsTeacherCandidateInternationalAddressIncluded = sourceSynchSupport.IsTeacherCandidateInternationalAddressIncluded;
                source.TeacherCandidateInternationalAddresses.MapCollectionTo(target.TeacherCandidateInternationalAddresses, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateInternationalAddressesSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateLanguagesSupported)
            {    
                targetSynchSupport.IsTeacherCandidateLanguageIncluded = sourceSynchSupport.IsTeacherCandidateLanguageIncluded;
                source.TeacherCandidateLanguages.MapCollectionTo(target.TeacherCandidateLanguages, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateLanguagesSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateOtherNamesSupported)
            {    
                targetSynchSupport.IsTeacherCandidateOtherNameIncluded = sourceSynchSupport.IsTeacherCandidateOtherNameIncluded;
                source.TeacherCandidateOtherNames.MapCollectionTo(target.TeacherCandidateOtherNames, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateOtherNamesSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidatePersonalIdentificationDocumentsSupported)
            {    
                targetSynchSupport.IsTeacherCandidatePersonalIdentificationDocumentIncluded = sourceSynchSupport.IsTeacherCandidatePersonalIdentificationDocumentIncluded;
                source.TeacherCandidatePersonalIdentificationDocuments.MapCollectionTo(target.TeacherCandidatePersonalIdentificationDocuments, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidatePersonalIdentificationDocumentsSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateRacesSupported)
            {    
                targetSynchSupport.IsTeacherCandidateRaceIncluded = sourceSynchSupport.IsTeacherCandidateRaceIncluded;
                source.TeacherCandidateRaces.MapCollectionTo(target.TeacherCandidateRaces, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateRacesSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateTelephonesSupported)
            {    
                targetSynchSupport.IsTeacherCandidateTelephoneIncluded = sourceSynchSupport.IsTeacherCandidateTelephoneIncluded;
                source.TeacherCandidateTelephones.MapCollectionTo(target.TeacherCandidateTelephones, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateTelephonesSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateTPPProgramDegreesSupported)
            {    
                targetSynchSupport.IsTeacherCandidateTPPProgramDegreeIncluded = sourceSynchSupport.IsTeacherCandidateTPPProgramDegreeIncluded;
                source.TeacherCandidateTPPProgramDegrees.MapCollectionTo(target.TeacherCandidateTPPProgramDegrees, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateTPPProgramDegreesSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateVisasSupported)
            {    
                targetSynchSupport.IsTeacherCandidateVisaIncluded = sourceSynchSupport.IsTeacherCandidateVisaIncluded;
                source.TeacherCandidateVisas.MapCollectionTo(target.TeacherCandidateVisas, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateVisasSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateSynchronizationSourceSupport 
    {
        bool IsBirthCitySupported { get; set; }
        bool IsBirthCountryDescriptorSupported { get; set; }
        bool IsBirthDateSupported { get; set; }
        bool IsBirthInternationalProvinceSupported { get; set; }
        bool IsBirthSexDescriptorSupported { get; set; }
        bool IsBirthStateAbbreviationDescriptorSupported { get; set; }
        bool IsCitizenshipStatusDescriptorSupported { get; set; }
        bool IsDateEnteredUSSupported { get; set; }
        bool IsDisplacementStatusSupported { get; set; }
        bool IsEconomicDisadvantagedSupported { get; set; }
        bool IsEnglishLanguageExamDescriptorSupported { get; set; }
        bool IsFirstGenerationStudentSupported { get; set; }
        bool IsFirstNameSupported { get; set; }
        bool IsGenderDescriptorSupported { get; set; }
        bool IsGenerationCodeSuffixSupported { get; set; }
        bool IsHispanicLatinoEthnicitySupported { get; set; }
        bool IsLastSurnameSupported { get; set; }
        bool IsLimitedEnglishProficiencyDescriptorSupported { get; set; }
        bool IsLoginIdSupported { get; set; }
        bool IsMaidenNameSupported { get; set; }
        bool IsMiddleNameSupported { get; set; }
        bool IsMultipleBirthStatusSupported { get; set; }
        bool IsOldEthnicityDescriptorSupported { get; set; }
        bool IsPersonalTitlePrefixSupported { get; set; }
        bool IsPreviousCareerDescriptorSupported { get; set; }
        bool IsProfileThumbnailSupported { get; set; }
        bool IsProgramCompleteSupported { get; set; }
        bool IsSexDescriptorSupported { get; set; }
        bool IsStudentUniqueIdSupported { get; set; }
        bool IsTeacherCandidateAddressesSupported { get; set; }
        bool IsTeacherCandidateAidsSupported { get; set; }
        bool IsTeacherCandidateBackgroundCheckSupported { get; set; }
        bool IsTeacherCandidateCharacteristicsSupported { get; set; }
        bool IsTeacherCandidateCohortYearsSupported { get; set; }
        bool IsTeacherCandidateCredentialsSupported { get; set; }
        bool IsTeacherCandidateDegreeSpecializationsSupported { get; set; }
        bool IsTeacherCandidateDisabilitiesSupported { get; set; }
        bool IsTeacherCandidateElectronicMailsSupported { get; set; }
        bool IsTeacherCandidateIdentificationCodesSupported { get; set; }
        bool IsTeacherCandidateIdentificationDocumentsSupported { get; set; }
        bool IsTeacherCandidateIndicatorsSupported { get; set; }
        bool IsTeacherCandidateInternationalAddressesSupported { get; set; }
        bool IsTeacherCandidateLanguagesSupported { get; set; }
        bool IsTeacherCandidateOtherNamesSupported { get; set; }
        bool IsTeacherCandidatePersonalIdentificationDocumentsSupported { get; set; }
        bool IsTeacherCandidateRacesSupported { get; set; }
        bool IsTeacherCandidateTelephonesSupported { get; set; }
        bool IsTeacherCandidateTPPProgramDegreesSupported { get; set; }
        bool IsTeacherCandidateVisasSupported { get; set; }
        bool IsTuitionCostSupported { get; set; }
        Func<ITeacherCandidateAddress, bool> IsTeacherCandidateAddressIncluded { get; set; }
        Func<ITeacherCandidateAid, bool> IsTeacherCandidateAidIncluded { get; set; }
        Func<ITeacherCandidateCharacteristic, bool> IsTeacherCandidateCharacteristicIncluded { get; set; }
        Func<ITeacherCandidateCohortYear, bool> IsTeacherCandidateCohortYearIncluded { get; set; }
        Func<ITeacherCandidateCredential, bool> IsTeacherCandidateCredentialIncluded { get; set; }
        Func<ITeacherCandidateDegreeSpecialization, bool> IsTeacherCandidateDegreeSpecializationIncluded { get; set; }
        Func<ITeacherCandidateDisability, bool> IsTeacherCandidateDisabilityIncluded { get; set; }
        Func<ITeacherCandidateElectronicMail, bool> IsTeacherCandidateElectronicMailIncluded { get; set; }
        Func<ITeacherCandidateIdentificationCode, bool> IsTeacherCandidateIdentificationCodeIncluded { get; set; }
        Func<ITeacherCandidateIdentificationDocument, bool> IsTeacherCandidateIdentificationDocumentIncluded { get; set; }
        Func<ITeacherCandidateIndicator, bool> IsTeacherCandidateIndicatorIncluded { get; set; }
        Func<ITeacherCandidateInternationalAddress, bool> IsTeacherCandidateInternationalAddressIncluded { get; set; }
        Func<ITeacherCandidateLanguage, bool> IsTeacherCandidateLanguageIncluded { get; set; }
        Func<ITeacherCandidateOtherName, bool> IsTeacherCandidateOtherNameIncluded { get; set; }
        Func<ITeacherCandidatePersonalIdentificationDocument, bool> IsTeacherCandidatePersonalIdentificationDocumentIncluded { get; set; }
        Func<ITeacherCandidateRace, bool> IsTeacherCandidateRaceIncluded { get; set; }
        Func<ITeacherCandidateTelephone, bool> IsTeacherCandidateTelephoneIncluded { get; set; }
        Func<ITeacherCandidateTPPProgramDegree, bool> IsTeacherCandidateTPPProgramDegreeIncluded { get; set; }
        Func<ITeacherCandidateVisa, bool> IsTeacherCandidateVisaIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateAddressMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateAddress source, ITeacherCandidateAddress target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateAddressSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AddressTypeDescriptor != target.AddressTypeDescriptor)
            {
                source.AddressTypeDescriptor = target.AddressTypeDescriptor;
            }
            if (source.City != target.City)
            {
                source.City = target.City;
            }
            if (source.PostalCode != target.PostalCode)
            {
                source.PostalCode = target.PostalCode;
            }
            if (source.StateAbbreviationDescriptor != target.StateAbbreviationDescriptor)
            {
                source.StateAbbreviationDescriptor = target.StateAbbreviationDescriptor;
            }
            if (source.StreetNumberName != target.StreetNumberName)
            {
                source.StreetNumberName = target.StreetNumberName;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsApartmentRoomSuiteNumberSupported)
                && target.ApartmentRoomSuiteNumber != source.ApartmentRoomSuiteNumber)
            {
                target.ApartmentRoomSuiteNumber = source.ApartmentRoomSuiteNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBuildingSiteNumberSupported)
                && target.BuildingSiteNumber != source.BuildingSiteNumber)
            {
                target.BuildingSiteNumber = source.BuildingSiteNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCongressionalDistrictSupported)
                && target.CongressionalDistrict != source.CongressionalDistrict)
            {
                target.CongressionalDistrict = source.CongressionalDistrict;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCountyFIPSCodeSupported)
                && target.CountyFIPSCode != source.CountyFIPSCode)
            {
                target.CountyFIPSCode = source.CountyFIPSCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDoNotPublishIndicatorSupported)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLatitudeSupported)
                && target.Latitude != source.Latitude)
            {
                target.Latitude = source.Latitude;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLocaleDescriptorSupported)
                && target.LocaleDescriptor != source.LocaleDescriptor)
            {
                target.LocaleDescriptor = source.LocaleDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLongitudeSupported)
                && target.Longitude != source.Longitude)
            {
                target.Longitude = source.Longitude;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNameOfCountySupported)
                && target.NameOfCounty != source.NameOfCounty)
            {
                target.NameOfCounty = source.NameOfCounty;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsTeacherCandidateAddressPeriodsSupported)
            {
                isModified |= 
                    source.TeacherCandidateAddressPeriods.SynchronizeCollectionTo(
                        target.TeacherCandidateAddressPeriods, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidateAddress = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateAddressPeriodIncluded);
            }


            return isModified;
        }



        public static void MapTo(this ITeacherCandidateAddress source, ITeacherCandidateAddress target, Action<ITeacherCandidateAddress, ITeacherCandidateAddress> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateAddressSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateAddressSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AddressTypeDescriptor = source.AddressTypeDescriptor;
            target.City = source.City;
            target.PostalCode = source.PostalCode;
            target.StateAbbreviationDescriptor = source.StateAbbreviationDescriptor;
            target.StreetNumberName = source.StreetNumberName;

            // Copy non-PK properties

            if (sourceSynchSupport.IsApartmentRoomSuiteNumberSupported)
                target.ApartmentRoomSuiteNumber = source.ApartmentRoomSuiteNumber;
            else
                targetSynchSupport.IsApartmentRoomSuiteNumberSupported = false;

            if (sourceSynchSupport.IsBuildingSiteNumberSupported)
                target.BuildingSiteNumber = source.BuildingSiteNumber;
            else
                targetSynchSupport.IsBuildingSiteNumberSupported = false;

            if (sourceSynchSupport.IsCongressionalDistrictSupported)
                target.CongressionalDistrict = source.CongressionalDistrict;
            else
                targetSynchSupport.IsCongressionalDistrictSupported = false;

            if (sourceSynchSupport.IsCountyFIPSCodeSupported)
                target.CountyFIPSCode = source.CountyFIPSCode;
            else
                targetSynchSupport.IsCountyFIPSCodeSupported = false;

            if (sourceSynchSupport.IsDoNotPublishIndicatorSupported)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
            else
                targetSynchSupport.IsDoNotPublishIndicatorSupported = false;

            if (sourceSynchSupport.IsLatitudeSupported)
                target.Latitude = source.Latitude;
            else
                targetSynchSupport.IsLatitudeSupported = false;

            if (sourceSynchSupport.IsLocaleDescriptorSupported)
                target.LocaleDescriptor = source.LocaleDescriptor;
            else
                targetSynchSupport.IsLocaleDescriptorSupported = false;

            if (sourceSynchSupport.IsLongitudeSupported)
                target.Longitude = source.Longitude;
            else
                targetSynchSupport.IsLongitudeSupported = false;

            if (sourceSynchSupport.IsNameOfCountySupported)
                target.NameOfCounty = source.NameOfCounty;
            else
                targetSynchSupport.IsNameOfCountySupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsTeacherCandidateAddressPeriodsSupported)
            {    
                targetSynchSupport.IsTeacherCandidateAddressPeriodIncluded = sourceSynchSupport.IsTeacherCandidateAddressPeriodIncluded;
                source.TeacherCandidateAddressPeriods.MapCollectionTo(target.TeacherCandidateAddressPeriods, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateAddressPeriodsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateAddressSynchronizationSourceSupport 
    {
        bool IsApartmentRoomSuiteNumberSupported { get; set; }
        bool IsBuildingSiteNumberSupported { get; set; }
        bool IsCongressionalDistrictSupported { get; set; }
        bool IsCountyFIPSCodeSupported { get; set; }
        bool IsDoNotPublishIndicatorSupported { get; set; }
        bool IsLatitudeSupported { get; set; }
        bool IsLocaleDescriptorSupported { get; set; }
        bool IsLongitudeSupported { get; set; }
        bool IsNameOfCountySupported { get; set; }
        bool IsTeacherCandidateAddressPeriodsSupported { get; set; }
        Func<ITeacherCandidateAddressPeriod, bool> IsTeacherCandidateAddressPeriodIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateAddressPeriodMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateAddressPeriod source, ITeacherCandidateAddressPeriod target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateAddressPeriodSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateAddressPeriod source, ITeacherCandidateAddressPeriod target, Action<ITeacherCandidateAddressPeriod, ITeacherCandidateAddressPeriod> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateAddressPeriodSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateAddressPeriodSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateAddressPeriodSynchronizationSourceSupport 
    {
        bool IsEndDateSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateAidMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateAid source, ITeacherCandidateAid target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateAidSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AidTypeDescriptor != target.AidTypeDescriptor)
            {
                source.AidTypeDescriptor = target.AidTypeDescriptor;
            }
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAidAmountSupported)
                && target.AidAmount != source.AidAmount)
            {
                target.AidAmount = source.AidAmount;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAidConditionDescriptionSupported)
                && target.AidConditionDescription != source.AidConditionDescription)
            {
                target.AidConditionDescription = source.AidConditionDescription;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPellGrantRecipientSupported)
                && target.PellGrantRecipient != source.PellGrantRecipient)
            {
                target.PellGrantRecipient = source.PellGrantRecipient;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateAid source, ITeacherCandidateAid target, Action<ITeacherCandidateAid, ITeacherCandidateAid> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateAidSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateAidSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AidTypeDescriptor = source.AidTypeDescriptor;
            target.BeginDate = source.BeginDate;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAidAmountSupported)
                target.AidAmount = source.AidAmount;
            else
                targetSynchSupport.IsAidAmountSupported = false;

            if (sourceSynchSupport.IsAidConditionDescriptionSupported)
                target.AidConditionDescription = source.AidConditionDescription;
            else
                targetSynchSupport.IsAidConditionDescriptionSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsPellGrantRecipientSupported)
                target.PellGrantRecipient = source.PellGrantRecipient;
            else
                targetSynchSupport.IsPellGrantRecipientSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateAidSynchronizationSourceSupport 
    {
        bool IsAidAmountSupported { get; set; }
        bool IsAidConditionDescriptionSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsPellGrantRecipientSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateBackgroundCheckMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateBackgroundCheck source, ITeacherCandidateBackgroundCheck target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateBackgroundCheckSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBackgroundCheckCompletedDateSupported)
                && target.BackgroundCheckCompletedDate != source.BackgroundCheckCompletedDate)
            {
                target.BackgroundCheckCompletedDate = source.BackgroundCheckCompletedDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBackgroundCheckRequestedDateSupported)
                && target.BackgroundCheckRequestedDate != source.BackgroundCheckRequestedDate)
            {
                target.BackgroundCheckRequestedDate = source.BackgroundCheckRequestedDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBackgroundCheckStatusDescriptorSupported)
                && target.BackgroundCheckStatusDescriptor != source.BackgroundCheckStatusDescriptor)
            {
                target.BackgroundCheckStatusDescriptor = source.BackgroundCheckStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBackgroundCheckTypeDescriptorSupported)
                && target.BackgroundCheckTypeDescriptor != source.BackgroundCheckTypeDescriptor)
            {
                target.BackgroundCheckTypeDescriptor = source.BackgroundCheckTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFingerprintSupported)
                && target.Fingerprint != source.Fingerprint)
            {
                target.Fingerprint = source.Fingerprint;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateBackgroundCheck source, ITeacherCandidateBackgroundCheck target, Action<ITeacherCandidateBackgroundCheck, ITeacherCandidateBackgroundCheck> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateBackgroundCheckSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateBackgroundCheckSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsBackgroundCheckCompletedDateSupported)
                target.BackgroundCheckCompletedDate = source.BackgroundCheckCompletedDate;
            else
                targetSynchSupport.IsBackgroundCheckCompletedDateSupported = false;

            if (sourceSynchSupport.IsBackgroundCheckRequestedDateSupported)
                target.BackgroundCheckRequestedDate = source.BackgroundCheckRequestedDate;
            else
                targetSynchSupport.IsBackgroundCheckRequestedDateSupported = false;

            if (sourceSynchSupport.IsBackgroundCheckStatusDescriptorSupported)
                target.BackgroundCheckStatusDescriptor = source.BackgroundCheckStatusDescriptor;
            else
                targetSynchSupport.IsBackgroundCheckStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsBackgroundCheckTypeDescriptorSupported)
                target.BackgroundCheckTypeDescriptor = source.BackgroundCheckTypeDescriptor;
            else
                targetSynchSupport.IsBackgroundCheckTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsFingerprintSupported)
                target.Fingerprint = source.Fingerprint;
            else
                targetSynchSupport.IsFingerprintSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateBackgroundCheckSynchronizationSourceSupport 
    {
        bool IsBackgroundCheckCompletedDateSupported { get; set; }
        bool IsBackgroundCheckRequestedDateSupported { get; set; }
        bool IsBackgroundCheckStatusDescriptorSupported { get; set; }
        bool IsBackgroundCheckTypeDescriptorSupported { get; set; }
        bool IsFingerprintSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateCharacteristicMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateCharacteristic source, ITeacherCandidateCharacteristic target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateCharacteristicSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.StudentCharacteristicDescriptor != target.StudentCharacteristicDescriptor)
            {
                source.StudentCharacteristicDescriptor = target.StudentCharacteristicDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDesignatedBySupported)
                && target.DesignatedBy != source.DesignatedBy)
            {
                target.DesignatedBy = source.DesignatedBy;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateCharacteristic source, ITeacherCandidateCharacteristic target, Action<ITeacherCandidateCharacteristic, ITeacherCandidateCharacteristic> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateCharacteristicSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateCharacteristicSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.StudentCharacteristicDescriptor = source.StudentCharacteristicDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsDesignatedBySupported)
                target.DesignatedBy = source.DesignatedBy;
            else
                targetSynchSupport.IsDesignatedBySupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateCharacteristicSynchronizationSourceSupport 
    {
        bool IsBeginDateSupported { get; set; }
        bool IsDesignatedBySupported { get; set; }
        bool IsEndDateSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateCohortYearMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateCohortYear source, ITeacherCandidateCohortYear target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateCohortYearSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CohortYearTypeDescriptor != target.CohortYearTypeDescriptor)
            {
                source.CohortYearTypeDescriptor = target.CohortYearTypeDescriptor;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateCohortYear source, ITeacherCandidateCohortYear target, Action<ITeacherCandidateCohortYear, ITeacherCandidateCohortYear> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateCohortYearSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateCohortYearSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.CohortYearTypeDescriptor = source.CohortYearTypeDescriptor;
            target.SchoolYear = source.SchoolYear;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateCohortYearSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateCredentialMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateCredential source, ITeacherCandidateCredential target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateCredentialSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CredentialIdentifier != target.CredentialIdentifier)
            {
                source.CredentialIdentifier = target.CredentialIdentifier;
            }
            if (source.StateOfIssueStateAbbreviationDescriptor != target.StateOfIssueStateAbbreviationDescriptor)
            {
                source.StateOfIssueStateAbbreviationDescriptor = target.StateOfIssueStateAbbreviationDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateCredential source, ITeacherCandidateCredential target, Action<ITeacherCandidateCredential, ITeacherCandidateCredential> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateCredentialSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateCredentialSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.CredentialIdentifier = source.CredentialIdentifier;
            target.StateOfIssueStateAbbreviationDescriptor = source.StateOfIssueStateAbbreviationDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CredentialResourceId = source.CredentialResourceId;
                target.CredentialDiscriminator = source.CredentialDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateCredentialSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateDegreeSpecializationMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateDegreeSpecialization source, ITeacherCandidateDegreeSpecialization target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateDegreeSpecializationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.MajorSpecialization != target.MajorSpecialization)
            {
                source.MajorSpecialization = target.MajorSpecialization;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinorSpecializationSupported)
                && target.MinorSpecialization != source.MinorSpecialization)
            {
                target.MinorSpecialization = source.MinorSpecialization;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateDegreeSpecialization source, ITeacherCandidateDegreeSpecialization target, Action<ITeacherCandidateDegreeSpecialization, ITeacherCandidateDegreeSpecialization> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateDegreeSpecializationSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateDegreeSpecializationSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.MajorSpecialization = source.MajorSpecialization;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsMinorSpecializationSupported)
                target.MinorSpecialization = source.MinorSpecialization;
            else
                targetSynchSupport.IsMinorSpecializationSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateDegreeSpecializationSynchronizationSourceSupport 
    {
        bool IsEndDateSupported { get; set; }
        bool IsMinorSpecializationSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateDisabilityMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateDisability source, ITeacherCandidateDisability target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateDisabilitySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisabilityDescriptor != target.DisabilityDescriptor)
            {
                source.DisabilityDescriptor = target.DisabilityDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported)
                && target.DisabilityDeterminationSourceTypeDescriptor != source.DisabilityDeterminationSourceTypeDescriptor)
            {
                target.DisabilityDeterminationSourceTypeDescriptor = source.DisabilityDeterminationSourceTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDisabilityDiagnosisSupported)
                && target.DisabilityDiagnosis != source.DisabilityDiagnosis)
            {
                target.DisabilityDiagnosis = source.DisabilityDiagnosis;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOrderOfDisabilitySupported)
                && target.OrderOfDisability != source.OrderOfDisability)
            {
                target.OrderOfDisability = source.OrderOfDisability;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsTeacherCandidateDisabilityDesignationsSupported)
            {
                isModified |= 
                    source.TeacherCandidateDisabilityDesignations.SynchronizeCollectionTo(
                        target.TeacherCandidateDisabilityDesignations, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidateDisability = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateDisabilityDesignationIncluded);
            }


            return isModified;
        }



        public static void MapTo(this ITeacherCandidateDisability source, ITeacherCandidateDisability target, Action<ITeacherCandidateDisability, ITeacherCandidateDisability> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateDisabilitySynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateDisabilitySynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DisabilityDescriptor = source.DisabilityDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported)
                target.DisabilityDeterminationSourceTypeDescriptor = source.DisabilityDeterminationSourceTypeDescriptor;
            else
                targetSynchSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsDisabilityDiagnosisSupported)
                target.DisabilityDiagnosis = source.DisabilityDiagnosis;
            else
                targetSynchSupport.IsDisabilityDiagnosisSupported = false;

            if (sourceSynchSupport.IsOrderOfDisabilitySupported)
                target.OrderOfDisability = source.OrderOfDisability;
            else
                targetSynchSupport.IsOrderOfDisabilitySupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsTeacherCandidateDisabilityDesignationsSupported)
            {    
                targetSynchSupport.IsTeacherCandidateDisabilityDesignationIncluded = sourceSynchSupport.IsTeacherCandidateDisabilityDesignationIncluded;
                source.TeacherCandidateDisabilityDesignations.MapCollectionTo(target.TeacherCandidateDisabilityDesignations, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateDisabilityDesignationsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateDisabilitySynchronizationSourceSupport 
    {
        bool IsDisabilityDeterminationSourceTypeDescriptorSupported { get; set; }
        bool IsDisabilityDiagnosisSupported { get; set; }
        bool IsOrderOfDisabilitySupported { get; set; }
        bool IsTeacherCandidateDisabilityDesignationsSupported { get; set; }
        Func<ITeacherCandidateDisabilityDesignation, bool> IsTeacherCandidateDisabilityDesignationIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateDisabilityDesignationMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateDisabilityDesignation source, ITeacherCandidateDisabilityDesignation target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateDisabilityDesignationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisabilityDesignationDescriptor != target.DisabilityDesignationDescriptor)
            {
                source.DisabilityDesignationDescriptor = target.DisabilityDesignationDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateDisabilityDesignation source, ITeacherCandidateDisabilityDesignation target, Action<ITeacherCandidateDisabilityDesignation, ITeacherCandidateDisabilityDesignation> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateDisabilityDesignationSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateDisabilityDesignationSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DisabilityDesignationDescriptor = source.DisabilityDesignationDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateDisabilityDesignationSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateElectronicMailMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateElectronicMail source, ITeacherCandidateElectronicMail target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateElectronicMailSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ElectronicMailAddress != target.ElectronicMailAddress)
            {
                source.ElectronicMailAddress = target.ElectronicMailAddress;
            }
            if (source.ElectronicMailTypeDescriptor != target.ElectronicMailTypeDescriptor)
            {
                source.ElectronicMailTypeDescriptor = target.ElectronicMailTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDoNotPublishIndicatorSupported)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPrimaryEmailAddressIndicatorSupported)
                && target.PrimaryEmailAddressIndicator != source.PrimaryEmailAddressIndicator)
            {
                target.PrimaryEmailAddressIndicator = source.PrimaryEmailAddressIndicator;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateElectronicMail source, ITeacherCandidateElectronicMail target, Action<ITeacherCandidateElectronicMail, ITeacherCandidateElectronicMail> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateElectronicMailSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateElectronicMailSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.ElectronicMailAddress = source.ElectronicMailAddress;
            target.ElectronicMailTypeDescriptor = source.ElectronicMailTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDoNotPublishIndicatorSupported)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
            else
                targetSynchSupport.IsDoNotPublishIndicatorSupported = false;

            if (sourceSynchSupport.IsPrimaryEmailAddressIndicatorSupported)
                target.PrimaryEmailAddressIndicator = source.PrimaryEmailAddressIndicator;
            else
                targetSynchSupport.IsPrimaryEmailAddressIndicatorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateElectronicMailSynchronizationSourceSupport 
    {
        bool IsDoNotPublishIndicatorSupported { get; set; }
        bool IsPrimaryEmailAddressIndicatorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateIdentificationCodeMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateIdentificationCode source, ITeacherCandidateIdentificationCode target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateIdentificationCodeSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AssigningOrganizationIdentificationCode != target.AssigningOrganizationIdentificationCode)
            {
                source.AssigningOrganizationIdentificationCode = target.AssigningOrganizationIdentificationCode;
            }
            if (source.StudentIdentificationSystemDescriptor != target.StudentIdentificationSystemDescriptor)
            {
                source.StudentIdentificationSystemDescriptor = target.StudentIdentificationSystemDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsIdentificationCodeSupported)
                && target.IdentificationCode != source.IdentificationCode)
            {
                target.IdentificationCode = source.IdentificationCode;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateIdentificationCode source, ITeacherCandidateIdentificationCode target, Action<ITeacherCandidateIdentificationCode, ITeacherCandidateIdentificationCode> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateIdentificationCodeSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateIdentificationCodeSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AssigningOrganizationIdentificationCode = source.AssigningOrganizationIdentificationCode;
            target.StudentIdentificationSystemDescriptor = source.StudentIdentificationSystemDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsIdentificationCodeSupported)
                target.IdentificationCode = source.IdentificationCode;
            else
                targetSynchSupport.IsIdentificationCodeSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateIdentificationCodeSynchronizationSourceSupport 
    {
        bool IsIdentificationCodeSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateIdentificationDocumentMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateIdentificationDocument source, ITeacherCandidateIdentificationDocument target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateIdentificationDocumentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.IdentificationDocumentUseDescriptor != target.IdentificationDocumentUseDescriptor)
            {
                source.IdentificationDocumentUseDescriptor = target.IdentificationDocumentUseDescriptor;
            }
            if (source.PersonalInformationVerificationDescriptor != target.PersonalInformationVerificationDescriptor)
            {
                source.PersonalInformationVerificationDescriptor = target.PersonalInformationVerificationDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDocumentExpirationDateSupported)
                && target.DocumentExpirationDate != source.DocumentExpirationDate)
            {
                target.DocumentExpirationDate = source.DocumentExpirationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDocumentTitleSupported)
                && target.DocumentTitle != source.DocumentTitle)
            {
                target.DocumentTitle = source.DocumentTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerCountryDescriptorSupported)
                && target.IssuerCountryDescriptor != source.IssuerCountryDescriptor)
            {
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerDocumentIdentificationCodeSupported)
                && target.IssuerDocumentIdentificationCode != source.IssuerDocumentIdentificationCode)
            {
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerNameSupported)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateIdentificationDocument source, ITeacherCandidateIdentificationDocument target, Action<ITeacherCandidateIdentificationDocument, ITeacherCandidateIdentificationDocument> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateIdentificationDocumentSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateIdentificationDocumentSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.IdentificationDocumentUseDescriptor = source.IdentificationDocumentUseDescriptor;
            target.PersonalInformationVerificationDescriptor = source.PersonalInformationVerificationDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDocumentExpirationDateSupported)
                target.DocumentExpirationDate = source.DocumentExpirationDate;
            else
                targetSynchSupport.IsDocumentExpirationDateSupported = false;

            if (sourceSynchSupport.IsDocumentTitleSupported)
                target.DocumentTitle = source.DocumentTitle;
            else
                targetSynchSupport.IsDocumentTitleSupported = false;

            if (sourceSynchSupport.IsIssuerCountryDescriptorSupported)
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
            else
                targetSynchSupport.IsIssuerCountryDescriptorSupported = false;

            if (sourceSynchSupport.IsIssuerDocumentIdentificationCodeSupported)
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
            else
                targetSynchSupport.IsIssuerDocumentIdentificationCodeSupported = false;

            if (sourceSynchSupport.IsIssuerNameSupported)
                target.IssuerName = source.IssuerName;
            else
                targetSynchSupport.IsIssuerNameSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateIdentificationDocumentSynchronizationSourceSupport 
    {
        bool IsDocumentExpirationDateSupported { get; set; }
        bool IsDocumentTitleSupported { get; set; }
        bool IsIssuerCountryDescriptorSupported { get; set; }
        bool IsIssuerDocumentIdentificationCodeSupported { get; set; }
        bool IsIssuerNameSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateIndicatorMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateIndicator source, ITeacherCandidateIndicator target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateIndicatorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.IndicatorName != target.IndicatorName)
            {
                source.IndicatorName = target.IndicatorName;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDesignatedBySupported)
                && target.DesignatedBy != source.DesignatedBy)
            {
                target.DesignatedBy = source.DesignatedBy;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIndicatorSupported)
                && target.Indicator != source.Indicator)
            {
                target.Indicator = source.Indicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIndicatorGroupSupported)
                && target.IndicatorGroup != source.IndicatorGroup)
            {
                target.IndicatorGroup = source.IndicatorGroup;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateIndicator source, ITeacherCandidateIndicator target, Action<ITeacherCandidateIndicator, ITeacherCandidateIndicator> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateIndicatorSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateIndicatorSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.IndicatorName = source.IndicatorName;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsDesignatedBySupported)
                target.DesignatedBy = source.DesignatedBy;
            else
                targetSynchSupport.IsDesignatedBySupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsIndicatorSupported)
                target.Indicator = source.Indicator;
            else
                targetSynchSupport.IsIndicatorSupported = false;

            if (sourceSynchSupport.IsIndicatorGroupSupported)
                target.IndicatorGroup = source.IndicatorGroup;
            else
                targetSynchSupport.IsIndicatorGroupSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateIndicatorSynchronizationSourceSupport 
    {
        bool IsBeginDateSupported { get; set; }
        bool IsDesignatedBySupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsIndicatorSupported { get; set; }
        bool IsIndicatorGroupSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateInternationalAddressMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateInternationalAddress source, ITeacherCandidateInternationalAddress target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateInternationalAddressSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AddressTypeDescriptor != target.AddressTypeDescriptor)
            {
                source.AddressTypeDescriptor = target.AddressTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAddressLine1Supported)
                && target.AddressLine1 != source.AddressLine1)
            {
                target.AddressLine1 = source.AddressLine1;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAddressLine2Supported)
                && target.AddressLine2 != source.AddressLine2)
            {
                target.AddressLine2 = source.AddressLine2;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAddressLine3Supported)
                && target.AddressLine3 != source.AddressLine3)
            {
                target.AddressLine3 = source.AddressLine3;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAddressLine4Supported)
                && target.AddressLine4 != source.AddressLine4)
            {
                target.AddressLine4 = source.AddressLine4;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCountryDescriptorSupported)
                && target.CountryDescriptor != source.CountryDescriptor)
            {
                target.CountryDescriptor = source.CountryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLatitudeSupported)
                && target.Latitude != source.Latitude)
            {
                target.Latitude = source.Latitude;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLongitudeSupported)
                && target.Longitude != source.Longitude)
            {
                target.Longitude = source.Longitude;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateInternationalAddress source, ITeacherCandidateInternationalAddress target, Action<ITeacherCandidateInternationalAddress, ITeacherCandidateInternationalAddress> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateInternationalAddressSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateInternationalAddressSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AddressTypeDescriptor = source.AddressTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAddressLine1Supported)
                target.AddressLine1 = source.AddressLine1;
            else
                targetSynchSupport.IsAddressLine1Supported = false;

            if (sourceSynchSupport.IsAddressLine2Supported)
                target.AddressLine2 = source.AddressLine2;
            else
                targetSynchSupport.IsAddressLine2Supported = false;

            if (sourceSynchSupport.IsAddressLine3Supported)
                target.AddressLine3 = source.AddressLine3;
            else
                targetSynchSupport.IsAddressLine3Supported = false;

            if (sourceSynchSupport.IsAddressLine4Supported)
                target.AddressLine4 = source.AddressLine4;
            else
                targetSynchSupport.IsAddressLine4Supported = false;

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsCountryDescriptorSupported)
                target.CountryDescriptor = source.CountryDescriptor;
            else
                targetSynchSupport.IsCountryDescriptorSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsLatitudeSupported)
                target.Latitude = source.Latitude;
            else
                targetSynchSupport.IsLatitudeSupported = false;

            if (sourceSynchSupport.IsLongitudeSupported)
                target.Longitude = source.Longitude;
            else
                targetSynchSupport.IsLongitudeSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateInternationalAddressSynchronizationSourceSupport 
    {
        bool IsAddressLine1Supported { get; set; }
        bool IsAddressLine2Supported { get; set; }
        bool IsAddressLine3Supported { get; set; }
        bool IsAddressLine4Supported { get; set; }
        bool IsBeginDateSupported { get; set; }
        bool IsCountryDescriptorSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsLatitudeSupported { get; set; }
        bool IsLongitudeSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateLanguageMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateLanguage source, ITeacherCandidateLanguage target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateLanguageSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LanguageDescriptor != target.LanguageDescriptor)
            {
                source.LanguageDescriptor = target.LanguageDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsTeacherCandidateLanguageUsesSupported)
            {
                isModified |= 
                    source.TeacherCandidateLanguageUses.SynchronizeCollectionTo(
                        target.TeacherCandidateLanguageUses, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidateLanguage = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateLanguageUseIncluded);
            }


            return isModified;
        }



        public static void MapTo(this ITeacherCandidateLanguage source, ITeacherCandidateLanguage target, Action<ITeacherCandidateLanguage, ITeacherCandidateLanguage> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateLanguageSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateLanguageSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LanguageDescriptor = source.LanguageDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsTeacherCandidateLanguageUsesSupported)
            {    
                targetSynchSupport.IsTeacherCandidateLanguageUseIncluded = sourceSynchSupport.IsTeacherCandidateLanguageUseIncluded;
                source.TeacherCandidateLanguageUses.MapCollectionTo(target.TeacherCandidateLanguageUses, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateLanguageUsesSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateLanguageSynchronizationSourceSupport 
    {
        bool IsTeacherCandidateLanguageUsesSupported { get; set; }
        Func<ITeacherCandidateLanguageUse, bool> IsTeacherCandidateLanguageUseIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateLanguageUseMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateLanguageUse source, ITeacherCandidateLanguageUse target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateLanguageUseSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LanguageUseDescriptor != target.LanguageUseDescriptor)
            {
                source.LanguageUseDescriptor = target.LanguageUseDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateLanguageUse source, ITeacherCandidateLanguageUse target, Action<ITeacherCandidateLanguageUse, ITeacherCandidateLanguageUse> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateLanguageUseSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateLanguageUseSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LanguageUseDescriptor = source.LanguageUseDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateLanguageUseSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateOtherNameMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateOtherName source, ITeacherCandidateOtherName target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateOtherNameSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.OtherNameTypeDescriptor != target.OtherNameTypeDescriptor)
            {
                source.OtherNameTypeDescriptor = target.OtherNameTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsFirstNameSupported)
                && target.FirstName != source.FirstName)
            {
                target.FirstName = source.FirstName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGenerationCodeSuffixSupported)
                && target.GenerationCodeSuffix != source.GenerationCodeSuffix)
            {
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLastSurnameSupported)
                && target.LastSurname != source.LastSurname)
            {
                target.LastSurname = source.LastSurname;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMiddleNameSupported)
                && target.MiddleName != source.MiddleName)
            {
                target.MiddleName = source.MiddleName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPersonalTitlePrefixSupported)
                && target.PersonalTitlePrefix != source.PersonalTitlePrefix)
            {
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateOtherName source, ITeacherCandidateOtherName target, Action<ITeacherCandidateOtherName, ITeacherCandidateOtherName> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateOtherNameSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateOtherNameSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.OtherNameTypeDescriptor = source.OtherNameTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsFirstNameSupported)
                target.FirstName = source.FirstName;
            else
                targetSynchSupport.IsFirstNameSupported = false;

            if (sourceSynchSupport.IsGenerationCodeSuffixSupported)
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
            else
                targetSynchSupport.IsGenerationCodeSuffixSupported = false;

            if (sourceSynchSupport.IsLastSurnameSupported)
                target.LastSurname = source.LastSurname;
            else
                targetSynchSupport.IsLastSurnameSupported = false;

            if (sourceSynchSupport.IsMiddleNameSupported)
                target.MiddleName = source.MiddleName;
            else
                targetSynchSupport.IsMiddleNameSupported = false;

            if (sourceSynchSupport.IsPersonalTitlePrefixSupported)
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
            else
                targetSynchSupport.IsPersonalTitlePrefixSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateOtherNameSynchronizationSourceSupport 
    {
        bool IsFirstNameSupported { get; set; }
        bool IsGenerationCodeSuffixSupported { get; set; }
        bool IsLastSurnameSupported { get; set; }
        bool IsMiddleNameSupported { get; set; }
        bool IsPersonalTitlePrefixSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidatePersonalIdentificationDocumentMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidatePersonalIdentificationDocument source, ITeacherCandidatePersonalIdentificationDocument target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidatePersonalIdentificationDocumentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.IdentificationDocumentUseDescriptor != target.IdentificationDocumentUseDescriptor)
            {
                source.IdentificationDocumentUseDescriptor = target.IdentificationDocumentUseDescriptor;
            }
            if (source.PersonalInformationVerificationDescriptor != target.PersonalInformationVerificationDescriptor)
            {
                source.PersonalInformationVerificationDescriptor = target.PersonalInformationVerificationDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDocumentExpirationDateSupported)
                && target.DocumentExpirationDate != source.DocumentExpirationDate)
            {
                target.DocumentExpirationDate = source.DocumentExpirationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDocumentTitleSupported)
                && target.DocumentTitle != source.DocumentTitle)
            {
                target.DocumentTitle = source.DocumentTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerCountryDescriptorSupported)
                && target.IssuerCountryDescriptor != source.IssuerCountryDescriptor)
            {
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerDocumentIdentificationCodeSupported)
                && target.IssuerDocumentIdentificationCode != source.IssuerDocumentIdentificationCode)
            {
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerNameSupported)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidatePersonalIdentificationDocument source, ITeacherCandidatePersonalIdentificationDocument target, Action<ITeacherCandidatePersonalIdentificationDocument, ITeacherCandidatePersonalIdentificationDocument> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidatePersonalIdentificationDocumentSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidatePersonalIdentificationDocumentSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.IdentificationDocumentUseDescriptor = source.IdentificationDocumentUseDescriptor;
            target.PersonalInformationVerificationDescriptor = source.PersonalInformationVerificationDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDocumentExpirationDateSupported)
                target.DocumentExpirationDate = source.DocumentExpirationDate;
            else
                targetSynchSupport.IsDocumentExpirationDateSupported = false;

            if (sourceSynchSupport.IsDocumentTitleSupported)
                target.DocumentTitle = source.DocumentTitle;
            else
                targetSynchSupport.IsDocumentTitleSupported = false;

            if (sourceSynchSupport.IsIssuerCountryDescriptorSupported)
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
            else
                targetSynchSupport.IsIssuerCountryDescriptorSupported = false;

            if (sourceSynchSupport.IsIssuerDocumentIdentificationCodeSupported)
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
            else
                targetSynchSupport.IsIssuerDocumentIdentificationCodeSupported = false;

            if (sourceSynchSupport.IsIssuerNameSupported)
                target.IssuerName = source.IssuerName;
            else
                targetSynchSupport.IsIssuerNameSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidatePersonalIdentificationDocumentSynchronizationSourceSupport 
    {
        bool IsDocumentExpirationDateSupported { get; set; }
        bool IsDocumentTitleSupported { get; set; }
        bool IsIssuerCountryDescriptorSupported { get; set; }
        bool IsIssuerDocumentIdentificationCodeSupported { get; set; }
        bool IsIssuerNameSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateRaceMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateRace source, ITeacherCandidateRace target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateRaceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.RaceDescriptor != target.RaceDescriptor)
            {
                source.RaceDescriptor = target.RaceDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateRace source, ITeacherCandidateRace target, Action<ITeacherCandidateRace, ITeacherCandidateRace> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateRaceSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateRaceSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.RaceDescriptor = source.RaceDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateRaceSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateTelephoneMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateTelephone source, ITeacherCandidateTelephone target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateTelephoneSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TelephoneNumber != target.TelephoneNumber)
            {
                source.TelephoneNumber = target.TelephoneNumber;
            }
            if (source.TelephoneNumberTypeDescriptor != target.TelephoneNumberTypeDescriptor)
            {
                source.TelephoneNumberTypeDescriptor = target.TelephoneNumberTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDoNotPublishIndicatorSupported)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOrderOfPrioritySupported)
                && target.OrderOfPriority != source.OrderOfPriority)
            {
                target.OrderOfPriority = source.OrderOfPriority;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTextMessageCapabilityIndicatorSupported)
                && target.TextMessageCapabilityIndicator != source.TextMessageCapabilityIndicator)
            {
                target.TextMessageCapabilityIndicator = source.TextMessageCapabilityIndicator;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateTelephone source, ITeacherCandidateTelephone target, Action<ITeacherCandidateTelephone, ITeacherCandidateTelephone> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateTelephoneSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateTelephoneSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.TelephoneNumber = source.TelephoneNumber;
            target.TelephoneNumberTypeDescriptor = source.TelephoneNumberTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDoNotPublishIndicatorSupported)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
            else
                targetSynchSupport.IsDoNotPublishIndicatorSupported = false;

            if (sourceSynchSupport.IsOrderOfPrioritySupported)
                target.OrderOfPriority = source.OrderOfPriority;
            else
                targetSynchSupport.IsOrderOfPrioritySupported = false;

            if (sourceSynchSupport.IsTextMessageCapabilityIndicatorSupported)
                target.TextMessageCapabilityIndicator = source.TextMessageCapabilityIndicator;
            else
                targetSynchSupport.IsTextMessageCapabilityIndicatorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateTelephoneSynchronizationSourceSupport 
    {
        bool IsDoNotPublishIndicatorSupported { get; set; }
        bool IsOrderOfPrioritySupported { get; set; }
        bool IsTextMessageCapabilityIndicatorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateTPPProgramDegreeMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateTPPProgramDegree source, ITeacherCandidateTPPProgramDegree target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateTPPProgramDegreeSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AcademicSubjectDescriptor != target.AcademicSubjectDescriptor)
            {
                source.AcademicSubjectDescriptor = target.AcademicSubjectDescriptor;
            }
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }
            if (source.TPPDegreeTypeDescriptor != target.TPPDegreeTypeDescriptor)
            {
                source.TPPDegreeTypeDescriptor = target.TPPDegreeTypeDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateTPPProgramDegree source, ITeacherCandidateTPPProgramDegree target, Action<ITeacherCandidateTPPProgramDegree, ITeacherCandidateTPPProgramDegree> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateTPPProgramDegreeSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateTPPProgramDegreeSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;
            target.TPPDegreeTypeDescriptor = source.TPPDegreeTypeDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateTPPProgramDegreeSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateVisaMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateVisa source, ITeacherCandidateVisa target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateVisaSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.VisaDescriptor != target.VisaDescriptor)
            {
                source.VisaDescriptor = target.VisaDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateVisa source, ITeacherCandidateVisa target, Action<ITeacherCandidateVisa, ITeacherCandidateVisa> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateVisaSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateVisaSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.VisaDescriptor = source.VisaDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateVisaSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: TeacherCandidateAcademicRecord

namespace EdFi.Ods.Entities.Common.TPDM //.TeacherCandidateAcademicRecordAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateAcademicRecordMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateAcademicRecord source, ITeacherCandidateAcademicRecord target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateAcademicRecordSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.TeacherCandidateIdentifier != target.TeacherCandidateIdentifier)
            {
                source.TeacherCandidateIdentifier = target.TeacherCandidateIdentifier;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsContentGradePointAverageSupported)
                && target.ContentGradePointAverage != source.ContentGradePointAverage)
            {
                target.ContentGradePointAverage = source.ContentGradePointAverage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsContentGradePointEarnedSupported)
                && target.ContentGradePointEarned != source.ContentGradePointEarned)
            {
                target.ContentGradePointEarned = source.ContentGradePointEarned;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCumulativeAttemptedCreditConversionSupported)
                && target.CumulativeAttemptedCreditConversion != source.CumulativeAttemptedCreditConversion)
            {
                target.CumulativeAttemptedCreditConversion = source.CumulativeAttemptedCreditConversion;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCumulativeAttemptedCreditsSupported)
                && target.CumulativeAttemptedCredits != source.CumulativeAttemptedCredits)
            {
                target.CumulativeAttemptedCredits = source.CumulativeAttemptedCredits;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCumulativeAttemptedCreditTypeDescriptorSupported)
                && target.CumulativeAttemptedCreditTypeDescriptor != source.CumulativeAttemptedCreditTypeDescriptor)
            {
                target.CumulativeAttemptedCreditTypeDescriptor = source.CumulativeAttemptedCreditTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCumulativeEarnedCreditConversionSupported)
                && target.CumulativeEarnedCreditConversion != source.CumulativeEarnedCreditConversion)
            {
                target.CumulativeEarnedCreditConversion = source.CumulativeEarnedCreditConversion;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCumulativeEarnedCreditsSupported)
                && target.CumulativeEarnedCredits != source.CumulativeEarnedCredits)
            {
                target.CumulativeEarnedCredits = source.CumulativeEarnedCredits;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCumulativeEarnedCreditTypeDescriptorSupported)
                && target.CumulativeEarnedCreditTypeDescriptor != source.CumulativeEarnedCreditTypeDescriptor)
            {
                target.CumulativeEarnedCreditTypeDescriptor = source.CumulativeEarnedCreditTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCumulativeGradePointAverageSupported)
                && target.CumulativeGradePointAverage != source.CumulativeGradePointAverage)
            {
                target.CumulativeGradePointAverage = source.CumulativeGradePointAverage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCumulativeGradePointsEarnedSupported)
                && target.CumulativeGradePointsEarned != source.CumulativeGradePointsEarned)
            {
                target.CumulativeGradePointsEarned = source.CumulativeGradePointsEarned;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGradeValueQualifierSupported)
                && target.GradeValueQualifier != source.GradeValueQualifier)
            {
                target.GradeValueQualifier = source.GradeValueQualifier;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProgramGatewayDescriptorSupported)
                && target.ProgramGatewayDescriptor != source.ProgramGatewayDescriptor)
            {
                target.ProgramGatewayDescriptor = source.ProgramGatewayDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProjectedGraduationDateSupported)
                && target.ProjectedGraduationDate != source.ProjectedGraduationDate)
            {
                target.ProjectedGraduationDate = source.ProjectedGraduationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSessionAttemptedCreditConversionSupported)
                && target.SessionAttemptedCreditConversion != source.SessionAttemptedCreditConversion)
            {
                target.SessionAttemptedCreditConversion = source.SessionAttemptedCreditConversion;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSessionAttemptedCreditsSupported)
                && target.SessionAttemptedCredits != source.SessionAttemptedCredits)
            {
                target.SessionAttemptedCredits = source.SessionAttemptedCredits;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSessionAttemptedCreditTypeDescriptorSupported)
                && target.SessionAttemptedCreditTypeDescriptor != source.SessionAttemptedCreditTypeDescriptor)
            {
                target.SessionAttemptedCreditTypeDescriptor = source.SessionAttemptedCreditTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSessionEarnedCreditConversionSupported)
                && target.SessionEarnedCreditConversion != source.SessionEarnedCreditConversion)
            {
                target.SessionEarnedCreditConversion = source.SessionEarnedCreditConversion;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSessionEarnedCreditsSupported)
                && target.SessionEarnedCredits != source.SessionEarnedCredits)
            {
                target.SessionEarnedCredits = source.SessionEarnedCredits;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSessionEarnedCreditTypeDescriptorSupported)
                && target.SessionEarnedCreditTypeDescriptor != source.SessionEarnedCreditTypeDescriptor)
            {
                target.SessionEarnedCreditTypeDescriptor = source.SessionEarnedCreditTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSessionGradePointAverageSupported)
                && target.SessionGradePointAverage != source.SessionGradePointAverage)
            {
                target.SessionGradePointAverage = source.SessionGradePointAverage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSessionGradePointsEarnedSupported)
                && target.SessionGradePointsEarned != source.SessionGradePointsEarned)
            {
                target.SessionGradePointsEarned = source.SessionGradePointsEarned;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTPPDegreeTypeDescriptorSupported)
                && target.TPPDegreeTypeDescriptor != source.TPPDegreeTypeDescriptor)
            {
                target.TPPDegreeTypeDescriptor = source.TPPDegreeTypeDescriptor;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // TeacherCandidateAcademicRecordClassRanking
            if (sourceSupport == null || sourceSupport.IsTeacherCandidateAcademicRecordClassRankingSupported)
            {
                if (source.TeacherCandidateAcademicRecordClassRanking == null)
                {
                    if (target.TeacherCandidateAcademicRecordClassRanking != null)
                    {
                        target.TeacherCandidateAcademicRecordClassRanking = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.TeacherCandidateAcademicRecordClassRanking == null)
                    {
                        var itemType = target.GetType().GetProperty("TeacherCandidateAcademicRecordClassRanking").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.TeacherCandidateAcademicRecordClassRanking = (ITeacherCandidateAcademicRecordClassRanking) newItem;
                    }

                    isModified |= source.TeacherCandidateAcademicRecordClassRanking.Synchronize(target.TeacherCandidateAcademicRecordClassRanking);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsTeacherCandidateAcademicRecordAcademicHonorsSupported)
            {
                isModified |= 
                    source.TeacherCandidateAcademicRecordAcademicHonors.SynchronizeCollectionTo(
                        target.TeacherCandidateAcademicRecordAcademicHonors, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidateAcademicRecord = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateAcademicRecordAcademicHonorIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateAcademicRecordDiplomasSupported)
            {
                isModified |= 
                    source.TeacherCandidateAcademicRecordDiplomas.SynchronizeCollectionTo(
                        target.TeacherCandidateAcademicRecordDiplomas, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidateAcademicRecord = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateAcademicRecordDiplomaIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateAcademicRecordGradePointAveragesSupported)
            {
                isModified |= 
                    source.TeacherCandidateAcademicRecordGradePointAverages.SynchronizeCollectionTo(
                        target.TeacherCandidateAcademicRecordGradePointAverages, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidateAcademicRecord = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateAcademicRecordGradePointAverageIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateAcademicRecordRecognitionsSupported)
            {
                isModified |= 
                    source.TeacherCandidateAcademicRecordRecognitions.SynchronizeCollectionTo(
                        target.TeacherCandidateAcademicRecordRecognitions, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidateAcademicRecord = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateAcademicRecordRecognitionIncluded);
            }


            return isModified;
        }



        public static void MapTo(this ITeacherCandidateAcademicRecord source, ITeacherCandidateAcademicRecord target, Action<ITeacherCandidateAcademicRecord, ITeacherCandidateAcademicRecord> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateAcademicRecordSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateAcademicRecordSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.SchoolYear = source.SchoolYear;
            target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsContentGradePointAverageSupported)
                target.ContentGradePointAverage = source.ContentGradePointAverage;
            else
                targetSynchSupport.IsContentGradePointAverageSupported = false;

            if (sourceSynchSupport.IsContentGradePointEarnedSupported)
                target.ContentGradePointEarned = source.ContentGradePointEarned;
            else
                targetSynchSupport.IsContentGradePointEarnedSupported = false;

            if (sourceSynchSupport.IsCumulativeAttemptedCreditConversionSupported)
                target.CumulativeAttemptedCreditConversion = source.CumulativeAttemptedCreditConversion;
            else
                targetSynchSupport.IsCumulativeAttemptedCreditConversionSupported = false;

            if (sourceSynchSupport.IsCumulativeAttemptedCreditsSupported)
                target.CumulativeAttemptedCredits = source.CumulativeAttemptedCredits;
            else
                targetSynchSupport.IsCumulativeAttemptedCreditsSupported = false;

            if (sourceSynchSupport.IsCumulativeAttemptedCreditTypeDescriptorSupported)
                target.CumulativeAttemptedCreditTypeDescriptor = source.CumulativeAttemptedCreditTypeDescriptor;
            else
                targetSynchSupport.IsCumulativeAttemptedCreditTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsCumulativeEarnedCreditConversionSupported)
                target.CumulativeEarnedCreditConversion = source.CumulativeEarnedCreditConversion;
            else
                targetSynchSupport.IsCumulativeEarnedCreditConversionSupported = false;

            if (sourceSynchSupport.IsCumulativeEarnedCreditsSupported)
                target.CumulativeEarnedCredits = source.CumulativeEarnedCredits;
            else
                targetSynchSupport.IsCumulativeEarnedCreditsSupported = false;

            if (sourceSynchSupport.IsCumulativeEarnedCreditTypeDescriptorSupported)
                target.CumulativeEarnedCreditTypeDescriptor = source.CumulativeEarnedCreditTypeDescriptor;
            else
                targetSynchSupport.IsCumulativeEarnedCreditTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsCumulativeGradePointAverageSupported)
                target.CumulativeGradePointAverage = source.CumulativeGradePointAverage;
            else
                targetSynchSupport.IsCumulativeGradePointAverageSupported = false;

            if (sourceSynchSupport.IsCumulativeGradePointsEarnedSupported)
                target.CumulativeGradePointsEarned = source.CumulativeGradePointsEarned;
            else
                targetSynchSupport.IsCumulativeGradePointsEarnedSupported = false;

            if (sourceSynchSupport.IsGradeValueQualifierSupported)
                target.GradeValueQualifier = source.GradeValueQualifier;
            else
                targetSynchSupport.IsGradeValueQualifierSupported = false;

            if (sourceSynchSupport.IsProgramGatewayDescriptorSupported)
                target.ProgramGatewayDescriptor = source.ProgramGatewayDescriptor;
            else
                targetSynchSupport.IsProgramGatewayDescriptorSupported = false;

            if (sourceSynchSupport.IsProjectedGraduationDateSupported)
                target.ProjectedGraduationDate = source.ProjectedGraduationDate;
            else
                targetSynchSupport.IsProjectedGraduationDateSupported = false;

            if (sourceSynchSupport.IsSessionAttemptedCreditConversionSupported)
                target.SessionAttemptedCreditConversion = source.SessionAttemptedCreditConversion;
            else
                targetSynchSupport.IsSessionAttemptedCreditConversionSupported = false;

            if (sourceSynchSupport.IsSessionAttemptedCreditsSupported)
                target.SessionAttemptedCredits = source.SessionAttemptedCredits;
            else
                targetSynchSupport.IsSessionAttemptedCreditsSupported = false;

            if (sourceSynchSupport.IsSessionAttemptedCreditTypeDescriptorSupported)
                target.SessionAttemptedCreditTypeDescriptor = source.SessionAttemptedCreditTypeDescriptor;
            else
                targetSynchSupport.IsSessionAttemptedCreditTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsSessionEarnedCreditConversionSupported)
                target.SessionEarnedCreditConversion = source.SessionEarnedCreditConversion;
            else
                targetSynchSupport.IsSessionEarnedCreditConversionSupported = false;

            if (sourceSynchSupport.IsSessionEarnedCreditsSupported)
                target.SessionEarnedCredits = source.SessionEarnedCredits;
            else
                targetSynchSupport.IsSessionEarnedCreditsSupported = false;

            if (sourceSynchSupport.IsSessionEarnedCreditTypeDescriptorSupported)
                target.SessionEarnedCreditTypeDescriptor = source.SessionEarnedCreditTypeDescriptor;
            else
                targetSynchSupport.IsSessionEarnedCreditTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsSessionGradePointAverageSupported)
                target.SessionGradePointAverage = source.SessionGradePointAverage;
            else
                targetSynchSupport.IsSessionGradePointAverageSupported = false;

            if (sourceSynchSupport.IsSessionGradePointsEarnedSupported)
                target.SessionGradePointsEarned = source.SessionGradePointsEarned;
            else
                targetSynchSupport.IsSessionGradePointsEarnedSupported = false;

            if (sourceSynchSupport.IsTPPDegreeTypeDescriptorSupported)
                target.TPPDegreeTypeDescriptor = source.TPPDegreeTypeDescriptor;
            else
                targetSynchSupport.IsTPPDegreeTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
                target.TeacherCandidateResourceId = source.TeacherCandidateResourceId;
                target.TeacherCandidateDiscriminator = source.TeacherCandidateDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // TeacherCandidateAcademicRecordClassRanking (Source)
            if (sourceSynchSupport.IsTeacherCandidateAcademicRecordClassRankingSupported)
            {
                var itemProperty = target.GetType().GetProperty("TeacherCandidateAcademicRecordClassRanking");
                
                if (itemProperty != null)
                {                    
                    if (source.TeacherCandidateAcademicRecordClassRanking == null)
                    {
                        target.TeacherCandidateAcademicRecordClassRanking = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetTeacherCandidateAcademicRecordClassRanking = Activator.CreateInstance(itemType);
                        (targetTeacherCandidateAcademicRecordClassRanking as IChildEntity)?.SetParent(target);
                        source.TeacherCandidateAcademicRecordClassRanking.Map(targetTeacherCandidateAcademicRecordClassRanking);
                        
                        // Update the target reference appropriately
                        target.TeacherCandidateAcademicRecordClassRanking = (ITeacherCandidateAcademicRecordClassRanking) targetTeacherCandidateAcademicRecordClassRanking;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateAcademicRecordClassRankingSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists

            if (sourceSynchSupport.IsTeacherCandidateAcademicRecordAcademicHonorsSupported)
            {    
                targetSynchSupport.IsTeacherCandidateAcademicRecordAcademicHonorIncluded = sourceSynchSupport.IsTeacherCandidateAcademicRecordAcademicHonorIncluded;
                source.TeacherCandidateAcademicRecordAcademicHonors.MapCollectionTo(target.TeacherCandidateAcademicRecordAcademicHonors, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateAcademicRecordAcademicHonorsSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateAcademicRecordDiplomasSupported)
            {    
                targetSynchSupport.IsTeacherCandidateAcademicRecordDiplomaIncluded = sourceSynchSupport.IsTeacherCandidateAcademicRecordDiplomaIncluded;
                source.TeacherCandidateAcademicRecordDiplomas.MapCollectionTo(target.TeacherCandidateAcademicRecordDiplomas, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateAcademicRecordDiplomasSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateAcademicRecordGradePointAveragesSupported)
            {    
                targetSynchSupport.IsTeacherCandidateAcademicRecordGradePointAverageIncluded = sourceSynchSupport.IsTeacherCandidateAcademicRecordGradePointAverageIncluded;
                source.TeacherCandidateAcademicRecordGradePointAverages.MapCollectionTo(target.TeacherCandidateAcademicRecordGradePointAverages, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateAcademicRecordGradePointAveragesSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateAcademicRecordRecognitionsSupported)
            {    
                targetSynchSupport.IsTeacherCandidateAcademicRecordRecognitionIncluded = sourceSynchSupport.IsTeacherCandidateAcademicRecordRecognitionIncluded;
                source.TeacherCandidateAcademicRecordRecognitions.MapCollectionTo(target.TeacherCandidateAcademicRecordRecognitions, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateAcademicRecordRecognitionsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateAcademicRecordSynchronizationSourceSupport 
    {
        bool IsContentGradePointAverageSupported { get; set; }
        bool IsContentGradePointEarnedSupported { get; set; }
        bool IsCumulativeAttemptedCreditConversionSupported { get; set; }
        bool IsCumulativeAttemptedCreditsSupported { get; set; }
        bool IsCumulativeAttemptedCreditTypeDescriptorSupported { get; set; }
        bool IsCumulativeEarnedCreditConversionSupported { get; set; }
        bool IsCumulativeEarnedCreditsSupported { get; set; }
        bool IsCumulativeEarnedCreditTypeDescriptorSupported { get; set; }
        bool IsCumulativeGradePointAverageSupported { get; set; }
        bool IsCumulativeGradePointsEarnedSupported { get; set; }
        bool IsGradeValueQualifierSupported { get; set; }
        bool IsProgramGatewayDescriptorSupported { get; set; }
        bool IsProjectedGraduationDateSupported { get; set; }
        bool IsSessionAttemptedCreditConversionSupported { get; set; }
        bool IsSessionAttemptedCreditsSupported { get; set; }
        bool IsSessionAttemptedCreditTypeDescriptorSupported { get; set; }
        bool IsSessionEarnedCreditConversionSupported { get; set; }
        bool IsSessionEarnedCreditsSupported { get; set; }
        bool IsSessionEarnedCreditTypeDescriptorSupported { get; set; }
        bool IsSessionGradePointAverageSupported { get; set; }
        bool IsSessionGradePointsEarnedSupported { get; set; }
        bool IsTeacherCandidateAcademicRecordAcademicHonorsSupported { get; set; }
        bool IsTeacherCandidateAcademicRecordClassRankingSupported { get; set; }
        bool IsTeacherCandidateAcademicRecordDiplomasSupported { get; set; }
        bool IsTeacherCandidateAcademicRecordGradePointAveragesSupported { get; set; }
        bool IsTeacherCandidateAcademicRecordRecognitionsSupported { get; set; }
        bool IsTPPDegreeTypeDescriptorSupported { get; set; }
        Func<ITeacherCandidateAcademicRecordAcademicHonor, bool> IsTeacherCandidateAcademicRecordAcademicHonorIncluded { get; set; }
        Func<ITeacherCandidateAcademicRecordDiploma, bool> IsTeacherCandidateAcademicRecordDiplomaIncluded { get; set; }
        Func<ITeacherCandidateAcademicRecordGradePointAverage, bool> IsTeacherCandidateAcademicRecordGradePointAverageIncluded { get; set; }
        Func<ITeacherCandidateAcademicRecordRecognition, bool> IsTeacherCandidateAcademicRecordRecognitionIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateAcademicRecordAcademicHonorMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateAcademicRecordAcademicHonor source, ITeacherCandidateAcademicRecordAcademicHonor target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateAcademicRecordAcademicHonorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AcademicHonorCategoryDescriptor != target.AcademicHonorCategoryDescriptor)
            {
                source.AcademicHonorCategoryDescriptor = target.AcademicHonorCategoryDescriptor;
            }
            if (source.HonorDescription != target.HonorDescription)
            {
                source.HonorDescription = target.HonorDescription;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAchievementCategoryDescriptorSupported)
                && target.AchievementCategoryDescriptor != source.AchievementCategoryDescriptor)
            {
                target.AchievementCategoryDescriptor = source.AchievementCategoryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAchievementCategorySystemSupported)
                && target.AchievementCategorySystem != source.AchievementCategorySystem)
            {
                target.AchievementCategorySystem = source.AchievementCategorySystem;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAchievementTitleSupported)
                && target.AchievementTitle != source.AchievementTitle)
            {
                target.AchievementTitle = source.AchievementTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCriteriaSupported)
                && target.Criteria != source.Criteria)
            {
                target.Criteria = source.Criteria;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCriteriaURLSupported)
                && target.CriteriaURL != source.CriteriaURL)
            {
                target.CriteriaURL = source.CriteriaURL;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEvidenceStatementSupported)
                && target.EvidenceStatement != source.EvidenceStatement)
            {
                target.EvidenceStatement = source.EvidenceStatement;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHonorAwardDateSupported)
                && target.HonorAwardDate != source.HonorAwardDate)
            {
                target.HonorAwardDate = source.HonorAwardDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHonorAwardExpiresDateSupported)
                && target.HonorAwardExpiresDate != source.HonorAwardExpiresDate)
            {
                target.HonorAwardExpiresDate = source.HonorAwardExpiresDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsImageURLSupported)
                && target.ImageURL != source.ImageURL)
            {
                target.ImageURL = source.ImageURL;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerNameSupported)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerOriginURLSupported)
                && target.IssuerOriginURL != source.IssuerOriginURL)
            {
                target.IssuerOriginURL = source.IssuerOriginURL;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateAcademicRecordAcademicHonor source, ITeacherCandidateAcademicRecordAcademicHonor target, Action<ITeacherCandidateAcademicRecordAcademicHonor, ITeacherCandidateAcademicRecordAcademicHonor> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateAcademicRecordAcademicHonorSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateAcademicRecordAcademicHonorSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AcademicHonorCategoryDescriptor = source.AcademicHonorCategoryDescriptor;
            target.HonorDescription = source.HonorDescription;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAchievementCategoryDescriptorSupported)
                target.AchievementCategoryDescriptor = source.AchievementCategoryDescriptor;
            else
                targetSynchSupport.IsAchievementCategoryDescriptorSupported = false;

            if (sourceSynchSupport.IsAchievementCategorySystemSupported)
                target.AchievementCategorySystem = source.AchievementCategorySystem;
            else
                targetSynchSupport.IsAchievementCategorySystemSupported = false;

            if (sourceSynchSupport.IsAchievementTitleSupported)
                target.AchievementTitle = source.AchievementTitle;
            else
                targetSynchSupport.IsAchievementTitleSupported = false;

            if (sourceSynchSupport.IsCriteriaSupported)
                target.Criteria = source.Criteria;
            else
                targetSynchSupport.IsCriteriaSupported = false;

            if (sourceSynchSupport.IsCriteriaURLSupported)
                target.CriteriaURL = source.CriteriaURL;
            else
                targetSynchSupport.IsCriteriaURLSupported = false;

            if (sourceSynchSupport.IsEvidenceStatementSupported)
                target.EvidenceStatement = source.EvidenceStatement;
            else
                targetSynchSupport.IsEvidenceStatementSupported = false;

            if (sourceSynchSupport.IsHonorAwardDateSupported)
                target.HonorAwardDate = source.HonorAwardDate;
            else
                targetSynchSupport.IsHonorAwardDateSupported = false;

            if (sourceSynchSupport.IsHonorAwardExpiresDateSupported)
                target.HonorAwardExpiresDate = source.HonorAwardExpiresDate;
            else
                targetSynchSupport.IsHonorAwardExpiresDateSupported = false;

            if (sourceSynchSupport.IsImageURLSupported)
                target.ImageURL = source.ImageURL;
            else
                targetSynchSupport.IsImageURLSupported = false;

            if (sourceSynchSupport.IsIssuerNameSupported)
                target.IssuerName = source.IssuerName;
            else
                targetSynchSupport.IsIssuerNameSupported = false;

            if (sourceSynchSupport.IsIssuerOriginURLSupported)
                target.IssuerOriginURL = source.IssuerOriginURL;
            else
                targetSynchSupport.IsIssuerOriginURLSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateAcademicRecordAcademicHonorSynchronizationSourceSupport 
    {
        bool IsAchievementCategoryDescriptorSupported { get; set; }
        bool IsAchievementCategorySystemSupported { get; set; }
        bool IsAchievementTitleSupported { get; set; }
        bool IsCriteriaSupported { get; set; }
        bool IsCriteriaURLSupported { get; set; }
        bool IsEvidenceStatementSupported { get; set; }
        bool IsHonorAwardDateSupported { get; set; }
        bool IsHonorAwardExpiresDateSupported { get; set; }
        bool IsImageURLSupported { get; set; }
        bool IsIssuerNameSupported { get; set; }
        bool IsIssuerOriginURLSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateAcademicRecordClassRankingMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateAcademicRecordClassRanking source, ITeacherCandidateAcademicRecordClassRanking target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateAcademicRecordClassRankingSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsClassRankSupported)
                && target.ClassRank != source.ClassRank)
            {
                target.ClassRank = source.ClassRank;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsClassRankingDateSupported)
                && target.ClassRankingDate != source.ClassRankingDate)
            {
                target.ClassRankingDate = source.ClassRankingDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPercentageRankingSupported)
                && target.PercentageRanking != source.PercentageRanking)
            {
                target.PercentageRanking = source.PercentageRanking;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTotalNumberInClassSupported)
                && target.TotalNumberInClass != source.TotalNumberInClass)
            {
                target.TotalNumberInClass = source.TotalNumberInClass;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateAcademicRecordClassRanking source, ITeacherCandidateAcademicRecordClassRanking target, Action<ITeacherCandidateAcademicRecordClassRanking, ITeacherCandidateAcademicRecordClassRanking> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateAcademicRecordClassRankingSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateAcademicRecordClassRankingSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsClassRankSupported)
                target.ClassRank = source.ClassRank;
            else
                targetSynchSupport.IsClassRankSupported = false;

            if (sourceSynchSupport.IsClassRankingDateSupported)
                target.ClassRankingDate = source.ClassRankingDate;
            else
                targetSynchSupport.IsClassRankingDateSupported = false;

            if (sourceSynchSupport.IsPercentageRankingSupported)
                target.PercentageRanking = source.PercentageRanking;
            else
                targetSynchSupport.IsPercentageRankingSupported = false;

            if (sourceSynchSupport.IsTotalNumberInClassSupported)
                target.TotalNumberInClass = source.TotalNumberInClass;
            else
                targetSynchSupport.IsTotalNumberInClassSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateAcademicRecordClassRankingSynchronizationSourceSupport 
    {
        bool IsClassRankSupported { get; set; }
        bool IsClassRankingDateSupported { get; set; }
        bool IsPercentageRankingSupported { get; set; }
        bool IsTotalNumberInClassSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateAcademicRecordDiplomaMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateAcademicRecordDiploma source, ITeacherCandidateAcademicRecordDiploma target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateAcademicRecordDiplomaSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DiplomaAwardDate != target.DiplomaAwardDate)
            {
                source.DiplomaAwardDate = target.DiplomaAwardDate;
            }
            if (source.DiplomaTypeDescriptor != target.DiplomaTypeDescriptor)
            {
                source.DiplomaTypeDescriptor = target.DiplomaTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAchievementCategoryDescriptorSupported)
                && target.AchievementCategoryDescriptor != source.AchievementCategoryDescriptor)
            {
                target.AchievementCategoryDescriptor = source.AchievementCategoryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAchievementCategorySystemSupported)
                && target.AchievementCategorySystem != source.AchievementCategorySystem)
            {
                target.AchievementCategorySystem = source.AchievementCategorySystem;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAchievementTitleSupported)
                && target.AchievementTitle != source.AchievementTitle)
            {
                target.AchievementTitle = source.AchievementTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCriteriaSupported)
                && target.Criteria != source.Criteria)
            {
                target.Criteria = source.Criteria;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCriteriaURLSupported)
                && target.CriteriaURL != source.CriteriaURL)
            {
                target.CriteriaURL = source.CriteriaURL;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCTECompleterSupported)
                && target.CTECompleter != source.CTECompleter)
            {
                target.CTECompleter = source.CTECompleter;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDiplomaAwardExpiresDateSupported)
                && target.DiplomaAwardExpiresDate != source.DiplomaAwardExpiresDate)
            {
                target.DiplomaAwardExpiresDate = source.DiplomaAwardExpiresDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDiplomaDescriptionSupported)
                && target.DiplomaDescription != source.DiplomaDescription)
            {
                target.DiplomaDescription = source.DiplomaDescription;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDiplomaLevelDescriptorSupported)
                && target.DiplomaLevelDescriptor != source.DiplomaLevelDescriptor)
            {
                target.DiplomaLevelDescriptor = source.DiplomaLevelDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEvidenceStatementSupported)
                && target.EvidenceStatement != source.EvidenceStatement)
            {
                target.EvidenceStatement = source.EvidenceStatement;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsImageURLSupported)
                && target.ImageURL != source.ImageURL)
            {
                target.ImageURL = source.ImageURL;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerNameSupported)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerOriginURLSupported)
                && target.IssuerOriginURL != source.IssuerOriginURL)
            {
                target.IssuerOriginURL = source.IssuerOriginURL;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateAcademicRecordDiploma source, ITeacherCandidateAcademicRecordDiploma target, Action<ITeacherCandidateAcademicRecordDiploma, ITeacherCandidateAcademicRecordDiploma> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateAcademicRecordDiplomaSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateAcademicRecordDiplomaSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DiplomaAwardDate = source.DiplomaAwardDate;
            target.DiplomaTypeDescriptor = source.DiplomaTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAchievementCategoryDescriptorSupported)
                target.AchievementCategoryDescriptor = source.AchievementCategoryDescriptor;
            else
                targetSynchSupport.IsAchievementCategoryDescriptorSupported = false;

            if (sourceSynchSupport.IsAchievementCategorySystemSupported)
                target.AchievementCategorySystem = source.AchievementCategorySystem;
            else
                targetSynchSupport.IsAchievementCategorySystemSupported = false;

            if (sourceSynchSupport.IsAchievementTitleSupported)
                target.AchievementTitle = source.AchievementTitle;
            else
                targetSynchSupport.IsAchievementTitleSupported = false;

            if (sourceSynchSupport.IsCriteriaSupported)
                target.Criteria = source.Criteria;
            else
                targetSynchSupport.IsCriteriaSupported = false;

            if (sourceSynchSupport.IsCriteriaURLSupported)
                target.CriteriaURL = source.CriteriaURL;
            else
                targetSynchSupport.IsCriteriaURLSupported = false;

            if (sourceSynchSupport.IsCTECompleterSupported)
                target.CTECompleter = source.CTECompleter;
            else
                targetSynchSupport.IsCTECompleterSupported = false;

            if (sourceSynchSupport.IsDiplomaAwardExpiresDateSupported)
                target.DiplomaAwardExpiresDate = source.DiplomaAwardExpiresDate;
            else
                targetSynchSupport.IsDiplomaAwardExpiresDateSupported = false;

            if (sourceSynchSupport.IsDiplomaDescriptionSupported)
                target.DiplomaDescription = source.DiplomaDescription;
            else
                targetSynchSupport.IsDiplomaDescriptionSupported = false;

            if (sourceSynchSupport.IsDiplomaLevelDescriptorSupported)
                target.DiplomaLevelDescriptor = source.DiplomaLevelDescriptor;
            else
                targetSynchSupport.IsDiplomaLevelDescriptorSupported = false;

            if (sourceSynchSupport.IsEvidenceStatementSupported)
                target.EvidenceStatement = source.EvidenceStatement;
            else
                targetSynchSupport.IsEvidenceStatementSupported = false;

            if (sourceSynchSupport.IsImageURLSupported)
                target.ImageURL = source.ImageURL;
            else
                targetSynchSupport.IsImageURLSupported = false;

            if (sourceSynchSupport.IsIssuerNameSupported)
                target.IssuerName = source.IssuerName;
            else
                targetSynchSupport.IsIssuerNameSupported = false;

            if (sourceSynchSupport.IsIssuerOriginURLSupported)
                target.IssuerOriginURL = source.IssuerOriginURL;
            else
                targetSynchSupport.IsIssuerOriginURLSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateAcademicRecordDiplomaSynchronizationSourceSupport 
    {
        bool IsAchievementCategoryDescriptorSupported { get; set; }
        bool IsAchievementCategorySystemSupported { get; set; }
        bool IsAchievementTitleSupported { get; set; }
        bool IsCriteriaSupported { get; set; }
        bool IsCriteriaURLSupported { get; set; }
        bool IsCTECompleterSupported { get; set; }
        bool IsDiplomaAwardExpiresDateSupported { get; set; }
        bool IsDiplomaDescriptionSupported { get; set; }
        bool IsDiplomaLevelDescriptorSupported { get; set; }
        bool IsEvidenceStatementSupported { get; set; }
        bool IsImageURLSupported { get; set; }
        bool IsIssuerNameSupported { get; set; }
        bool IsIssuerOriginURLSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateAcademicRecordGradePointAverageMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateAcademicRecordGradePointAverage source, ITeacherCandidateAcademicRecordGradePointAverage target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateAcademicRecordGradePointAverageSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradePointAverageTypeDescriptor != target.GradePointAverageTypeDescriptor)
            {
                source.GradePointAverageTypeDescriptor = target.GradePointAverageTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsGradePointAverageValueSupported)
                && target.GradePointAverageValue != source.GradePointAverageValue)
            {
                target.GradePointAverageValue = source.GradePointAverageValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIsCumulativeSupported)
                && target.IsCumulative != source.IsCumulative)
            {
                target.IsCumulative = source.IsCumulative;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaxGradePointAverageValueSupported)
                && target.MaxGradePointAverageValue != source.MaxGradePointAverageValue)
            {
                target.MaxGradePointAverageValue = source.MaxGradePointAverageValue;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateAcademicRecordGradePointAverage source, ITeacherCandidateAcademicRecordGradePointAverage target, Action<ITeacherCandidateAcademicRecordGradePointAverage, ITeacherCandidateAcademicRecordGradePointAverage> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateAcademicRecordGradePointAverageSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateAcademicRecordGradePointAverageSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradePointAverageTypeDescriptor = source.GradePointAverageTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsGradePointAverageValueSupported)
                target.GradePointAverageValue = source.GradePointAverageValue;
            else
                targetSynchSupport.IsGradePointAverageValueSupported = false;

            if (sourceSynchSupport.IsIsCumulativeSupported)
                target.IsCumulative = source.IsCumulative;
            else
                targetSynchSupport.IsIsCumulativeSupported = false;

            if (sourceSynchSupport.IsMaxGradePointAverageValueSupported)
                target.MaxGradePointAverageValue = source.MaxGradePointAverageValue;
            else
                targetSynchSupport.IsMaxGradePointAverageValueSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateAcademicRecordGradePointAverageSynchronizationSourceSupport 
    {
        bool IsGradePointAverageValueSupported { get; set; }
        bool IsIsCumulativeSupported { get; set; }
        bool IsMaxGradePointAverageValueSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateAcademicRecordRecognitionMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateAcademicRecordRecognition source, ITeacherCandidateAcademicRecordRecognition target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateAcademicRecordRecognitionSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.RecognitionTypeDescriptor != target.RecognitionTypeDescriptor)
            {
                source.RecognitionTypeDescriptor = target.RecognitionTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAchievementCategoryDescriptorSupported)
                && target.AchievementCategoryDescriptor != source.AchievementCategoryDescriptor)
            {
                target.AchievementCategoryDescriptor = source.AchievementCategoryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAchievementCategorySystemSupported)
                && target.AchievementCategorySystem != source.AchievementCategorySystem)
            {
                target.AchievementCategorySystem = source.AchievementCategorySystem;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAchievementTitleSupported)
                && target.AchievementTitle != source.AchievementTitle)
            {
                target.AchievementTitle = source.AchievementTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCriteriaSupported)
                && target.Criteria != source.Criteria)
            {
                target.Criteria = source.Criteria;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCriteriaURLSupported)
                && target.CriteriaURL != source.CriteriaURL)
            {
                target.CriteriaURL = source.CriteriaURL;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEvidenceStatementSupported)
                && target.EvidenceStatement != source.EvidenceStatement)
            {
                target.EvidenceStatement = source.EvidenceStatement;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsImageURLSupported)
                && target.ImageURL != source.ImageURL)
            {
                target.ImageURL = source.ImageURL;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerNameSupported)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerOriginURLSupported)
                && target.IssuerOriginURL != source.IssuerOriginURL)
            {
                target.IssuerOriginURL = source.IssuerOriginURL;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRecognitionAwardDateSupported)
                && target.RecognitionAwardDate != source.RecognitionAwardDate)
            {
                target.RecognitionAwardDate = source.RecognitionAwardDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRecognitionAwardExpiresDateSupported)
                && target.RecognitionAwardExpiresDate != source.RecognitionAwardExpiresDate)
            {
                target.RecognitionAwardExpiresDate = source.RecognitionAwardExpiresDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRecognitionDescriptionSupported)
                && target.RecognitionDescription != source.RecognitionDescription)
            {
                target.RecognitionDescription = source.RecognitionDescription;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateAcademicRecordRecognition source, ITeacherCandidateAcademicRecordRecognition target, Action<ITeacherCandidateAcademicRecordRecognition, ITeacherCandidateAcademicRecordRecognition> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateAcademicRecordRecognitionSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateAcademicRecordRecognitionSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.RecognitionTypeDescriptor = source.RecognitionTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAchievementCategoryDescriptorSupported)
                target.AchievementCategoryDescriptor = source.AchievementCategoryDescriptor;
            else
                targetSynchSupport.IsAchievementCategoryDescriptorSupported = false;

            if (sourceSynchSupport.IsAchievementCategorySystemSupported)
                target.AchievementCategorySystem = source.AchievementCategorySystem;
            else
                targetSynchSupport.IsAchievementCategorySystemSupported = false;

            if (sourceSynchSupport.IsAchievementTitleSupported)
                target.AchievementTitle = source.AchievementTitle;
            else
                targetSynchSupport.IsAchievementTitleSupported = false;

            if (sourceSynchSupport.IsCriteriaSupported)
                target.Criteria = source.Criteria;
            else
                targetSynchSupport.IsCriteriaSupported = false;

            if (sourceSynchSupport.IsCriteriaURLSupported)
                target.CriteriaURL = source.CriteriaURL;
            else
                targetSynchSupport.IsCriteriaURLSupported = false;

            if (sourceSynchSupport.IsEvidenceStatementSupported)
                target.EvidenceStatement = source.EvidenceStatement;
            else
                targetSynchSupport.IsEvidenceStatementSupported = false;

            if (sourceSynchSupport.IsImageURLSupported)
                target.ImageURL = source.ImageURL;
            else
                targetSynchSupport.IsImageURLSupported = false;

            if (sourceSynchSupport.IsIssuerNameSupported)
                target.IssuerName = source.IssuerName;
            else
                targetSynchSupport.IsIssuerNameSupported = false;

            if (sourceSynchSupport.IsIssuerOriginURLSupported)
                target.IssuerOriginURL = source.IssuerOriginURL;
            else
                targetSynchSupport.IsIssuerOriginURLSupported = false;

            if (sourceSynchSupport.IsRecognitionAwardDateSupported)
                target.RecognitionAwardDate = source.RecognitionAwardDate;
            else
                targetSynchSupport.IsRecognitionAwardDateSupported = false;

            if (sourceSynchSupport.IsRecognitionAwardExpiresDateSupported)
                target.RecognitionAwardExpiresDate = source.RecognitionAwardExpiresDate;
            else
                targetSynchSupport.IsRecognitionAwardExpiresDateSupported = false;

            if (sourceSynchSupport.IsRecognitionDescriptionSupported)
                target.RecognitionDescription = source.RecognitionDescription;
            else
                targetSynchSupport.IsRecognitionDescriptionSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateAcademicRecordRecognitionSynchronizationSourceSupport 
    {
        bool IsAchievementCategoryDescriptorSupported { get; set; }
        bool IsAchievementCategorySystemSupported { get; set; }
        bool IsAchievementTitleSupported { get; set; }
        bool IsCriteriaSupported { get; set; }
        bool IsCriteriaURLSupported { get; set; }
        bool IsEvidenceStatementSupported { get; set; }
        bool IsImageURLSupported { get; set; }
        bool IsIssuerNameSupported { get; set; }
        bool IsIssuerOriginURLSupported { get; set; }
        bool IsRecognitionAwardDateSupported { get; set; }
        bool IsRecognitionAwardExpiresDateSupported { get; set; }
        bool IsRecognitionDescriptionSupported { get; set; }
    }
 
}
// Aggregate: TeacherCandidateCharacteristicDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.TeacherCandidateCharacteristicDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateCharacteristicDescriptorMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateCharacteristicDescriptor source, ITeacherCandidateCharacteristicDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateCharacteristicDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TeacherCandidateCharacteristicDescriptorId != target.TeacherCandidateCharacteristicDescriptorId)
            {
                source.TeacherCandidateCharacteristicDescriptorId = target.TeacherCandidateCharacteristicDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateCharacteristicDescriptor source, ITeacherCandidateCharacteristicDescriptor target, Action<ITeacherCandidateCharacteristicDescriptor, ITeacherCandidateCharacteristicDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateCharacteristicDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateCharacteristicDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.TeacherCandidateCharacteristicDescriptorId = source.TeacherCandidateCharacteristicDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateCharacteristicDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: TeacherCandidateCourseTranscript

namespace EdFi.Ods.Entities.Common.TPDM //.TeacherCandidateCourseTranscriptAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateCourseTranscriptMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateCourseTranscript source, ITeacherCandidateCourseTranscript target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateCourseTranscriptSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CourseAttemptResultDescriptor != target.CourseAttemptResultDescriptor)
            {
                source.CourseAttemptResultDescriptor = target.CourseAttemptResultDescriptor;
            }
            if (source.CourseCode != target.CourseCode)
            {
                source.CourseCode = target.CourseCode;
            }
            if (source.CourseEducationOrganizationId != target.CourseEducationOrganizationId)
            {
                source.CourseEducationOrganizationId = target.CourseEducationOrganizationId;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.TeacherCandidateIdentifier != target.TeacherCandidateIdentifier)
            {
                source.TeacherCandidateIdentifier = target.TeacherCandidateIdentifier;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAlternativeCourseCodeSupported)
                && target.AlternativeCourseCode != source.AlternativeCourseCode)
            {
                target.AlternativeCourseCode = source.AlternativeCourseCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAlternativeCourseTitleSupported)
                && target.AlternativeCourseTitle != source.AlternativeCourseTitle)
            {
                target.AlternativeCourseTitle = source.AlternativeCourseTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAttemptedCreditConversionSupported)
                && target.AttemptedCreditConversion != source.AttemptedCreditConversion)
            {
                target.AttemptedCreditConversion = source.AttemptedCreditConversion;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAttemptedCreditsSupported)
                && target.AttemptedCredits != source.AttemptedCredits)
            {
                target.AttemptedCredits = source.AttemptedCredits;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAttemptedCreditTypeDescriptorSupported)
                && target.AttemptedCreditTypeDescriptor != source.AttemptedCreditTypeDescriptor)
            {
                target.AttemptedCreditTypeDescriptor = source.AttemptedCreditTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCourseRepeatCodeDescriptorSupported)
                && target.CourseRepeatCodeDescriptor != source.CourseRepeatCodeDescriptor)
            {
                target.CourseRepeatCodeDescriptor = source.CourseRepeatCodeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCourseTitleSupported)
                && target.CourseTitle != source.CourseTitle)
            {
                target.CourseTitle = source.CourseTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEarnedCreditConversionSupported)
                && target.EarnedCreditConversion != source.EarnedCreditConversion)
            {
                target.EarnedCreditConversion = source.EarnedCreditConversion;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEarnedCreditsSupported)
                && target.EarnedCredits != source.EarnedCredits)
            {
                target.EarnedCredits = source.EarnedCredits;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEarnedCreditTypeDescriptorSupported)
                && target.EarnedCreditTypeDescriptor != source.EarnedCreditTypeDescriptor)
            {
                target.EarnedCreditTypeDescriptor = source.EarnedCreditTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFinalLetterGradeEarnedSupported)
                && target.FinalLetterGradeEarned != source.FinalLetterGradeEarned)
            {
                target.FinalLetterGradeEarned = source.FinalLetterGradeEarned;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFinalNumericGradeEarnedSupported)
                && target.FinalNumericGradeEarned != source.FinalNumericGradeEarned)
            {
                target.FinalNumericGradeEarned = source.FinalNumericGradeEarned;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMethodCreditEarnedDescriptorSupported)
                && target.MethodCreditEarnedDescriptor != source.MethodCreditEarnedDescriptor)
            {
                target.MethodCreditEarnedDescriptor = source.MethodCreditEarnedDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolIdSupported)
                && target.SchoolId != source.SchoolId)
            {
                target.SchoolId = source.SchoolId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsWhenTakenGradeLevelDescriptorSupported)
                && target.WhenTakenGradeLevelDescriptor != source.WhenTakenGradeLevelDescriptor)
            {
                target.WhenTakenGradeLevelDescriptor = source.WhenTakenGradeLevelDescriptor;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsTeacherCandidateCourseTranscriptEarnedAdditionalCreditsSupported)
            {
                isModified |= 
                    source.TeacherCandidateCourseTranscriptEarnedAdditionalCredits.SynchronizeCollectionTo(
                        target.TeacherCandidateCourseTranscriptEarnedAdditionalCredits, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidateCourseTranscript = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateCourseTranscriptEarnedAdditionalCreditsIncluded);
            }


            return isModified;
        }



        public static void MapTo(this ITeacherCandidateCourseTranscript source, ITeacherCandidateCourseTranscript target, Action<ITeacherCandidateCourseTranscript, ITeacherCandidateCourseTranscript> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateCourseTranscriptSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateCourseTranscriptSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CourseAttemptResultDescriptor = source.CourseAttemptResultDescriptor;
            target.CourseCode = source.CourseCode;
            target.CourseEducationOrganizationId = source.CourseEducationOrganizationId;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.SchoolYear = source.SchoolYear;
            target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAlternativeCourseCodeSupported)
                target.AlternativeCourseCode = source.AlternativeCourseCode;
            else
                targetSynchSupport.IsAlternativeCourseCodeSupported = false;

            if (sourceSynchSupport.IsAlternativeCourseTitleSupported)
                target.AlternativeCourseTitle = source.AlternativeCourseTitle;
            else
                targetSynchSupport.IsAlternativeCourseTitleSupported = false;

            if (sourceSynchSupport.IsAttemptedCreditConversionSupported)
                target.AttemptedCreditConversion = source.AttemptedCreditConversion;
            else
                targetSynchSupport.IsAttemptedCreditConversionSupported = false;

            if (sourceSynchSupport.IsAttemptedCreditsSupported)
                target.AttemptedCredits = source.AttemptedCredits;
            else
                targetSynchSupport.IsAttemptedCreditsSupported = false;

            if (sourceSynchSupport.IsAttemptedCreditTypeDescriptorSupported)
                target.AttemptedCreditTypeDescriptor = source.AttemptedCreditTypeDescriptor;
            else
                targetSynchSupport.IsAttemptedCreditTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsCourseRepeatCodeDescriptorSupported)
                target.CourseRepeatCodeDescriptor = source.CourseRepeatCodeDescriptor;
            else
                targetSynchSupport.IsCourseRepeatCodeDescriptorSupported = false;

            if (sourceSynchSupport.IsCourseTitleSupported)
                target.CourseTitle = source.CourseTitle;
            else
                targetSynchSupport.IsCourseTitleSupported = false;

            if (sourceSynchSupport.IsEarnedCreditConversionSupported)
                target.EarnedCreditConversion = source.EarnedCreditConversion;
            else
                targetSynchSupport.IsEarnedCreditConversionSupported = false;

            if (sourceSynchSupport.IsEarnedCreditsSupported)
                target.EarnedCredits = source.EarnedCredits;
            else
                targetSynchSupport.IsEarnedCreditsSupported = false;

            if (sourceSynchSupport.IsEarnedCreditTypeDescriptorSupported)
                target.EarnedCreditTypeDescriptor = source.EarnedCreditTypeDescriptor;
            else
                targetSynchSupport.IsEarnedCreditTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsFinalLetterGradeEarnedSupported)
                target.FinalLetterGradeEarned = source.FinalLetterGradeEarned;
            else
                targetSynchSupport.IsFinalLetterGradeEarnedSupported = false;

            if (sourceSynchSupport.IsFinalNumericGradeEarnedSupported)
                target.FinalNumericGradeEarned = source.FinalNumericGradeEarned;
            else
                targetSynchSupport.IsFinalNumericGradeEarnedSupported = false;

            if (sourceSynchSupport.IsMethodCreditEarnedDescriptorSupported)
                target.MethodCreditEarnedDescriptor = source.MethodCreditEarnedDescriptor;
            else
                targetSynchSupport.IsMethodCreditEarnedDescriptorSupported = false;

            if (sourceSynchSupport.IsSchoolIdSupported)
                target.SchoolId = source.SchoolId;
            else
                targetSynchSupport.IsSchoolIdSupported = false;

            if (sourceSynchSupport.IsWhenTakenGradeLevelDescriptorSupported)
                target.WhenTakenGradeLevelDescriptor = source.WhenTakenGradeLevelDescriptor;
            else
                targetSynchSupport.IsWhenTakenGradeLevelDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CourseResourceId = source.CourseResourceId;
                target.CourseDiscriminator = source.CourseDiscriminator;
                target.SchoolResourceId = source.SchoolResourceId;
                target.TeacherCandidateAcademicRecordResourceId = source.TeacherCandidateAcademicRecordResourceId;
                target.TeacherCandidateAcademicRecordDiscriminator = source.TeacherCandidateAcademicRecordDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsTeacherCandidateCourseTranscriptEarnedAdditionalCreditsSupported)
            {    
                targetSynchSupport.IsTeacherCandidateCourseTranscriptEarnedAdditionalCreditsIncluded = sourceSynchSupport.IsTeacherCandidateCourseTranscriptEarnedAdditionalCreditsIncluded;
                source.TeacherCandidateCourseTranscriptEarnedAdditionalCredits.MapCollectionTo(target.TeacherCandidateCourseTranscriptEarnedAdditionalCredits, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateCourseTranscriptEarnedAdditionalCreditsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateCourseTranscriptSynchronizationSourceSupport 
    {
        bool IsAlternativeCourseCodeSupported { get; set; }
        bool IsAlternativeCourseTitleSupported { get; set; }
        bool IsAttemptedCreditConversionSupported { get; set; }
        bool IsAttemptedCreditsSupported { get; set; }
        bool IsAttemptedCreditTypeDescriptorSupported { get; set; }
        bool IsCourseRepeatCodeDescriptorSupported { get; set; }
        bool IsCourseTitleSupported { get; set; }
        bool IsEarnedCreditConversionSupported { get; set; }
        bool IsEarnedCreditsSupported { get; set; }
        bool IsEarnedCreditTypeDescriptorSupported { get; set; }
        bool IsFinalLetterGradeEarnedSupported { get; set; }
        bool IsFinalNumericGradeEarnedSupported { get; set; }
        bool IsMethodCreditEarnedDescriptorSupported { get; set; }
        bool IsSchoolIdSupported { get; set; }
        bool IsTeacherCandidateCourseTranscriptEarnedAdditionalCreditsSupported { get; set; }
        bool IsWhenTakenGradeLevelDescriptorSupported { get; set; }
        Func<ITeacherCandidateCourseTranscriptEarnedAdditionalCredits, bool> IsTeacherCandidateCourseTranscriptEarnedAdditionalCreditsIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateCourseTranscriptEarnedAdditionalCreditsMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateCourseTranscriptEarnedAdditionalCredits source, ITeacherCandidateCourseTranscriptEarnedAdditionalCredits target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateCourseTranscriptEarnedAdditionalCreditsSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AdditionalCreditTypeDescriptor != target.AdditionalCreditTypeDescriptor)
            {
                source.AdditionalCreditTypeDescriptor = target.AdditionalCreditTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCreditsSupported)
                && target.Credits != source.Credits)
            {
                target.Credits = source.Credits;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateCourseTranscriptEarnedAdditionalCredits source, ITeacherCandidateCourseTranscriptEarnedAdditionalCredits target, Action<ITeacherCandidateCourseTranscriptEarnedAdditionalCredits, ITeacherCandidateCourseTranscriptEarnedAdditionalCredits> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateCourseTranscriptEarnedAdditionalCreditsSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateCourseTranscriptEarnedAdditionalCreditsSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AdditionalCreditTypeDescriptor = source.AdditionalCreditTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCreditsSupported)
                target.Credits = source.Credits;
            else
                targetSynchSupport.IsCreditsSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateCourseTranscriptEarnedAdditionalCreditsSynchronizationSourceSupport 
    {
        bool IsCreditsSupported { get; set; }
    }
 
}
// Aggregate: TeacherCandidateFieldworkAbsenceEvent

namespace EdFi.Ods.Entities.Common.TPDM //.TeacherCandidateFieldworkAbsenceEventAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateFieldworkAbsenceEventMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateFieldworkAbsenceEvent source, ITeacherCandidateFieldworkAbsenceEvent target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateFieldworkAbsenceEventSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AbsenceEventCategoryDescriptor != target.AbsenceEventCategoryDescriptor)
            {
                source.AbsenceEventCategoryDescriptor = target.AbsenceEventCategoryDescriptor;
            }
            if (source.TeacherCandidateIdentifier != target.TeacherCandidateIdentifier)
            {
                source.TeacherCandidateIdentifier = target.TeacherCandidateIdentifier;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAbsenceEventReasonSupported)
                && target.AbsenceEventReason != source.AbsenceEventReason)
            {
                target.AbsenceEventReason = source.AbsenceEventReason;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEventDateSupported)
                && target.EventDate != source.EventDate)
            {
                target.EventDate = source.EventDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHoursAbsentSupported)
                && target.HoursAbsent != source.HoursAbsent)
            {
                target.HoursAbsent = source.HoursAbsent;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateFieldworkAbsenceEvent source, ITeacherCandidateFieldworkAbsenceEvent target, Action<ITeacherCandidateFieldworkAbsenceEvent, ITeacherCandidateFieldworkAbsenceEvent> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateFieldworkAbsenceEventSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateFieldworkAbsenceEventSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AbsenceEventCategoryDescriptor = source.AbsenceEventCategoryDescriptor;
            target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAbsenceEventReasonSupported)
                target.AbsenceEventReason = source.AbsenceEventReason;
            else
                targetSynchSupport.IsAbsenceEventReasonSupported = false;

            if (sourceSynchSupport.IsEventDateSupported)
                target.EventDate = source.EventDate;
            else
                targetSynchSupport.IsEventDateSupported = false;

            if (sourceSynchSupport.IsHoursAbsentSupported)
                target.HoursAbsent = source.HoursAbsent;
            else
                targetSynchSupport.IsHoursAbsentSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.TeacherCandidateResourceId = source.TeacherCandidateResourceId;
                target.TeacherCandidateDiscriminator = source.TeacherCandidateDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateFieldworkAbsenceEventSynchronizationSourceSupport 
    {
        bool IsAbsenceEventReasonSupported { get; set; }
        bool IsEventDateSupported { get; set; }
        bool IsHoursAbsentSupported { get; set; }
    }
 
}
// Aggregate: TeacherCandidateFieldworkExperience

namespace EdFi.Ods.Entities.Common.TPDM //.TeacherCandidateFieldworkExperienceAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateFieldworkExperienceMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateFieldworkExperience source, ITeacherCandidateFieldworkExperience target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateFieldworkExperienceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.FieldworkIdentifier != target.FieldworkIdentifier)
            {
                source.FieldworkIdentifier = target.FieldworkIdentifier;
            }
            if (source.TeacherCandidateIdentifier != target.TeacherCandidateIdentifier)
            {
                source.TeacherCandidateIdentifier = target.TeacherCandidateIdentifier;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFieldworkTypeDescriptorSupported)
                && target.FieldworkTypeDescriptor != source.FieldworkTypeDescriptor)
            {
                target.FieldworkTypeDescriptor = source.FieldworkTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHoursCompletedSupported)
                && target.HoursCompleted != source.HoursCompleted)
            {
                target.HoursCompleted = source.HoursCompleted;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProgramGatewayDescriptorSupported)
                && target.ProgramGatewayDescriptor != source.ProgramGatewayDescriptor)
            {
                target.ProgramGatewayDescriptor = source.ProgramGatewayDescriptor;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // TeacherCandidateFieldworkExperienceCoteaching
            if (sourceSupport == null || sourceSupport.IsTeacherCandidateFieldworkExperienceCoteachingSupported)
            {
                if (source.TeacherCandidateFieldworkExperienceCoteaching == null)
                {
                    if (target.TeacherCandidateFieldworkExperienceCoteaching != null)
                    {
                        target.TeacherCandidateFieldworkExperienceCoteaching = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.TeacherCandidateFieldworkExperienceCoteaching == null)
                    {
                        var itemType = target.GetType().GetProperty("TeacherCandidateFieldworkExperienceCoteaching").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.TeacherCandidateFieldworkExperienceCoteaching = (ITeacherCandidateFieldworkExperienceCoteaching) newItem;
                    }

                    isModified |= source.TeacherCandidateFieldworkExperienceCoteaching.Synchronize(target.TeacherCandidateFieldworkExperienceCoteaching);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsTeacherCandidateFieldworkExperienceSchoolsSupported)
            {
                isModified |= 
                    source.TeacherCandidateFieldworkExperienceSchools.SynchronizeCollectionTo(
                        target.TeacherCandidateFieldworkExperienceSchools, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidateFieldworkExperience = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateFieldworkExperienceSchoolIncluded);
            }


            return isModified;
        }



        public static void MapTo(this ITeacherCandidateFieldworkExperience source, ITeacherCandidateFieldworkExperience target, Action<ITeacherCandidateFieldworkExperience, ITeacherCandidateFieldworkExperience> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateFieldworkExperienceSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateFieldworkExperienceSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.FieldworkIdentifier = source.FieldworkIdentifier;
            target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsFieldworkTypeDescriptorSupported)
                target.FieldworkTypeDescriptor = source.FieldworkTypeDescriptor;
            else
                targetSynchSupport.IsFieldworkTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsHoursCompletedSupported)
                target.HoursCompleted = source.HoursCompleted;
            else
                targetSynchSupport.IsHoursCompletedSupported = false;

            if (sourceSynchSupport.IsProgramGatewayDescriptorSupported)
                target.ProgramGatewayDescriptor = source.ProgramGatewayDescriptor;
            else
                targetSynchSupport.IsProgramGatewayDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.TeacherCandidateResourceId = source.TeacherCandidateResourceId;
                target.TeacherCandidateDiscriminator = source.TeacherCandidateDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // TeacherCandidateFieldworkExperienceCoteaching (Source)
            if (sourceSynchSupport.IsTeacherCandidateFieldworkExperienceCoteachingSupported)
            {
                var itemProperty = target.GetType().GetProperty("TeacherCandidateFieldworkExperienceCoteaching");
                
                if (itemProperty != null)
                {                    
                    if (source.TeacherCandidateFieldworkExperienceCoteaching == null)
                    {
                        target.TeacherCandidateFieldworkExperienceCoteaching = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetTeacherCandidateFieldworkExperienceCoteaching = Activator.CreateInstance(itemType);
                        (targetTeacherCandidateFieldworkExperienceCoteaching as IChildEntity)?.SetParent(target);
                        source.TeacherCandidateFieldworkExperienceCoteaching.Map(targetTeacherCandidateFieldworkExperienceCoteaching);
                        
                        // Update the target reference appropriately
                        target.TeacherCandidateFieldworkExperienceCoteaching = (ITeacherCandidateFieldworkExperienceCoteaching) targetTeacherCandidateFieldworkExperienceCoteaching;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateFieldworkExperienceCoteachingSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists

            if (sourceSynchSupport.IsTeacherCandidateFieldworkExperienceSchoolsSupported)
            {    
                targetSynchSupport.IsTeacherCandidateFieldworkExperienceSchoolIncluded = sourceSynchSupport.IsTeacherCandidateFieldworkExperienceSchoolIncluded;
                source.TeacherCandidateFieldworkExperienceSchools.MapCollectionTo(target.TeacherCandidateFieldworkExperienceSchools, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateFieldworkExperienceSchoolsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateFieldworkExperienceSynchronizationSourceSupport 
    {
        bool IsEndDateSupported { get; set; }
        bool IsFieldworkTypeDescriptorSupported { get; set; }
        bool IsHoursCompletedSupported { get; set; }
        bool IsProgramGatewayDescriptorSupported { get; set; }
        bool IsTeacherCandidateFieldworkExperienceCoteachingSupported { get; set; }
        bool IsTeacherCandidateFieldworkExperienceSchoolsSupported { get; set; }
        Func<ITeacherCandidateFieldworkExperienceSchool, bool> IsTeacherCandidateFieldworkExperienceSchoolIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateFieldworkExperienceCoteachingMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateFieldworkExperienceCoteaching source, ITeacherCandidateFieldworkExperienceCoteaching target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateFieldworkExperienceCoteachingSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCoteachingBeginDateSupported)
                && target.CoteachingBeginDate != source.CoteachingBeginDate)
            {
                target.CoteachingBeginDate = source.CoteachingBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCoteachingEndDateSupported)
                && target.CoteachingEndDate != source.CoteachingEndDate)
            {
                target.CoteachingEndDate = source.CoteachingEndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateFieldworkExperienceCoteaching source, ITeacherCandidateFieldworkExperienceCoteaching target, Action<ITeacherCandidateFieldworkExperienceCoteaching, ITeacherCandidateFieldworkExperienceCoteaching> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateFieldworkExperienceCoteachingSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateFieldworkExperienceCoteachingSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsCoteachingBeginDateSupported)
                target.CoteachingBeginDate = source.CoteachingBeginDate;
            else
                targetSynchSupport.IsCoteachingBeginDateSupported = false;

            if (sourceSynchSupport.IsCoteachingEndDateSupported)
                target.CoteachingEndDate = source.CoteachingEndDate;
            else
                targetSynchSupport.IsCoteachingEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateFieldworkExperienceCoteachingSynchronizationSourceSupport 
    {
        bool IsCoteachingBeginDateSupported { get; set; }
        bool IsCoteachingEndDateSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateFieldworkExperienceSchoolMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateFieldworkExperienceSchool source, ITeacherCandidateFieldworkExperienceSchool target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateFieldworkExperienceSchoolSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateFieldworkExperienceSchool source, ITeacherCandidateFieldworkExperienceSchool target, Action<ITeacherCandidateFieldworkExperienceSchool, ITeacherCandidateFieldworkExperienceSchool> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateFieldworkExperienceSchoolSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateFieldworkExperienceSchoolSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.SchoolId = source.SchoolId;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolResourceId = source.SchoolResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateFieldworkExperienceSchoolSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: TeacherCandidateFieldworkExperienceSectionAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.TeacherCandidateFieldworkExperienceSectionAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateFieldworkExperienceSectionAssociationMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateFieldworkExperienceSectionAssociation source, ITeacherCandidateFieldworkExperienceSectionAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateFieldworkExperienceSectionAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.FieldworkIdentifier != target.FieldworkIdentifier)
            {
                source.FieldworkIdentifier = target.FieldworkIdentifier;
            }
            if (source.LocalCourseCode != target.LocalCourseCode)
            {
                source.LocalCourseCode = target.LocalCourseCode;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SectionIdentifier != target.SectionIdentifier)
            {
                source.SectionIdentifier = target.SectionIdentifier;
            }
            if (source.SessionName != target.SessionName)
            {
                source.SessionName = target.SessionName;
            }
            if (source.TeacherCandidateIdentifier != target.TeacherCandidateIdentifier)
            {
                source.TeacherCandidateIdentifier = target.TeacherCandidateIdentifier;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateFieldworkExperienceSectionAssociation source, ITeacherCandidateFieldworkExperienceSectionAssociation target, Action<ITeacherCandidateFieldworkExperienceSectionAssociation, ITeacherCandidateFieldworkExperienceSectionAssociation> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateFieldworkExperienceSectionAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateFieldworkExperienceSectionAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.FieldworkIdentifier = source.FieldworkIdentifier;
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;
            target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SectionResourceId = source.SectionResourceId;
                target.SectionDiscriminator = source.SectionDiscriminator;
                target.TeacherCandidateFieldworkExperienceResourceId = source.TeacherCandidateFieldworkExperienceResourceId;
                target.TeacherCandidateFieldworkExperienceDiscriminator = source.TeacherCandidateFieldworkExperienceDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateFieldworkExperienceSectionAssociationSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: TeacherCandidateProfessionalDevelopmentEventAttendance

namespace EdFi.Ods.Entities.Common.TPDM //.TeacherCandidateProfessionalDevelopmentEventAttendanceAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateProfessionalDevelopmentEventAttendanceMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateProfessionalDevelopmentEventAttendance source, ITeacherCandidateProfessionalDevelopmentEventAttendance target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateProfessionalDevelopmentEventAttendanceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AttendanceDate != target.AttendanceDate)
            {
                source.AttendanceDate = target.AttendanceDate;
            }
            if (source.ProfessionalDevelopmentTitle != target.ProfessionalDevelopmentTitle)
            {
                source.ProfessionalDevelopmentTitle = target.ProfessionalDevelopmentTitle;
            }
            if (source.TeacherCandidateIdentifier != target.TeacherCandidateIdentifier)
            {
                source.TeacherCandidateIdentifier = target.TeacherCandidateIdentifier;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAttendanceEventCategoryDescriptorSupported)
                && target.AttendanceEventCategoryDescriptor != source.AttendanceEventCategoryDescriptor)
            {
                target.AttendanceEventCategoryDescriptor = source.AttendanceEventCategoryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAttendanceEventReasonSupported)
                && target.AttendanceEventReason != source.AttendanceEventReason)
            {
                target.AttendanceEventReason = source.AttendanceEventReason;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateProfessionalDevelopmentEventAttendance source, ITeacherCandidateProfessionalDevelopmentEventAttendance target, Action<ITeacherCandidateProfessionalDevelopmentEventAttendance, ITeacherCandidateProfessionalDevelopmentEventAttendance> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateProfessionalDevelopmentEventAttendanceSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateProfessionalDevelopmentEventAttendanceSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AttendanceDate = source.AttendanceDate;
            target.ProfessionalDevelopmentTitle = source.ProfessionalDevelopmentTitle;
            target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAttendanceEventCategoryDescriptorSupported)
                target.AttendanceEventCategoryDescriptor = source.AttendanceEventCategoryDescriptor;
            else
                targetSynchSupport.IsAttendanceEventCategoryDescriptorSupported = false;

            if (sourceSynchSupport.IsAttendanceEventReasonSupported)
                target.AttendanceEventReason = source.AttendanceEventReason;
            else
                targetSynchSupport.IsAttendanceEventReasonSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ProfessionalDevelopmentEventResourceId = source.ProfessionalDevelopmentEventResourceId;
                target.ProfessionalDevelopmentEventDiscriminator = source.ProfessionalDevelopmentEventDiscriminator;
                target.TeacherCandidateResourceId = source.TeacherCandidateResourceId;
                target.TeacherCandidateDiscriminator = source.TeacherCandidateDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateProfessionalDevelopmentEventAttendanceSynchronizationSourceSupport 
    {
        bool IsAttendanceEventCategoryDescriptorSupported { get; set; }
        bool IsAttendanceEventReasonSupported { get; set; }
    }
 
}
// Aggregate: TeacherCandidateStaffAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.TeacherCandidateStaffAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateStaffAssociationMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateStaffAssociation source, ITeacherCandidateStaffAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateStaffAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }
            if (source.TeacherCandidateIdentifier != target.TeacherCandidateIdentifier)
            {
                source.TeacherCandidateIdentifier = target.TeacherCandidateIdentifier;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateStaffAssociation source, ITeacherCandidateStaffAssociation target, Action<ITeacherCandidateStaffAssociation, ITeacherCandidateStaffAssociation> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateStaffAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateStaffAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.StaffUniqueId = source.StaffUniqueId;
            target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
                target.TeacherCandidateResourceId = source.TeacherCandidateResourceId;
                target.TeacherCandidateDiscriminator = source.TeacherCandidateDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateStaffAssociationSynchronizationSourceSupport 
    {
        bool IsBeginDateSupported { get; set; }
        bool IsEndDateSupported { get; set; }
    }
 
}
// Aggregate: TeacherCandidateStudentGrowthMeasure

namespace EdFi.Ods.Entities.Common.TPDM //.TeacherCandidateStudentGrowthMeasureAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateStudentGrowthMeasureMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateStudentGrowthMeasure source, ITeacherCandidateStudentGrowthMeasure target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateStudentGrowthMeasureSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.FactAsOfDate != target.FactAsOfDate)
            {
                source.FactAsOfDate = target.FactAsOfDate;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.TeacherCandidateIdentifier != target.TeacherCandidateIdentifier)
            {
                source.TeacherCandidateIdentifier = target.TeacherCandidateIdentifier;
            }
            if (source.TeacherCandidateStudentGrowthMeasureIdentifier != target.TeacherCandidateStudentGrowthMeasureIdentifier)
            {
                source.TeacherCandidateStudentGrowthMeasureIdentifier = target.TeacherCandidateStudentGrowthMeasureIdentifier;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsResultDatatypeTypeDescriptorSupported)
                && target.ResultDatatypeTypeDescriptor != source.ResultDatatypeTypeDescriptor)
            {
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStandardErrorSupported)
                && target.StandardError != source.StandardError)
            {
                target.StandardError = source.StandardError;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStudentGrowthActualScoreSupported)
                && target.StudentGrowthActualScore != source.StudentGrowthActualScore)
            {
                target.StudentGrowthActualScore = source.StudentGrowthActualScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStudentGrowthMeasureDateSupported)
                && target.StudentGrowthMeasureDate != source.StudentGrowthMeasureDate)
            {
                target.StudentGrowthMeasureDate = source.StudentGrowthMeasureDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStudentGrowthMetSupported)
                && target.StudentGrowthMet != source.StudentGrowthMet)
            {
                target.StudentGrowthMet = source.StudentGrowthMet;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStudentGrowthNCountSupported)
                && target.StudentGrowthNCount != source.StudentGrowthNCount)
            {
                target.StudentGrowthNCount = source.StudentGrowthNCount;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStudentGrowthTargetScoreSupported)
                && target.StudentGrowthTargetScore != source.StudentGrowthTargetScore)
            {
                target.StudentGrowthTargetScore = source.StudentGrowthTargetScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStudentGrowthTypeDescriptorSupported)
                && target.StudentGrowthTypeDescriptor != source.StudentGrowthTypeDescriptor)
            {
                target.StudentGrowthTypeDescriptor = source.StudentGrowthTypeDescriptor;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsTeacherCandidateStudentGrowthMeasureAcademicSubjectsSupported)
            {
                isModified |= 
                    source.TeacherCandidateStudentGrowthMeasureAcademicSubjects.SynchronizeCollectionTo(
                        target.TeacherCandidateStudentGrowthMeasureAcademicSubjects, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidateStudentGrowthMeasure = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateStudentGrowthMeasureAcademicSubjectIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateStudentGrowthMeasureGradeLevelsSupported)
            {
                isModified |= 
                    source.TeacherCandidateStudentGrowthMeasureGradeLevels.SynchronizeCollectionTo(
                        target.TeacherCandidateStudentGrowthMeasureGradeLevels, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidateStudentGrowthMeasure = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateStudentGrowthMeasureGradeLevelIncluded);
            }


            return isModified;
        }



        public static void MapTo(this ITeacherCandidateStudentGrowthMeasure source, ITeacherCandidateStudentGrowthMeasure target, Action<ITeacherCandidateStudentGrowthMeasure, ITeacherCandidateStudentGrowthMeasure> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateStudentGrowthMeasureSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateStudentGrowthMeasureSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.FactAsOfDate = source.FactAsOfDate;
            target.SchoolYear = source.SchoolYear;
            target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;
            target.TeacherCandidateStudentGrowthMeasureIdentifier = source.TeacherCandidateStudentGrowthMeasureIdentifier;

            // Copy non-PK properties

            if (sourceSynchSupport.IsResultDatatypeTypeDescriptorSupported)
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
            else
                targetSynchSupport.IsResultDatatypeTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsStandardErrorSupported)
                target.StandardError = source.StandardError;
            else
                targetSynchSupport.IsStandardErrorSupported = false;

            if (sourceSynchSupport.IsStudentGrowthActualScoreSupported)
                target.StudentGrowthActualScore = source.StudentGrowthActualScore;
            else
                targetSynchSupport.IsStudentGrowthActualScoreSupported = false;

            if (sourceSynchSupport.IsStudentGrowthMeasureDateSupported)
                target.StudentGrowthMeasureDate = source.StudentGrowthMeasureDate;
            else
                targetSynchSupport.IsStudentGrowthMeasureDateSupported = false;

            if (sourceSynchSupport.IsStudentGrowthMetSupported)
                target.StudentGrowthMet = source.StudentGrowthMet;
            else
                targetSynchSupport.IsStudentGrowthMetSupported = false;

            if (sourceSynchSupport.IsStudentGrowthNCountSupported)
                target.StudentGrowthNCount = source.StudentGrowthNCount;
            else
                targetSynchSupport.IsStudentGrowthNCountSupported = false;

            if (sourceSynchSupport.IsStudentGrowthTargetScoreSupported)
                target.StudentGrowthTargetScore = source.StudentGrowthTargetScore;
            else
                targetSynchSupport.IsStudentGrowthTargetScoreSupported = false;

            if (sourceSynchSupport.IsStudentGrowthTypeDescriptorSupported)
                target.StudentGrowthTypeDescriptor = source.StudentGrowthTypeDescriptor;
            else
                targetSynchSupport.IsStudentGrowthTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
                target.TeacherCandidateResourceId = source.TeacherCandidateResourceId;
                target.TeacherCandidateDiscriminator = source.TeacherCandidateDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsTeacherCandidateStudentGrowthMeasureAcademicSubjectsSupported)
            {    
                targetSynchSupport.IsTeacherCandidateStudentGrowthMeasureAcademicSubjectIncluded = sourceSynchSupport.IsTeacherCandidateStudentGrowthMeasureAcademicSubjectIncluded;
                source.TeacherCandidateStudentGrowthMeasureAcademicSubjects.MapCollectionTo(target.TeacherCandidateStudentGrowthMeasureAcademicSubjects, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateStudentGrowthMeasureAcademicSubjectsSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateStudentGrowthMeasureGradeLevelsSupported)
            {    
                targetSynchSupport.IsTeacherCandidateStudentGrowthMeasureGradeLevelIncluded = sourceSynchSupport.IsTeacherCandidateStudentGrowthMeasureGradeLevelIncluded;
                source.TeacherCandidateStudentGrowthMeasureGradeLevels.MapCollectionTo(target.TeacherCandidateStudentGrowthMeasureGradeLevels, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateStudentGrowthMeasureGradeLevelsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateStudentGrowthMeasureSynchronizationSourceSupport 
    {
        bool IsResultDatatypeTypeDescriptorSupported { get; set; }
        bool IsStandardErrorSupported { get; set; }
        bool IsStudentGrowthActualScoreSupported { get; set; }
        bool IsStudentGrowthMeasureDateSupported { get; set; }
        bool IsStudentGrowthMetSupported { get; set; }
        bool IsStudentGrowthNCountSupported { get; set; }
        bool IsStudentGrowthTargetScoreSupported { get; set; }
        bool IsStudentGrowthTypeDescriptorSupported { get; set; }
        bool IsTeacherCandidateStudentGrowthMeasureAcademicSubjectsSupported { get; set; }
        bool IsTeacherCandidateStudentGrowthMeasureGradeLevelsSupported { get; set; }
        Func<ITeacherCandidateStudentGrowthMeasureAcademicSubject, bool> IsTeacherCandidateStudentGrowthMeasureAcademicSubjectIncluded { get; set; }
        Func<ITeacherCandidateStudentGrowthMeasureGradeLevel, bool> IsTeacherCandidateStudentGrowthMeasureGradeLevelIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateStudentGrowthMeasureAcademicSubjectMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateStudentGrowthMeasureAcademicSubject source, ITeacherCandidateStudentGrowthMeasureAcademicSubject target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateStudentGrowthMeasureAcademicSubjectSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AcademicSubjectDescriptor != target.AcademicSubjectDescriptor)
            {
                source.AcademicSubjectDescriptor = target.AcademicSubjectDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateStudentGrowthMeasureAcademicSubject source, ITeacherCandidateStudentGrowthMeasureAcademicSubject target, Action<ITeacherCandidateStudentGrowthMeasureAcademicSubject, ITeacherCandidateStudentGrowthMeasureAcademicSubject> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateStudentGrowthMeasureAcademicSubjectSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateStudentGrowthMeasureAcademicSubjectSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateStudentGrowthMeasureAcademicSubjectSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateStudentGrowthMeasureGradeLevelMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateStudentGrowthMeasureGradeLevel source, ITeacherCandidateStudentGrowthMeasureGradeLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateStudentGrowthMeasureGradeLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateStudentGrowthMeasureGradeLevel source, ITeacherCandidateStudentGrowthMeasureGradeLevel target, Action<ITeacherCandidateStudentGrowthMeasureGradeLevel, ITeacherCandidateStudentGrowthMeasureGradeLevel> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateStudentGrowthMeasureGradeLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateStudentGrowthMeasureGradeLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateStudentGrowthMeasureGradeLevelSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: TeacherCandidateStudentGrowthMeasureCourseAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.TeacherCandidateStudentGrowthMeasureCourseAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateStudentGrowthMeasureCourseAssociationMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateStudentGrowthMeasureCourseAssociation source, ITeacherCandidateStudentGrowthMeasureCourseAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateStudentGrowthMeasureCourseAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CourseCode != target.CourseCode)
            {
                source.CourseCode = target.CourseCode;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.FactAsOfDate != target.FactAsOfDate)
            {
                source.FactAsOfDate = target.FactAsOfDate;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.TeacherCandidateIdentifier != target.TeacherCandidateIdentifier)
            {
                source.TeacherCandidateIdentifier = target.TeacherCandidateIdentifier;
            }
            if (source.TeacherCandidateStudentGrowthMeasureIdentifier != target.TeacherCandidateStudentGrowthMeasureIdentifier)
            {
                source.TeacherCandidateStudentGrowthMeasureIdentifier = target.TeacherCandidateStudentGrowthMeasureIdentifier;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateStudentGrowthMeasureCourseAssociation source, ITeacherCandidateStudentGrowthMeasureCourseAssociation target, Action<ITeacherCandidateStudentGrowthMeasureCourseAssociation, ITeacherCandidateStudentGrowthMeasureCourseAssociation> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateStudentGrowthMeasureCourseAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateStudentGrowthMeasureCourseAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CourseCode = source.CourseCode;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FactAsOfDate = source.FactAsOfDate;
            target.SchoolYear = source.SchoolYear;
            target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;
            target.TeacherCandidateStudentGrowthMeasureIdentifier = source.TeacherCandidateStudentGrowthMeasureIdentifier;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CourseResourceId = source.CourseResourceId;
                target.CourseDiscriminator = source.CourseDiscriminator;
                target.TeacherCandidateStudentGrowthMeasureResourceId = source.TeacherCandidateStudentGrowthMeasureResourceId;
                target.TeacherCandidateStudentGrowthMeasureDiscriminator = source.TeacherCandidateStudentGrowthMeasureDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateStudentGrowthMeasureCourseAssociationSynchronizationSourceSupport 
    {
        bool IsBeginDateSupported { get; set; }
        bool IsEndDateSupported { get; set; }
    }
 
}
// Aggregate: TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation source, ITeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.FactAsOfDate != target.FactAsOfDate)
            {
                source.FactAsOfDate = target.FactAsOfDate;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.TeacherCandidateIdentifier != target.TeacherCandidateIdentifier)
            {
                source.TeacherCandidateIdentifier = target.TeacherCandidateIdentifier;
            }
            if (source.TeacherCandidateStudentGrowthMeasureIdentifier != target.TeacherCandidateStudentGrowthMeasureIdentifier)
            {
                source.TeacherCandidateStudentGrowthMeasureIdentifier = target.TeacherCandidateStudentGrowthMeasureIdentifier;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation source, ITeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation target, Action<ITeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation, ITeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FactAsOfDate = source.FactAsOfDate;
            target.SchoolYear = source.SchoolYear;
            target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;
            target.TeacherCandidateStudentGrowthMeasureIdentifier = source.TeacherCandidateStudentGrowthMeasureIdentifier;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.TeacherCandidateStudentGrowthMeasureResourceId = source.TeacherCandidateStudentGrowthMeasureResourceId;
                target.TeacherCandidateStudentGrowthMeasureDiscriminator = source.TeacherCandidateStudentGrowthMeasureDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationSynchronizationSourceSupport 
    {
        bool IsBeginDateSupported { get; set; }
        bool IsEndDateSupported { get; set; }
    }
 
}
// Aggregate: TeacherCandidateStudentGrowthMeasureSectionAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.TeacherCandidateStudentGrowthMeasureSectionAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateStudentGrowthMeasureSectionAssociationMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateStudentGrowthMeasureSectionAssociation source, ITeacherCandidateStudentGrowthMeasureSectionAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateStudentGrowthMeasureSectionAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.FactAsOfDate != target.FactAsOfDate)
            {
                source.FactAsOfDate = target.FactAsOfDate;
            }
            if (source.LocalCourseCode != target.LocalCourseCode)
            {
                source.LocalCourseCode = target.LocalCourseCode;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SectionIdentifier != target.SectionIdentifier)
            {
                source.SectionIdentifier = target.SectionIdentifier;
            }
            if (source.SessionName != target.SessionName)
            {
                source.SessionName = target.SessionName;
            }
            if (source.TeacherCandidateIdentifier != target.TeacherCandidateIdentifier)
            {
                source.TeacherCandidateIdentifier = target.TeacherCandidateIdentifier;
            }
            if (source.TeacherCandidateStudentGrowthMeasureIdentifier != target.TeacherCandidateStudentGrowthMeasureIdentifier)
            {
                source.TeacherCandidateStudentGrowthMeasureIdentifier = target.TeacherCandidateStudentGrowthMeasureIdentifier;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateStudentGrowthMeasureSectionAssociation source, ITeacherCandidateStudentGrowthMeasureSectionAssociation target, Action<ITeacherCandidateStudentGrowthMeasureSectionAssociation, ITeacherCandidateStudentGrowthMeasureSectionAssociation> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateStudentGrowthMeasureSectionAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateStudentGrowthMeasureSectionAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.FactAsOfDate = source.FactAsOfDate;
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;
            target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;
            target.TeacherCandidateStudentGrowthMeasureIdentifier = source.TeacherCandidateStudentGrowthMeasureIdentifier;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SectionResourceId = source.SectionResourceId;
                target.SectionDiscriminator = source.SectionDiscriminator;
                target.TeacherCandidateStudentGrowthMeasureResourceId = source.TeacherCandidateStudentGrowthMeasureResourceId;
                target.TeacherCandidateStudentGrowthMeasureDiscriminator = source.TeacherCandidateStudentGrowthMeasureDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateStudentGrowthMeasureSectionAssociationSynchronizationSourceSupport 
    {
        bool IsBeginDateSupported { get; set; }
        bool IsEndDateSupported { get; set; }
    }
 
}
// Aggregate: TeacherCandidateTeacherPreparationProviderAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.TeacherCandidateTeacherPreparationProviderAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateTeacherPreparationProviderAssociationMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateTeacherPreparationProviderAssociation source, ITeacherCandidateTeacherPreparationProviderAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateTeacherPreparationProviderAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EntryDate != target.EntryDate)
            {
                source.EntryDate = target.EntryDate;
            }
            if (source.TeacherCandidateIdentifier != target.TeacherCandidateIdentifier)
            {
                source.TeacherCandidateIdentifier = target.TeacherCandidateIdentifier;
            }
            if (source.TeacherPreparationProviderId != target.TeacherPreparationProviderId)
            {
                source.TeacherPreparationProviderId = target.TeacherPreparationProviderId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsClassOfSchoolYearSupported)
                && target.ClassOfSchoolYear != source.ClassOfSchoolYear)
            {
                target.ClassOfSchoolYear = source.ClassOfSchoolYear;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEntryTypeDescriptorSupported)
                && target.EntryTypeDescriptor != source.EntryTypeDescriptor)
            {
                target.EntryTypeDescriptor = source.EntryTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsExitWithdrawDateSupported)
                && target.ExitWithdrawDate != source.ExitWithdrawDate)
            {
                target.ExitWithdrawDate = source.ExitWithdrawDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsExitWithdrawTypeDescriptorSupported)
                && target.ExitWithdrawTypeDescriptor != source.ExitWithdrawTypeDescriptor)
            {
                target.ExitWithdrawTypeDescriptor = source.ExitWithdrawTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolYearSupported)
                && target.SchoolYear != source.SchoolYear)
            {
                target.SchoolYear = source.SchoolYear;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateTeacherPreparationProviderAssociation source, ITeacherCandidateTeacherPreparationProviderAssociation target, Action<ITeacherCandidateTeacherPreparationProviderAssociation, ITeacherCandidateTeacherPreparationProviderAssociation> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateTeacherPreparationProviderAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateTeacherPreparationProviderAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EntryDate = source.EntryDate;
            target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;
            target.TeacherPreparationProviderId = source.TeacherPreparationProviderId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsClassOfSchoolYearSupported)
                target.ClassOfSchoolYear = source.ClassOfSchoolYear;
            else
                targetSynchSupport.IsClassOfSchoolYearSupported = false;

            if (sourceSynchSupport.IsEntryTypeDescriptorSupported)
                target.EntryTypeDescriptor = source.EntryTypeDescriptor;
            else
                targetSynchSupport.IsEntryTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsExitWithdrawDateSupported)
                target.ExitWithdrawDate = source.ExitWithdrawDate;
            else
                targetSynchSupport.IsExitWithdrawDateSupported = false;

            if (sourceSynchSupport.IsExitWithdrawTypeDescriptorSupported)
                target.ExitWithdrawTypeDescriptor = source.ExitWithdrawTypeDescriptor;
            else
                targetSynchSupport.IsExitWithdrawTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsSchoolYearSupported)
                target.SchoolYear = source.SchoolYear;
            else
                targetSynchSupport.IsSchoolYearSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ClassOfSchoolYearTypeResourceId = source.ClassOfSchoolYearTypeResourceId;
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
                target.TeacherCandidateResourceId = source.TeacherCandidateResourceId;
                target.TeacherCandidateDiscriminator = source.TeacherCandidateDiscriminator;
                target.TeacherPreparationProviderResourceId = source.TeacherPreparationProviderResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateTeacherPreparationProviderAssociationSynchronizationSourceSupport 
    {
        bool IsClassOfSchoolYearSupported { get; set; }
        bool IsEntryTypeDescriptorSupported { get; set; }
        bool IsExitWithdrawDateSupported { get; set; }
        bool IsExitWithdrawTypeDescriptorSupported { get; set; }
        bool IsSchoolYearSupported { get; set; }
    }
 
}
// Aggregate: TeacherCandidateTeacherPreparationProviderProgramAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.TeacherCandidateTeacherPreparationProviderProgramAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateTeacherPreparationProviderProgramAssociationMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateTeacherPreparationProviderProgramAssociation source, ITeacherCandidateTeacherPreparationProviderProgramAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateTeacherPreparationProviderProgramAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.ProgramName != target.ProgramName)
            {
                source.ProgramName = target.ProgramName;
            }
            if (source.ProgramTypeDescriptor != target.ProgramTypeDescriptor)
            {
                source.ProgramTypeDescriptor = target.ProgramTypeDescriptor;
            }
            if (source.TeacherCandidateIdentifier != target.TeacherCandidateIdentifier)
            {
                source.TeacherCandidateIdentifier = target.TeacherCandidateIdentifier;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsReasonExitedDescriptorSupported)
                && target.ReasonExitedDescriptor != source.ReasonExitedDescriptor)
            {
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateTeacherPreparationProviderProgramAssociation source, ITeacherCandidateTeacherPreparationProviderProgramAssociation target, Action<ITeacherCandidateTeacherPreparationProviderProgramAssociation, ITeacherCandidateTeacherPreparationProviderProgramAssociation> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateTeacherPreparationProviderProgramAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateTeacherPreparationProviderProgramAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;
            target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsReasonExitedDescriptorSupported)
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;
            else
                targetSynchSupport.IsReasonExitedDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.TeacherCandidateResourceId = source.TeacherCandidateResourceId;
                target.TeacherCandidateDiscriminator = source.TeacherCandidateDiscriminator;
                target.TeacherPreparationProviderProgramResourceId = source.TeacherPreparationProviderProgramResourceId;
                target.TeacherPreparationProviderProgramDiscriminator = source.TeacherPreparationProviderProgramDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateTeacherPreparationProviderProgramAssociationSynchronizationSourceSupport 
    {
        bool IsEndDateSupported { get; set; }
        bool IsReasonExitedDescriptorSupported { get; set; }
    }
 
}
// Aggregate: TeacherPreparationProgramTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.TeacherPreparationProgramTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TeacherPreparationProgramTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this ITeacherPreparationProgramTypeDescriptor source, ITeacherPreparationProgramTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherPreparationProgramTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TeacherPreparationProgramTypeDescriptorId != target.TeacherPreparationProgramTypeDescriptorId)
            {
                source.TeacherPreparationProgramTypeDescriptorId = target.TeacherPreparationProgramTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherPreparationProgramTypeDescriptor source, ITeacherPreparationProgramTypeDescriptor target, Action<ITeacherPreparationProgramTypeDescriptor, ITeacherPreparationProgramTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ITeacherPreparationProgramTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherPreparationProgramTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.TeacherPreparationProgramTypeDescriptorId = source.TeacherPreparationProgramTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherPreparationProgramTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: TeacherPreparationProvider

namespace EdFi.Ods.Entities.Common.TPDM //.TeacherPreparationProviderAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TeacherPreparationProviderMapper 
    {
        public static bool SynchronizeTo(this ITeacherPreparationProvider source, ITeacherPreparationProvider target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherPreparationProviderSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TeacherPreparationProviderId != target.TeacherPreparationProviderId)
            {
                source.TeacherPreparationProviderId = target.TeacherPreparationProviderId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsNameOfInstitutionSupported)
                && target.NameOfInstitution != source.NameOfInstitution)
            {
                target.NameOfInstitution = source.NameOfInstitution;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOperationalStatusDescriptorSupported)
                && target.OperationalStatusDescriptor != source.OperationalStatusDescriptor)
            {
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortNameOfInstitutionSupported)
                && target.ShortNameOfInstitution != source.ShortNameOfInstitution)
            {
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsWebSiteSupported)
                && target.WebSite != source.WebSite)
            {
                target.WebSite = source.WebSite;
                isModified = true;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsFederalLocaleCodeDescriptorSupported)
                && target.FederalLocaleCodeDescriptor != source.FederalLocaleCodeDescriptor)
            {
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolIdSupported)
                && target.SchoolId != source.SchoolId)
            {
                target.SchoolId = source.SchoolId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsUniversityIdSupported)
                && target.UniversityId != source.UniversityId)
            {
                target.UniversityId = source.UniversityId;
                isModified = true;
            }


            // Synch inherited lists
            if (sourceSupport == null || sourceSupport.IsEducationOrganizationAddressesSupported)
                isModified |= source.EducationOrganizationAddresses.SynchronizeCollectionTo(target.EducationOrganizationAddresses, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationAddressIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationCategoriesSupported)
                isModified |= source.EducationOrganizationCategories.SynchronizeCollectionTo(target.EducationOrganizationCategories, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationCategoryIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationIdentificationCodesSupported)
                isModified |= source.EducationOrganizationIdentificationCodes.SynchronizeCollectionTo(target.EducationOrganizationIdentificationCodes, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationIdentificationCodeIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationInstitutionTelephonesSupported)
                isModified |= source.EducationOrganizationInstitutionTelephones.SynchronizeCollectionTo(target.EducationOrganizationInstitutionTelephones, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationInstitutionTelephoneIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationInternationalAddressesSupported)
                isModified |= source.EducationOrganizationInternationalAddresses.SynchronizeCollectionTo(target.EducationOrganizationInternationalAddresses, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationInternationalAddressIncluded);


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherPreparationProvider source, ITeacherPreparationProvider target, Action<ITeacherPreparationProvider, ITeacherPreparationProvider> onMapped)
        {
            var sourceSynchSupport = source as ITeacherPreparationProviderSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherPreparationProviderSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.TeacherPreparationProviderId = source.TeacherPreparationProviderId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsNameOfInstitutionSupported)
                target.NameOfInstitution = source.NameOfInstitution;
            else
                targetSynchSupport.IsNameOfInstitutionSupported = false;

            if (sourceSynchSupport.IsOperationalStatusDescriptorSupported)
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;
            else
                targetSynchSupport.IsOperationalStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsShortNameOfInstitutionSupported)
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;
            else
                targetSynchSupport.IsShortNameOfInstitutionSupported = false;

            if (sourceSynchSupport.IsWebSiteSupported)
                target.WebSite = source.WebSite;
            else
                targetSynchSupport.IsWebSiteSupported = false;

            // Copy non-PK properties

            if (sourceSynchSupport.IsFederalLocaleCodeDescriptorSupported)
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
            else
                targetSynchSupport.IsFederalLocaleCodeDescriptorSupported = false;

            if (sourceSynchSupport.IsSchoolIdSupported)
                target.SchoolId = source.SchoolId;
            else
                targetSynchSupport.IsSchoolIdSupported = false;

            if (sourceSynchSupport.IsUniversityIdSupported)
                target.UniversityId = source.UniversityId;
            else
                targetSynchSupport.IsUniversityIdSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolResourceId = source.SchoolResourceId;
                target.UniversityResourceId = source.UniversityResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            if (sourceSynchSupport.IsEducationOrganizationAddressesSupported)
            {
                targetSynchSupport.IsEducationOrganizationAddressIncluded = sourceSynchSupport.IsEducationOrganizationAddressIncluded;
                source.EducationOrganizationAddresses.MapCollectionTo(target.EducationOrganizationAddresses, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationAddressesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationCategoriesSupported)
            {
                targetSynchSupport.IsEducationOrganizationCategoryIncluded = sourceSynchSupport.IsEducationOrganizationCategoryIncluded;
                source.EducationOrganizationCategories.MapCollectionTo(target.EducationOrganizationCategories, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationCategoriesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationIdentificationCodesSupported)
            {
                targetSynchSupport.IsEducationOrganizationIdentificationCodeIncluded = sourceSynchSupport.IsEducationOrganizationIdentificationCodeIncluded;
                source.EducationOrganizationIdentificationCodes.MapCollectionTo(target.EducationOrganizationIdentificationCodes, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationIdentificationCodesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationInstitutionTelephonesSupported)
            {
                targetSynchSupport.IsEducationOrganizationInstitutionTelephoneIncluded = sourceSynchSupport.IsEducationOrganizationInstitutionTelephoneIncluded;
                source.EducationOrganizationInstitutionTelephones.MapCollectionTo(target.EducationOrganizationInstitutionTelephones, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationInstitutionTelephonesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationInternationalAddressesSupported)
            {
                targetSynchSupport.IsEducationOrganizationInternationalAddressIncluded = sourceSynchSupport.IsEducationOrganizationInternationalAddressIncluded;
                source.EducationOrganizationInternationalAddresses.MapCollectionTo(target.EducationOrganizationInternationalAddresses, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationInternationalAddressesSupported = false;
            }

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherPreparationProviderSynchronizationSourceSupport 
    {
        bool IsEducationOrganizationAddressesSupported { get; set; }
        bool IsEducationOrganizationCategoriesSupported { get; set; }
        bool IsEducationOrganizationIdentificationCodesSupported { get; set; }
        bool IsEducationOrganizationInstitutionTelephonesSupported { get; set; }
        bool IsEducationOrganizationInternationalAddressesSupported { get; set; }
        bool IsFederalLocaleCodeDescriptorSupported { get; set; }
        bool IsNameOfInstitutionSupported { get; set; }
        bool IsOperationalStatusDescriptorSupported { get; set; }
        bool IsSchoolIdSupported { get; set; }
        bool IsShortNameOfInstitutionSupported { get; set; }
        bool IsUniversityIdSupported { get; set; }
        bool IsWebSiteSupported { get; set; }
        Func<IEducationOrganizationAddress, bool> IsEducationOrganizationAddressIncluded { get; set; }
        Func<IEducationOrganizationCategory, bool> IsEducationOrganizationCategoryIncluded { get; set; }
        Func<IEducationOrganizationIdentificationCode, bool> IsEducationOrganizationIdentificationCodeIncluded { get; set; }
        Func<IEducationOrganizationInstitutionTelephone, bool> IsEducationOrganizationInstitutionTelephoneIncluded { get; set; }
        Func<IEducationOrganizationInternationalAddress, bool> IsEducationOrganizationInternationalAddressIncluded { get; set; }
    }
 
}
// Aggregate: TeacherPreparationProviderProgram

namespace EdFi.Ods.Entities.Common.TPDM //.TeacherPreparationProviderProgramAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TeacherPreparationProviderProgramMapper 
    {
        public static bool SynchronizeTo(this ITeacherPreparationProviderProgram source, ITeacherPreparationProviderProgram target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherPreparationProviderProgramSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.ProgramName != target.ProgramName)
            {
                source.ProgramName = target.ProgramName;
            }
            if (source.ProgramTypeDescriptor != target.ProgramTypeDescriptor)
            {
                source.ProgramTypeDescriptor = target.ProgramTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsMajorSpecializationSupported)
                && target.MajorSpecialization != source.MajorSpecialization)
            {
                target.MajorSpecialization = source.MajorSpecialization;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinorSpecializationSupported)
                && target.MinorSpecialization != source.MinorSpecialization)
            {
                target.MinorSpecialization = source.MinorSpecialization;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProgramIdSupported)
                && target.ProgramId != source.ProgramId)
            {
                target.ProgramId = source.ProgramId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTeacherPreparationProgramTypeDescriptorSupported)
                && target.TeacherPreparationProgramTypeDescriptor != source.TeacherPreparationProgramTypeDescriptor)
            {
                target.TeacherPreparationProgramTypeDescriptor = source.TeacherPreparationProgramTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTPPProgramPathwayDescriptorSupported)
                && target.TPPProgramPathwayDescriptor != source.TPPProgramPathwayDescriptor)
            {
                target.TPPProgramPathwayDescriptor = source.TPPProgramPathwayDescriptor;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsTeacherPreparationProviderProgramGradeLevelsSupported)
            {
                isModified |= 
                    source.TeacherPreparationProviderProgramGradeLevels.SynchronizeCollectionTo(
                        target.TeacherPreparationProviderProgramGradeLevels, 
                        onChildAdded: child => 
                            {
                                child.TeacherPreparationProviderProgram = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherPreparationProviderProgramGradeLevelIncluded);
            }


            return isModified;
        }



        public static void MapTo(this ITeacherPreparationProviderProgram source, ITeacherPreparationProviderProgram target, Action<ITeacherPreparationProviderProgram, ITeacherPreparationProviderProgram> onMapped)
        {
            var sourceSynchSupport = source as ITeacherPreparationProviderProgramSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherPreparationProviderProgramSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsMajorSpecializationSupported)
                target.MajorSpecialization = source.MajorSpecialization;
            else
                targetSynchSupport.IsMajorSpecializationSupported = false;

            if (sourceSynchSupport.IsMinorSpecializationSupported)
                target.MinorSpecialization = source.MinorSpecialization;
            else
                targetSynchSupport.IsMinorSpecializationSupported = false;

            if (sourceSynchSupport.IsProgramIdSupported)
                target.ProgramId = source.ProgramId;
            else
                targetSynchSupport.IsProgramIdSupported = false;

            if (sourceSynchSupport.IsTeacherPreparationProgramTypeDescriptorSupported)
                target.TeacherPreparationProgramTypeDescriptor = source.TeacherPreparationProgramTypeDescriptor;
            else
                targetSynchSupport.IsTeacherPreparationProgramTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsTPPProgramPathwayDescriptorSupported)
                target.TPPProgramPathwayDescriptor = source.TPPProgramPathwayDescriptor;
            else
                targetSynchSupport.IsTPPProgramPathwayDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsTeacherPreparationProviderProgramGradeLevelsSupported)
            {    
                targetSynchSupport.IsTeacherPreparationProviderProgramGradeLevelIncluded = sourceSynchSupport.IsTeacherPreparationProviderProgramGradeLevelIncluded;
                source.TeacherPreparationProviderProgramGradeLevels.MapCollectionTo(target.TeacherPreparationProviderProgramGradeLevels, target);
            }
            else
            {
                targetSynchSupport.IsTeacherPreparationProviderProgramGradeLevelsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherPreparationProviderProgramSynchronizationSourceSupport 
    {
        bool IsMajorSpecializationSupported { get; set; }
        bool IsMinorSpecializationSupported { get; set; }
        bool IsProgramIdSupported { get; set; }
        bool IsTeacherPreparationProgramTypeDescriptorSupported { get; set; }
        bool IsTeacherPreparationProviderProgramGradeLevelsSupported { get; set; }
        bool IsTPPProgramPathwayDescriptorSupported { get; set; }
        Func<ITeacherPreparationProviderProgramGradeLevel, bool> IsTeacherPreparationProviderProgramGradeLevelIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherPreparationProviderProgramGradeLevelMapper 
    {
        public static bool SynchronizeTo(this ITeacherPreparationProviderProgramGradeLevel source, ITeacherPreparationProviderProgramGradeLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherPreparationProviderProgramGradeLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherPreparationProviderProgramGradeLevel source, ITeacherPreparationProviderProgramGradeLevel target, Action<ITeacherPreparationProviderProgramGradeLevel, ITeacherPreparationProviderProgramGradeLevel> onMapped)
        {
            var sourceSynchSupport = source as ITeacherPreparationProviderProgramGradeLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherPreparationProviderProgramGradeLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherPreparationProviderProgramGradeLevelSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: ThemeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.ThemeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ThemeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IThemeDescriptor source, IThemeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IThemeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ThemeDescriptorId != target.ThemeDescriptorId)
            {
                source.ThemeDescriptorId = target.ThemeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IThemeDescriptor source, IThemeDescriptor target, Action<IThemeDescriptor, IThemeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IThemeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IThemeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ThemeDescriptorId = source.ThemeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IThemeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: TPPDegreeTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.TPPDegreeTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TPPDegreeTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this ITPPDegreeTypeDescriptor source, ITPPDegreeTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ITPPDegreeTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TPPDegreeTypeDescriptorId != target.TPPDegreeTypeDescriptorId)
            {
                source.TPPDegreeTypeDescriptorId = target.TPPDegreeTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITPPDegreeTypeDescriptor source, ITPPDegreeTypeDescriptor target, Action<ITPPDegreeTypeDescriptor, ITPPDegreeTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ITPPDegreeTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ITPPDegreeTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.TPPDegreeTypeDescriptorId = source.TPPDegreeTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITPPDegreeTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: TPPProgramPathwayDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.TPPProgramPathwayDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TPPProgramPathwayDescriptorMapper 
    {
        public static bool SynchronizeTo(this ITPPProgramPathwayDescriptor source, ITPPProgramPathwayDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ITPPProgramPathwayDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TPPProgramPathwayDescriptorId != target.TPPProgramPathwayDescriptorId)
            {
                source.TPPProgramPathwayDescriptorId = target.TPPProgramPathwayDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITPPProgramPathwayDescriptor source, ITPPProgramPathwayDescriptor target, Action<ITPPProgramPathwayDescriptor, ITPPProgramPathwayDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ITPPProgramPathwayDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ITPPProgramPathwayDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.TPPProgramPathwayDescriptorId = source.TPPProgramPathwayDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITPPProgramPathwayDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: University

namespace EdFi.Ods.Entities.Common.TPDM //.UniversityAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class UniversityMapper 
    {
        public static bool SynchronizeTo(this IUniversity source, IUniversity target)
        {
            bool isModified = false;

            var sourceSupport = source as IUniversitySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.UniversityId != target.UniversityId)
            {
                source.UniversityId = target.UniversityId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsNameOfInstitutionSupported)
                && target.NameOfInstitution != source.NameOfInstitution)
            {
                target.NameOfInstitution = source.NameOfInstitution;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOperationalStatusDescriptorSupported)
                && target.OperationalStatusDescriptor != source.OperationalStatusDescriptor)
            {
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortNameOfInstitutionSupported)
                && target.ShortNameOfInstitution != source.ShortNameOfInstitution)
            {
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsWebSiteSupported)
                && target.WebSite != source.WebSite)
            {
                target.WebSite = source.WebSite;
                isModified = true;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsFederalLocaleCodeDescriptorSupported)
                && target.FederalLocaleCodeDescriptor != source.FederalLocaleCodeDescriptor)
            {
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolIdSupported)
                && target.SchoolId != source.SchoolId)
            {
                target.SchoolId = source.SchoolId;
                isModified = true;
            }


            // Synch inherited lists
            if (sourceSupport == null || sourceSupport.IsEducationOrganizationAddressesSupported)
                isModified |= source.EducationOrganizationAddresses.SynchronizeCollectionTo(target.EducationOrganizationAddresses, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationAddressIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationCategoriesSupported)
                isModified |= source.EducationOrganizationCategories.SynchronizeCollectionTo(target.EducationOrganizationCategories, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationCategoryIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationIdentificationCodesSupported)
                isModified |= source.EducationOrganizationIdentificationCodes.SynchronizeCollectionTo(target.EducationOrganizationIdentificationCodes, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationIdentificationCodeIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationInstitutionTelephonesSupported)
                isModified |= source.EducationOrganizationInstitutionTelephones.SynchronizeCollectionTo(target.EducationOrganizationInstitutionTelephones, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationInstitutionTelephoneIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationInternationalAddressesSupported)
                isModified |= source.EducationOrganizationInternationalAddresses.SynchronizeCollectionTo(target.EducationOrganizationInternationalAddresses, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationInternationalAddressIncluded);


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IUniversity source, IUniversity target, Action<IUniversity, IUniversity> onMapped)
        {
            var sourceSynchSupport = source as IUniversitySynchronizationSourceSupport;
            var targetSynchSupport = target as IUniversitySynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.UniversityId = source.UniversityId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsNameOfInstitutionSupported)
                target.NameOfInstitution = source.NameOfInstitution;
            else
                targetSynchSupport.IsNameOfInstitutionSupported = false;

            if (sourceSynchSupport.IsOperationalStatusDescriptorSupported)
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;
            else
                targetSynchSupport.IsOperationalStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsShortNameOfInstitutionSupported)
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;
            else
                targetSynchSupport.IsShortNameOfInstitutionSupported = false;

            if (sourceSynchSupport.IsWebSiteSupported)
                target.WebSite = source.WebSite;
            else
                targetSynchSupport.IsWebSiteSupported = false;

            // Copy non-PK properties

            if (sourceSynchSupport.IsFederalLocaleCodeDescriptorSupported)
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
            else
                targetSynchSupport.IsFederalLocaleCodeDescriptorSupported = false;

            if (sourceSynchSupport.IsSchoolIdSupported)
                target.SchoolId = source.SchoolId;
            else
                targetSynchSupport.IsSchoolIdSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolResourceId = source.SchoolResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            if (sourceSynchSupport.IsEducationOrganizationAddressesSupported)
            {
                targetSynchSupport.IsEducationOrganizationAddressIncluded = sourceSynchSupport.IsEducationOrganizationAddressIncluded;
                source.EducationOrganizationAddresses.MapCollectionTo(target.EducationOrganizationAddresses, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationAddressesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationCategoriesSupported)
            {
                targetSynchSupport.IsEducationOrganizationCategoryIncluded = sourceSynchSupport.IsEducationOrganizationCategoryIncluded;
                source.EducationOrganizationCategories.MapCollectionTo(target.EducationOrganizationCategories, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationCategoriesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationIdentificationCodesSupported)
            {
                targetSynchSupport.IsEducationOrganizationIdentificationCodeIncluded = sourceSynchSupport.IsEducationOrganizationIdentificationCodeIncluded;
                source.EducationOrganizationIdentificationCodes.MapCollectionTo(target.EducationOrganizationIdentificationCodes, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationIdentificationCodesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationInstitutionTelephonesSupported)
            {
                targetSynchSupport.IsEducationOrganizationInstitutionTelephoneIncluded = sourceSynchSupport.IsEducationOrganizationInstitutionTelephoneIncluded;
                source.EducationOrganizationInstitutionTelephones.MapCollectionTo(target.EducationOrganizationInstitutionTelephones, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationInstitutionTelephonesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationInternationalAddressesSupported)
            {
                targetSynchSupport.IsEducationOrganizationInternationalAddressIncluded = sourceSynchSupport.IsEducationOrganizationInternationalAddressIncluded;
                source.EducationOrganizationInternationalAddresses.MapCollectionTo(target.EducationOrganizationInternationalAddresses, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationInternationalAddressesSupported = false;
            }

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IUniversitySynchronizationSourceSupport 
    {
        bool IsEducationOrganizationAddressesSupported { get; set; }
        bool IsEducationOrganizationCategoriesSupported { get; set; }
        bool IsEducationOrganizationIdentificationCodesSupported { get; set; }
        bool IsEducationOrganizationInstitutionTelephonesSupported { get; set; }
        bool IsEducationOrganizationInternationalAddressesSupported { get; set; }
        bool IsFederalLocaleCodeDescriptorSupported { get; set; }
        bool IsNameOfInstitutionSupported { get; set; }
        bool IsOperationalStatusDescriptorSupported { get; set; }
        bool IsSchoolIdSupported { get; set; }
        bool IsShortNameOfInstitutionSupported { get; set; }
        bool IsWebSiteSupported { get; set; }
        Func<IEducationOrganizationAddress, bool> IsEducationOrganizationAddressIncluded { get; set; }
        Func<IEducationOrganizationCategory, bool> IsEducationOrganizationCategoryIncluded { get; set; }
        Func<IEducationOrganizationIdentificationCode, bool> IsEducationOrganizationIdentificationCodeIncluded { get; set; }
        Func<IEducationOrganizationInstitutionTelephone, bool> IsEducationOrganizationInstitutionTelephoneIncluded { get; set; }
        Func<IEducationOrganizationInternationalAddress, bool> IsEducationOrganizationInternationalAddressIncluded { get; set; }
    }
 
}
// Aggregate: ValueTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.ValueTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ValueTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IValueTypeDescriptor source, IValueTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IValueTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ValueTypeDescriptorId != target.ValueTypeDescriptorId)
            {
                source.ValueTypeDescriptorId = target.ValueTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IValueTypeDescriptor source, IValueTypeDescriptor target, Action<IValueTypeDescriptor, IValueTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IValueTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IValueTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ValueTypeDescriptorId = source.ValueTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IValueTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: WithdrawReasonDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.WithdrawReasonDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class WithdrawReasonDescriptorMapper 
    {
        public static bool SynchronizeTo(this IWithdrawReasonDescriptor source, IWithdrawReasonDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IWithdrawReasonDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.WithdrawReasonDescriptorId != target.WithdrawReasonDescriptorId)
            {
                source.WithdrawReasonDescriptorId = target.WithdrawReasonDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IWithdrawReasonDescriptor source, IWithdrawReasonDescriptor target, Action<IWithdrawReasonDescriptor, IWithdrawReasonDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IWithdrawReasonDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IWithdrawReasonDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.WithdrawReasonDescriptorId = source.WithdrawReasonDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IWithdrawReasonDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
