using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Net;
using System.Diagnostics.CodeAnalysis;
using EdFi.Ods.Common.Extensions;
using EdFi.Ods.Common;
using EdFi.Ods.Common.Serialization;
using EdFi.Ods.Api.Dependencies;
using EdFi.Ods.Api.Models;
using EdFi.Ods.Api.Validation;
using EdFi.Ods.Entities.Common.EdFi;
using Newtonsoft.Json;
using FluentValidation.Results;

// Aggregate: Staff

namespace EdFi.Ods.Api.Models.Resources.Staff.EdFi.Staff_Entity_Extension_IncludeOnly_Readable
{
    /// <summary>
    /// Represents a reference to the Staff resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffReference
    {
        [DataMember(Name="staffUniqueId"), NaturalKeyMember]
        public string StaffUniqueId { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return StaffUniqueId != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "Staff",
                Href = $"/ed-fi/staffs/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new Common.Models.Domain.FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.Staff table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class Staff : Entities.Common.EdFi.IStaff, IHasETag, Entities.Common.EdFi.IStaffSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Staff()
        {
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Staff resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to a staff.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="staffUniqueId"), NaturalKeyMember, UniqueId]
        public string StaffUniqueId { get; set; }

        string IIdentifiablePerson.UniqueId { get { return StaffUniqueId; } }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaff;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Property
            if ((this as Entities.Common.EdFi.IStaff).StaffUniqueId == null
                || !(this as Entities.Common.EdFi.IStaff).StaffUniqueId.Equals(compareTo.StaffUniqueId)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Property
                if ((this as Entities.Common.EdFi.IStaff).StaffUniqueId != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaff).StaffUniqueId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        DateTime? Entities.Common.EdFi.IStaff.BirthDate
        {
            get { return default(DateTime?); }
            set { }
        }

        // IS a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.EdFi.IStaff.CitizenshipStatusDescriptor
        {
            get { return null; }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.EdFi.IStaff.FirstName
        {
            get { return default(string); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.EdFi.IStaff.GenerationCodeSuffix
        {
            get { return default(string); }
            set { }
        }

        // IS a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.EdFi.IStaff.HighestCompletedLevelOfEducationDescriptor
        {
            get { return null; }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        bool? Entities.Common.EdFi.IStaff.HighlyQualifiedTeacher
        {
            get { return default(bool?); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        bool? Entities.Common.EdFi.IStaff.HispanicLatinoEthnicity
        {
            get { return default(bool?); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.EdFi.IStaff.LastSurname
        {
            get { return default(string); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.EdFi.IStaff.LoginId
        {
            get { return default(string); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.EdFi.IStaff.MaidenName
        {
            get { return default(string); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.EdFi.IStaff.MiddleName
        {
            get { return default(string); }
            set { }
        }

        // IS a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.EdFi.IStaff.OldEthnicityDescriptor
        {
            get { return null; }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.EdFi.IStaff.PersonalTitlePrefix
        {
            get { return default(string); }
            set { }
        }

        // IS a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.EdFi.IStaff.SexDescriptor
        {
            get { return null; }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        decimal? Entities.Common.EdFi.IStaff.YearsOfPriorProfessionalExperience
        {
            get { return default(decimal?); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        decimal? Entities.Common.EdFi.IStaff.YearsOfPriorTeachingExperience
        {
            get { return default(decimal?); }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "Staff")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffAddress> Entities.Common.EdFi.IStaff.StaffAddresses
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffCredential> Entities.Common.EdFi.IStaff.StaffCredentials
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffElectronicMail> Entities.Common.EdFi.IStaff.StaffElectronicMails
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffIdentificationCode> Entities.Common.EdFi.IStaff.StaffIdentificationCodes
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffIdentificationDocument> Entities.Common.EdFi.IStaff.StaffIdentificationDocuments
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffInternationalAddress> Entities.Common.EdFi.IStaff.StaffInternationalAddresses
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffLanguage> Entities.Common.EdFi.IStaff.StaffLanguages
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffOtherName> Entities.Common.EdFi.IStaff.StaffOtherNames
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffPersonalIdentificationDocument> Entities.Common.EdFi.IStaff.StaffPersonalIdentificationDocuments
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffRace> Entities.Common.EdFi.IStaff.StaffRaces
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffRecognition> Entities.Common.EdFi.IStaff.StaffRecognitions
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffTelephone> Entities.Common.EdFi.IStaff.StaffTelephones
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffTribalAffiliation> Entities.Common.EdFi.IStaff.StaffTribalAffiliations
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffVisa> Entities.Common.EdFi.IStaff.StaffVisas
        {
            get { return null; }
            set { }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaff)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffMapper.MapTo(this, (Entities.Common.EdFi.IStaff)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsBirthDateSupported                                   { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsCitizenshipStatusDescriptorSupported                 { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsFirstNameSupported                                   { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsGenerationCodeSuffixSupported                        { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsHighestCompletedLevelOfEducationDescriptorSupported  { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsHighlyQualifiedTeacherSupported                      { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsHispanicLatinoEthnicitySupported                     { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsLastSurnameSupported                                 { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsLoginIdSupported                                     { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsMaidenNameSupported                                  { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsMiddleNameSupported                                  { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsOldEthnicityDescriptorSupported                      { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsPersonalTitlePrefixSupported                         { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsSexDescriptorSupported                               { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffAddressesSupported                              { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffCredentialsSupported                            { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffElectronicMailsSupported                        { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationCodesSupported                    { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationDocumentsSupported                { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffInternationalAddressesSupported                 { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffLanguagesSupported                              { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffOtherNamesSupported                             { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffPersonalIdentificationDocumentsSupported        { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRacesSupported                                  { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRecognitionsSupported                           { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTelephonesSupported                             { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTribalAffiliationsSupported                     { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffUniqueIdSupported                               { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffVisasSupported                                  { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsYearsOfPriorProfessionalExperienceSupported          { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsYearsOfPriorTeachingExperienceSupported              { get { return false; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.EdFi.IStaffAddress, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffAddressIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffCredential, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffCredentialIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffElectronicMail, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffElectronicMailIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffIdentificationCode, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationCodeIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffIdentificationDocument, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationDocumentIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffInternationalAddress, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffInternationalAddressIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffLanguage, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffLanguageIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffOtherName, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffOtherNameIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffPersonalIdentificationDocument, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffPersonalIdentificationDocumentIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffRace, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRaceIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffRecognition, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRecognitionIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffTelephone, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTelephoneIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffTribalAffiliation, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTribalAffiliationIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffVisa, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffVisaIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPutPostRequestValidator : FluentValidation.AbstractValidator<Staff>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<Staff> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Staff

namespace EdFi.Ods.Api.Models.Resources.Staff.EdFi.Staff_Entity_Extension_IncludeOnly_Readable.Extensions.GrandBend
{
    /// <summary>
    /// A class which represents the grandbend.StaffExtension table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffExtension : Entities.Common.GrandBend.IStaffExtension, Entities.Common.GrandBend.IStaffExtensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.GrandBend.IStaffExtension.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.GrandBend.IStaffExtension;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        DateTime? Entities.Common.GrandBend.IStaffExtension.ProbationCompleteDate
        {
            get { return default(DateTime?); }
            set { }
        }

        /// <summary>
        /// An indication as to whether the staff member is tenured.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="tenured")]
        public bool? Tenured { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.GrandBend.StaffExtensionMapper.SynchronizeTo(this, (Entities.Common.GrandBend.IStaffExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.GrandBend.StaffExtensionMapper.MapTo(this, (Entities.Common.GrandBend.IStaffExtension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.GrandBend.IStaffExtensionSynchronizationSourceSupport.IsProbationCompleteDateSupported  { get { return false; } set { } }
        bool Entities.Common.GrandBend.IStaffExtensionSynchronizationSourceSupport.IsTenuredSupported                { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<StaffExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Staff

namespace EdFi.Ods.Api.Models.Resources.Staff.EdFi.Staff_Entity_Extension_IncludeOnly_Writable
{
    /// <summary>
    /// Represents a reference to the Staff resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffReference
    {
        [DataMember(Name="staffUniqueId"), NaturalKeyMember]
        public string StaffUniqueId { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return StaffUniqueId != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "Staff",
                Href = $"/ed-fi/staffs/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new Common.Models.Domain.FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.Staff table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class Staff : Entities.Common.EdFi.IStaff, IHasETag, Entities.Common.EdFi.IStaffSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Staff()
        {
            StaffAddresses = new List<StaffAddress>();
            StaffCredentials = new List<StaffCredential>();
            StaffElectronicMails = new List<StaffElectronicMail>();
            StaffIdentificationCodes = new List<StaffIdentificationCode>();
            StaffIdentificationDocuments = new List<StaffIdentificationDocument>();
            StaffInternationalAddresses = new List<StaffInternationalAddress>();
            StaffLanguages = new List<StaffLanguage>();
            StaffOtherNames = new List<StaffOtherName>();
            StaffPersonalIdentificationDocuments = new List<StaffPersonalIdentificationDocument>();
            StaffRaces = new List<StaffRace>();
            StaffRecognitions = new List<StaffRecognition>();
            StaffTelephones = new List<StaffTelephone>();
            StaffTribalAffiliations = new List<StaffTribalAffiliation>();
            StaffVisas = new List<StaffVisa>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Staff resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to a staff.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="staffUniqueId"), NaturalKeyMember, UniqueId]
        public string StaffUniqueId { get; set; }

        string IIdentifiablePerson.UniqueId { get { return StaffUniqueId; } }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaff;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Property
            if ((this as Entities.Common.EdFi.IStaff).StaffUniqueId == null
                || !(this as Entities.Common.EdFi.IStaff).StaffUniqueId.Equals(compareTo.StaffUniqueId)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Property
                if ((this as Entities.Common.EdFi.IStaff).StaffUniqueId != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaff).StaffUniqueId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="birthDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BirthDate { get; set; }

        /// <summary>
        /// An indicator of whether or not the person is a U.S. citizen.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="citizenshipStatusDescriptor")]
        public string CitizenshipStatusDescriptor { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="highestCompletedLevelOfEducationDescriptor")]
        public string HighestCompletedLevelOfEducationDescriptor { get; set; }

        /// <summary>
        /// An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="highlyQualifiedTeacher")]
        public bool? HighlyQualifiedTeacher { get; set; }

        /// <summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="hispanicLatinoEthnicity")]
        public bool? HispanicLatinoEthnicity { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// The login ID for the user; used for security access control interface.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="loginId")]
        public string LoginId { get; set; }

        /// <summary>
        /// The person's maiden name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maidenName")]
        public string MaidenName { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// Previous definition of Ethnicity combining Hispanic/Latino and race:          1 - American Indian or Alaskan Native          2 - Asian or Pacific Islander          3 - Black, not of Hispanic origin          4 - Hispanic          5 - White, not of Hispanic origin.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="oldEthnicityDescriptor")]
        public string OldEthnicityDescriptor { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }

        /// <summary>
        /// A person's gender.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="sexDescriptor")]
        public string SexDescriptor { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a similar professional position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorProfessionalExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorProfessionalExperience { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a teaching position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorTeachingExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorTeachingExperience { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "Staff")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffAddress> _staffAddresses;
        private ICollection<Entities.Common.EdFi.IStaffAddress> _staffAddressesCovariant;

        [DataMember(Name="addresses"), NoDuplicateMembers]
        public ICollection<StaffAddress> StaffAddresses
        {
            get { return _staffAddresses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffAddress>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffAddress)e.Item).Staff = this);
                _staffAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffAddress, StaffAddress>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffAddress)e.Item).Staff = this;
                _staffAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffAddress> Entities.Common.EdFi.IStaff.StaffAddresses
        {
            get { return _staffAddressesCovariant; }
            set { StaffAddresses = new List<StaffAddress>(value.Cast<StaffAddress>()); }
        }

        private ICollection<StaffCredential> _staffCredentials;
        private ICollection<Entities.Common.EdFi.IStaffCredential> _staffCredentialsCovariant;

        [DataMember(Name="credentials"), NoDuplicateMembers]
        public ICollection<StaffCredential> StaffCredentials
        {
            get { return _staffCredentials; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffCredential>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffCredential)e.Item).Staff = this);
                _staffCredentials = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffCredential, StaffCredential>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffCredential)e.Item).Staff = this;
                _staffCredentialsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffCredential> Entities.Common.EdFi.IStaff.StaffCredentials
        {
            get { return _staffCredentialsCovariant; }
            set { StaffCredentials = new List<StaffCredential>(value.Cast<StaffCredential>()); }
        }

        private ICollection<StaffElectronicMail> _staffElectronicMails;
        private ICollection<Entities.Common.EdFi.IStaffElectronicMail> _staffElectronicMailsCovariant;

        [DataMember(Name="electronicMails"), NoDuplicateMembers]
        public ICollection<StaffElectronicMail> StaffElectronicMails
        {
            get { return _staffElectronicMails; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffElectronicMail>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffElectronicMail)e.Item).Staff = this);
                _staffElectronicMails = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffElectronicMail, StaffElectronicMail>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffElectronicMail)e.Item).Staff = this;
                _staffElectronicMailsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffElectronicMail> Entities.Common.EdFi.IStaff.StaffElectronicMails
        {
            get { return _staffElectronicMailsCovariant; }
            set { StaffElectronicMails = new List<StaffElectronicMail>(value.Cast<StaffElectronicMail>()); }
        }

        private ICollection<StaffIdentificationCode> _staffIdentificationCodes;
        private ICollection<Entities.Common.EdFi.IStaffIdentificationCode> _staffIdentificationCodesCovariant;

        [DataMember(Name="identificationCodes"), NoDuplicateMembers]
        public ICollection<StaffIdentificationCode> StaffIdentificationCodes
        {
            get { return _staffIdentificationCodes; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffIdentificationCode>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffIdentificationCode)e.Item).Staff = this);
                _staffIdentificationCodes = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffIdentificationCode, StaffIdentificationCode>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffIdentificationCode)e.Item).Staff = this;
                _staffIdentificationCodesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffIdentificationCode> Entities.Common.EdFi.IStaff.StaffIdentificationCodes
        {
            get { return _staffIdentificationCodesCovariant; }
            set { StaffIdentificationCodes = new List<StaffIdentificationCode>(value.Cast<StaffIdentificationCode>()); }
        }

        private ICollection<StaffIdentificationDocument> _staffIdentificationDocuments;
        private ICollection<Entities.Common.EdFi.IStaffIdentificationDocument> _staffIdentificationDocumentsCovariant;

        [DataMember(Name="identificationDocuments"), NoDuplicateMembers]
        public ICollection<StaffIdentificationDocument> StaffIdentificationDocuments
        {
            get { return _staffIdentificationDocuments; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffIdentificationDocument>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffIdentificationDocument)e.Item).Staff = this);
                _staffIdentificationDocuments = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffIdentificationDocument, StaffIdentificationDocument>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffIdentificationDocument)e.Item).Staff = this;
                _staffIdentificationDocumentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffIdentificationDocument> Entities.Common.EdFi.IStaff.StaffIdentificationDocuments
        {
            get { return _staffIdentificationDocumentsCovariant; }
            set { StaffIdentificationDocuments = new List<StaffIdentificationDocument>(value.Cast<StaffIdentificationDocument>()); }
        }

        private ICollection<StaffInternationalAddress> _staffInternationalAddresses;
        private ICollection<Entities.Common.EdFi.IStaffInternationalAddress> _staffInternationalAddressesCovariant;

        [DataMember(Name="internationalAddresses"), NoDuplicateMembers]
        public ICollection<StaffInternationalAddress> StaffInternationalAddresses
        {
            get { return _staffInternationalAddresses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffInternationalAddress>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffInternationalAddress)e.Item).Staff = this);
                _staffInternationalAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffInternationalAddress, StaffInternationalAddress>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffInternationalAddress)e.Item).Staff = this;
                _staffInternationalAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffInternationalAddress> Entities.Common.EdFi.IStaff.StaffInternationalAddresses
        {
            get { return _staffInternationalAddressesCovariant; }
            set { StaffInternationalAddresses = new List<StaffInternationalAddress>(value.Cast<StaffInternationalAddress>()); }
        }

        private ICollection<StaffLanguage> _staffLanguages;
        private ICollection<Entities.Common.EdFi.IStaffLanguage> _staffLanguagesCovariant;

        [DataMember(Name="languages"), NoDuplicateMembers]
        public ICollection<StaffLanguage> StaffLanguages
        {
            get { return _staffLanguages; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffLanguage>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffLanguage)e.Item).Staff = this);
                _staffLanguages = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffLanguage, StaffLanguage>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffLanguage)e.Item).Staff = this;
                _staffLanguagesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffLanguage> Entities.Common.EdFi.IStaff.StaffLanguages
        {
            get { return _staffLanguagesCovariant; }
            set { StaffLanguages = new List<StaffLanguage>(value.Cast<StaffLanguage>()); }
        }

        private ICollection<StaffOtherName> _staffOtherNames;
        private ICollection<Entities.Common.EdFi.IStaffOtherName> _staffOtherNamesCovariant;

        [DataMember(Name="otherNames"), NoDuplicateMembers]
        public ICollection<StaffOtherName> StaffOtherNames
        {
            get { return _staffOtherNames; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffOtherName>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffOtherName)e.Item).Staff = this);
                _staffOtherNames = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffOtherName, StaffOtherName>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffOtherName)e.Item).Staff = this;
                _staffOtherNamesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffOtherName> Entities.Common.EdFi.IStaff.StaffOtherNames
        {
            get { return _staffOtherNamesCovariant; }
            set { StaffOtherNames = new List<StaffOtherName>(value.Cast<StaffOtherName>()); }
        }

        private ICollection<StaffPersonalIdentificationDocument> _staffPersonalIdentificationDocuments;
        private ICollection<Entities.Common.EdFi.IStaffPersonalIdentificationDocument> _staffPersonalIdentificationDocumentsCovariant;

        [DataMember(Name="personalIdentificationDocuments"), NoDuplicateMembers]
        public ICollection<StaffPersonalIdentificationDocument> StaffPersonalIdentificationDocuments
        {
            get { return _staffPersonalIdentificationDocuments; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffPersonalIdentificationDocument>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffPersonalIdentificationDocument)e.Item).Staff = this);
                _staffPersonalIdentificationDocuments = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffPersonalIdentificationDocument, StaffPersonalIdentificationDocument>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffPersonalIdentificationDocument)e.Item).Staff = this;
                _staffPersonalIdentificationDocumentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffPersonalIdentificationDocument> Entities.Common.EdFi.IStaff.StaffPersonalIdentificationDocuments
        {
            get { return _staffPersonalIdentificationDocumentsCovariant; }
            set { StaffPersonalIdentificationDocuments = new List<StaffPersonalIdentificationDocument>(value.Cast<StaffPersonalIdentificationDocument>()); }
        }

        private ICollection<StaffRace> _staffRaces;
        private ICollection<Entities.Common.EdFi.IStaffRace> _staffRacesCovariant;

        [DataMember(Name="races"), NoDuplicateMembers]
        public ICollection<StaffRace> StaffRaces
        {
            get { return _staffRaces; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffRace>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffRace)e.Item).Staff = this);
                _staffRaces = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffRace, StaffRace>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffRace)e.Item).Staff = this;
                _staffRacesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffRace> Entities.Common.EdFi.IStaff.StaffRaces
        {
            get { return _staffRacesCovariant; }
            set { StaffRaces = new List<StaffRace>(value.Cast<StaffRace>()); }
        }

        private ICollection<StaffRecognition> _staffRecognitions;
        private ICollection<Entities.Common.EdFi.IStaffRecognition> _staffRecognitionsCovariant;

        [DataMember(Name="recognitions"), NoDuplicateMembers]
        public ICollection<StaffRecognition> StaffRecognitions
        {
            get { return _staffRecognitions; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffRecognition>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffRecognition)e.Item).Staff = this);
                _staffRecognitions = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffRecognition, StaffRecognition>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffRecognition)e.Item).Staff = this;
                _staffRecognitionsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffRecognition> Entities.Common.EdFi.IStaff.StaffRecognitions
        {
            get { return _staffRecognitionsCovariant; }
            set { StaffRecognitions = new List<StaffRecognition>(value.Cast<StaffRecognition>()); }
        }

        private ICollection<StaffTelephone> _staffTelephones;
        private ICollection<Entities.Common.EdFi.IStaffTelephone> _staffTelephonesCovariant;

        [DataMember(Name="telephones"), NoDuplicateMembers]
        public ICollection<StaffTelephone> StaffTelephones
        {
            get { return _staffTelephones; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffTelephone>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffTelephone)e.Item).Staff = this);
                _staffTelephones = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffTelephone, StaffTelephone>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffTelephone)e.Item).Staff = this;
                _staffTelephonesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffTelephone> Entities.Common.EdFi.IStaff.StaffTelephones
        {
            get { return _staffTelephonesCovariant; }
            set { StaffTelephones = new List<StaffTelephone>(value.Cast<StaffTelephone>()); }
        }

        private ICollection<StaffTribalAffiliation> _staffTribalAffiliations;
        private ICollection<Entities.Common.EdFi.IStaffTribalAffiliation> _staffTribalAffiliationsCovariant;

        [DataMember(Name="tribalAffiliations"), NoDuplicateMembers]
        public ICollection<StaffTribalAffiliation> StaffTribalAffiliations
        {
            get { return _staffTribalAffiliations; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffTribalAffiliation>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffTribalAffiliation)e.Item).Staff = this);
                _staffTribalAffiliations = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffTribalAffiliation, StaffTribalAffiliation>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffTribalAffiliation)e.Item).Staff = this;
                _staffTribalAffiliationsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffTribalAffiliation> Entities.Common.EdFi.IStaff.StaffTribalAffiliations
        {
            get { return _staffTribalAffiliationsCovariant; }
            set { StaffTribalAffiliations = new List<StaffTribalAffiliation>(value.Cast<StaffTribalAffiliation>()); }
        }

        private ICollection<StaffVisa> _staffVisas;
        private ICollection<Entities.Common.EdFi.IStaffVisa> _staffVisasCovariant;

        [DataMember(Name="visas"), NoDuplicateMembers]
        public ICollection<StaffVisa> StaffVisas
        {
            get { return _staffVisas; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffVisa>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffVisa)e.Item).Staff = this);
                _staffVisas = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffVisa, StaffVisa>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffVisa)e.Item).Staff = this;
                _staffVisasCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffVisa> Entities.Common.EdFi.IStaff.StaffVisas
        {
            get { return _staffVisasCovariant; }
            set { StaffVisas = new List<StaffVisa>(value.Cast<StaffVisa>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffAddresses != null) foreach (var item in _staffAddresses)
            {
                item.Staff = this;
            }

            if (_staffCredentials != null) foreach (var item in _staffCredentials)
            {
                item.Staff = this;
            }

            if (_staffElectronicMails != null) foreach (var item in _staffElectronicMails)
            {
                item.Staff = this;
            }

            if (_staffIdentificationCodes != null) foreach (var item in _staffIdentificationCodes)
            {
                item.Staff = this;
            }

            if (_staffIdentificationDocuments != null) foreach (var item in _staffIdentificationDocuments)
            {
                item.Staff = this;
            }

            if (_staffInternationalAddresses != null) foreach (var item in _staffInternationalAddresses)
            {
                item.Staff = this;
            }

            if (_staffLanguages != null) foreach (var item in _staffLanguages)
            {
                item.Staff = this;
            }

            if (_staffOtherNames != null) foreach (var item in _staffOtherNames)
            {
                item.Staff = this;
            }

            if (_staffPersonalIdentificationDocuments != null) foreach (var item in _staffPersonalIdentificationDocuments)
            {
                item.Staff = this;
            }

            if (_staffRaces != null) foreach (var item in _staffRaces)
            {
                item.Staff = this;
            }

            if (_staffRecognitions != null) foreach (var item in _staffRecognitions)
            {
                item.Staff = this;
            }

            if (_staffTelephones != null) foreach (var item in _staffTelephones)
            {
                item.Staff = this;
            }

            if (_staffTribalAffiliations != null) foreach (var item in _staffTribalAffiliations)
            {
                item.Staff = this;
            }

            if (_staffVisas != null) foreach (var item in _staffVisas)
            {
                item.Staff = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaff)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffMapper.MapTo(this, (Entities.Common.EdFi.IStaff)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsBirthDateSupported                                   { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsCitizenshipStatusDescriptorSupported                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsFirstNameSupported                                   { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsGenerationCodeSuffixSupported                        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsHighestCompletedLevelOfEducationDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsHighlyQualifiedTeacherSupported                      { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsHispanicLatinoEthnicitySupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsLastSurnameSupported                                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsLoginIdSupported                                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsMaidenNameSupported                                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsMiddleNameSupported                                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsOldEthnicityDescriptorSupported                      { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsPersonalTitlePrefixSupported                         { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsSexDescriptorSupported                               { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffAddressesSupported                              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffCredentialsSupported                            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffElectronicMailsSupported                        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationCodesSupported                    { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationDocumentsSupported                { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffInternationalAddressesSupported                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffLanguagesSupported                              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffOtherNamesSupported                             { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffPersonalIdentificationDocumentsSupported        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRacesSupported                                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRecognitionsSupported                           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTelephonesSupported                             { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTribalAffiliationsSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffUniqueIdSupported                               { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffVisasSupported                                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsYearsOfPriorProfessionalExperienceSupported          { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsYearsOfPriorTeachingExperienceSupported              { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.EdFi.IStaffAddress, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffAddressIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffCredential, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffCredentialIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffElectronicMail, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffElectronicMailIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffIdentificationCode, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationCodeIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffIdentificationDocument, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationDocumentIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffInternationalAddress, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffInternationalAddressIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffLanguage, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffLanguageIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffOtherName, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffOtherNameIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffPersonalIdentificationDocument, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffPersonalIdentificationDocumentIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffRace, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRaceIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffRecognition, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRecognitionIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffTelephone, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTelephoneIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffTribalAffiliation, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTribalAffiliationIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffVisa, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffVisaIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPutPostRequestValidator : FluentValidation.AbstractValidator<Staff>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<Staff> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var staffAddressesValidator = new StaffAddressPutPostRequestValidator();

            foreach (var item in instance.StaffAddresses)
            {
                var validationResult = staffAddressesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffCredentialsValidator = new StaffCredentialPutPostRequestValidator();

            foreach (var item in instance.StaffCredentials)
            {
                var validationResult = staffCredentialsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffElectronicMailsValidator = new StaffElectronicMailPutPostRequestValidator();

            foreach (var item in instance.StaffElectronicMails)
            {
                var validationResult = staffElectronicMailsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffIdentificationCodesValidator = new StaffIdentificationCodePutPostRequestValidator();

            foreach (var item in instance.StaffIdentificationCodes)
            {
                var validationResult = staffIdentificationCodesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffIdentificationDocumentsValidator = new StaffIdentificationDocumentPutPostRequestValidator();

            foreach (var item in instance.StaffIdentificationDocuments)
            {
                var validationResult = staffIdentificationDocumentsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffInternationalAddressesValidator = new StaffInternationalAddressPutPostRequestValidator();

            foreach (var item in instance.StaffInternationalAddresses)
            {
                var validationResult = staffInternationalAddressesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffLanguagesValidator = new StaffLanguagePutPostRequestValidator();

            foreach (var item in instance.StaffLanguages)
            {
                var validationResult = staffLanguagesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffOtherNamesValidator = new StaffOtherNamePutPostRequestValidator();

            foreach (var item in instance.StaffOtherNames)
            {
                var validationResult = staffOtherNamesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffPersonalIdentificationDocumentsValidator = new StaffPersonalIdentificationDocumentPutPostRequestValidator();

            foreach (var item in instance.StaffPersonalIdentificationDocuments)
            {
                var validationResult = staffPersonalIdentificationDocumentsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffRacesValidator = new StaffRacePutPostRequestValidator();

            foreach (var item in instance.StaffRaces)
            {
                var validationResult = staffRacesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffRecognitionsValidator = new StaffRecognitionPutPostRequestValidator();

            foreach (var item in instance.StaffRecognitions)
            {
                var validationResult = staffRecognitionsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffTelephonesValidator = new StaffTelephonePutPostRequestValidator();

            foreach (var item in instance.StaffTelephones)
            {
                var validationResult = staffTelephonesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffTribalAffiliationsValidator = new StaffTribalAffiliationPutPostRequestValidator();

            foreach (var item in instance.StaffTribalAffiliations)
            {
                var validationResult = staffTribalAffiliationsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffVisasValidator = new StaffVisaPutPostRequestValidator();

            foreach (var item in instance.StaffVisas)
            {
                var validationResult = staffVisasValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffAddress table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffAddress : Entities.Common.EdFi.IStaffAddress, Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StaffAddress()
        {
            StaffAddressPeriods = new List<StaffAddressPeriod>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffAddress.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressTypeDescriptor"), NaturalKeyMember]
        public string AddressTypeDescriptor { get; set; }

        /// <summary>
        /// The name of the city in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="city"), NaturalKeyMember]
        public string City { get; set; }

        /// <summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="postalCode"), NaturalKeyMember]
        public string PostalCode { get; set; }

        /// <summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="stateAbbreviationDescriptor"), NaturalKeyMember]
        public string StateAbbreviationDescriptor { get; set; }

        /// <summary>
        /// The street number and street name or post office box number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="streetNumberName"), NaturalKeyMember]
        public string StreetNumberName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffAddress;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).AddressTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffAddress).AddressTypeDescriptor.Equals(compareTo.AddressTypeDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).City == null
                || !(this as Entities.Common.EdFi.IStaffAddress).City.Equals(compareTo.City)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).PostalCode == null
                || !(this as Entities.Common.EdFi.IStaffAddress).PostalCode.Equals(compareTo.PostalCode)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).StateAbbreviationDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffAddress).StateAbbreviationDescriptor.Equals(compareTo.StateAbbreviationDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).StreetNumberName == null
                || !(this as Entities.Common.EdFi.IStaffAddress).StreetNumberName.Equals(compareTo.StreetNumberName)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).AddressTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).AddressTypeDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).City != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).City.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).PostalCode != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).PostalCode.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).StateAbbreviationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).StateAbbreviationDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).StreetNumberName != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).StreetNumberName.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The apartment, room, or suite number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="apartmentRoomSuiteNumber")]
        public string ApartmentRoomSuiteNumber { get; set; }

        /// <summary>
        /// The number of the building on the site, if more than one building shares the same address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="buildingSiteNumber")]
        public string BuildingSiteNumber { get; set; }

        /// <summary>
        /// The congressional district in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="congressionalDistrict")]
        public string CongressionalDistrict { get; set; }

        /// <summary>
        /// The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \"first-order subdivisions\" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="countyFIPSCode")]
        public string CountyFIPSCode { get; set; }

        /// <summary>
        /// An indication that the address should not be published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// A general geographic indicator that categorizes U.S. territory (e.g., City, Suburban).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="localeDescriptor")]
        public string LocaleDescriptor { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }

        /// <summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in                        'which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nameOfCounty")]
        public string NameOfCounty { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffAddress")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffAddressPeriod> _staffAddressPeriods;
        private ICollection<Entities.Common.EdFi.IStaffAddressPeriod> _staffAddressPeriodsCovariant;

        [DataMember(Name="periods"), NoDuplicateMembers]
        public ICollection<StaffAddressPeriod> StaffAddressPeriods
        {
            get { return _staffAddressPeriods; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffAddressPeriod>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffAddressPeriod)e.Item).StaffAddress = this);
                _staffAddressPeriods = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffAddressPeriod, StaffAddressPeriod>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffAddressPeriod)e.Item).StaffAddress = this;
                _staffAddressPeriodsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffAddressPeriod> Entities.Common.EdFi.IStaffAddress.StaffAddressPeriods
        {
            get { return _staffAddressPeriodsCovariant; }
            set { StaffAddressPeriods = new List<StaffAddressPeriod>(value.Cast<StaffAddressPeriod>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffAddressPeriods != null) foreach (var item in _staffAddressPeriods)
            {
                item.StaffAddress = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffAddressMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffAddress)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffAddressMapper.MapTo(this, (Entities.Common.EdFi.IStaffAddress)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsApartmentRoomSuiteNumberSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsBuildingSiteNumberSupported        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsCongressionalDistrictSupported     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsCountyFIPSCodeSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsLatitudeSupported                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsLocaleDescriptorSupported          { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsLongitudeSupported                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsNameOfCountySupported              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsStaffAddressPeriodsSupported       { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.EdFi.IStaffAddressPeriod, bool> Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsStaffAddressPeriodIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffAddressPutPostRequestValidator : FluentValidation.AbstractValidator<StaffAddress>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffAddress> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var staffAddressPeriodsValidator = new StaffAddressPeriodPutPostRequestValidator();

            foreach (var item in instance.StaffAddressPeriods)
            {
                var validationResult = staffAddressPeriodsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffAddressPeriod table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffAddressPeriod : Entities.Common.EdFi.IStaffAddressPeriod, Entities.Common.EdFi.IStaffAddressPeriodSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaffAddress _staffAddress;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaffAddress Entities.Common.EdFi.IStaffAddressPeriod.StaffAddress
        {
            get { return _staffAddress; }
            set { SetStaffAddress(value); }
        }

        internal Entities.Common.EdFi.IStaffAddress StaffAddress
        {
            set { SetStaffAddress(value); }
        }

        private void SetStaffAddress(Entities.Common.EdFi.IStaffAddress value)
        {
            _staffAddress = value;
        }

        /// <summary>
        /// The month, day, and year for the start of the period.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate"), NaturalKeyMember][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime BeginDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffAddressPeriod;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staffAddress == null || !_staffAddress.Equals(compareTo.StaffAddress))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddressPeriod).BeginDate == null
                || !(this as Entities.Common.EdFi.IStaffAddressPeriod).BeginDate.Equals(compareTo.BeginDate)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffAddress != null)
                    hash = hash * 23 + _staffAddress.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddressPeriod).BeginDate != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddressPeriod).BeginDate.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year for the end of the period.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffAddressPeriod")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffAddressPeriodMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffAddressPeriod)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffAddressPeriodMapper.MapTo(this, (Entities.Common.EdFi.IStaffAddressPeriod)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffAddressPeriodSynchronizationSourceSupport.IsEndDateSupported  { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffAddressPeriodPutPostRequestValidator : FluentValidation.AbstractValidator<StaffAddressPeriod>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffAddressPeriod> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffCredential table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffCredential : Entities.Common.EdFi.IStaffCredential, Entities.Common.EdFi.IStaffCredentialSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _credentialReferenceExplicitlyAssigned;
        private Credential.EdFi.CredentialReference _credentialReference;
        private Credential.EdFi.CredentialReference ImplicitCredentialReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_credentialReference == null && !_credentialReferenceExplicitlyAssigned)
                    _credentialReference = new Credential.EdFi.CredentialReference();

                return _credentialReference;
            }
        }

        [DataMember(Name="credentialReference")][NaturalKeyMember]
        public Credential.EdFi.CredentialReference CredentialReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitCredentialReference != null
                    && (_credentialReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitCredentialReference.IsReferenceFullyDefined()))
                    return ImplicitCredentialReference;

                return null;
            }
            set
            {
                _credentialReferenceExplicitlyAssigned = true;
                _credentialReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffCredential.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// Identifier or serial number assigned to the credential.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.EdFi.IStaffCredential.CredentialIdentifier
        {
            get
            {
                if (ImplicitCredentialReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCredentialReference.IsReferenceFullyDefined()))
                    return ImplicitCredentialReference.CredentialIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Credential
                _credentialReferenceExplicitlyAssigned = false;
                ImplicitCredentialReference.CredentialIdentifier = value;
            }
        }

        /// <summary>
        /// The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued.
        /// </summary>

        // IS in a reference (StaffCredential.StateOfIssueStateAbbreviationDescriptorId), IS a lookup column 
        string Entities.Common.EdFi.IStaffCredential.StateOfIssueStateAbbreviationDescriptor
        {
            get
            {
                if (ImplicitCredentialReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCredentialReference.IsReferenceFullyDefined()))
                    return ImplicitCredentialReference.StateOfIssueStateAbbreviationDescriptor;

                return null;
            }
            set
            {
                ImplicitCredentialReference.StateOfIssueStateAbbreviationDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffCredential;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Referenced Property
            if ((this as Entities.Common.EdFi.IStaffCredential).CredentialIdentifier == null
                || !(this as Entities.Common.EdFi.IStaffCredential).CredentialIdentifier.Equals(compareTo.CredentialIdentifier)) 
                return false;
 
            // Unified Type Property
            if ((this as Entities.Common.EdFi.IStaffCredential).StateOfIssueStateAbbreviationDescriptor == null
                ||!(this as Entities.Common.EdFi.IStaffCredential).StateOfIssueStateAbbreviationDescriptor.Equals(compareTo.StateOfIssueStateAbbreviationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                //Referenced Property
                if ((this as Entities.Common.EdFi.IStaffCredential).CredentialIdentifier != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffCredential).CredentialIdentifier.GetHashCode();
 
                //Unified Type Property
                if ((this as Entities.Common.EdFi.IStaffCredential).StateOfIssueStateAbbreviationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffCredential).StateOfIssueStateAbbreviationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffCredential")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffCredentialMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffCredential)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffCredentialMapper.MapTo(this, (Entities.Common.EdFi.IStaffCredential)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.EdFi.IStaffCredential.CredentialResourceId 
        { 
            get { return null; }
            set { ImplicitCredentialReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.EdFi.IStaffCredential.CredentialDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitCredentialReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffCredentialPutPostRequestValidator : FluentValidation.AbstractValidator<StaffCredential>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffCredential> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffElectronicMail table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffElectronicMail : Entities.Common.EdFi.IStaffElectronicMail, Entities.Common.EdFi.IStaffElectronicMailSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffElectronicMail.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The electronic mail (e-mail) address listed for an individual or organization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="electronicMailAddress"), NaturalKeyMember]
        public string ElectronicMailAddress { get; set; }

        /// <summary>
        /// The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="electronicMailTypeDescriptor"), NaturalKeyMember]
        public string ElectronicMailTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffElectronicMail;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailAddress == null
                || !(this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailAddress.Equals(compareTo.ElectronicMailAddress)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailTypeDescriptor.Equals(compareTo.ElectronicMailTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailAddress != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailAddress.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication that the electronic email address should not be published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="primaryEmailAddressIndicator")]
        public bool? PrimaryEmailAddressIndicator { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffElectronicMail")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffElectronicMailMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffElectronicMail)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffElectronicMailMapper.MapTo(this, (Entities.Common.EdFi.IStaffElectronicMail)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffElectronicMailSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported         { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffElectronicMailSynchronizationSourceSupport.IsPrimaryEmailAddressIndicatorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffElectronicMailPutPostRequestValidator : FluentValidation.AbstractValidator<StaffElectronicMail>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffElectronicMail> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffIdentificationCode table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffIdentificationCode : Entities.Common.EdFi.IStaffIdentificationCode, Entities.Common.EdFi.IStaffIdentificationCodeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffIdentificationCode.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a staff member.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="staffIdentificationSystemDescriptor"), NaturalKeyMember]
        public string StaffIdentificationSystemDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffIdentificationCode;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffIdentificationCode).StaffIdentificationSystemDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffIdentificationCode).StaffIdentificationSystemDescriptor.Equals(compareTo.StaffIdentificationSystemDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffIdentificationCode).StaffIdentificationSystemDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffIdentificationCode).StaffIdentificationSystemDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The organization code or name assigning the staff Identification Code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="assigningOrganizationIdentificationCode")]
        public string AssigningOrganizationIdentificationCode { get; set; }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="identificationCode")]
        public string IdentificationCode { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffIdentificationCode")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffIdentificationCodeMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffIdentificationCode)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffIdentificationCodeMapper.MapTo(this, (Entities.Common.EdFi.IStaffIdentificationCode)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffIdentificationCodeSynchronizationSourceSupport.IsAssigningOrganizationIdentificationCodeSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationCodeSynchronizationSourceSupport.IsIdentificationCodeSupported                       { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffIdentificationCodePutPostRequestValidator : FluentValidation.AbstractValidator<StaffIdentificationCode>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffIdentificationCode> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffIdentificationDocument table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffIdentificationDocument : Entities.Common.EdFi.IStaffIdentificationDocument, Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffIdentificationDocument.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The primary function of the document used for establishing identity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="identificationDocumentUseDescriptor"), NaturalKeyMember]
        public string IdentificationDocumentUseDescriptor { get; set; }

        /// <summary>
        /// The category of the document relative to its purpose.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="personalInformationVerificationDescriptor"), NaturalKeyMember]
        public string PersonalInformationVerificationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffIdentificationDocument;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffIdentificationDocument).IdentificationDocumentUseDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffIdentificationDocument).IdentificationDocumentUseDescriptor.Equals(compareTo.IdentificationDocumentUseDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffIdentificationDocument).PersonalInformationVerificationDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffIdentificationDocument).PersonalInformationVerificationDescriptor.Equals(compareTo.PersonalInformationVerificationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffIdentificationDocument).IdentificationDocumentUseDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffIdentificationDocument).IdentificationDocumentUseDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffIdentificationDocument).PersonalInformationVerificationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffIdentificationDocument).PersonalInformationVerificationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The day when the document  expires, if null then never expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentExpirationDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? DocumentExpirationDate { get; set; }

        /// <summary>
        /// The title of the document given by the issuer.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentTitle")]
        public string DocumentTitle { get; set; }

        /// <summary>
        /// Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="issuerCountryDescriptor")]
        public string IssuerCountryDescriptor { get; set; }

        /// <summary>
        /// The unique identifier on the issuer's identification system.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerDocumentIdentificationCode")]
        public string IssuerDocumentIdentificationCode { get; set; }

        /// <summary>
        /// Name of the entity or institution that issued the document.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffIdentificationDocument")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffIdentificationDocumentMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffIdentificationDocumentMapper.MapTo(this, (Entities.Common.EdFi.IStaffIdentificationDocument)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported                        { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffIdentificationDocumentPutPostRequestValidator : FluentValidation.AbstractValidator<StaffIdentificationDocument>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffIdentificationDocument> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffInternationalAddress table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffInternationalAddress : Entities.Common.EdFi.IStaffInternationalAddress, Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffInternationalAddress.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The type of address listed for an individual or organization. For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressTypeDescriptor"), NaturalKeyMember]
        public string AddressTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffInternationalAddress;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffInternationalAddress).AddressTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffInternationalAddress).AddressTypeDescriptor.Equals(compareTo.AddressTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffInternationalAddress).AddressTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffInternationalAddress).AddressTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The first line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine1")]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// The second line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine2")]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// The third line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine3")]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// The fourth line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine4")]
        public string AddressLine4 { get; set; }

        /// <summary>
        /// The first date the address is valid. For physical addresses, the date the person moved to that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The name of the country. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="countryDescriptor")]
        public string CountryDescriptor { get; set; }

        /// <summary>
        /// The last date the address is valid. For physical addresses, this would be the date the person moved from that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffInternationalAddress")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffInternationalAddressMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffInternationalAddress)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffInternationalAddressMapper.MapTo(this, (Entities.Common.EdFi.IStaffInternationalAddress)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine1Supported       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine2Supported       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine3Supported       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine4Supported       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsBeginDateSupported          { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsCountryDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsEndDateSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsLatitudeSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsLongitudeSupported          { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffInternationalAddressPutPostRequestValidator : FluentValidation.AbstractValidator<StaffInternationalAddress>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffInternationalAddress> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffLanguage table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffLanguage : Entities.Common.EdFi.IStaffLanguage, Entities.Common.EdFi.IStaffLanguageSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StaffLanguage()
        {
            StaffLanguageUses = new List<StaffLanguageUse>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffLanguage.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// A specification of which written or spoken communication is being used.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="languageDescriptor"), NaturalKeyMember]
        public string LanguageDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffLanguage;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffLanguage).LanguageDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffLanguage).LanguageDescriptor.Equals(compareTo.LanguageDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffLanguage).LanguageDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffLanguage).LanguageDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffLanguage")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffLanguageUse> _staffLanguageUses;
        private ICollection<Entities.Common.EdFi.IStaffLanguageUse> _staffLanguageUsesCovariant;

        [DataMember(Name="uses"), NoDuplicateMembers]
        public ICollection<StaffLanguageUse> StaffLanguageUses
        {
            get { return _staffLanguageUses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffLanguageUse>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffLanguageUse)e.Item).StaffLanguage = this);
                _staffLanguageUses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffLanguageUse, StaffLanguageUse>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffLanguageUse)e.Item).StaffLanguage = this;
                _staffLanguageUsesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffLanguageUse> Entities.Common.EdFi.IStaffLanguage.StaffLanguageUses
        {
            get { return _staffLanguageUsesCovariant; }
            set { StaffLanguageUses = new List<StaffLanguageUse>(value.Cast<StaffLanguageUse>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffLanguageUses != null) foreach (var item in _staffLanguageUses)
            {
                item.StaffLanguage = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffLanguageMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffLanguage)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffLanguageMapper.MapTo(this, (Entities.Common.EdFi.IStaffLanguage)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffLanguageSynchronizationSourceSupport.IsStaffLanguageUsesSupported  { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.EdFi.IStaffLanguageUse, bool> Entities.Common.EdFi.IStaffLanguageSynchronizationSourceSupport.IsStaffLanguageUseIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffLanguagePutPostRequestValidator : FluentValidation.AbstractValidator<StaffLanguage>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffLanguage> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var staffLanguageUsesValidator = new StaffLanguageUsePutPostRequestValidator();

            foreach (var item in instance.StaffLanguageUses)
            {
                var validationResult = staffLanguageUsesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffLanguageUse table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffLanguageUse : Entities.Common.EdFi.IStaffLanguageUse, Entities.Common.EdFi.IStaffLanguageUseSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaffLanguage _staffLanguage;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaffLanguage Entities.Common.EdFi.IStaffLanguageUse.StaffLanguage
        {
            get { return _staffLanguage; }
            set { SetStaffLanguage(value); }
        }

        internal Entities.Common.EdFi.IStaffLanguage StaffLanguage
        {
            set { SetStaffLanguage(value); }
        }

        private void SetStaffLanguage(Entities.Common.EdFi.IStaffLanguage value)
        {
            _staffLanguage = value;
        }

        /// <summary>
        /// A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="languageUseDescriptor"), NaturalKeyMember]
        public string LanguageUseDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffLanguageUse;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staffLanguage == null || !_staffLanguage.Equals(compareTo.StaffLanguage))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffLanguageUse).LanguageUseDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffLanguageUse).LanguageUseDescriptor.Equals(compareTo.LanguageUseDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffLanguage != null)
                    hash = hash * 23 + _staffLanguage.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffLanguageUse).LanguageUseDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffLanguageUse).LanguageUseDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffLanguageUse")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffLanguageUseMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffLanguageUse)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffLanguageUseMapper.MapTo(this, (Entities.Common.EdFi.IStaffLanguageUse)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffLanguageUsePutPostRequestValidator : FluentValidation.AbstractValidator<StaffLanguageUse>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffLanguageUse> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffOtherName table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffOtherName : Entities.Common.EdFi.IStaffOtherName, Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffOtherName.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The types of alternate names for a person.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="otherNameTypeDescriptor"), NaturalKeyMember]
        public string OtherNameTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffOtherName;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffOtherName).OtherNameTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffOtherName).OtherNameTypeDescriptor.Equals(compareTo.OtherNameTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffOtherName).OtherNameTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffOtherName).OtherNameTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffOtherName")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffOtherNameMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffOtherName)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffOtherNameMapper.MapTo(this, (Entities.Common.EdFi.IStaffOtherName)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsFirstNameSupported             { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsGenerationCodeSuffixSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsLastSurnameSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsMiddleNameSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsPersonalTitlePrefixSupported   { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffOtherNamePutPostRequestValidator : FluentValidation.AbstractValidator<StaffOtherName>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffOtherName> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffPersonalIdentificationDocument table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffPersonalIdentificationDocument : Entities.Common.EdFi.IStaffPersonalIdentificationDocument, Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffPersonalIdentificationDocument.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The primary function of the document used for establishing identity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="identificationDocumentUseDescriptor"), NaturalKeyMember]
        public string IdentificationDocumentUseDescriptor { get; set; }

        /// <summary>
        /// The category of the document relative to its purpose.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="personalInformationVerificationDescriptor"), NaturalKeyMember]
        public string PersonalInformationVerificationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffPersonalIdentificationDocument;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).IdentificationDocumentUseDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).IdentificationDocumentUseDescriptor.Equals(compareTo.IdentificationDocumentUseDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).PersonalInformationVerificationDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).PersonalInformationVerificationDescriptor.Equals(compareTo.PersonalInformationVerificationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).IdentificationDocumentUseDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).IdentificationDocumentUseDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).PersonalInformationVerificationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).PersonalInformationVerificationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The day when the document  expires, if null then never expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentExpirationDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? DocumentExpirationDate { get; set; }

        /// <summary>
        /// The title of the document given by the issuer.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentTitle")]
        public string DocumentTitle { get; set; }

        /// <summary>
        /// Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="issuerCountryDescriptor")]
        public string IssuerCountryDescriptor { get; set; }

        /// <summary>
        /// The unique identifier on the issuer's identification system.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerDocumentIdentificationCode")]
        public string IssuerDocumentIdentificationCode { get; set; }

        /// <summary>
        /// Name of the entity or institution that issued the document.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffPersonalIdentificationDocument")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffPersonalIdentificationDocumentMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffPersonalIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffPersonalIdentificationDocumentMapper.MapTo(this, (Entities.Common.EdFi.IStaffPersonalIdentificationDocument)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported                        { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPersonalIdentificationDocumentPutPostRequestValidator : FluentValidation.AbstractValidator<StaffPersonalIdentificationDocument>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffPersonalIdentificationDocument> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffRace table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffRace : Entities.Common.EdFi.IStaffRace, Entities.Common.EdFi.IStaffRaceSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffRace.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The general racial category which most clearly reflects the individual's recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="raceDescriptor"), NaturalKeyMember]
        public string RaceDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffRace;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffRace).RaceDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffRace).RaceDescriptor.Equals(compareTo.RaceDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffRace).RaceDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffRace).RaceDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffRace")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffRaceMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffRace)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffRaceMapper.MapTo(this, (Entities.Common.EdFi.IStaffRace)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffRacePutPostRequestValidator : FluentValidation.AbstractValidator<StaffRace>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffRace> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffRecognition table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffRecognition : Entities.Common.EdFi.IStaffRecognition, Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffRecognition.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The nature of recognition given to the learner for accomplishments in a co-curricular, or extra-curricular activity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="recognitionTypeDescriptor"), NaturalKeyMember]
        public string RecognitionTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffRecognition;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffRecognition).RecognitionTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffRecognition).RecognitionTypeDescriptor.Equals(compareTo.RecognitionTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffRecognition).RecognitionTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffRecognition).RecognitionTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The category of achievement attributed to the learner.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="achievementCategoryDescriptor")]
        public string AchievementCategoryDescriptor { get; set; }

        /// <summary>
        /// The system that defines the categories by which an achievement is attributed to the learner.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="achievementCategorySystem")]
        public string AchievementCategorySystem { get; set; }

        /// <summary>
        /// The title assigned to the achievement.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="achievementTitle")]
        public string AchievementTitle { get; set; }

        /// <summary>
        /// The criteria for competency-based completion of the achievement/award.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="criteria")]
        public string Criteria { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="criteriaURL")]
        public string CriteriaURL { get; set; }

        /// <summary>
        /// A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="evidenceStatement")]
        public string EvidenceStatement { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="imageURL")]
        public string ImageURL { get; set; }

        /// <summary>
        /// The name of the agent, entity, or institution issuing the element.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) from which the award was issued.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerOriginURL")]
        public string IssuerOriginURL { get; set; }

        /// <summary>
        /// The date the recognition was awarded or earned.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="recognitionAwardDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? RecognitionAwardDate { get; set; }

        /// <summary>
        /// Date on which the award expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="recognitionAwardExpiresDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? RecognitionAwardExpiresDate { get; set; }

        /// <summary>
        /// A description of the type of academic distinctions earned by or awarded to the individual.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="recognitionDescription")]
        public string RecognitionDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffRecognition")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffRecognitionMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffRecognition)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffRecognitionMapper.MapTo(this, (Entities.Common.EdFi.IStaffRecognition)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsAchievementCategoryDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsAchievementCategorySystemSupported      { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsAchievementTitleSupported               { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsCriteriaSupported                       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsCriteriaURLSupported                    { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsEvidenceStatementSupported              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsImageURLSupported                       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsIssuerNameSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsIssuerOriginURLSupported                { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsRecognitionAwardDateSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsRecognitionAwardExpiresDateSupported    { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsRecognitionDescriptionSupported         { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffRecognitionPutPostRequestValidator : FluentValidation.AbstractValidator<StaffRecognition>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffRecognition> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffTelephone table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffTelephone : Entities.Common.EdFi.IStaffTelephone, Entities.Common.EdFi.IStaffTelephoneSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffTelephone.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The telephone number including the area code, and extension, if applicable.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="telephoneNumber"), NaturalKeyMember]
        public string TelephoneNumber { get; set; }

        /// <summary>
        /// The type of communication number listed for an individual or organization.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="telephoneNumberTypeDescriptor"), NaturalKeyMember]
        public string TelephoneNumberTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffTelephone;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumber == null
                || !(this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumber.Equals(compareTo.TelephoneNumber)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumberTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumberTypeDescriptor.Equals(compareTo.TelephoneNumberTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumber != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumber.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumberTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumberTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication that the telephone number should not be published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="orderOfPriority")]
        public int? OrderOfPriority { get; set; }

        /// <summary>
        /// An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="textMessageCapabilityIndicator")]
        public bool? TextMessageCapabilityIndicator { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffTelephone")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffTelephoneMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffTelephone)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffTelephoneMapper.MapTo(this, (Entities.Common.EdFi.IStaffTelephone)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffTelephoneSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffTelephoneSynchronizationSourceSupport.IsOrderOfPrioritySupported                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffTelephoneSynchronizationSourceSupport.IsTextMessageCapabilityIndicatorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffTelephonePutPostRequestValidator : FluentValidation.AbstractValidator<StaffTelephone>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffTelephone> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffTribalAffiliation table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffTribalAffiliation : Entities.Common.EdFi.IStaffTribalAffiliation, Entities.Common.EdFi.IStaffTribalAffiliationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffTribalAffiliation.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// An American Indian tribe with which the staff member is affiliated.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="tribalAffiliationDescriptor"), NaturalKeyMember]
        public string TribalAffiliationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffTribalAffiliation;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffTribalAffiliation).TribalAffiliationDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffTribalAffiliation).TribalAffiliationDescriptor.Equals(compareTo.TribalAffiliationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffTribalAffiliation).TribalAffiliationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffTribalAffiliation).TribalAffiliationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffTribalAffiliation")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffTribalAffiliationMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffTribalAffiliation)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffTribalAffiliationMapper.MapTo(this, (Entities.Common.EdFi.IStaffTribalAffiliation)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffTribalAffiliationPutPostRequestValidator : FluentValidation.AbstractValidator<StaffTribalAffiliation>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffTribalAffiliation> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffVisa table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffVisa : Entities.Common.EdFi.IStaffVisa, Entities.Common.EdFi.IStaffVisaSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffVisa.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// An indicator of a non-US citizen's Visa type.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="visaDescriptor"), NaturalKeyMember]
        public string VisaDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffVisa;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffVisa).VisaDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffVisa).VisaDescriptor.Equals(compareTo.VisaDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffVisa).VisaDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffVisa).VisaDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffVisa")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffVisaMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffVisa)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffVisaMapper.MapTo(this, (Entities.Common.EdFi.IStaffVisa)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffVisaPutPostRequestValidator : FluentValidation.AbstractValidator<StaffVisa>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffVisa> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Staff

namespace EdFi.Ods.Api.Models.Resources.Staff.EdFi.Staff_Entity_Extension_IncludeOnly_Writable.Extensions.GrandBend
{
    /// <summary>
    /// A class which represents the grandbend.StaffExtension table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffExtension : Entities.Common.GrandBend.IStaffExtension, Entities.Common.GrandBend.IStaffExtensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.GrandBend.IStaffExtension.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.GrandBend.IStaffExtension;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The date that the staff member's new hire probationary period was completed.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="probationCompleteDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? ProbationCompleteDate { get; set; }

        /// <summary>
        /// An indication as to whether the staff member is tenured.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="tenured")]
        public bool? Tenured { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.GrandBend.StaffExtensionMapper.SynchronizeTo(this, (Entities.Common.GrandBend.IStaffExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.GrandBend.StaffExtensionMapper.MapTo(this, (Entities.Common.GrandBend.IStaffExtension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.GrandBend.IStaffExtensionSynchronizationSourceSupport.IsProbationCompleteDateSupported  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IStaffExtensionSynchronizationSourceSupport.IsTenuredSupported                { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<StaffExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Staff

namespace EdFi.Ods.Api.Models.Resources.Staff.EdFi.Staff_Entity_Extension_IncludeOnly_Writable.Extensions.Sample
{
    /// <summary>
    /// A class which represents the sample.StaffExtension table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffExtension : Entities.Common.Sample.IStaffExtension, Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StaffExtension()
        {
            StaffPets = new List<StaffPet>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.Sample.IStaffExtension.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStaffExtension;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The date the staff member adopted the first household pet.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstPetOwnedDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? FirstPetOwnedDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        /// <summary>
        /// petPreference
        /// </summary>
        [DataMember(Name = "petPreference")]
        public StaffPetPreference StaffPetPreference { get; set; }

        Entities.Common.Sample.IStaffPetPreference Entities.Common.Sample.IStaffExtension.StaffPetPreference
        {
            get { return StaffPetPreference; }
            set { StaffPetPreference = (StaffPetPreference) value; }
        }

        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffPet> _staffPets;
        private ICollection<Entities.Common.Sample.IStaffPet> _staffPetsCovariant;

        [DataMember(Name="pets"), NoDuplicateMembers]
        public ICollection<StaffPet> StaffPets
        {
            get { return _staffPets; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffPet>(value,
                    (s, e) => ((Entities.Common.Sample.IStaffPet)e.Item).StaffExtension = this);
                _staffPets = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.Sample.IStaffPet, StaffPet>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.Sample.IStaffPet)e.Item).StaffExtension = this;
                _staffPetsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.Sample.IStaffPet> Entities.Common.Sample.IStaffExtension.StaffPets
        {
            get { return _staffPetsCovariant; }
            set { StaffPets = new List<StaffPet>(value.Cast<StaffPet>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffPets != null) foreach (var item in _staffPets)
            {
                item.StaffExtension = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StaffExtensionMapper.SynchronizeTo(this, (Entities.Common.Sample.IStaffExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StaffExtensionMapper.MapTo(this, (Entities.Common.Sample.IStaffExtension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport.IsFirstPetOwnedDateSupported   { get { return true; } set { } }
        bool Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport.IsStaffPetPreferenceSupported  { get { return true; } set { } }
        bool Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport.IsStaffPetsSupported           { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.Sample.IStaffPet, bool> Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport.IsStaffPetIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<StaffExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var staffPetsValidator = new StaffPetPutPostRequestValidator();

            foreach (var item in instance.StaffPets)
            {
                var validationResult = staffPetsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the sample.StaffPet table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffPet : Entities.Common.Sample.IStaffPet, Entities.Common.Sample.IStaffPetSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.Sample.IStaffExtension _staffExtension;

        [IgnoreDataMember]
        Entities.Common.Sample.IStaffExtension Entities.Common.Sample.IStaffPet.StaffExtension
        {
            get { return _staffExtension; }
            set { SetStaffExtension(value); }
        }

        internal Entities.Common.Sample.IStaffExtension StaffExtension
        {
            set { SetStaffExtension(value); }
        }

        private void SetStaffExtension(Entities.Common.Sample.IStaffExtension value)
        {
            _staffExtension = value;
        }

        /// <summary>
        /// The pet's name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="petName"), NaturalKeyMember]
        public string PetName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStaffPet;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staffExtension == null || !_staffExtension.Equals(compareTo.StaffExtension))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.Sample.IStaffPet).PetName == null
                || !(this as Entities.Common.Sample.IStaffPet).PetName.Equals(compareTo.PetName)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffExtension != null)
                    hash = hash * 23 + _staffExtension.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.Sample.IStaffPet).PetName != null) 
                    hash = hash * 23 + (this as Entities.Common.Sample.IStaffPet).PetName.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication as to whether the pet has been spayed/neutered.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="isFixed")]
        public bool? IsFixed { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StaffPetMapper.SynchronizeTo(this, (Entities.Common.Sample.IStaffPet)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StaffPetMapper.MapTo(this, (Entities.Common.Sample.IStaffPet)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStaffPetSynchronizationSourceSupport.IsIsFixedSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPetPutPostRequestValidator : FluentValidation.AbstractValidator<StaffPet>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffPet> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the sample.StaffPetPreference table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffPetPreference : Entities.Common.Sample.IStaffPetPreference, Entities.Common.Sample.IStaffPetPreferenceSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.Sample.IStaffExtension _staffExtension;

        [IgnoreDataMember]
        Entities.Common.Sample.IStaffExtension Entities.Common.Sample.IStaffPetPreference.StaffExtension
        {
            get { return _staffExtension; }
            set { SetStaffExtension(value); }
        }

        internal Entities.Common.Sample.IStaffExtension StaffExtension
        {
            set { SetStaffExtension(value); }
        }

        private void SetStaffExtension(Entities.Common.Sample.IStaffExtension value)
        {
            _staffExtension = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStaffPetPreference;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staffExtension == null || !_staffExtension.Equals(compareTo.StaffExtension))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffExtension != null)
                    hash = hash * 23 + _staffExtension.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The preferred maximum weight of a household pet.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maximumWeight")]
        public int MaximumWeight { get; set; }

        /// <summary>
        /// The preferred minimum weight of a household pet.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="minimumWeight")]
        public int MinimumWeight { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StaffPetPreferenceMapper.SynchronizeTo(this, (Entities.Common.Sample.IStaffPetPreference)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StaffPetPreferenceMapper.MapTo(this, (Entities.Common.Sample.IStaffPetPreference)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStaffPetPreferenceSynchronizationSourceSupport.IsMaximumWeightSupported  { get { return true; } set { } }
        bool Entities.Common.Sample.IStaffPetPreferenceSynchronizationSourceSupport.IsMinimumWeightSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPetPreferencePutPostRequestValidator : FluentValidation.AbstractValidator<StaffPetPreference>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffPetPreference> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Staff

namespace EdFi.Ods.Api.Models.Resources.Staff.EdFi.Staff_Entity_Extension_ExcludeOnly_Readable
{
    /// <summary>
    /// Represents a reference to the Staff resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffReference
    {
        [DataMember(Name="staffUniqueId"), NaturalKeyMember]
        public string StaffUniqueId { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return StaffUniqueId != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "Staff",
                Href = $"/ed-fi/staffs/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new Common.Models.Domain.FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.Staff table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class Staff : Entities.Common.EdFi.IStaff, IHasETag, Entities.Common.EdFi.IStaffSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Staff()
        {
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Staff resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to a staff.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="staffUniqueId"), NaturalKeyMember, UniqueId]
        public string StaffUniqueId { get; set; }

        string IIdentifiablePerson.UniqueId { get { return StaffUniqueId; } }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaff;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Property
            if ((this as Entities.Common.EdFi.IStaff).StaffUniqueId == null
                || !(this as Entities.Common.EdFi.IStaff).StaffUniqueId.Equals(compareTo.StaffUniqueId)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Property
                if ((this as Entities.Common.EdFi.IStaff).StaffUniqueId != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaff).StaffUniqueId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        DateTime? Entities.Common.EdFi.IStaff.BirthDate
        {
            get { return default(DateTime?); }
            set { }
        }

        // IS a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.EdFi.IStaff.CitizenshipStatusDescriptor
        {
            get { return null; }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.EdFi.IStaff.FirstName
        {
            get { return default(string); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.EdFi.IStaff.GenerationCodeSuffix
        {
            get { return default(string); }
            set { }
        }

        // IS a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.EdFi.IStaff.HighestCompletedLevelOfEducationDescriptor
        {
            get { return null; }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        bool? Entities.Common.EdFi.IStaff.HighlyQualifiedTeacher
        {
            get { return default(bool?); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        bool? Entities.Common.EdFi.IStaff.HispanicLatinoEthnicity
        {
            get { return default(bool?); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.EdFi.IStaff.LastSurname
        {
            get { return default(string); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.EdFi.IStaff.LoginId
        {
            get { return default(string); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.EdFi.IStaff.MaidenName
        {
            get { return default(string); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.EdFi.IStaff.MiddleName
        {
            get { return default(string); }
            set { }
        }

        // IS a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.EdFi.IStaff.OldEthnicityDescriptor
        {
            get { return null; }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.EdFi.IStaff.PersonalTitlePrefix
        {
            get { return default(string); }
            set { }
        }

        // IS a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.EdFi.IStaff.SexDescriptor
        {
            get { return null; }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        decimal? Entities.Common.EdFi.IStaff.YearsOfPriorProfessionalExperience
        {
            get { return default(decimal?); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        decimal? Entities.Common.EdFi.IStaff.YearsOfPriorTeachingExperience
        {
            get { return default(decimal?); }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "Staff")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffAddress> Entities.Common.EdFi.IStaff.StaffAddresses
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffCredential> Entities.Common.EdFi.IStaff.StaffCredentials
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffElectronicMail> Entities.Common.EdFi.IStaff.StaffElectronicMails
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffIdentificationCode> Entities.Common.EdFi.IStaff.StaffIdentificationCodes
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffIdentificationDocument> Entities.Common.EdFi.IStaff.StaffIdentificationDocuments
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffInternationalAddress> Entities.Common.EdFi.IStaff.StaffInternationalAddresses
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffLanguage> Entities.Common.EdFi.IStaff.StaffLanguages
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffOtherName> Entities.Common.EdFi.IStaff.StaffOtherNames
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffPersonalIdentificationDocument> Entities.Common.EdFi.IStaff.StaffPersonalIdentificationDocuments
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffRace> Entities.Common.EdFi.IStaff.StaffRaces
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffRecognition> Entities.Common.EdFi.IStaff.StaffRecognitions
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffTelephone> Entities.Common.EdFi.IStaff.StaffTelephones
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffTribalAffiliation> Entities.Common.EdFi.IStaff.StaffTribalAffiliations
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffVisa> Entities.Common.EdFi.IStaff.StaffVisas
        {
            get { return null; }
            set { }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaff)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffMapper.MapTo(this, (Entities.Common.EdFi.IStaff)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsBirthDateSupported                                   { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsCitizenshipStatusDescriptorSupported                 { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsFirstNameSupported                                   { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsGenerationCodeSuffixSupported                        { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsHighestCompletedLevelOfEducationDescriptorSupported  { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsHighlyQualifiedTeacherSupported                      { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsHispanicLatinoEthnicitySupported                     { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsLastSurnameSupported                                 { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsLoginIdSupported                                     { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsMaidenNameSupported                                  { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsMiddleNameSupported                                  { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsOldEthnicityDescriptorSupported                      { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsPersonalTitlePrefixSupported                         { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsSexDescriptorSupported                               { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffAddressesSupported                              { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffCredentialsSupported                            { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffElectronicMailsSupported                        { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationCodesSupported                    { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationDocumentsSupported                { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffInternationalAddressesSupported                 { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffLanguagesSupported                              { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffOtherNamesSupported                             { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffPersonalIdentificationDocumentsSupported        { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRacesSupported                                  { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRecognitionsSupported                           { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTelephonesSupported                             { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTribalAffiliationsSupported                     { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffUniqueIdSupported                               { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffVisasSupported                                  { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsYearsOfPriorProfessionalExperienceSupported          { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsYearsOfPriorTeachingExperienceSupported              { get { return false; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.EdFi.IStaffAddress, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffAddressIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffCredential, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffCredentialIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffElectronicMail, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffElectronicMailIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffIdentificationCode, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationCodeIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffIdentificationDocument, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationDocumentIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffInternationalAddress, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffInternationalAddressIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffLanguage, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffLanguageIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffOtherName, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffOtherNameIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffPersonalIdentificationDocument, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffPersonalIdentificationDocumentIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffRace, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRaceIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffRecognition, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRecognitionIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffTelephone, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTelephoneIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffTribalAffiliation, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTribalAffiliationIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffVisa, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffVisaIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPutPostRequestValidator : FluentValidation.AbstractValidator<Staff>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<Staff> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Staff

namespace EdFi.Ods.Api.Models.Resources.Staff.EdFi.Staff_Entity_Extension_ExcludeOnly_Readable.Extensions.GrandBend
{
    /// <summary>
    /// A class which represents the grandbend.StaffExtension table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffExtension : Entities.Common.GrandBend.IStaffExtension, Entities.Common.GrandBend.IStaffExtensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.GrandBend.IStaffExtension.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.GrandBend.IStaffExtension;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The date that the staff member's new hire probationary period was completed.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="probationCompleteDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? ProbationCompleteDate { get; set; }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        bool? Entities.Common.GrandBend.IStaffExtension.Tenured
        {
            get { return default(bool?); }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.GrandBend.StaffExtensionMapper.SynchronizeTo(this, (Entities.Common.GrandBend.IStaffExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.GrandBend.StaffExtensionMapper.MapTo(this, (Entities.Common.GrandBend.IStaffExtension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.GrandBend.IStaffExtensionSynchronizationSourceSupport.IsProbationCompleteDateSupported  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IStaffExtensionSynchronizationSourceSupport.IsTenuredSupported                { get { return false; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<StaffExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Staff

namespace EdFi.Ods.Api.Models.Resources.Staff.EdFi.Staff_Entity_Extension_ExcludeOnly_Writable
{
    /// <summary>
    /// Represents a reference to the Staff resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffReference
    {
        [DataMember(Name="staffUniqueId"), NaturalKeyMember]
        public string StaffUniqueId { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return StaffUniqueId != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "Staff",
                Href = $"/ed-fi/staffs/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new Common.Models.Domain.FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.Staff table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class Staff : Entities.Common.EdFi.IStaff, IHasETag, Entities.Common.EdFi.IStaffSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Staff()
        {
            StaffAddresses = new List<StaffAddress>();
            StaffCredentials = new List<StaffCredential>();
            StaffElectronicMails = new List<StaffElectronicMail>();
            StaffIdentificationCodes = new List<StaffIdentificationCode>();
            StaffIdentificationDocuments = new List<StaffIdentificationDocument>();
            StaffInternationalAddresses = new List<StaffInternationalAddress>();
            StaffLanguages = new List<StaffLanguage>();
            StaffOtherNames = new List<StaffOtherName>();
            StaffPersonalIdentificationDocuments = new List<StaffPersonalIdentificationDocument>();
            StaffRaces = new List<StaffRace>();
            StaffRecognitions = new List<StaffRecognition>();
            StaffTelephones = new List<StaffTelephone>();
            StaffTribalAffiliations = new List<StaffTribalAffiliation>();
            StaffVisas = new List<StaffVisa>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Staff resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to a staff.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="staffUniqueId"), NaturalKeyMember, UniqueId]
        public string StaffUniqueId { get; set; }

        string IIdentifiablePerson.UniqueId { get { return StaffUniqueId; } }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaff;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Property
            if ((this as Entities.Common.EdFi.IStaff).StaffUniqueId == null
                || !(this as Entities.Common.EdFi.IStaff).StaffUniqueId.Equals(compareTo.StaffUniqueId)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Property
                if ((this as Entities.Common.EdFi.IStaff).StaffUniqueId != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaff).StaffUniqueId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="birthDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BirthDate { get; set; }

        /// <summary>
        /// An indicator of whether or not the person is a U.S. citizen.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="citizenshipStatusDescriptor")]
        public string CitizenshipStatusDescriptor { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="highestCompletedLevelOfEducationDescriptor")]
        public string HighestCompletedLevelOfEducationDescriptor { get; set; }

        /// <summary>
        /// An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="highlyQualifiedTeacher")]
        public bool? HighlyQualifiedTeacher { get; set; }

        /// <summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="hispanicLatinoEthnicity")]
        public bool? HispanicLatinoEthnicity { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// The login ID for the user; used for security access control interface.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="loginId")]
        public string LoginId { get; set; }

        /// <summary>
        /// The person's maiden name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maidenName")]
        public string MaidenName { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// Previous definition of Ethnicity combining Hispanic/Latino and race:          1 - American Indian or Alaskan Native          2 - Asian or Pacific Islander          3 - Black, not of Hispanic origin          4 - Hispanic          5 - White, not of Hispanic origin.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="oldEthnicityDescriptor")]
        public string OldEthnicityDescriptor { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }

        /// <summary>
        /// A person's gender.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="sexDescriptor")]
        public string SexDescriptor { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a similar professional position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorProfessionalExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorProfessionalExperience { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a teaching position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorTeachingExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorTeachingExperience { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "Staff")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffAddress> _staffAddresses;
        private ICollection<Entities.Common.EdFi.IStaffAddress> _staffAddressesCovariant;

        [DataMember(Name="addresses"), NoDuplicateMembers]
        public ICollection<StaffAddress> StaffAddresses
        {
            get { return _staffAddresses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffAddress>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffAddress)e.Item).Staff = this);
                _staffAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffAddress, StaffAddress>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffAddress)e.Item).Staff = this;
                _staffAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffAddress> Entities.Common.EdFi.IStaff.StaffAddresses
        {
            get { return _staffAddressesCovariant; }
            set { StaffAddresses = new List<StaffAddress>(value.Cast<StaffAddress>()); }
        }

        private ICollection<StaffCredential> _staffCredentials;
        private ICollection<Entities.Common.EdFi.IStaffCredential> _staffCredentialsCovariant;

        [DataMember(Name="credentials"), NoDuplicateMembers]
        public ICollection<StaffCredential> StaffCredentials
        {
            get { return _staffCredentials; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffCredential>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffCredential)e.Item).Staff = this);
                _staffCredentials = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffCredential, StaffCredential>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffCredential)e.Item).Staff = this;
                _staffCredentialsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffCredential> Entities.Common.EdFi.IStaff.StaffCredentials
        {
            get { return _staffCredentialsCovariant; }
            set { StaffCredentials = new List<StaffCredential>(value.Cast<StaffCredential>()); }
        }

        private ICollection<StaffElectronicMail> _staffElectronicMails;
        private ICollection<Entities.Common.EdFi.IStaffElectronicMail> _staffElectronicMailsCovariant;

        [DataMember(Name="electronicMails"), NoDuplicateMembers]
        public ICollection<StaffElectronicMail> StaffElectronicMails
        {
            get { return _staffElectronicMails; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffElectronicMail>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffElectronicMail)e.Item).Staff = this);
                _staffElectronicMails = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffElectronicMail, StaffElectronicMail>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffElectronicMail)e.Item).Staff = this;
                _staffElectronicMailsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffElectronicMail> Entities.Common.EdFi.IStaff.StaffElectronicMails
        {
            get { return _staffElectronicMailsCovariant; }
            set { StaffElectronicMails = new List<StaffElectronicMail>(value.Cast<StaffElectronicMail>()); }
        }

        private ICollection<StaffIdentificationCode> _staffIdentificationCodes;
        private ICollection<Entities.Common.EdFi.IStaffIdentificationCode> _staffIdentificationCodesCovariant;

        [DataMember(Name="identificationCodes"), NoDuplicateMembers]
        public ICollection<StaffIdentificationCode> StaffIdentificationCodes
        {
            get { return _staffIdentificationCodes; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffIdentificationCode>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffIdentificationCode)e.Item).Staff = this);
                _staffIdentificationCodes = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffIdentificationCode, StaffIdentificationCode>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffIdentificationCode)e.Item).Staff = this;
                _staffIdentificationCodesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffIdentificationCode> Entities.Common.EdFi.IStaff.StaffIdentificationCodes
        {
            get { return _staffIdentificationCodesCovariant; }
            set { StaffIdentificationCodes = new List<StaffIdentificationCode>(value.Cast<StaffIdentificationCode>()); }
        }

        private ICollection<StaffIdentificationDocument> _staffIdentificationDocuments;
        private ICollection<Entities.Common.EdFi.IStaffIdentificationDocument> _staffIdentificationDocumentsCovariant;

        [DataMember(Name="identificationDocuments"), NoDuplicateMembers]
        public ICollection<StaffIdentificationDocument> StaffIdentificationDocuments
        {
            get { return _staffIdentificationDocuments; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffIdentificationDocument>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffIdentificationDocument)e.Item).Staff = this);
                _staffIdentificationDocuments = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffIdentificationDocument, StaffIdentificationDocument>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffIdentificationDocument)e.Item).Staff = this;
                _staffIdentificationDocumentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffIdentificationDocument> Entities.Common.EdFi.IStaff.StaffIdentificationDocuments
        {
            get { return _staffIdentificationDocumentsCovariant; }
            set { StaffIdentificationDocuments = new List<StaffIdentificationDocument>(value.Cast<StaffIdentificationDocument>()); }
        }

        private ICollection<StaffInternationalAddress> _staffInternationalAddresses;
        private ICollection<Entities.Common.EdFi.IStaffInternationalAddress> _staffInternationalAddressesCovariant;

        [DataMember(Name="internationalAddresses"), NoDuplicateMembers]
        public ICollection<StaffInternationalAddress> StaffInternationalAddresses
        {
            get { return _staffInternationalAddresses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffInternationalAddress>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffInternationalAddress)e.Item).Staff = this);
                _staffInternationalAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffInternationalAddress, StaffInternationalAddress>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffInternationalAddress)e.Item).Staff = this;
                _staffInternationalAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffInternationalAddress> Entities.Common.EdFi.IStaff.StaffInternationalAddresses
        {
            get { return _staffInternationalAddressesCovariant; }
            set { StaffInternationalAddresses = new List<StaffInternationalAddress>(value.Cast<StaffInternationalAddress>()); }
        }

        private ICollection<StaffLanguage> _staffLanguages;
        private ICollection<Entities.Common.EdFi.IStaffLanguage> _staffLanguagesCovariant;

        [DataMember(Name="languages"), NoDuplicateMembers]
        public ICollection<StaffLanguage> StaffLanguages
        {
            get { return _staffLanguages; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffLanguage>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffLanguage)e.Item).Staff = this);
                _staffLanguages = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffLanguage, StaffLanguage>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffLanguage)e.Item).Staff = this;
                _staffLanguagesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffLanguage> Entities.Common.EdFi.IStaff.StaffLanguages
        {
            get { return _staffLanguagesCovariant; }
            set { StaffLanguages = new List<StaffLanguage>(value.Cast<StaffLanguage>()); }
        }

        private ICollection<StaffOtherName> _staffOtherNames;
        private ICollection<Entities.Common.EdFi.IStaffOtherName> _staffOtherNamesCovariant;

        [DataMember(Name="otherNames"), NoDuplicateMembers]
        public ICollection<StaffOtherName> StaffOtherNames
        {
            get { return _staffOtherNames; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffOtherName>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffOtherName)e.Item).Staff = this);
                _staffOtherNames = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffOtherName, StaffOtherName>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffOtherName)e.Item).Staff = this;
                _staffOtherNamesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffOtherName> Entities.Common.EdFi.IStaff.StaffOtherNames
        {
            get { return _staffOtherNamesCovariant; }
            set { StaffOtherNames = new List<StaffOtherName>(value.Cast<StaffOtherName>()); }
        }

        private ICollection<StaffPersonalIdentificationDocument> _staffPersonalIdentificationDocuments;
        private ICollection<Entities.Common.EdFi.IStaffPersonalIdentificationDocument> _staffPersonalIdentificationDocumentsCovariant;

        [DataMember(Name="personalIdentificationDocuments"), NoDuplicateMembers]
        public ICollection<StaffPersonalIdentificationDocument> StaffPersonalIdentificationDocuments
        {
            get { return _staffPersonalIdentificationDocuments; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffPersonalIdentificationDocument>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffPersonalIdentificationDocument)e.Item).Staff = this);
                _staffPersonalIdentificationDocuments = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffPersonalIdentificationDocument, StaffPersonalIdentificationDocument>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffPersonalIdentificationDocument)e.Item).Staff = this;
                _staffPersonalIdentificationDocumentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffPersonalIdentificationDocument> Entities.Common.EdFi.IStaff.StaffPersonalIdentificationDocuments
        {
            get { return _staffPersonalIdentificationDocumentsCovariant; }
            set { StaffPersonalIdentificationDocuments = new List<StaffPersonalIdentificationDocument>(value.Cast<StaffPersonalIdentificationDocument>()); }
        }

        private ICollection<StaffRace> _staffRaces;
        private ICollection<Entities.Common.EdFi.IStaffRace> _staffRacesCovariant;

        [DataMember(Name="races"), NoDuplicateMembers]
        public ICollection<StaffRace> StaffRaces
        {
            get { return _staffRaces; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffRace>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffRace)e.Item).Staff = this);
                _staffRaces = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffRace, StaffRace>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffRace)e.Item).Staff = this;
                _staffRacesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffRace> Entities.Common.EdFi.IStaff.StaffRaces
        {
            get { return _staffRacesCovariant; }
            set { StaffRaces = new List<StaffRace>(value.Cast<StaffRace>()); }
        }

        private ICollection<StaffRecognition> _staffRecognitions;
        private ICollection<Entities.Common.EdFi.IStaffRecognition> _staffRecognitionsCovariant;

        [DataMember(Name="recognitions"), NoDuplicateMembers]
        public ICollection<StaffRecognition> StaffRecognitions
        {
            get { return _staffRecognitions; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffRecognition>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffRecognition)e.Item).Staff = this);
                _staffRecognitions = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffRecognition, StaffRecognition>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffRecognition)e.Item).Staff = this;
                _staffRecognitionsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffRecognition> Entities.Common.EdFi.IStaff.StaffRecognitions
        {
            get { return _staffRecognitionsCovariant; }
            set { StaffRecognitions = new List<StaffRecognition>(value.Cast<StaffRecognition>()); }
        }

        private ICollection<StaffTelephone> _staffTelephones;
        private ICollection<Entities.Common.EdFi.IStaffTelephone> _staffTelephonesCovariant;

        [DataMember(Name="telephones"), NoDuplicateMembers]
        public ICollection<StaffTelephone> StaffTelephones
        {
            get { return _staffTelephones; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffTelephone>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffTelephone)e.Item).Staff = this);
                _staffTelephones = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffTelephone, StaffTelephone>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffTelephone)e.Item).Staff = this;
                _staffTelephonesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffTelephone> Entities.Common.EdFi.IStaff.StaffTelephones
        {
            get { return _staffTelephonesCovariant; }
            set { StaffTelephones = new List<StaffTelephone>(value.Cast<StaffTelephone>()); }
        }

        private ICollection<StaffTribalAffiliation> _staffTribalAffiliations;
        private ICollection<Entities.Common.EdFi.IStaffTribalAffiliation> _staffTribalAffiliationsCovariant;

        [DataMember(Name="tribalAffiliations"), NoDuplicateMembers]
        public ICollection<StaffTribalAffiliation> StaffTribalAffiliations
        {
            get { return _staffTribalAffiliations; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffTribalAffiliation>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffTribalAffiliation)e.Item).Staff = this);
                _staffTribalAffiliations = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffTribalAffiliation, StaffTribalAffiliation>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffTribalAffiliation)e.Item).Staff = this;
                _staffTribalAffiliationsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffTribalAffiliation> Entities.Common.EdFi.IStaff.StaffTribalAffiliations
        {
            get { return _staffTribalAffiliationsCovariant; }
            set { StaffTribalAffiliations = new List<StaffTribalAffiliation>(value.Cast<StaffTribalAffiliation>()); }
        }

        private ICollection<StaffVisa> _staffVisas;
        private ICollection<Entities.Common.EdFi.IStaffVisa> _staffVisasCovariant;

        [DataMember(Name="visas"), NoDuplicateMembers]
        public ICollection<StaffVisa> StaffVisas
        {
            get { return _staffVisas; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffVisa>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffVisa)e.Item).Staff = this);
                _staffVisas = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffVisa, StaffVisa>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffVisa)e.Item).Staff = this;
                _staffVisasCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffVisa> Entities.Common.EdFi.IStaff.StaffVisas
        {
            get { return _staffVisasCovariant; }
            set { StaffVisas = new List<StaffVisa>(value.Cast<StaffVisa>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffAddresses != null) foreach (var item in _staffAddresses)
            {
                item.Staff = this;
            }

            if (_staffCredentials != null) foreach (var item in _staffCredentials)
            {
                item.Staff = this;
            }

            if (_staffElectronicMails != null) foreach (var item in _staffElectronicMails)
            {
                item.Staff = this;
            }

            if (_staffIdentificationCodes != null) foreach (var item in _staffIdentificationCodes)
            {
                item.Staff = this;
            }

            if (_staffIdentificationDocuments != null) foreach (var item in _staffIdentificationDocuments)
            {
                item.Staff = this;
            }

            if (_staffInternationalAddresses != null) foreach (var item in _staffInternationalAddresses)
            {
                item.Staff = this;
            }

            if (_staffLanguages != null) foreach (var item in _staffLanguages)
            {
                item.Staff = this;
            }

            if (_staffOtherNames != null) foreach (var item in _staffOtherNames)
            {
                item.Staff = this;
            }

            if (_staffPersonalIdentificationDocuments != null) foreach (var item in _staffPersonalIdentificationDocuments)
            {
                item.Staff = this;
            }

            if (_staffRaces != null) foreach (var item in _staffRaces)
            {
                item.Staff = this;
            }

            if (_staffRecognitions != null) foreach (var item in _staffRecognitions)
            {
                item.Staff = this;
            }

            if (_staffTelephones != null) foreach (var item in _staffTelephones)
            {
                item.Staff = this;
            }

            if (_staffTribalAffiliations != null) foreach (var item in _staffTribalAffiliations)
            {
                item.Staff = this;
            }

            if (_staffVisas != null) foreach (var item in _staffVisas)
            {
                item.Staff = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaff)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffMapper.MapTo(this, (Entities.Common.EdFi.IStaff)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsBirthDateSupported                                   { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsCitizenshipStatusDescriptorSupported                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsFirstNameSupported                                   { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsGenerationCodeSuffixSupported                        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsHighestCompletedLevelOfEducationDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsHighlyQualifiedTeacherSupported                      { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsHispanicLatinoEthnicitySupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsLastSurnameSupported                                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsLoginIdSupported                                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsMaidenNameSupported                                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsMiddleNameSupported                                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsOldEthnicityDescriptorSupported                      { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsPersonalTitlePrefixSupported                         { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsSexDescriptorSupported                               { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffAddressesSupported                              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffCredentialsSupported                            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffElectronicMailsSupported                        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationCodesSupported                    { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationDocumentsSupported                { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffInternationalAddressesSupported                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffLanguagesSupported                              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffOtherNamesSupported                             { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffPersonalIdentificationDocumentsSupported        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRacesSupported                                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRecognitionsSupported                           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTelephonesSupported                             { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTribalAffiliationsSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffUniqueIdSupported                               { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffVisasSupported                                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsYearsOfPriorProfessionalExperienceSupported          { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsYearsOfPriorTeachingExperienceSupported              { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.EdFi.IStaffAddress, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffAddressIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffCredential, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffCredentialIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffElectronicMail, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffElectronicMailIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffIdentificationCode, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationCodeIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffIdentificationDocument, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationDocumentIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffInternationalAddress, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffInternationalAddressIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffLanguage, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffLanguageIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffOtherName, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffOtherNameIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffPersonalIdentificationDocument, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffPersonalIdentificationDocumentIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffRace, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRaceIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffRecognition, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRecognitionIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffTelephone, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTelephoneIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffTribalAffiliation, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTribalAffiliationIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffVisa, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffVisaIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPutPostRequestValidator : FluentValidation.AbstractValidator<Staff>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<Staff> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var staffAddressesValidator = new StaffAddressPutPostRequestValidator();

            foreach (var item in instance.StaffAddresses)
            {
                var validationResult = staffAddressesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffCredentialsValidator = new StaffCredentialPutPostRequestValidator();

            foreach (var item in instance.StaffCredentials)
            {
                var validationResult = staffCredentialsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffElectronicMailsValidator = new StaffElectronicMailPutPostRequestValidator();

            foreach (var item in instance.StaffElectronicMails)
            {
                var validationResult = staffElectronicMailsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffIdentificationCodesValidator = new StaffIdentificationCodePutPostRequestValidator();

            foreach (var item in instance.StaffIdentificationCodes)
            {
                var validationResult = staffIdentificationCodesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffIdentificationDocumentsValidator = new StaffIdentificationDocumentPutPostRequestValidator();

            foreach (var item in instance.StaffIdentificationDocuments)
            {
                var validationResult = staffIdentificationDocumentsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffInternationalAddressesValidator = new StaffInternationalAddressPutPostRequestValidator();

            foreach (var item in instance.StaffInternationalAddresses)
            {
                var validationResult = staffInternationalAddressesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffLanguagesValidator = new StaffLanguagePutPostRequestValidator();

            foreach (var item in instance.StaffLanguages)
            {
                var validationResult = staffLanguagesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffOtherNamesValidator = new StaffOtherNamePutPostRequestValidator();

            foreach (var item in instance.StaffOtherNames)
            {
                var validationResult = staffOtherNamesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffPersonalIdentificationDocumentsValidator = new StaffPersonalIdentificationDocumentPutPostRequestValidator();

            foreach (var item in instance.StaffPersonalIdentificationDocuments)
            {
                var validationResult = staffPersonalIdentificationDocumentsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffRacesValidator = new StaffRacePutPostRequestValidator();

            foreach (var item in instance.StaffRaces)
            {
                var validationResult = staffRacesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffRecognitionsValidator = new StaffRecognitionPutPostRequestValidator();

            foreach (var item in instance.StaffRecognitions)
            {
                var validationResult = staffRecognitionsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffTelephonesValidator = new StaffTelephonePutPostRequestValidator();

            foreach (var item in instance.StaffTelephones)
            {
                var validationResult = staffTelephonesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffTribalAffiliationsValidator = new StaffTribalAffiliationPutPostRequestValidator();

            foreach (var item in instance.StaffTribalAffiliations)
            {
                var validationResult = staffTribalAffiliationsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffVisasValidator = new StaffVisaPutPostRequestValidator();

            foreach (var item in instance.StaffVisas)
            {
                var validationResult = staffVisasValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffAddress table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffAddress : Entities.Common.EdFi.IStaffAddress, Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StaffAddress()
        {
            StaffAddressPeriods = new List<StaffAddressPeriod>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffAddress.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressTypeDescriptor"), NaturalKeyMember]
        public string AddressTypeDescriptor { get; set; }

        /// <summary>
        /// The name of the city in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="city"), NaturalKeyMember]
        public string City { get; set; }

        /// <summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="postalCode"), NaturalKeyMember]
        public string PostalCode { get; set; }

        /// <summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="stateAbbreviationDescriptor"), NaturalKeyMember]
        public string StateAbbreviationDescriptor { get; set; }

        /// <summary>
        /// The street number and street name or post office box number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="streetNumberName"), NaturalKeyMember]
        public string StreetNumberName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffAddress;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).AddressTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffAddress).AddressTypeDescriptor.Equals(compareTo.AddressTypeDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).City == null
                || !(this as Entities.Common.EdFi.IStaffAddress).City.Equals(compareTo.City)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).PostalCode == null
                || !(this as Entities.Common.EdFi.IStaffAddress).PostalCode.Equals(compareTo.PostalCode)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).StateAbbreviationDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffAddress).StateAbbreviationDescriptor.Equals(compareTo.StateAbbreviationDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).StreetNumberName == null
                || !(this as Entities.Common.EdFi.IStaffAddress).StreetNumberName.Equals(compareTo.StreetNumberName)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).AddressTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).AddressTypeDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).City != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).City.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).PostalCode != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).PostalCode.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).StateAbbreviationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).StateAbbreviationDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).StreetNumberName != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).StreetNumberName.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The apartment, room, or suite number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="apartmentRoomSuiteNumber")]
        public string ApartmentRoomSuiteNumber { get; set; }

        /// <summary>
        /// The number of the building on the site, if more than one building shares the same address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="buildingSiteNumber")]
        public string BuildingSiteNumber { get; set; }

        /// <summary>
        /// The congressional district in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="congressionalDistrict")]
        public string CongressionalDistrict { get; set; }

        /// <summary>
        /// The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \"first-order subdivisions\" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="countyFIPSCode")]
        public string CountyFIPSCode { get; set; }

        /// <summary>
        /// An indication that the address should not be published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// A general geographic indicator that categorizes U.S. territory (e.g., City, Suburban).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="localeDescriptor")]
        public string LocaleDescriptor { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }

        /// <summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in                        'which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nameOfCounty")]
        public string NameOfCounty { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffAddress")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffAddressPeriod> _staffAddressPeriods;
        private ICollection<Entities.Common.EdFi.IStaffAddressPeriod> _staffAddressPeriodsCovariant;

        [DataMember(Name="periods"), NoDuplicateMembers]
        public ICollection<StaffAddressPeriod> StaffAddressPeriods
        {
            get { return _staffAddressPeriods; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffAddressPeriod>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffAddressPeriod)e.Item).StaffAddress = this);
                _staffAddressPeriods = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffAddressPeriod, StaffAddressPeriod>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffAddressPeriod)e.Item).StaffAddress = this;
                _staffAddressPeriodsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffAddressPeriod> Entities.Common.EdFi.IStaffAddress.StaffAddressPeriods
        {
            get { return _staffAddressPeriodsCovariant; }
            set { StaffAddressPeriods = new List<StaffAddressPeriod>(value.Cast<StaffAddressPeriod>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffAddressPeriods != null) foreach (var item in _staffAddressPeriods)
            {
                item.StaffAddress = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffAddressMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffAddress)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffAddressMapper.MapTo(this, (Entities.Common.EdFi.IStaffAddress)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsApartmentRoomSuiteNumberSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsBuildingSiteNumberSupported        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsCongressionalDistrictSupported     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsCountyFIPSCodeSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsLatitudeSupported                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsLocaleDescriptorSupported          { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsLongitudeSupported                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsNameOfCountySupported              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsStaffAddressPeriodsSupported       { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.EdFi.IStaffAddressPeriod, bool> Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsStaffAddressPeriodIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffAddressPutPostRequestValidator : FluentValidation.AbstractValidator<StaffAddress>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffAddress> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var staffAddressPeriodsValidator = new StaffAddressPeriodPutPostRequestValidator();

            foreach (var item in instance.StaffAddressPeriods)
            {
                var validationResult = staffAddressPeriodsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffAddressPeriod table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffAddressPeriod : Entities.Common.EdFi.IStaffAddressPeriod, Entities.Common.EdFi.IStaffAddressPeriodSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaffAddress _staffAddress;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaffAddress Entities.Common.EdFi.IStaffAddressPeriod.StaffAddress
        {
            get { return _staffAddress; }
            set { SetStaffAddress(value); }
        }

        internal Entities.Common.EdFi.IStaffAddress StaffAddress
        {
            set { SetStaffAddress(value); }
        }

        private void SetStaffAddress(Entities.Common.EdFi.IStaffAddress value)
        {
            _staffAddress = value;
        }

        /// <summary>
        /// The month, day, and year for the start of the period.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate"), NaturalKeyMember][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime BeginDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffAddressPeriod;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staffAddress == null || !_staffAddress.Equals(compareTo.StaffAddress))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddressPeriod).BeginDate == null
                || !(this as Entities.Common.EdFi.IStaffAddressPeriod).BeginDate.Equals(compareTo.BeginDate)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffAddress != null)
                    hash = hash * 23 + _staffAddress.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddressPeriod).BeginDate != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddressPeriod).BeginDate.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year for the end of the period.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffAddressPeriod")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffAddressPeriodMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffAddressPeriod)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffAddressPeriodMapper.MapTo(this, (Entities.Common.EdFi.IStaffAddressPeriod)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffAddressPeriodSynchronizationSourceSupport.IsEndDateSupported  { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffAddressPeriodPutPostRequestValidator : FluentValidation.AbstractValidator<StaffAddressPeriod>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffAddressPeriod> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffCredential table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffCredential : Entities.Common.EdFi.IStaffCredential, Entities.Common.EdFi.IStaffCredentialSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _credentialReferenceExplicitlyAssigned;
        private Credential.EdFi.CredentialReference _credentialReference;
        private Credential.EdFi.CredentialReference ImplicitCredentialReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_credentialReference == null && !_credentialReferenceExplicitlyAssigned)
                    _credentialReference = new Credential.EdFi.CredentialReference();

                return _credentialReference;
            }
        }

        [DataMember(Name="credentialReference")][NaturalKeyMember]
        public Credential.EdFi.CredentialReference CredentialReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitCredentialReference != null
                    && (_credentialReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitCredentialReference.IsReferenceFullyDefined()))
                    return ImplicitCredentialReference;

                return null;
            }
            set
            {
                _credentialReferenceExplicitlyAssigned = true;
                _credentialReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffCredential.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// Identifier or serial number assigned to the credential.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.EdFi.IStaffCredential.CredentialIdentifier
        {
            get
            {
                if (ImplicitCredentialReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCredentialReference.IsReferenceFullyDefined()))
                    return ImplicitCredentialReference.CredentialIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Credential
                _credentialReferenceExplicitlyAssigned = false;
                ImplicitCredentialReference.CredentialIdentifier = value;
            }
        }

        /// <summary>
        /// The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued.
        /// </summary>

        // IS in a reference (StaffCredential.StateOfIssueStateAbbreviationDescriptorId), IS a lookup column 
        string Entities.Common.EdFi.IStaffCredential.StateOfIssueStateAbbreviationDescriptor
        {
            get
            {
                if (ImplicitCredentialReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCredentialReference.IsReferenceFullyDefined()))
                    return ImplicitCredentialReference.StateOfIssueStateAbbreviationDescriptor;

                return null;
            }
            set
            {
                ImplicitCredentialReference.StateOfIssueStateAbbreviationDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffCredential;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Referenced Property
            if ((this as Entities.Common.EdFi.IStaffCredential).CredentialIdentifier == null
                || !(this as Entities.Common.EdFi.IStaffCredential).CredentialIdentifier.Equals(compareTo.CredentialIdentifier)) 
                return false;
 
            // Unified Type Property
            if ((this as Entities.Common.EdFi.IStaffCredential).StateOfIssueStateAbbreviationDescriptor == null
                ||!(this as Entities.Common.EdFi.IStaffCredential).StateOfIssueStateAbbreviationDescriptor.Equals(compareTo.StateOfIssueStateAbbreviationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                //Referenced Property
                if ((this as Entities.Common.EdFi.IStaffCredential).CredentialIdentifier != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffCredential).CredentialIdentifier.GetHashCode();
 
                //Unified Type Property
                if ((this as Entities.Common.EdFi.IStaffCredential).StateOfIssueStateAbbreviationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffCredential).StateOfIssueStateAbbreviationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffCredential")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffCredentialMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffCredential)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffCredentialMapper.MapTo(this, (Entities.Common.EdFi.IStaffCredential)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.EdFi.IStaffCredential.CredentialResourceId 
        { 
            get { return null; }
            set { ImplicitCredentialReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.EdFi.IStaffCredential.CredentialDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitCredentialReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffCredentialPutPostRequestValidator : FluentValidation.AbstractValidator<StaffCredential>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffCredential> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffElectronicMail table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffElectronicMail : Entities.Common.EdFi.IStaffElectronicMail, Entities.Common.EdFi.IStaffElectronicMailSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffElectronicMail.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The electronic mail (e-mail) address listed for an individual or organization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="electronicMailAddress"), NaturalKeyMember]
        public string ElectronicMailAddress { get; set; }

        /// <summary>
        /// The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="electronicMailTypeDescriptor"), NaturalKeyMember]
        public string ElectronicMailTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffElectronicMail;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailAddress == null
                || !(this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailAddress.Equals(compareTo.ElectronicMailAddress)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailTypeDescriptor.Equals(compareTo.ElectronicMailTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailAddress != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailAddress.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication that the electronic email address should not be published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="primaryEmailAddressIndicator")]
        public bool? PrimaryEmailAddressIndicator { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffElectronicMail")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffElectronicMailMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffElectronicMail)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffElectronicMailMapper.MapTo(this, (Entities.Common.EdFi.IStaffElectronicMail)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffElectronicMailSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported         { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffElectronicMailSynchronizationSourceSupport.IsPrimaryEmailAddressIndicatorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffElectronicMailPutPostRequestValidator : FluentValidation.AbstractValidator<StaffElectronicMail>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffElectronicMail> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffIdentificationCode table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffIdentificationCode : Entities.Common.EdFi.IStaffIdentificationCode, Entities.Common.EdFi.IStaffIdentificationCodeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffIdentificationCode.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a staff member.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="staffIdentificationSystemDescriptor"), NaturalKeyMember]
        public string StaffIdentificationSystemDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffIdentificationCode;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffIdentificationCode).StaffIdentificationSystemDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffIdentificationCode).StaffIdentificationSystemDescriptor.Equals(compareTo.StaffIdentificationSystemDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffIdentificationCode).StaffIdentificationSystemDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffIdentificationCode).StaffIdentificationSystemDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The organization code or name assigning the staff Identification Code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="assigningOrganizationIdentificationCode")]
        public string AssigningOrganizationIdentificationCode { get; set; }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="identificationCode")]
        public string IdentificationCode { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffIdentificationCode")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffIdentificationCodeMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffIdentificationCode)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffIdentificationCodeMapper.MapTo(this, (Entities.Common.EdFi.IStaffIdentificationCode)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffIdentificationCodeSynchronizationSourceSupport.IsAssigningOrganizationIdentificationCodeSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationCodeSynchronizationSourceSupport.IsIdentificationCodeSupported                       { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffIdentificationCodePutPostRequestValidator : FluentValidation.AbstractValidator<StaffIdentificationCode>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffIdentificationCode> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffIdentificationDocument table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffIdentificationDocument : Entities.Common.EdFi.IStaffIdentificationDocument, Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffIdentificationDocument.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The primary function of the document used for establishing identity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="identificationDocumentUseDescriptor"), NaturalKeyMember]
        public string IdentificationDocumentUseDescriptor { get; set; }

        /// <summary>
        /// The category of the document relative to its purpose.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="personalInformationVerificationDescriptor"), NaturalKeyMember]
        public string PersonalInformationVerificationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffIdentificationDocument;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffIdentificationDocument).IdentificationDocumentUseDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffIdentificationDocument).IdentificationDocumentUseDescriptor.Equals(compareTo.IdentificationDocumentUseDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffIdentificationDocument).PersonalInformationVerificationDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffIdentificationDocument).PersonalInformationVerificationDescriptor.Equals(compareTo.PersonalInformationVerificationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffIdentificationDocument).IdentificationDocumentUseDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffIdentificationDocument).IdentificationDocumentUseDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffIdentificationDocument).PersonalInformationVerificationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffIdentificationDocument).PersonalInformationVerificationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The day when the document  expires, if null then never expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentExpirationDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? DocumentExpirationDate { get; set; }

        /// <summary>
        /// The title of the document given by the issuer.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentTitle")]
        public string DocumentTitle { get; set; }

        /// <summary>
        /// Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="issuerCountryDescriptor")]
        public string IssuerCountryDescriptor { get; set; }

        /// <summary>
        /// The unique identifier on the issuer's identification system.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerDocumentIdentificationCode")]
        public string IssuerDocumentIdentificationCode { get; set; }

        /// <summary>
        /// Name of the entity or institution that issued the document.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffIdentificationDocument")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffIdentificationDocumentMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffIdentificationDocumentMapper.MapTo(this, (Entities.Common.EdFi.IStaffIdentificationDocument)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported                        { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffIdentificationDocumentPutPostRequestValidator : FluentValidation.AbstractValidator<StaffIdentificationDocument>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffIdentificationDocument> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffInternationalAddress table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffInternationalAddress : Entities.Common.EdFi.IStaffInternationalAddress, Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffInternationalAddress.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The type of address listed for an individual or organization. For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressTypeDescriptor"), NaturalKeyMember]
        public string AddressTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffInternationalAddress;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffInternationalAddress).AddressTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffInternationalAddress).AddressTypeDescriptor.Equals(compareTo.AddressTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffInternationalAddress).AddressTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffInternationalAddress).AddressTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The first line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine1")]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// The second line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine2")]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// The third line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine3")]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// The fourth line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine4")]
        public string AddressLine4 { get; set; }

        /// <summary>
        /// The first date the address is valid. For physical addresses, the date the person moved to that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The name of the country. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="countryDescriptor")]
        public string CountryDescriptor { get; set; }

        /// <summary>
        /// The last date the address is valid. For physical addresses, this would be the date the person moved from that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffInternationalAddress")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffInternationalAddressMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffInternationalAddress)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffInternationalAddressMapper.MapTo(this, (Entities.Common.EdFi.IStaffInternationalAddress)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine1Supported       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine2Supported       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine3Supported       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine4Supported       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsBeginDateSupported          { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsCountryDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsEndDateSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsLatitudeSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsLongitudeSupported          { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffInternationalAddressPutPostRequestValidator : FluentValidation.AbstractValidator<StaffInternationalAddress>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffInternationalAddress> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffLanguage table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffLanguage : Entities.Common.EdFi.IStaffLanguage, Entities.Common.EdFi.IStaffLanguageSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StaffLanguage()
        {
            StaffLanguageUses = new List<StaffLanguageUse>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffLanguage.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// A specification of which written or spoken communication is being used.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="languageDescriptor"), NaturalKeyMember]
        public string LanguageDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffLanguage;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffLanguage).LanguageDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffLanguage).LanguageDescriptor.Equals(compareTo.LanguageDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffLanguage).LanguageDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffLanguage).LanguageDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffLanguage")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffLanguageUse> _staffLanguageUses;
        private ICollection<Entities.Common.EdFi.IStaffLanguageUse> _staffLanguageUsesCovariant;

        [DataMember(Name="uses"), NoDuplicateMembers]
        public ICollection<StaffLanguageUse> StaffLanguageUses
        {
            get { return _staffLanguageUses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffLanguageUse>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffLanguageUse)e.Item).StaffLanguage = this);
                _staffLanguageUses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffLanguageUse, StaffLanguageUse>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffLanguageUse)e.Item).StaffLanguage = this;
                _staffLanguageUsesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffLanguageUse> Entities.Common.EdFi.IStaffLanguage.StaffLanguageUses
        {
            get { return _staffLanguageUsesCovariant; }
            set { StaffLanguageUses = new List<StaffLanguageUse>(value.Cast<StaffLanguageUse>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffLanguageUses != null) foreach (var item in _staffLanguageUses)
            {
                item.StaffLanguage = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffLanguageMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffLanguage)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffLanguageMapper.MapTo(this, (Entities.Common.EdFi.IStaffLanguage)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffLanguageSynchronizationSourceSupport.IsStaffLanguageUsesSupported  { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.EdFi.IStaffLanguageUse, bool> Entities.Common.EdFi.IStaffLanguageSynchronizationSourceSupport.IsStaffLanguageUseIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffLanguagePutPostRequestValidator : FluentValidation.AbstractValidator<StaffLanguage>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffLanguage> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var staffLanguageUsesValidator = new StaffLanguageUsePutPostRequestValidator();

            foreach (var item in instance.StaffLanguageUses)
            {
                var validationResult = staffLanguageUsesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffLanguageUse table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffLanguageUse : Entities.Common.EdFi.IStaffLanguageUse, Entities.Common.EdFi.IStaffLanguageUseSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaffLanguage _staffLanguage;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaffLanguage Entities.Common.EdFi.IStaffLanguageUse.StaffLanguage
        {
            get { return _staffLanguage; }
            set { SetStaffLanguage(value); }
        }

        internal Entities.Common.EdFi.IStaffLanguage StaffLanguage
        {
            set { SetStaffLanguage(value); }
        }

        private void SetStaffLanguage(Entities.Common.EdFi.IStaffLanguage value)
        {
            _staffLanguage = value;
        }

        /// <summary>
        /// A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="languageUseDescriptor"), NaturalKeyMember]
        public string LanguageUseDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffLanguageUse;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staffLanguage == null || !_staffLanguage.Equals(compareTo.StaffLanguage))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffLanguageUse).LanguageUseDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffLanguageUse).LanguageUseDescriptor.Equals(compareTo.LanguageUseDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffLanguage != null)
                    hash = hash * 23 + _staffLanguage.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffLanguageUse).LanguageUseDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffLanguageUse).LanguageUseDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffLanguageUse")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffLanguageUseMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffLanguageUse)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffLanguageUseMapper.MapTo(this, (Entities.Common.EdFi.IStaffLanguageUse)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffLanguageUsePutPostRequestValidator : FluentValidation.AbstractValidator<StaffLanguageUse>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffLanguageUse> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffOtherName table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffOtherName : Entities.Common.EdFi.IStaffOtherName, Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffOtherName.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The types of alternate names for a person.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="otherNameTypeDescriptor"), NaturalKeyMember]
        public string OtherNameTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffOtherName;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffOtherName).OtherNameTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffOtherName).OtherNameTypeDescriptor.Equals(compareTo.OtherNameTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffOtherName).OtherNameTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffOtherName).OtherNameTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffOtherName")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffOtherNameMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffOtherName)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffOtherNameMapper.MapTo(this, (Entities.Common.EdFi.IStaffOtherName)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsFirstNameSupported             { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsGenerationCodeSuffixSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsLastSurnameSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsMiddleNameSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsPersonalTitlePrefixSupported   { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffOtherNamePutPostRequestValidator : FluentValidation.AbstractValidator<StaffOtherName>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffOtherName> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffPersonalIdentificationDocument table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffPersonalIdentificationDocument : Entities.Common.EdFi.IStaffPersonalIdentificationDocument, Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffPersonalIdentificationDocument.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The primary function of the document used for establishing identity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="identificationDocumentUseDescriptor"), NaturalKeyMember]
        public string IdentificationDocumentUseDescriptor { get; set; }

        /// <summary>
        /// The category of the document relative to its purpose.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="personalInformationVerificationDescriptor"), NaturalKeyMember]
        public string PersonalInformationVerificationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffPersonalIdentificationDocument;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).IdentificationDocumentUseDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).IdentificationDocumentUseDescriptor.Equals(compareTo.IdentificationDocumentUseDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).PersonalInformationVerificationDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).PersonalInformationVerificationDescriptor.Equals(compareTo.PersonalInformationVerificationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).IdentificationDocumentUseDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).IdentificationDocumentUseDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).PersonalInformationVerificationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).PersonalInformationVerificationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The day when the document  expires, if null then never expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentExpirationDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? DocumentExpirationDate { get; set; }

        /// <summary>
        /// The title of the document given by the issuer.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentTitle")]
        public string DocumentTitle { get; set; }

        /// <summary>
        /// Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="issuerCountryDescriptor")]
        public string IssuerCountryDescriptor { get; set; }

        /// <summary>
        /// The unique identifier on the issuer's identification system.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerDocumentIdentificationCode")]
        public string IssuerDocumentIdentificationCode { get; set; }

        /// <summary>
        /// Name of the entity or institution that issued the document.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffPersonalIdentificationDocument")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffPersonalIdentificationDocumentMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffPersonalIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffPersonalIdentificationDocumentMapper.MapTo(this, (Entities.Common.EdFi.IStaffPersonalIdentificationDocument)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported                        { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPersonalIdentificationDocumentPutPostRequestValidator : FluentValidation.AbstractValidator<StaffPersonalIdentificationDocument>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffPersonalIdentificationDocument> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffRace table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffRace : Entities.Common.EdFi.IStaffRace, Entities.Common.EdFi.IStaffRaceSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffRace.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The general racial category which most clearly reflects the individual's recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="raceDescriptor"), NaturalKeyMember]
        public string RaceDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffRace;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffRace).RaceDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffRace).RaceDescriptor.Equals(compareTo.RaceDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffRace).RaceDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffRace).RaceDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffRace")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffRaceMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffRace)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffRaceMapper.MapTo(this, (Entities.Common.EdFi.IStaffRace)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffRacePutPostRequestValidator : FluentValidation.AbstractValidator<StaffRace>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffRace> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffRecognition table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffRecognition : Entities.Common.EdFi.IStaffRecognition, Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffRecognition.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The nature of recognition given to the learner for accomplishments in a co-curricular, or extra-curricular activity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="recognitionTypeDescriptor"), NaturalKeyMember]
        public string RecognitionTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffRecognition;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffRecognition).RecognitionTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffRecognition).RecognitionTypeDescriptor.Equals(compareTo.RecognitionTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffRecognition).RecognitionTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffRecognition).RecognitionTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The category of achievement attributed to the learner.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="achievementCategoryDescriptor")]
        public string AchievementCategoryDescriptor { get; set; }

        /// <summary>
        /// The system that defines the categories by which an achievement is attributed to the learner.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="achievementCategorySystem")]
        public string AchievementCategorySystem { get; set; }

        /// <summary>
        /// The title assigned to the achievement.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="achievementTitle")]
        public string AchievementTitle { get; set; }

        /// <summary>
        /// The criteria for competency-based completion of the achievement/award.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="criteria")]
        public string Criteria { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="criteriaURL")]
        public string CriteriaURL { get; set; }

        /// <summary>
        /// A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="evidenceStatement")]
        public string EvidenceStatement { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="imageURL")]
        public string ImageURL { get; set; }

        /// <summary>
        /// The name of the agent, entity, or institution issuing the element.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) from which the award was issued.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerOriginURL")]
        public string IssuerOriginURL { get; set; }

        /// <summary>
        /// The date the recognition was awarded or earned.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="recognitionAwardDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? RecognitionAwardDate { get; set; }

        /// <summary>
        /// Date on which the award expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="recognitionAwardExpiresDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? RecognitionAwardExpiresDate { get; set; }

        /// <summary>
        /// A description of the type of academic distinctions earned by or awarded to the individual.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="recognitionDescription")]
        public string RecognitionDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffRecognition")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffRecognitionMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffRecognition)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffRecognitionMapper.MapTo(this, (Entities.Common.EdFi.IStaffRecognition)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsAchievementCategoryDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsAchievementCategorySystemSupported      { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsAchievementTitleSupported               { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsCriteriaSupported                       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsCriteriaURLSupported                    { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsEvidenceStatementSupported              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsImageURLSupported                       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsIssuerNameSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsIssuerOriginURLSupported                { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsRecognitionAwardDateSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsRecognitionAwardExpiresDateSupported    { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsRecognitionDescriptionSupported         { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffRecognitionPutPostRequestValidator : FluentValidation.AbstractValidator<StaffRecognition>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffRecognition> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffTelephone table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffTelephone : Entities.Common.EdFi.IStaffTelephone, Entities.Common.EdFi.IStaffTelephoneSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffTelephone.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The telephone number including the area code, and extension, if applicable.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="telephoneNumber"), NaturalKeyMember]
        public string TelephoneNumber { get; set; }

        /// <summary>
        /// The type of communication number listed for an individual or organization.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="telephoneNumberTypeDescriptor"), NaturalKeyMember]
        public string TelephoneNumberTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffTelephone;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumber == null
                || !(this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumber.Equals(compareTo.TelephoneNumber)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumberTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumberTypeDescriptor.Equals(compareTo.TelephoneNumberTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumber != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumber.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumberTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumberTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication that the telephone number should not be published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="orderOfPriority")]
        public int? OrderOfPriority { get; set; }

        /// <summary>
        /// An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="textMessageCapabilityIndicator")]
        public bool? TextMessageCapabilityIndicator { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffTelephone")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffTelephoneMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffTelephone)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffTelephoneMapper.MapTo(this, (Entities.Common.EdFi.IStaffTelephone)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffTelephoneSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffTelephoneSynchronizationSourceSupport.IsOrderOfPrioritySupported                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffTelephoneSynchronizationSourceSupport.IsTextMessageCapabilityIndicatorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffTelephonePutPostRequestValidator : FluentValidation.AbstractValidator<StaffTelephone>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffTelephone> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffTribalAffiliation table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffTribalAffiliation : Entities.Common.EdFi.IStaffTribalAffiliation, Entities.Common.EdFi.IStaffTribalAffiliationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffTribalAffiliation.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// An American Indian tribe with which the staff member is affiliated.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="tribalAffiliationDescriptor"), NaturalKeyMember]
        public string TribalAffiliationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffTribalAffiliation;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffTribalAffiliation).TribalAffiliationDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffTribalAffiliation).TribalAffiliationDescriptor.Equals(compareTo.TribalAffiliationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffTribalAffiliation).TribalAffiliationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffTribalAffiliation).TribalAffiliationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffTribalAffiliation")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffTribalAffiliationMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffTribalAffiliation)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffTribalAffiliationMapper.MapTo(this, (Entities.Common.EdFi.IStaffTribalAffiliation)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffTribalAffiliationPutPostRequestValidator : FluentValidation.AbstractValidator<StaffTribalAffiliation>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffTribalAffiliation> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffVisa table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffVisa : Entities.Common.EdFi.IStaffVisa, Entities.Common.EdFi.IStaffVisaSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffVisa.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// An indicator of a non-US citizen's Visa type.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="visaDescriptor"), NaturalKeyMember]
        public string VisaDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffVisa;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffVisa).VisaDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffVisa).VisaDescriptor.Equals(compareTo.VisaDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffVisa).VisaDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffVisa).VisaDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffVisa")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffVisaMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffVisa)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffVisaMapper.MapTo(this, (Entities.Common.EdFi.IStaffVisa)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffVisaPutPostRequestValidator : FluentValidation.AbstractValidator<StaffVisa>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffVisa> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Staff

namespace EdFi.Ods.Api.Models.Resources.Staff.EdFi.Staff_Entity_Extension_ExcludeOnly_Writable.Extensions.GrandBend
{
    /// <summary>
    /// A class which represents the grandbend.StaffExtension table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffExtension : Entities.Common.GrandBend.IStaffExtension, Entities.Common.GrandBend.IStaffExtensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.GrandBend.IStaffExtension.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.GrandBend.IStaffExtension;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The date that the staff member's new hire probationary period was completed.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="probationCompleteDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? ProbationCompleteDate { get; set; }

        /// <summary>
        /// An indication as to whether the staff member is tenured.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="tenured")]
        public bool? Tenured { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.GrandBend.StaffExtensionMapper.SynchronizeTo(this, (Entities.Common.GrandBend.IStaffExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.GrandBend.StaffExtensionMapper.MapTo(this, (Entities.Common.GrandBend.IStaffExtension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.GrandBend.IStaffExtensionSynchronizationSourceSupport.IsProbationCompleteDateSupported  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IStaffExtensionSynchronizationSourceSupport.IsTenuredSupported                { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<StaffExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Staff

namespace EdFi.Ods.Api.Models.Resources.Staff.EdFi.Staff_Entity_Extension_ExcludeOnly_Writable.Extensions.Sample
{
    /// <summary>
    /// A class which represents the sample.StaffExtension table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffExtension : Entities.Common.Sample.IStaffExtension, Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StaffExtension()
        {
            StaffPets = new List<StaffPet>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.Sample.IStaffExtension.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStaffExtension;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The date the staff member adopted the first household pet.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstPetOwnedDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? FirstPetOwnedDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        /// <summary>
        /// petPreference
        /// </summary>
        [DataMember(Name = "petPreference")]
        public StaffPetPreference StaffPetPreference { get; set; }

        Entities.Common.Sample.IStaffPetPreference Entities.Common.Sample.IStaffExtension.StaffPetPreference
        {
            get { return StaffPetPreference; }
            set { StaffPetPreference = (StaffPetPreference) value; }
        }

        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffPet> _staffPets;
        private ICollection<Entities.Common.Sample.IStaffPet> _staffPetsCovariant;

        [DataMember(Name="pets"), NoDuplicateMembers]
        public ICollection<StaffPet> StaffPets
        {
            get { return _staffPets; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffPet>(value,
                    (s, e) => ((Entities.Common.Sample.IStaffPet)e.Item).StaffExtension = this);
                _staffPets = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.Sample.IStaffPet, StaffPet>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.Sample.IStaffPet)e.Item).StaffExtension = this;
                _staffPetsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.Sample.IStaffPet> Entities.Common.Sample.IStaffExtension.StaffPets
        {
            get { return _staffPetsCovariant; }
            set { StaffPets = new List<StaffPet>(value.Cast<StaffPet>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffPets != null) foreach (var item in _staffPets)
            {
                item.StaffExtension = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StaffExtensionMapper.SynchronizeTo(this, (Entities.Common.Sample.IStaffExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StaffExtensionMapper.MapTo(this, (Entities.Common.Sample.IStaffExtension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport.IsFirstPetOwnedDateSupported   { get { return true; } set { } }
        bool Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport.IsStaffPetPreferenceSupported  { get { return true; } set { } }
        bool Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport.IsStaffPetsSupported           { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.Sample.IStaffPet, bool> Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport.IsStaffPetIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<StaffExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var staffPetsValidator = new StaffPetPutPostRequestValidator();

            foreach (var item in instance.StaffPets)
            {
                var validationResult = staffPetsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the sample.StaffPet table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffPet : Entities.Common.Sample.IStaffPet, Entities.Common.Sample.IStaffPetSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.Sample.IStaffExtension _staffExtension;

        [IgnoreDataMember]
        Entities.Common.Sample.IStaffExtension Entities.Common.Sample.IStaffPet.StaffExtension
        {
            get { return _staffExtension; }
            set { SetStaffExtension(value); }
        }

        internal Entities.Common.Sample.IStaffExtension StaffExtension
        {
            set { SetStaffExtension(value); }
        }

        private void SetStaffExtension(Entities.Common.Sample.IStaffExtension value)
        {
            _staffExtension = value;
        }

        /// <summary>
        /// The pet's name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="petName"), NaturalKeyMember]
        public string PetName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStaffPet;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staffExtension == null || !_staffExtension.Equals(compareTo.StaffExtension))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.Sample.IStaffPet).PetName == null
                || !(this as Entities.Common.Sample.IStaffPet).PetName.Equals(compareTo.PetName)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffExtension != null)
                    hash = hash * 23 + _staffExtension.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.Sample.IStaffPet).PetName != null) 
                    hash = hash * 23 + (this as Entities.Common.Sample.IStaffPet).PetName.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication as to whether the pet has been spayed/neutered.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="isFixed")]
        public bool? IsFixed { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StaffPetMapper.SynchronizeTo(this, (Entities.Common.Sample.IStaffPet)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StaffPetMapper.MapTo(this, (Entities.Common.Sample.IStaffPet)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStaffPetSynchronizationSourceSupport.IsIsFixedSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPetPutPostRequestValidator : FluentValidation.AbstractValidator<StaffPet>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffPet> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the sample.StaffPetPreference table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffPetPreference : Entities.Common.Sample.IStaffPetPreference, Entities.Common.Sample.IStaffPetPreferenceSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.Sample.IStaffExtension _staffExtension;

        [IgnoreDataMember]
        Entities.Common.Sample.IStaffExtension Entities.Common.Sample.IStaffPetPreference.StaffExtension
        {
            get { return _staffExtension; }
            set { SetStaffExtension(value); }
        }

        internal Entities.Common.Sample.IStaffExtension StaffExtension
        {
            set { SetStaffExtension(value); }
        }

        private void SetStaffExtension(Entities.Common.Sample.IStaffExtension value)
        {
            _staffExtension = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStaffPetPreference;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staffExtension == null || !_staffExtension.Equals(compareTo.StaffExtension))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffExtension != null)
                    hash = hash * 23 + _staffExtension.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The preferred maximum weight of a household pet.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maximumWeight")]
        public int MaximumWeight { get; set; }

        /// <summary>
        /// The preferred minimum weight of a household pet.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="minimumWeight")]
        public int MinimumWeight { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StaffPetPreferenceMapper.SynchronizeTo(this, (Entities.Common.Sample.IStaffPetPreference)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StaffPetPreferenceMapper.MapTo(this, (Entities.Common.Sample.IStaffPetPreference)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStaffPetPreferenceSynchronizationSourceSupport.IsMaximumWeightSupported  { get { return true; } set { } }
        bool Entities.Common.Sample.IStaffPetPreferenceSynchronizationSourceSupport.IsMinimumWeightSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPetPreferencePutPostRequestValidator : FluentValidation.AbstractValidator<StaffPetPreference>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffPetPreference> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Staff

namespace EdFi.Ods.Api.Models.Resources.Staff.EdFi.Staff_Include_All_Readable
{
    /// <summary>
    /// Represents a reference to the Staff resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffReference
    {
        [DataMember(Name="staffUniqueId"), NaturalKeyMember]
        public string StaffUniqueId { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return StaffUniqueId != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "Staff",
                Href = $"/ed-fi/staffs/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new Common.Models.Domain.FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.Staff table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class Staff : Entities.Common.EdFi.IStaff, IHasETag, Entities.Common.EdFi.IStaffSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Staff()
        {
            StaffAddresses = new List<StaffAddress>();
            StaffCredentials = new List<StaffCredential>();
            StaffElectronicMails = new List<StaffElectronicMail>();
            StaffIdentificationCodes = new List<StaffIdentificationCode>();
            StaffIdentificationDocuments = new List<StaffIdentificationDocument>();
            StaffInternationalAddresses = new List<StaffInternationalAddress>();
            StaffLanguages = new List<StaffLanguage>();
            StaffOtherNames = new List<StaffOtherName>();
            StaffPersonalIdentificationDocuments = new List<StaffPersonalIdentificationDocument>();
            StaffRaces = new List<StaffRace>();
            StaffRecognitions = new List<StaffRecognition>();
            StaffTelephones = new List<StaffTelephone>();
            StaffTribalAffiliations = new List<StaffTribalAffiliation>();
            StaffVisas = new List<StaffVisa>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Staff resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to a staff.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="staffUniqueId"), NaturalKeyMember, UniqueId]
        public string StaffUniqueId { get; set; }

        string IIdentifiablePerson.UniqueId { get { return StaffUniqueId; } }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaff;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Property
            if ((this as Entities.Common.EdFi.IStaff).StaffUniqueId == null
                || !(this as Entities.Common.EdFi.IStaff).StaffUniqueId.Equals(compareTo.StaffUniqueId)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Property
                if ((this as Entities.Common.EdFi.IStaff).StaffUniqueId != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaff).StaffUniqueId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="birthDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BirthDate { get; set; }

        /// <summary>
        /// An indicator of whether or not the person is a U.S. citizen.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="citizenshipStatusDescriptor")]
        public string CitizenshipStatusDescriptor { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="highestCompletedLevelOfEducationDescriptor")]
        public string HighestCompletedLevelOfEducationDescriptor { get; set; }

        /// <summary>
        /// An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="highlyQualifiedTeacher")]
        public bool? HighlyQualifiedTeacher { get; set; }

        /// <summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="hispanicLatinoEthnicity")]
        public bool? HispanicLatinoEthnicity { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// The login ID for the user; used for security access control interface.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="loginId")]
        public string LoginId { get; set; }

        /// <summary>
        /// The person's maiden name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maidenName")]
        public string MaidenName { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// Previous definition of Ethnicity combining Hispanic/Latino and race:          1 - American Indian or Alaskan Native          2 - Asian or Pacific Islander          3 - Black, not of Hispanic origin          4 - Hispanic          5 - White, not of Hispanic origin.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="oldEthnicityDescriptor")]
        public string OldEthnicityDescriptor { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }

        /// <summary>
        /// A person's gender.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="sexDescriptor")]
        public string SexDescriptor { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a similar professional position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorProfessionalExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorProfessionalExperience { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a teaching position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorTeachingExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorTeachingExperience { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "Staff")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffAddress> _staffAddresses;
        private ICollection<Entities.Common.EdFi.IStaffAddress> _staffAddressesCovariant;

        [DataMember(Name="addresses"), NoDuplicateMembers]
        public ICollection<StaffAddress> StaffAddresses
        {
            get { return _staffAddresses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffAddress>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffAddress)e.Item).Staff = this);
                _staffAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffAddress, StaffAddress>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffAddress)e.Item).Staff = this;
                _staffAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffAddress> Entities.Common.EdFi.IStaff.StaffAddresses
        {
            get { return _staffAddressesCovariant; }
            set { StaffAddresses = new List<StaffAddress>(value.Cast<StaffAddress>()); }
        }

        private ICollection<StaffCredential> _staffCredentials;
        private ICollection<Entities.Common.EdFi.IStaffCredential> _staffCredentialsCovariant;

        [DataMember(Name="credentials"), NoDuplicateMembers]
        public ICollection<StaffCredential> StaffCredentials
        {
            get { return _staffCredentials; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffCredential>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffCredential)e.Item).Staff = this);
                _staffCredentials = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffCredential, StaffCredential>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffCredential)e.Item).Staff = this;
                _staffCredentialsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffCredential> Entities.Common.EdFi.IStaff.StaffCredentials
        {
            get { return _staffCredentialsCovariant; }
            set { StaffCredentials = new List<StaffCredential>(value.Cast<StaffCredential>()); }
        }

        private ICollection<StaffElectronicMail> _staffElectronicMails;
        private ICollection<Entities.Common.EdFi.IStaffElectronicMail> _staffElectronicMailsCovariant;

        [DataMember(Name="electronicMails"), NoDuplicateMembers]
        public ICollection<StaffElectronicMail> StaffElectronicMails
        {
            get { return _staffElectronicMails; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffElectronicMail>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffElectronicMail)e.Item).Staff = this);
                _staffElectronicMails = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffElectronicMail, StaffElectronicMail>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffElectronicMail)e.Item).Staff = this;
                _staffElectronicMailsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffElectronicMail> Entities.Common.EdFi.IStaff.StaffElectronicMails
        {
            get { return _staffElectronicMailsCovariant; }
            set { StaffElectronicMails = new List<StaffElectronicMail>(value.Cast<StaffElectronicMail>()); }
        }

        private ICollection<StaffIdentificationCode> _staffIdentificationCodes;
        private ICollection<Entities.Common.EdFi.IStaffIdentificationCode> _staffIdentificationCodesCovariant;

        [DataMember(Name="identificationCodes"), NoDuplicateMembers]
        public ICollection<StaffIdentificationCode> StaffIdentificationCodes
        {
            get { return _staffIdentificationCodes; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffIdentificationCode>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffIdentificationCode)e.Item).Staff = this);
                _staffIdentificationCodes = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffIdentificationCode, StaffIdentificationCode>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffIdentificationCode)e.Item).Staff = this;
                _staffIdentificationCodesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffIdentificationCode> Entities.Common.EdFi.IStaff.StaffIdentificationCodes
        {
            get { return _staffIdentificationCodesCovariant; }
            set { StaffIdentificationCodes = new List<StaffIdentificationCode>(value.Cast<StaffIdentificationCode>()); }
        }

        private ICollection<StaffIdentificationDocument> _staffIdentificationDocuments;
        private ICollection<Entities.Common.EdFi.IStaffIdentificationDocument> _staffIdentificationDocumentsCovariant;

        [DataMember(Name="identificationDocuments"), NoDuplicateMembers]
        public ICollection<StaffIdentificationDocument> StaffIdentificationDocuments
        {
            get { return _staffIdentificationDocuments; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffIdentificationDocument>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffIdentificationDocument)e.Item).Staff = this);
                _staffIdentificationDocuments = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffIdentificationDocument, StaffIdentificationDocument>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffIdentificationDocument)e.Item).Staff = this;
                _staffIdentificationDocumentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffIdentificationDocument> Entities.Common.EdFi.IStaff.StaffIdentificationDocuments
        {
            get { return _staffIdentificationDocumentsCovariant; }
            set { StaffIdentificationDocuments = new List<StaffIdentificationDocument>(value.Cast<StaffIdentificationDocument>()); }
        }

        private ICollection<StaffInternationalAddress> _staffInternationalAddresses;
        private ICollection<Entities.Common.EdFi.IStaffInternationalAddress> _staffInternationalAddressesCovariant;

        [DataMember(Name="internationalAddresses"), NoDuplicateMembers]
        public ICollection<StaffInternationalAddress> StaffInternationalAddresses
        {
            get { return _staffInternationalAddresses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffInternationalAddress>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffInternationalAddress)e.Item).Staff = this);
                _staffInternationalAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffInternationalAddress, StaffInternationalAddress>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffInternationalAddress)e.Item).Staff = this;
                _staffInternationalAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffInternationalAddress> Entities.Common.EdFi.IStaff.StaffInternationalAddresses
        {
            get { return _staffInternationalAddressesCovariant; }
            set { StaffInternationalAddresses = new List<StaffInternationalAddress>(value.Cast<StaffInternationalAddress>()); }
        }

        private ICollection<StaffLanguage> _staffLanguages;
        private ICollection<Entities.Common.EdFi.IStaffLanguage> _staffLanguagesCovariant;

        [DataMember(Name="languages"), NoDuplicateMembers]
        public ICollection<StaffLanguage> StaffLanguages
        {
            get { return _staffLanguages; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffLanguage>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffLanguage)e.Item).Staff = this);
                _staffLanguages = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffLanguage, StaffLanguage>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffLanguage)e.Item).Staff = this;
                _staffLanguagesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffLanguage> Entities.Common.EdFi.IStaff.StaffLanguages
        {
            get { return _staffLanguagesCovariant; }
            set { StaffLanguages = new List<StaffLanguage>(value.Cast<StaffLanguage>()); }
        }

        private ICollection<StaffOtherName> _staffOtherNames;
        private ICollection<Entities.Common.EdFi.IStaffOtherName> _staffOtherNamesCovariant;

        [DataMember(Name="otherNames"), NoDuplicateMembers]
        public ICollection<StaffOtherName> StaffOtherNames
        {
            get { return _staffOtherNames; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffOtherName>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffOtherName)e.Item).Staff = this);
                _staffOtherNames = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffOtherName, StaffOtherName>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffOtherName)e.Item).Staff = this;
                _staffOtherNamesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffOtherName> Entities.Common.EdFi.IStaff.StaffOtherNames
        {
            get { return _staffOtherNamesCovariant; }
            set { StaffOtherNames = new List<StaffOtherName>(value.Cast<StaffOtherName>()); }
        }

        private ICollection<StaffPersonalIdentificationDocument> _staffPersonalIdentificationDocuments;
        private ICollection<Entities.Common.EdFi.IStaffPersonalIdentificationDocument> _staffPersonalIdentificationDocumentsCovariant;

        [DataMember(Name="personalIdentificationDocuments"), NoDuplicateMembers]
        public ICollection<StaffPersonalIdentificationDocument> StaffPersonalIdentificationDocuments
        {
            get { return _staffPersonalIdentificationDocuments; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffPersonalIdentificationDocument>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffPersonalIdentificationDocument)e.Item).Staff = this);
                _staffPersonalIdentificationDocuments = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffPersonalIdentificationDocument, StaffPersonalIdentificationDocument>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffPersonalIdentificationDocument)e.Item).Staff = this;
                _staffPersonalIdentificationDocumentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffPersonalIdentificationDocument> Entities.Common.EdFi.IStaff.StaffPersonalIdentificationDocuments
        {
            get { return _staffPersonalIdentificationDocumentsCovariant; }
            set { StaffPersonalIdentificationDocuments = new List<StaffPersonalIdentificationDocument>(value.Cast<StaffPersonalIdentificationDocument>()); }
        }

        private ICollection<StaffRace> _staffRaces;
        private ICollection<Entities.Common.EdFi.IStaffRace> _staffRacesCovariant;

        [DataMember(Name="races"), NoDuplicateMembers]
        public ICollection<StaffRace> StaffRaces
        {
            get { return _staffRaces; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffRace>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffRace)e.Item).Staff = this);
                _staffRaces = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffRace, StaffRace>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffRace)e.Item).Staff = this;
                _staffRacesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffRace> Entities.Common.EdFi.IStaff.StaffRaces
        {
            get { return _staffRacesCovariant; }
            set { StaffRaces = new List<StaffRace>(value.Cast<StaffRace>()); }
        }

        private ICollection<StaffRecognition> _staffRecognitions;
        private ICollection<Entities.Common.EdFi.IStaffRecognition> _staffRecognitionsCovariant;

        [DataMember(Name="recognitions"), NoDuplicateMembers]
        public ICollection<StaffRecognition> StaffRecognitions
        {
            get { return _staffRecognitions; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffRecognition>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffRecognition)e.Item).Staff = this);
                _staffRecognitions = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffRecognition, StaffRecognition>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffRecognition)e.Item).Staff = this;
                _staffRecognitionsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffRecognition> Entities.Common.EdFi.IStaff.StaffRecognitions
        {
            get { return _staffRecognitionsCovariant; }
            set { StaffRecognitions = new List<StaffRecognition>(value.Cast<StaffRecognition>()); }
        }

        private ICollection<StaffTelephone> _staffTelephones;
        private ICollection<Entities.Common.EdFi.IStaffTelephone> _staffTelephonesCovariant;

        [DataMember(Name="telephones"), NoDuplicateMembers]
        public ICollection<StaffTelephone> StaffTelephones
        {
            get { return _staffTelephones; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffTelephone>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffTelephone)e.Item).Staff = this);
                _staffTelephones = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffTelephone, StaffTelephone>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffTelephone)e.Item).Staff = this;
                _staffTelephonesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffTelephone> Entities.Common.EdFi.IStaff.StaffTelephones
        {
            get { return _staffTelephonesCovariant; }
            set { StaffTelephones = new List<StaffTelephone>(value.Cast<StaffTelephone>()); }
        }

        private ICollection<StaffTribalAffiliation> _staffTribalAffiliations;
        private ICollection<Entities.Common.EdFi.IStaffTribalAffiliation> _staffTribalAffiliationsCovariant;

        [DataMember(Name="tribalAffiliations"), NoDuplicateMembers]
        public ICollection<StaffTribalAffiliation> StaffTribalAffiliations
        {
            get { return _staffTribalAffiliations; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffTribalAffiliation>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffTribalAffiliation)e.Item).Staff = this);
                _staffTribalAffiliations = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffTribalAffiliation, StaffTribalAffiliation>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffTribalAffiliation)e.Item).Staff = this;
                _staffTribalAffiliationsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffTribalAffiliation> Entities.Common.EdFi.IStaff.StaffTribalAffiliations
        {
            get { return _staffTribalAffiliationsCovariant; }
            set { StaffTribalAffiliations = new List<StaffTribalAffiliation>(value.Cast<StaffTribalAffiliation>()); }
        }

        private ICollection<StaffVisa> _staffVisas;
        private ICollection<Entities.Common.EdFi.IStaffVisa> _staffVisasCovariant;

        [DataMember(Name="visas"), NoDuplicateMembers]
        public ICollection<StaffVisa> StaffVisas
        {
            get { return _staffVisas; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffVisa>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffVisa)e.Item).Staff = this);
                _staffVisas = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffVisa, StaffVisa>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffVisa)e.Item).Staff = this;
                _staffVisasCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffVisa> Entities.Common.EdFi.IStaff.StaffVisas
        {
            get { return _staffVisasCovariant; }
            set { StaffVisas = new List<StaffVisa>(value.Cast<StaffVisa>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffAddresses != null) foreach (var item in _staffAddresses)
            {
                item.Staff = this;
            }

            if (_staffCredentials != null) foreach (var item in _staffCredentials)
            {
                item.Staff = this;
            }

            if (_staffElectronicMails != null) foreach (var item in _staffElectronicMails)
            {
                item.Staff = this;
            }

            if (_staffIdentificationCodes != null) foreach (var item in _staffIdentificationCodes)
            {
                item.Staff = this;
            }

            if (_staffIdentificationDocuments != null) foreach (var item in _staffIdentificationDocuments)
            {
                item.Staff = this;
            }

            if (_staffInternationalAddresses != null) foreach (var item in _staffInternationalAddresses)
            {
                item.Staff = this;
            }

            if (_staffLanguages != null) foreach (var item in _staffLanguages)
            {
                item.Staff = this;
            }

            if (_staffOtherNames != null) foreach (var item in _staffOtherNames)
            {
                item.Staff = this;
            }

            if (_staffPersonalIdentificationDocuments != null) foreach (var item in _staffPersonalIdentificationDocuments)
            {
                item.Staff = this;
            }

            if (_staffRaces != null) foreach (var item in _staffRaces)
            {
                item.Staff = this;
            }

            if (_staffRecognitions != null) foreach (var item in _staffRecognitions)
            {
                item.Staff = this;
            }

            if (_staffTelephones != null) foreach (var item in _staffTelephones)
            {
                item.Staff = this;
            }

            if (_staffTribalAffiliations != null) foreach (var item in _staffTribalAffiliations)
            {
                item.Staff = this;
            }

            if (_staffVisas != null) foreach (var item in _staffVisas)
            {
                item.Staff = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaff)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffMapper.MapTo(this, (Entities.Common.EdFi.IStaff)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsBirthDateSupported                                   { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsCitizenshipStatusDescriptorSupported                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsFirstNameSupported                                   { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsGenerationCodeSuffixSupported                        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsHighestCompletedLevelOfEducationDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsHighlyQualifiedTeacherSupported                      { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsHispanicLatinoEthnicitySupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsLastSurnameSupported                                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsLoginIdSupported                                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsMaidenNameSupported                                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsMiddleNameSupported                                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsOldEthnicityDescriptorSupported                      { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsPersonalTitlePrefixSupported                         { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsSexDescriptorSupported                               { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffAddressesSupported                              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffCredentialsSupported                            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffElectronicMailsSupported                        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationCodesSupported                    { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationDocumentsSupported                { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffInternationalAddressesSupported                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffLanguagesSupported                              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffOtherNamesSupported                             { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffPersonalIdentificationDocumentsSupported        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRacesSupported                                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRecognitionsSupported                           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTelephonesSupported                             { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTribalAffiliationsSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffUniqueIdSupported                               { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffVisasSupported                                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsYearsOfPriorProfessionalExperienceSupported          { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsYearsOfPriorTeachingExperienceSupported              { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.EdFi.IStaffAddress, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffAddressIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffCredential, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffCredentialIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffElectronicMail, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffElectronicMailIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffIdentificationCode, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationCodeIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffIdentificationDocument, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationDocumentIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffInternationalAddress, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffInternationalAddressIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffLanguage, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffLanguageIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffOtherName, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffOtherNameIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffPersonalIdentificationDocument, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffPersonalIdentificationDocumentIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffRace, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRaceIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffRecognition, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRecognitionIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffTelephone, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTelephoneIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffTribalAffiliation, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTribalAffiliationIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffVisa, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffVisaIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPutPostRequestValidator : FluentValidation.AbstractValidator<Staff>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<Staff> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var staffAddressesValidator = new StaffAddressPutPostRequestValidator();

            foreach (var item in instance.StaffAddresses)
            {
                var validationResult = staffAddressesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffCredentialsValidator = new StaffCredentialPutPostRequestValidator();

            foreach (var item in instance.StaffCredentials)
            {
                var validationResult = staffCredentialsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffElectronicMailsValidator = new StaffElectronicMailPutPostRequestValidator();

            foreach (var item in instance.StaffElectronicMails)
            {
                var validationResult = staffElectronicMailsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffIdentificationCodesValidator = new StaffIdentificationCodePutPostRequestValidator();

            foreach (var item in instance.StaffIdentificationCodes)
            {
                var validationResult = staffIdentificationCodesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffIdentificationDocumentsValidator = new StaffIdentificationDocumentPutPostRequestValidator();

            foreach (var item in instance.StaffIdentificationDocuments)
            {
                var validationResult = staffIdentificationDocumentsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffInternationalAddressesValidator = new StaffInternationalAddressPutPostRequestValidator();

            foreach (var item in instance.StaffInternationalAddresses)
            {
                var validationResult = staffInternationalAddressesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffLanguagesValidator = new StaffLanguagePutPostRequestValidator();

            foreach (var item in instance.StaffLanguages)
            {
                var validationResult = staffLanguagesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffOtherNamesValidator = new StaffOtherNamePutPostRequestValidator();

            foreach (var item in instance.StaffOtherNames)
            {
                var validationResult = staffOtherNamesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffPersonalIdentificationDocumentsValidator = new StaffPersonalIdentificationDocumentPutPostRequestValidator();

            foreach (var item in instance.StaffPersonalIdentificationDocuments)
            {
                var validationResult = staffPersonalIdentificationDocumentsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffRacesValidator = new StaffRacePutPostRequestValidator();

            foreach (var item in instance.StaffRaces)
            {
                var validationResult = staffRacesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffRecognitionsValidator = new StaffRecognitionPutPostRequestValidator();

            foreach (var item in instance.StaffRecognitions)
            {
                var validationResult = staffRecognitionsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffTelephonesValidator = new StaffTelephonePutPostRequestValidator();

            foreach (var item in instance.StaffTelephones)
            {
                var validationResult = staffTelephonesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffTribalAffiliationsValidator = new StaffTribalAffiliationPutPostRequestValidator();

            foreach (var item in instance.StaffTribalAffiliations)
            {
                var validationResult = staffTribalAffiliationsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffVisasValidator = new StaffVisaPutPostRequestValidator();

            foreach (var item in instance.StaffVisas)
            {
                var validationResult = staffVisasValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffAddress table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffAddress : Entities.Common.EdFi.IStaffAddress, Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StaffAddress()
        {
            StaffAddressPeriods = new List<StaffAddressPeriod>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffAddress.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressTypeDescriptor"), NaturalKeyMember]
        public string AddressTypeDescriptor { get; set; }

        /// <summary>
        /// The name of the city in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="city"), NaturalKeyMember]
        public string City { get; set; }

        /// <summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="postalCode"), NaturalKeyMember]
        public string PostalCode { get; set; }

        /// <summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="stateAbbreviationDescriptor"), NaturalKeyMember]
        public string StateAbbreviationDescriptor { get; set; }

        /// <summary>
        /// The street number and street name or post office box number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="streetNumberName"), NaturalKeyMember]
        public string StreetNumberName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffAddress;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).AddressTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffAddress).AddressTypeDescriptor.Equals(compareTo.AddressTypeDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).City == null
                || !(this as Entities.Common.EdFi.IStaffAddress).City.Equals(compareTo.City)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).PostalCode == null
                || !(this as Entities.Common.EdFi.IStaffAddress).PostalCode.Equals(compareTo.PostalCode)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).StateAbbreviationDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffAddress).StateAbbreviationDescriptor.Equals(compareTo.StateAbbreviationDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).StreetNumberName == null
                || !(this as Entities.Common.EdFi.IStaffAddress).StreetNumberName.Equals(compareTo.StreetNumberName)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).AddressTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).AddressTypeDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).City != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).City.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).PostalCode != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).PostalCode.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).StateAbbreviationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).StateAbbreviationDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).StreetNumberName != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).StreetNumberName.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The apartment, room, or suite number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="apartmentRoomSuiteNumber")]
        public string ApartmentRoomSuiteNumber { get; set; }

        /// <summary>
        /// The number of the building on the site, if more than one building shares the same address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="buildingSiteNumber")]
        public string BuildingSiteNumber { get; set; }

        /// <summary>
        /// The congressional district in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="congressionalDistrict")]
        public string CongressionalDistrict { get; set; }

        /// <summary>
        /// The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \"first-order subdivisions\" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="countyFIPSCode")]
        public string CountyFIPSCode { get; set; }

        /// <summary>
        /// An indication that the address should not be published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// A general geographic indicator that categorizes U.S. territory (e.g., City, Suburban).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="localeDescriptor")]
        public string LocaleDescriptor { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }

        /// <summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in                        'which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nameOfCounty")]
        public string NameOfCounty { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffAddress")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffAddressPeriod> _staffAddressPeriods;
        private ICollection<Entities.Common.EdFi.IStaffAddressPeriod> _staffAddressPeriodsCovariant;

        [DataMember(Name="periods"), NoDuplicateMembers]
        public ICollection<StaffAddressPeriod> StaffAddressPeriods
        {
            get { return _staffAddressPeriods; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffAddressPeriod>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffAddressPeriod)e.Item).StaffAddress = this);
                _staffAddressPeriods = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffAddressPeriod, StaffAddressPeriod>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffAddressPeriod)e.Item).StaffAddress = this;
                _staffAddressPeriodsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffAddressPeriod> Entities.Common.EdFi.IStaffAddress.StaffAddressPeriods
        {
            get { return _staffAddressPeriodsCovariant; }
            set { StaffAddressPeriods = new List<StaffAddressPeriod>(value.Cast<StaffAddressPeriod>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffAddressPeriods != null) foreach (var item in _staffAddressPeriods)
            {
                item.StaffAddress = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffAddressMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffAddress)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffAddressMapper.MapTo(this, (Entities.Common.EdFi.IStaffAddress)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsApartmentRoomSuiteNumberSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsBuildingSiteNumberSupported        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsCongressionalDistrictSupported     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsCountyFIPSCodeSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsLatitudeSupported                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsLocaleDescriptorSupported          { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsLongitudeSupported                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsNameOfCountySupported              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsStaffAddressPeriodsSupported       { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.EdFi.IStaffAddressPeriod, bool> Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsStaffAddressPeriodIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffAddressPutPostRequestValidator : FluentValidation.AbstractValidator<StaffAddress>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffAddress> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var staffAddressPeriodsValidator = new StaffAddressPeriodPutPostRequestValidator();

            foreach (var item in instance.StaffAddressPeriods)
            {
                var validationResult = staffAddressPeriodsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffAddressPeriod table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffAddressPeriod : Entities.Common.EdFi.IStaffAddressPeriod, Entities.Common.EdFi.IStaffAddressPeriodSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaffAddress _staffAddress;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaffAddress Entities.Common.EdFi.IStaffAddressPeriod.StaffAddress
        {
            get { return _staffAddress; }
            set { SetStaffAddress(value); }
        }

        internal Entities.Common.EdFi.IStaffAddress StaffAddress
        {
            set { SetStaffAddress(value); }
        }

        private void SetStaffAddress(Entities.Common.EdFi.IStaffAddress value)
        {
            _staffAddress = value;
        }

        /// <summary>
        /// The month, day, and year for the start of the period.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate"), NaturalKeyMember][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime BeginDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffAddressPeriod;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staffAddress == null || !_staffAddress.Equals(compareTo.StaffAddress))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddressPeriod).BeginDate == null
                || !(this as Entities.Common.EdFi.IStaffAddressPeriod).BeginDate.Equals(compareTo.BeginDate)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffAddress != null)
                    hash = hash * 23 + _staffAddress.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddressPeriod).BeginDate != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddressPeriod).BeginDate.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year for the end of the period.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffAddressPeriod")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffAddressPeriodMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffAddressPeriod)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffAddressPeriodMapper.MapTo(this, (Entities.Common.EdFi.IStaffAddressPeriod)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffAddressPeriodSynchronizationSourceSupport.IsEndDateSupported  { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffAddressPeriodPutPostRequestValidator : FluentValidation.AbstractValidator<StaffAddressPeriod>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffAddressPeriod> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffCredential table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffCredential : Entities.Common.EdFi.IStaffCredential, Entities.Common.EdFi.IStaffCredentialSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _credentialReferenceExplicitlyAssigned;
        private Credential.EdFi.CredentialReference _credentialReference;
        private Credential.EdFi.CredentialReference ImplicitCredentialReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_credentialReference == null && !_credentialReferenceExplicitlyAssigned)
                    _credentialReference = new Credential.EdFi.CredentialReference();

                return _credentialReference;
            }
        }

        [DataMember(Name="credentialReference")][NaturalKeyMember]
        public Credential.EdFi.CredentialReference CredentialReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitCredentialReference != null
                    && (_credentialReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitCredentialReference.IsReferenceFullyDefined()))
                    return ImplicitCredentialReference;

                return null;
            }
            set
            {
                _credentialReferenceExplicitlyAssigned = true;
                _credentialReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffCredential.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// Identifier or serial number assigned to the credential.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.EdFi.IStaffCredential.CredentialIdentifier
        {
            get
            {
                if (ImplicitCredentialReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCredentialReference.IsReferenceFullyDefined()))
                    return ImplicitCredentialReference.CredentialIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Credential
                _credentialReferenceExplicitlyAssigned = false;
                ImplicitCredentialReference.CredentialIdentifier = value;
            }
        }

        /// <summary>
        /// The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued.
        /// </summary>

        // IS in a reference (StaffCredential.StateOfIssueStateAbbreviationDescriptorId), IS a lookup column 
        string Entities.Common.EdFi.IStaffCredential.StateOfIssueStateAbbreviationDescriptor
        {
            get
            {
                if (ImplicitCredentialReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCredentialReference.IsReferenceFullyDefined()))
                    return ImplicitCredentialReference.StateOfIssueStateAbbreviationDescriptor;

                return null;
            }
            set
            {
                ImplicitCredentialReference.StateOfIssueStateAbbreviationDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffCredential;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Referenced Property
            if ((this as Entities.Common.EdFi.IStaffCredential).CredentialIdentifier == null
                || !(this as Entities.Common.EdFi.IStaffCredential).CredentialIdentifier.Equals(compareTo.CredentialIdentifier)) 
                return false;
 
            // Unified Type Property
            if ((this as Entities.Common.EdFi.IStaffCredential).StateOfIssueStateAbbreviationDescriptor == null
                ||!(this as Entities.Common.EdFi.IStaffCredential).StateOfIssueStateAbbreviationDescriptor.Equals(compareTo.StateOfIssueStateAbbreviationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                //Referenced Property
                if ((this as Entities.Common.EdFi.IStaffCredential).CredentialIdentifier != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffCredential).CredentialIdentifier.GetHashCode();
 
                //Unified Type Property
                if ((this as Entities.Common.EdFi.IStaffCredential).StateOfIssueStateAbbreviationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffCredential).StateOfIssueStateAbbreviationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffCredential")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffCredentialMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffCredential)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffCredentialMapper.MapTo(this, (Entities.Common.EdFi.IStaffCredential)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.EdFi.IStaffCredential.CredentialResourceId 
        { 
            get { return null; }
            set { ImplicitCredentialReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.EdFi.IStaffCredential.CredentialDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitCredentialReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffCredentialPutPostRequestValidator : FluentValidation.AbstractValidator<StaffCredential>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffCredential> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffElectronicMail table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffElectronicMail : Entities.Common.EdFi.IStaffElectronicMail, Entities.Common.EdFi.IStaffElectronicMailSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffElectronicMail.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The electronic mail (e-mail) address listed for an individual or organization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="electronicMailAddress"), NaturalKeyMember]
        public string ElectronicMailAddress { get; set; }

        /// <summary>
        /// The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="electronicMailTypeDescriptor"), NaturalKeyMember]
        public string ElectronicMailTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffElectronicMail;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailAddress == null
                || !(this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailAddress.Equals(compareTo.ElectronicMailAddress)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailTypeDescriptor.Equals(compareTo.ElectronicMailTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailAddress != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailAddress.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication that the electronic email address should not be published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="primaryEmailAddressIndicator")]
        public bool? PrimaryEmailAddressIndicator { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffElectronicMail")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffElectronicMailMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffElectronicMail)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffElectronicMailMapper.MapTo(this, (Entities.Common.EdFi.IStaffElectronicMail)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffElectronicMailSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported         { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffElectronicMailSynchronizationSourceSupport.IsPrimaryEmailAddressIndicatorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffElectronicMailPutPostRequestValidator : FluentValidation.AbstractValidator<StaffElectronicMail>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffElectronicMail> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffIdentificationCode table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffIdentificationCode : Entities.Common.EdFi.IStaffIdentificationCode, Entities.Common.EdFi.IStaffIdentificationCodeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffIdentificationCode.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a staff member.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="staffIdentificationSystemDescriptor"), NaturalKeyMember]
        public string StaffIdentificationSystemDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffIdentificationCode;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffIdentificationCode).StaffIdentificationSystemDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffIdentificationCode).StaffIdentificationSystemDescriptor.Equals(compareTo.StaffIdentificationSystemDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffIdentificationCode).StaffIdentificationSystemDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffIdentificationCode).StaffIdentificationSystemDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The organization code or name assigning the staff Identification Code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="assigningOrganizationIdentificationCode")]
        public string AssigningOrganizationIdentificationCode { get; set; }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="identificationCode")]
        public string IdentificationCode { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffIdentificationCode")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffIdentificationCodeMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffIdentificationCode)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffIdentificationCodeMapper.MapTo(this, (Entities.Common.EdFi.IStaffIdentificationCode)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffIdentificationCodeSynchronizationSourceSupport.IsAssigningOrganizationIdentificationCodeSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationCodeSynchronizationSourceSupport.IsIdentificationCodeSupported                       { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffIdentificationCodePutPostRequestValidator : FluentValidation.AbstractValidator<StaffIdentificationCode>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffIdentificationCode> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffIdentificationDocument table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffIdentificationDocument : Entities.Common.EdFi.IStaffIdentificationDocument, Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffIdentificationDocument.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The primary function of the document used for establishing identity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="identificationDocumentUseDescriptor"), NaturalKeyMember]
        public string IdentificationDocumentUseDescriptor { get; set; }

        /// <summary>
        /// The category of the document relative to its purpose.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="personalInformationVerificationDescriptor"), NaturalKeyMember]
        public string PersonalInformationVerificationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffIdentificationDocument;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffIdentificationDocument).IdentificationDocumentUseDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffIdentificationDocument).IdentificationDocumentUseDescriptor.Equals(compareTo.IdentificationDocumentUseDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffIdentificationDocument).PersonalInformationVerificationDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffIdentificationDocument).PersonalInformationVerificationDescriptor.Equals(compareTo.PersonalInformationVerificationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffIdentificationDocument).IdentificationDocumentUseDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffIdentificationDocument).IdentificationDocumentUseDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffIdentificationDocument).PersonalInformationVerificationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffIdentificationDocument).PersonalInformationVerificationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The day when the document  expires, if null then never expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentExpirationDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? DocumentExpirationDate { get; set; }

        /// <summary>
        /// The title of the document given by the issuer.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentTitle")]
        public string DocumentTitle { get; set; }

        /// <summary>
        /// Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="issuerCountryDescriptor")]
        public string IssuerCountryDescriptor { get; set; }

        /// <summary>
        /// The unique identifier on the issuer's identification system.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerDocumentIdentificationCode")]
        public string IssuerDocumentIdentificationCode { get; set; }

        /// <summary>
        /// Name of the entity or institution that issued the document.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffIdentificationDocument")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffIdentificationDocumentMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffIdentificationDocumentMapper.MapTo(this, (Entities.Common.EdFi.IStaffIdentificationDocument)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported                        { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffIdentificationDocumentPutPostRequestValidator : FluentValidation.AbstractValidator<StaffIdentificationDocument>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffIdentificationDocument> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffInternationalAddress table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffInternationalAddress : Entities.Common.EdFi.IStaffInternationalAddress, Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffInternationalAddress.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The type of address listed for an individual or organization. For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressTypeDescriptor"), NaturalKeyMember]
        public string AddressTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffInternationalAddress;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffInternationalAddress).AddressTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffInternationalAddress).AddressTypeDescriptor.Equals(compareTo.AddressTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffInternationalAddress).AddressTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffInternationalAddress).AddressTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The first line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine1")]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// The second line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine2")]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// The third line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine3")]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// The fourth line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine4")]
        public string AddressLine4 { get; set; }

        /// <summary>
        /// The first date the address is valid. For physical addresses, the date the person moved to that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The name of the country. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="countryDescriptor")]
        public string CountryDescriptor { get; set; }

        /// <summary>
        /// The last date the address is valid. For physical addresses, this would be the date the person moved from that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffInternationalAddress")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffInternationalAddressMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffInternationalAddress)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffInternationalAddressMapper.MapTo(this, (Entities.Common.EdFi.IStaffInternationalAddress)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine1Supported       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine2Supported       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine3Supported       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine4Supported       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsBeginDateSupported          { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsCountryDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsEndDateSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsLatitudeSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsLongitudeSupported          { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffInternationalAddressPutPostRequestValidator : FluentValidation.AbstractValidator<StaffInternationalAddress>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffInternationalAddress> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffLanguage table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffLanguage : Entities.Common.EdFi.IStaffLanguage, Entities.Common.EdFi.IStaffLanguageSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StaffLanguage()
        {
            StaffLanguageUses = new List<StaffLanguageUse>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffLanguage.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// A specification of which written or spoken communication is being used.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="languageDescriptor"), NaturalKeyMember]
        public string LanguageDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffLanguage;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffLanguage).LanguageDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffLanguage).LanguageDescriptor.Equals(compareTo.LanguageDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffLanguage).LanguageDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffLanguage).LanguageDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffLanguage")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffLanguageUse> _staffLanguageUses;
        private ICollection<Entities.Common.EdFi.IStaffLanguageUse> _staffLanguageUsesCovariant;

        [DataMember(Name="uses"), NoDuplicateMembers]
        public ICollection<StaffLanguageUse> StaffLanguageUses
        {
            get { return _staffLanguageUses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffLanguageUse>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffLanguageUse)e.Item).StaffLanguage = this);
                _staffLanguageUses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffLanguageUse, StaffLanguageUse>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffLanguageUse)e.Item).StaffLanguage = this;
                _staffLanguageUsesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffLanguageUse> Entities.Common.EdFi.IStaffLanguage.StaffLanguageUses
        {
            get { return _staffLanguageUsesCovariant; }
            set { StaffLanguageUses = new List<StaffLanguageUse>(value.Cast<StaffLanguageUse>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffLanguageUses != null) foreach (var item in _staffLanguageUses)
            {
                item.StaffLanguage = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffLanguageMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffLanguage)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffLanguageMapper.MapTo(this, (Entities.Common.EdFi.IStaffLanguage)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffLanguageSynchronizationSourceSupport.IsStaffLanguageUsesSupported  { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.EdFi.IStaffLanguageUse, bool> Entities.Common.EdFi.IStaffLanguageSynchronizationSourceSupport.IsStaffLanguageUseIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffLanguagePutPostRequestValidator : FluentValidation.AbstractValidator<StaffLanguage>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffLanguage> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var staffLanguageUsesValidator = new StaffLanguageUsePutPostRequestValidator();

            foreach (var item in instance.StaffLanguageUses)
            {
                var validationResult = staffLanguageUsesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffLanguageUse table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffLanguageUse : Entities.Common.EdFi.IStaffLanguageUse, Entities.Common.EdFi.IStaffLanguageUseSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaffLanguage _staffLanguage;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaffLanguage Entities.Common.EdFi.IStaffLanguageUse.StaffLanguage
        {
            get { return _staffLanguage; }
            set { SetStaffLanguage(value); }
        }

        internal Entities.Common.EdFi.IStaffLanguage StaffLanguage
        {
            set { SetStaffLanguage(value); }
        }

        private void SetStaffLanguage(Entities.Common.EdFi.IStaffLanguage value)
        {
            _staffLanguage = value;
        }

        /// <summary>
        /// A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="languageUseDescriptor"), NaturalKeyMember]
        public string LanguageUseDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffLanguageUse;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staffLanguage == null || !_staffLanguage.Equals(compareTo.StaffLanguage))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffLanguageUse).LanguageUseDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffLanguageUse).LanguageUseDescriptor.Equals(compareTo.LanguageUseDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffLanguage != null)
                    hash = hash * 23 + _staffLanguage.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffLanguageUse).LanguageUseDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffLanguageUse).LanguageUseDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffLanguageUse")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffLanguageUseMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffLanguageUse)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffLanguageUseMapper.MapTo(this, (Entities.Common.EdFi.IStaffLanguageUse)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffLanguageUsePutPostRequestValidator : FluentValidation.AbstractValidator<StaffLanguageUse>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffLanguageUse> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffOtherName table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffOtherName : Entities.Common.EdFi.IStaffOtherName, Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffOtherName.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The types of alternate names for a person.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="otherNameTypeDescriptor"), NaturalKeyMember]
        public string OtherNameTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffOtherName;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffOtherName).OtherNameTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffOtherName).OtherNameTypeDescriptor.Equals(compareTo.OtherNameTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffOtherName).OtherNameTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffOtherName).OtherNameTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffOtherName")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffOtherNameMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffOtherName)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffOtherNameMapper.MapTo(this, (Entities.Common.EdFi.IStaffOtherName)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsFirstNameSupported             { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsGenerationCodeSuffixSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsLastSurnameSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsMiddleNameSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsPersonalTitlePrefixSupported   { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffOtherNamePutPostRequestValidator : FluentValidation.AbstractValidator<StaffOtherName>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffOtherName> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffPersonalIdentificationDocument table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffPersonalIdentificationDocument : Entities.Common.EdFi.IStaffPersonalIdentificationDocument, Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffPersonalIdentificationDocument.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The primary function of the document used for establishing identity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="identificationDocumentUseDescriptor"), NaturalKeyMember]
        public string IdentificationDocumentUseDescriptor { get; set; }

        /// <summary>
        /// The category of the document relative to its purpose.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="personalInformationVerificationDescriptor"), NaturalKeyMember]
        public string PersonalInformationVerificationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffPersonalIdentificationDocument;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).IdentificationDocumentUseDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).IdentificationDocumentUseDescriptor.Equals(compareTo.IdentificationDocumentUseDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).PersonalInformationVerificationDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).PersonalInformationVerificationDescriptor.Equals(compareTo.PersonalInformationVerificationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).IdentificationDocumentUseDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).IdentificationDocumentUseDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).PersonalInformationVerificationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).PersonalInformationVerificationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The day when the document  expires, if null then never expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentExpirationDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? DocumentExpirationDate { get; set; }

        /// <summary>
        /// The title of the document given by the issuer.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentTitle")]
        public string DocumentTitle { get; set; }

        /// <summary>
        /// Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="issuerCountryDescriptor")]
        public string IssuerCountryDescriptor { get; set; }

        /// <summary>
        /// The unique identifier on the issuer's identification system.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerDocumentIdentificationCode")]
        public string IssuerDocumentIdentificationCode { get; set; }

        /// <summary>
        /// Name of the entity or institution that issued the document.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffPersonalIdentificationDocument")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffPersonalIdentificationDocumentMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffPersonalIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffPersonalIdentificationDocumentMapper.MapTo(this, (Entities.Common.EdFi.IStaffPersonalIdentificationDocument)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported                        { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPersonalIdentificationDocumentPutPostRequestValidator : FluentValidation.AbstractValidator<StaffPersonalIdentificationDocument>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffPersonalIdentificationDocument> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffRace table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffRace : Entities.Common.EdFi.IStaffRace, Entities.Common.EdFi.IStaffRaceSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffRace.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The general racial category which most clearly reflects the individual's recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="raceDescriptor"), NaturalKeyMember]
        public string RaceDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffRace;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffRace).RaceDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffRace).RaceDescriptor.Equals(compareTo.RaceDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffRace).RaceDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffRace).RaceDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffRace")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffRaceMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffRace)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffRaceMapper.MapTo(this, (Entities.Common.EdFi.IStaffRace)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffRacePutPostRequestValidator : FluentValidation.AbstractValidator<StaffRace>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffRace> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffRecognition table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffRecognition : Entities.Common.EdFi.IStaffRecognition, Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffRecognition.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The nature of recognition given to the learner for accomplishments in a co-curricular, or extra-curricular activity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="recognitionTypeDescriptor"), NaturalKeyMember]
        public string RecognitionTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffRecognition;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffRecognition).RecognitionTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffRecognition).RecognitionTypeDescriptor.Equals(compareTo.RecognitionTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffRecognition).RecognitionTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffRecognition).RecognitionTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The category of achievement attributed to the learner.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="achievementCategoryDescriptor")]
        public string AchievementCategoryDescriptor { get; set; }

        /// <summary>
        /// The system that defines the categories by which an achievement is attributed to the learner.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="achievementCategorySystem")]
        public string AchievementCategorySystem { get; set; }

        /// <summary>
        /// The title assigned to the achievement.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="achievementTitle")]
        public string AchievementTitle { get; set; }

        /// <summary>
        /// The criteria for competency-based completion of the achievement/award.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="criteria")]
        public string Criteria { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="criteriaURL")]
        public string CriteriaURL { get; set; }

        /// <summary>
        /// A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="evidenceStatement")]
        public string EvidenceStatement { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="imageURL")]
        public string ImageURL { get; set; }

        /// <summary>
        /// The name of the agent, entity, or institution issuing the element.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) from which the award was issued.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerOriginURL")]
        public string IssuerOriginURL { get; set; }

        /// <summary>
        /// The date the recognition was awarded or earned.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="recognitionAwardDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? RecognitionAwardDate { get; set; }

        /// <summary>
        /// Date on which the award expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="recognitionAwardExpiresDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? RecognitionAwardExpiresDate { get; set; }

        /// <summary>
        /// A description of the type of academic distinctions earned by or awarded to the individual.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="recognitionDescription")]
        public string RecognitionDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffRecognition")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffRecognitionMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffRecognition)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffRecognitionMapper.MapTo(this, (Entities.Common.EdFi.IStaffRecognition)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsAchievementCategoryDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsAchievementCategorySystemSupported      { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsAchievementTitleSupported               { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsCriteriaSupported                       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsCriteriaURLSupported                    { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsEvidenceStatementSupported              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsImageURLSupported                       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsIssuerNameSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsIssuerOriginURLSupported                { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsRecognitionAwardDateSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsRecognitionAwardExpiresDateSupported    { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsRecognitionDescriptionSupported         { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffRecognitionPutPostRequestValidator : FluentValidation.AbstractValidator<StaffRecognition>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffRecognition> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffTelephone table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffTelephone : Entities.Common.EdFi.IStaffTelephone, Entities.Common.EdFi.IStaffTelephoneSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffTelephone.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The telephone number including the area code, and extension, if applicable.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="telephoneNumber"), NaturalKeyMember]
        public string TelephoneNumber { get; set; }

        /// <summary>
        /// The type of communication number listed for an individual or organization.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="telephoneNumberTypeDescriptor"), NaturalKeyMember]
        public string TelephoneNumberTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffTelephone;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumber == null
                || !(this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumber.Equals(compareTo.TelephoneNumber)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumberTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumberTypeDescriptor.Equals(compareTo.TelephoneNumberTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumber != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumber.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumberTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumberTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication that the telephone number should not be published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="orderOfPriority")]
        public int? OrderOfPriority { get; set; }

        /// <summary>
        /// An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="textMessageCapabilityIndicator")]
        public bool? TextMessageCapabilityIndicator { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffTelephone")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffTelephoneMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffTelephone)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffTelephoneMapper.MapTo(this, (Entities.Common.EdFi.IStaffTelephone)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffTelephoneSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffTelephoneSynchronizationSourceSupport.IsOrderOfPrioritySupported                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffTelephoneSynchronizationSourceSupport.IsTextMessageCapabilityIndicatorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffTelephonePutPostRequestValidator : FluentValidation.AbstractValidator<StaffTelephone>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffTelephone> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffTribalAffiliation table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffTribalAffiliation : Entities.Common.EdFi.IStaffTribalAffiliation, Entities.Common.EdFi.IStaffTribalAffiliationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffTribalAffiliation.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// An American Indian tribe with which the staff member is affiliated.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="tribalAffiliationDescriptor"), NaturalKeyMember]
        public string TribalAffiliationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffTribalAffiliation;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffTribalAffiliation).TribalAffiliationDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffTribalAffiliation).TribalAffiliationDescriptor.Equals(compareTo.TribalAffiliationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffTribalAffiliation).TribalAffiliationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffTribalAffiliation).TribalAffiliationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffTribalAffiliation")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffTribalAffiliationMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffTribalAffiliation)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffTribalAffiliationMapper.MapTo(this, (Entities.Common.EdFi.IStaffTribalAffiliation)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffTribalAffiliationPutPostRequestValidator : FluentValidation.AbstractValidator<StaffTribalAffiliation>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffTribalAffiliation> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffVisa table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffVisa : Entities.Common.EdFi.IStaffVisa, Entities.Common.EdFi.IStaffVisaSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffVisa.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// An indicator of a non-US citizen's Visa type.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="visaDescriptor"), NaturalKeyMember]
        public string VisaDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffVisa;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffVisa).VisaDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffVisa).VisaDescriptor.Equals(compareTo.VisaDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffVisa).VisaDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffVisa).VisaDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffVisa")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffVisaMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffVisa)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffVisaMapper.MapTo(this, (Entities.Common.EdFi.IStaffVisa)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffVisaPutPostRequestValidator : FluentValidation.AbstractValidator<StaffVisa>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffVisa> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Staff

namespace EdFi.Ods.Api.Models.Resources.Staff.EdFi.Staff_Include_All_Readable.Extensions.GrandBend
{
    /// <summary>
    /// A class which represents the grandbend.StaffExtension table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffExtension : Entities.Common.GrandBend.IStaffExtension, Entities.Common.GrandBend.IStaffExtensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.GrandBend.IStaffExtension.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.GrandBend.IStaffExtension;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The date that the staff member's new hire probationary period was completed.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="probationCompleteDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? ProbationCompleteDate { get; set; }

        /// <summary>
        /// An indication as to whether the staff member is tenured.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="tenured")]
        public bool? Tenured { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.GrandBend.StaffExtensionMapper.SynchronizeTo(this, (Entities.Common.GrandBend.IStaffExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.GrandBend.StaffExtensionMapper.MapTo(this, (Entities.Common.GrandBend.IStaffExtension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.GrandBend.IStaffExtensionSynchronizationSourceSupport.IsProbationCompleteDateSupported  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IStaffExtensionSynchronizationSourceSupport.IsTenuredSupported                { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<StaffExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Staff

namespace EdFi.Ods.Api.Models.Resources.Staff.EdFi.Staff_Include_All_Readable.Extensions.Sample
{
    /// <summary>
    /// A class which represents the sample.StaffExtension table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffExtension : Entities.Common.Sample.IStaffExtension, Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StaffExtension()
        {
            StaffPets = new List<StaffPet>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.Sample.IStaffExtension.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStaffExtension;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The date the staff member adopted the first household pet.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstPetOwnedDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? FirstPetOwnedDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        /// <summary>
        /// petPreference
        /// </summary>
        [DataMember(Name = "petPreference")]
        public StaffPetPreference StaffPetPreference { get; set; }

        Entities.Common.Sample.IStaffPetPreference Entities.Common.Sample.IStaffExtension.StaffPetPreference
        {
            get { return StaffPetPreference; }
            set { StaffPetPreference = (StaffPetPreference) value; }
        }

        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffPet> _staffPets;
        private ICollection<Entities.Common.Sample.IStaffPet> _staffPetsCovariant;

        [DataMember(Name="pets"), NoDuplicateMembers]
        public ICollection<StaffPet> StaffPets
        {
            get { return _staffPets; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffPet>(value,
                    (s, e) => ((Entities.Common.Sample.IStaffPet)e.Item).StaffExtension = this);
                _staffPets = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.Sample.IStaffPet, StaffPet>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.Sample.IStaffPet)e.Item).StaffExtension = this;
                _staffPetsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.Sample.IStaffPet> Entities.Common.Sample.IStaffExtension.StaffPets
        {
            get { return _staffPetsCovariant; }
            set { StaffPets = new List<StaffPet>(value.Cast<StaffPet>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffPets != null) foreach (var item in _staffPets)
            {
                item.StaffExtension = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StaffExtensionMapper.SynchronizeTo(this, (Entities.Common.Sample.IStaffExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StaffExtensionMapper.MapTo(this, (Entities.Common.Sample.IStaffExtension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport.IsFirstPetOwnedDateSupported   { get { return true; } set { } }
        bool Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport.IsStaffPetPreferenceSupported  { get { return true; } set { } }
        bool Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport.IsStaffPetsSupported           { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.Sample.IStaffPet, bool> Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport.IsStaffPetIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<StaffExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var staffPetsValidator = new StaffPetPutPostRequestValidator();

            foreach (var item in instance.StaffPets)
            {
                var validationResult = staffPetsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the sample.StaffPet table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffPet : Entities.Common.Sample.IStaffPet, Entities.Common.Sample.IStaffPetSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.Sample.IStaffExtension _staffExtension;

        [IgnoreDataMember]
        Entities.Common.Sample.IStaffExtension Entities.Common.Sample.IStaffPet.StaffExtension
        {
            get { return _staffExtension; }
            set { SetStaffExtension(value); }
        }

        internal Entities.Common.Sample.IStaffExtension StaffExtension
        {
            set { SetStaffExtension(value); }
        }

        private void SetStaffExtension(Entities.Common.Sample.IStaffExtension value)
        {
            _staffExtension = value;
        }

        /// <summary>
        /// The pet's name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="petName"), NaturalKeyMember]
        public string PetName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStaffPet;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staffExtension == null || !_staffExtension.Equals(compareTo.StaffExtension))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.Sample.IStaffPet).PetName == null
                || !(this as Entities.Common.Sample.IStaffPet).PetName.Equals(compareTo.PetName)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffExtension != null)
                    hash = hash * 23 + _staffExtension.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.Sample.IStaffPet).PetName != null) 
                    hash = hash * 23 + (this as Entities.Common.Sample.IStaffPet).PetName.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication as to whether the pet has been spayed/neutered.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="isFixed")]
        public bool? IsFixed { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StaffPetMapper.SynchronizeTo(this, (Entities.Common.Sample.IStaffPet)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StaffPetMapper.MapTo(this, (Entities.Common.Sample.IStaffPet)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStaffPetSynchronizationSourceSupport.IsIsFixedSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPetPutPostRequestValidator : FluentValidation.AbstractValidator<StaffPet>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffPet> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the sample.StaffPetPreference table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffPetPreference : Entities.Common.Sample.IStaffPetPreference, Entities.Common.Sample.IStaffPetPreferenceSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.Sample.IStaffExtension _staffExtension;

        [IgnoreDataMember]
        Entities.Common.Sample.IStaffExtension Entities.Common.Sample.IStaffPetPreference.StaffExtension
        {
            get { return _staffExtension; }
            set { SetStaffExtension(value); }
        }

        internal Entities.Common.Sample.IStaffExtension StaffExtension
        {
            set { SetStaffExtension(value); }
        }

        private void SetStaffExtension(Entities.Common.Sample.IStaffExtension value)
        {
            _staffExtension = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStaffPetPreference;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staffExtension == null || !_staffExtension.Equals(compareTo.StaffExtension))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffExtension != null)
                    hash = hash * 23 + _staffExtension.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The preferred maximum weight of a household pet.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maximumWeight")]
        public int MaximumWeight { get; set; }

        /// <summary>
        /// The preferred minimum weight of a household pet.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="minimumWeight")]
        public int MinimumWeight { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StaffPetPreferenceMapper.SynchronizeTo(this, (Entities.Common.Sample.IStaffPetPreference)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StaffPetPreferenceMapper.MapTo(this, (Entities.Common.Sample.IStaffPetPreference)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStaffPetPreferenceSynchronizationSourceSupport.IsMaximumWeightSupported  { get { return true; } set { } }
        bool Entities.Common.Sample.IStaffPetPreferenceSynchronizationSourceSupport.IsMinimumWeightSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPetPreferencePutPostRequestValidator : FluentValidation.AbstractValidator<StaffPetPreference>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffPetPreference> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Staff

namespace EdFi.Ods.Api.Models.Resources.Staff.EdFi.Staff_Include_All_Writable
{
    /// <summary>
    /// Represents a reference to the Staff resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffReference
    {
        [DataMember(Name="staffUniqueId"), NaturalKeyMember]
        public string StaffUniqueId { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return StaffUniqueId != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "Staff",
                Href = $"/ed-fi/staffs/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new Common.Models.Domain.FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.Staff table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class Staff : Entities.Common.EdFi.IStaff, IHasETag, Entities.Common.EdFi.IStaffSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Staff()
        {
            StaffAddresses = new List<StaffAddress>();
            StaffCredentials = new List<StaffCredential>();
            StaffElectronicMails = new List<StaffElectronicMail>();
            StaffIdentificationCodes = new List<StaffIdentificationCode>();
            StaffIdentificationDocuments = new List<StaffIdentificationDocument>();
            StaffInternationalAddresses = new List<StaffInternationalAddress>();
            StaffLanguages = new List<StaffLanguage>();
            StaffOtherNames = new List<StaffOtherName>();
            StaffPersonalIdentificationDocuments = new List<StaffPersonalIdentificationDocument>();
            StaffRaces = new List<StaffRace>();
            StaffRecognitions = new List<StaffRecognition>();
            StaffTelephones = new List<StaffTelephone>();
            StaffTribalAffiliations = new List<StaffTribalAffiliation>();
            StaffVisas = new List<StaffVisa>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Staff resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to a staff.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="staffUniqueId"), NaturalKeyMember, UniqueId]
        public string StaffUniqueId { get; set; }

        string IIdentifiablePerson.UniqueId { get { return StaffUniqueId; } }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaff;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Property
            if ((this as Entities.Common.EdFi.IStaff).StaffUniqueId == null
                || !(this as Entities.Common.EdFi.IStaff).StaffUniqueId.Equals(compareTo.StaffUniqueId)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Property
                if ((this as Entities.Common.EdFi.IStaff).StaffUniqueId != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaff).StaffUniqueId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="birthDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BirthDate { get; set; }

        /// <summary>
        /// An indicator of whether or not the person is a U.S. citizen.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="citizenshipStatusDescriptor")]
        public string CitizenshipStatusDescriptor { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="highestCompletedLevelOfEducationDescriptor")]
        public string HighestCompletedLevelOfEducationDescriptor { get; set; }

        /// <summary>
        /// An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="highlyQualifiedTeacher")]
        public bool? HighlyQualifiedTeacher { get; set; }

        /// <summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="hispanicLatinoEthnicity")]
        public bool? HispanicLatinoEthnicity { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// The login ID for the user; used for security access control interface.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="loginId")]
        public string LoginId { get; set; }

        /// <summary>
        /// The person's maiden name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maidenName")]
        public string MaidenName { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// Previous definition of Ethnicity combining Hispanic/Latino and race:          1 - American Indian or Alaskan Native          2 - Asian or Pacific Islander          3 - Black, not of Hispanic origin          4 - Hispanic          5 - White, not of Hispanic origin.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="oldEthnicityDescriptor")]
        public string OldEthnicityDescriptor { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }

        /// <summary>
        /// A person's gender.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="sexDescriptor")]
        public string SexDescriptor { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a similar professional position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorProfessionalExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorProfessionalExperience { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a teaching position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorTeachingExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorTeachingExperience { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "Staff")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffAddress> _staffAddresses;
        private ICollection<Entities.Common.EdFi.IStaffAddress> _staffAddressesCovariant;

        [DataMember(Name="addresses"), NoDuplicateMembers]
        public ICollection<StaffAddress> StaffAddresses
        {
            get { return _staffAddresses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffAddress>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffAddress)e.Item).Staff = this);
                _staffAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffAddress, StaffAddress>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffAddress)e.Item).Staff = this;
                _staffAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffAddress> Entities.Common.EdFi.IStaff.StaffAddresses
        {
            get { return _staffAddressesCovariant; }
            set { StaffAddresses = new List<StaffAddress>(value.Cast<StaffAddress>()); }
        }

        private ICollection<StaffCredential> _staffCredentials;
        private ICollection<Entities.Common.EdFi.IStaffCredential> _staffCredentialsCovariant;

        [DataMember(Name="credentials"), NoDuplicateMembers]
        public ICollection<StaffCredential> StaffCredentials
        {
            get { return _staffCredentials; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffCredential>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffCredential)e.Item).Staff = this);
                _staffCredentials = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffCredential, StaffCredential>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffCredential)e.Item).Staff = this;
                _staffCredentialsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffCredential> Entities.Common.EdFi.IStaff.StaffCredentials
        {
            get { return _staffCredentialsCovariant; }
            set { StaffCredentials = new List<StaffCredential>(value.Cast<StaffCredential>()); }
        }

        private ICollection<StaffElectronicMail> _staffElectronicMails;
        private ICollection<Entities.Common.EdFi.IStaffElectronicMail> _staffElectronicMailsCovariant;

        [DataMember(Name="electronicMails"), NoDuplicateMembers]
        public ICollection<StaffElectronicMail> StaffElectronicMails
        {
            get { return _staffElectronicMails; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffElectronicMail>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffElectronicMail)e.Item).Staff = this);
                _staffElectronicMails = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffElectronicMail, StaffElectronicMail>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffElectronicMail)e.Item).Staff = this;
                _staffElectronicMailsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffElectronicMail> Entities.Common.EdFi.IStaff.StaffElectronicMails
        {
            get { return _staffElectronicMailsCovariant; }
            set { StaffElectronicMails = new List<StaffElectronicMail>(value.Cast<StaffElectronicMail>()); }
        }

        private ICollection<StaffIdentificationCode> _staffIdentificationCodes;
        private ICollection<Entities.Common.EdFi.IStaffIdentificationCode> _staffIdentificationCodesCovariant;

        [DataMember(Name="identificationCodes"), NoDuplicateMembers]
        public ICollection<StaffIdentificationCode> StaffIdentificationCodes
        {
            get { return _staffIdentificationCodes; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffIdentificationCode>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffIdentificationCode)e.Item).Staff = this);
                _staffIdentificationCodes = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffIdentificationCode, StaffIdentificationCode>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffIdentificationCode)e.Item).Staff = this;
                _staffIdentificationCodesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffIdentificationCode> Entities.Common.EdFi.IStaff.StaffIdentificationCodes
        {
            get { return _staffIdentificationCodesCovariant; }
            set { StaffIdentificationCodes = new List<StaffIdentificationCode>(value.Cast<StaffIdentificationCode>()); }
        }

        private ICollection<StaffIdentificationDocument> _staffIdentificationDocuments;
        private ICollection<Entities.Common.EdFi.IStaffIdentificationDocument> _staffIdentificationDocumentsCovariant;

        [DataMember(Name="identificationDocuments"), NoDuplicateMembers]
        public ICollection<StaffIdentificationDocument> StaffIdentificationDocuments
        {
            get { return _staffIdentificationDocuments; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffIdentificationDocument>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffIdentificationDocument)e.Item).Staff = this);
                _staffIdentificationDocuments = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffIdentificationDocument, StaffIdentificationDocument>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffIdentificationDocument)e.Item).Staff = this;
                _staffIdentificationDocumentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffIdentificationDocument> Entities.Common.EdFi.IStaff.StaffIdentificationDocuments
        {
            get { return _staffIdentificationDocumentsCovariant; }
            set { StaffIdentificationDocuments = new List<StaffIdentificationDocument>(value.Cast<StaffIdentificationDocument>()); }
        }

        private ICollection<StaffInternationalAddress> _staffInternationalAddresses;
        private ICollection<Entities.Common.EdFi.IStaffInternationalAddress> _staffInternationalAddressesCovariant;

        [DataMember(Name="internationalAddresses"), NoDuplicateMembers]
        public ICollection<StaffInternationalAddress> StaffInternationalAddresses
        {
            get { return _staffInternationalAddresses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffInternationalAddress>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffInternationalAddress)e.Item).Staff = this);
                _staffInternationalAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffInternationalAddress, StaffInternationalAddress>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffInternationalAddress)e.Item).Staff = this;
                _staffInternationalAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffInternationalAddress> Entities.Common.EdFi.IStaff.StaffInternationalAddresses
        {
            get { return _staffInternationalAddressesCovariant; }
            set { StaffInternationalAddresses = new List<StaffInternationalAddress>(value.Cast<StaffInternationalAddress>()); }
        }

        private ICollection<StaffLanguage> _staffLanguages;
        private ICollection<Entities.Common.EdFi.IStaffLanguage> _staffLanguagesCovariant;

        [DataMember(Name="languages"), NoDuplicateMembers]
        public ICollection<StaffLanguage> StaffLanguages
        {
            get { return _staffLanguages; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffLanguage>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffLanguage)e.Item).Staff = this);
                _staffLanguages = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffLanguage, StaffLanguage>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffLanguage)e.Item).Staff = this;
                _staffLanguagesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffLanguage> Entities.Common.EdFi.IStaff.StaffLanguages
        {
            get { return _staffLanguagesCovariant; }
            set { StaffLanguages = new List<StaffLanguage>(value.Cast<StaffLanguage>()); }
        }

        private ICollection<StaffOtherName> _staffOtherNames;
        private ICollection<Entities.Common.EdFi.IStaffOtherName> _staffOtherNamesCovariant;

        [DataMember(Name="otherNames"), NoDuplicateMembers]
        public ICollection<StaffOtherName> StaffOtherNames
        {
            get { return _staffOtherNames; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffOtherName>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffOtherName)e.Item).Staff = this);
                _staffOtherNames = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffOtherName, StaffOtherName>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffOtherName)e.Item).Staff = this;
                _staffOtherNamesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffOtherName> Entities.Common.EdFi.IStaff.StaffOtherNames
        {
            get { return _staffOtherNamesCovariant; }
            set { StaffOtherNames = new List<StaffOtherName>(value.Cast<StaffOtherName>()); }
        }

        private ICollection<StaffPersonalIdentificationDocument> _staffPersonalIdentificationDocuments;
        private ICollection<Entities.Common.EdFi.IStaffPersonalIdentificationDocument> _staffPersonalIdentificationDocumentsCovariant;

        [DataMember(Name="personalIdentificationDocuments"), NoDuplicateMembers]
        public ICollection<StaffPersonalIdentificationDocument> StaffPersonalIdentificationDocuments
        {
            get { return _staffPersonalIdentificationDocuments; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffPersonalIdentificationDocument>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffPersonalIdentificationDocument)e.Item).Staff = this);
                _staffPersonalIdentificationDocuments = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffPersonalIdentificationDocument, StaffPersonalIdentificationDocument>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffPersonalIdentificationDocument)e.Item).Staff = this;
                _staffPersonalIdentificationDocumentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffPersonalIdentificationDocument> Entities.Common.EdFi.IStaff.StaffPersonalIdentificationDocuments
        {
            get { return _staffPersonalIdentificationDocumentsCovariant; }
            set { StaffPersonalIdentificationDocuments = new List<StaffPersonalIdentificationDocument>(value.Cast<StaffPersonalIdentificationDocument>()); }
        }

        private ICollection<StaffRace> _staffRaces;
        private ICollection<Entities.Common.EdFi.IStaffRace> _staffRacesCovariant;

        [DataMember(Name="races"), NoDuplicateMembers]
        public ICollection<StaffRace> StaffRaces
        {
            get { return _staffRaces; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffRace>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffRace)e.Item).Staff = this);
                _staffRaces = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffRace, StaffRace>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffRace)e.Item).Staff = this;
                _staffRacesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffRace> Entities.Common.EdFi.IStaff.StaffRaces
        {
            get { return _staffRacesCovariant; }
            set { StaffRaces = new List<StaffRace>(value.Cast<StaffRace>()); }
        }

        private ICollection<StaffRecognition> _staffRecognitions;
        private ICollection<Entities.Common.EdFi.IStaffRecognition> _staffRecognitionsCovariant;

        [DataMember(Name="recognitions"), NoDuplicateMembers]
        public ICollection<StaffRecognition> StaffRecognitions
        {
            get { return _staffRecognitions; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffRecognition>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffRecognition)e.Item).Staff = this);
                _staffRecognitions = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffRecognition, StaffRecognition>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffRecognition)e.Item).Staff = this;
                _staffRecognitionsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffRecognition> Entities.Common.EdFi.IStaff.StaffRecognitions
        {
            get { return _staffRecognitionsCovariant; }
            set { StaffRecognitions = new List<StaffRecognition>(value.Cast<StaffRecognition>()); }
        }

        private ICollection<StaffTelephone> _staffTelephones;
        private ICollection<Entities.Common.EdFi.IStaffTelephone> _staffTelephonesCovariant;

        [DataMember(Name="telephones"), NoDuplicateMembers]
        public ICollection<StaffTelephone> StaffTelephones
        {
            get { return _staffTelephones; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffTelephone>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffTelephone)e.Item).Staff = this);
                _staffTelephones = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffTelephone, StaffTelephone>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffTelephone)e.Item).Staff = this;
                _staffTelephonesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffTelephone> Entities.Common.EdFi.IStaff.StaffTelephones
        {
            get { return _staffTelephonesCovariant; }
            set { StaffTelephones = new List<StaffTelephone>(value.Cast<StaffTelephone>()); }
        }

        private ICollection<StaffTribalAffiliation> _staffTribalAffiliations;
        private ICollection<Entities.Common.EdFi.IStaffTribalAffiliation> _staffTribalAffiliationsCovariant;

        [DataMember(Name="tribalAffiliations"), NoDuplicateMembers]
        public ICollection<StaffTribalAffiliation> StaffTribalAffiliations
        {
            get { return _staffTribalAffiliations; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffTribalAffiliation>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffTribalAffiliation)e.Item).Staff = this);
                _staffTribalAffiliations = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffTribalAffiliation, StaffTribalAffiliation>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffTribalAffiliation)e.Item).Staff = this;
                _staffTribalAffiliationsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffTribalAffiliation> Entities.Common.EdFi.IStaff.StaffTribalAffiliations
        {
            get { return _staffTribalAffiliationsCovariant; }
            set { StaffTribalAffiliations = new List<StaffTribalAffiliation>(value.Cast<StaffTribalAffiliation>()); }
        }

        private ICollection<StaffVisa> _staffVisas;
        private ICollection<Entities.Common.EdFi.IStaffVisa> _staffVisasCovariant;

        [DataMember(Name="visas"), NoDuplicateMembers]
        public ICollection<StaffVisa> StaffVisas
        {
            get { return _staffVisas; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffVisa>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffVisa)e.Item).Staff = this);
                _staffVisas = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffVisa, StaffVisa>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffVisa)e.Item).Staff = this;
                _staffVisasCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffVisa> Entities.Common.EdFi.IStaff.StaffVisas
        {
            get { return _staffVisasCovariant; }
            set { StaffVisas = new List<StaffVisa>(value.Cast<StaffVisa>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffAddresses != null) foreach (var item in _staffAddresses)
            {
                item.Staff = this;
            }

            if (_staffCredentials != null) foreach (var item in _staffCredentials)
            {
                item.Staff = this;
            }

            if (_staffElectronicMails != null) foreach (var item in _staffElectronicMails)
            {
                item.Staff = this;
            }

            if (_staffIdentificationCodes != null) foreach (var item in _staffIdentificationCodes)
            {
                item.Staff = this;
            }

            if (_staffIdentificationDocuments != null) foreach (var item in _staffIdentificationDocuments)
            {
                item.Staff = this;
            }

            if (_staffInternationalAddresses != null) foreach (var item in _staffInternationalAddresses)
            {
                item.Staff = this;
            }

            if (_staffLanguages != null) foreach (var item in _staffLanguages)
            {
                item.Staff = this;
            }

            if (_staffOtherNames != null) foreach (var item in _staffOtherNames)
            {
                item.Staff = this;
            }

            if (_staffPersonalIdentificationDocuments != null) foreach (var item in _staffPersonalIdentificationDocuments)
            {
                item.Staff = this;
            }

            if (_staffRaces != null) foreach (var item in _staffRaces)
            {
                item.Staff = this;
            }

            if (_staffRecognitions != null) foreach (var item in _staffRecognitions)
            {
                item.Staff = this;
            }

            if (_staffTelephones != null) foreach (var item in _staffTelephones)
            {
                item.Staff = this;
            }

            if (_staffTribalAffiliations != null) foreach (var item in _staffTribalAffiliations)
            {
                item.Staff = this;
            }

            if (_staffVisas != null) foreach (var item in _staffVisas)
            {
                item.Staff = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaff)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffMapper.MapTo(this, (Entities.Common.EdFi.IStaff)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsBirthDateSupported                                   { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsCitizenshipStatusDescriptorSupported                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsFirstNameSupported                                   { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsGenerationCodeSuffixSupported                        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsHighestCompletedLevelOfEducationDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsHighlyQualifiedTeacherSupported                      { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsHispanicLatinoEthnicitySupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsLastSurnameSupported                                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsLoginIdSupported                                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsMaidenNameSupported                                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsMiddleNameSupported                                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsOldEthnicityDescriptorSupported                      { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsPersonalTitlePrefixSupported                         { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsSexDescriptorSupported                               { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffAddressesSupported                              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffCredentialsSupported                            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffElectronicMailsSupported                        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationCodesSupported                    { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationDocumentsSupported                { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffInternationalAddressesSupported                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffLanguagesSupported                              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffOtherNamesSupported                             { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffPersonalIdentificationDocumentsSupported        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRacesSupported                                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRecognitionsSupported                           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTelephonesSupported                             { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTribalAffiliationsSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffUniqueIdSupported                               { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffVisasSupported                                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsYearsOfPriorProfessionalExperienceSupported          { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsYearsOfPriorTeachingExperienceSupported              { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.EdFi.IStaffAddress, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffAddressIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffCredential, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffCredentialIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffElectronicMail, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffElectronicMailIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffIdentificationCode, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationCodeIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffIdentificationDocument, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationDocumentIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffInternationalAddress, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffInternationalAddressIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffLanguage, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffLanguageIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffOtherName, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffOtherNameIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffPersonalIdentificationDocument, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffPersonalIdentificationDocumentIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffRace, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRaceIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffRecognition, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRecognitionIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffTelephone, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTelephoneIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffTribalAffiliation, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTribalAffiliationIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffVisa, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffVisaIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPutPostRequestValidator : FluentValidation.AbstractValidator<Staff>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<Staff> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var staffAddressesValidator = new StaffAddressPutPostRequestValidator();

            foreach (var item in instance.StaffAddresses)
            {
                var validationResult = staffAddressesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffCredentialsValidator = new StaffCredentialPutPostRequestValidator();

            foreach (var item in instance.StaffCredentials)
            {
                var validationResult = staffCredentialsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffElectronicMailsValidator = new StaffElectronicMailPutPostRequestValidator();

            foreach (var item in instance.StaffElectronicMails)
            {
                var validationResult = staffElectronicMailsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffIdentificationCodesValidator = new StaffIdentificationCodePutPostRequestValidator();

            foreach (var item in instance.StaffIdentificationCodes)
            {
                var validationResult = staffIdentificationCodesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffIdentificationDocumentsValidator = new StaffIdentificationDocumentPutPostRequestValidator();

            foreach (var item in instance.StaffIdentificationDocuments)
            {
                var validationResult = staffIdentificationDocumentsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffInternationalAddressesValidator = new StaffInternationalAddressPutPostRequestValidator();

            foreach (var item in instance.StaffInternationalAddresses)
            {
                var validationResult = staffInternationalAddressesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffLanguagesValidator = new StaffLanguagePutPostRequestValidator();

            foreach (var item in instance.StaffLanguages)
            {
                var validationResult = staffLanguagesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffOtherNamesValidator = new StaffOtherNamePutPostRequestValidator();

            foreach (var item in instance.StaffOtherNames)
            {
                var validationResult = staffOtherNamesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffPersonalIdentificationDocumentsValidator = new StaffPersonalIdentificationDocumentPutPostRequestValidator();

            foreach (var item in instance.StaffPersonalIdentificationDocuments)
            {
                var validationResult = staffPersonalIdentificationDocumentsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffRacesValidator = new StaffRacePutPostRequestValidator();

            foreach (var item in instance.StaffRaces)
            {
                var validationResult = staffRacesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffRecognitionsValidator = new StaffRecognitionPutPostRequestValidator();

            foreach (var item in instance.StaffRecognitions)
            {
                var validationResult = staffRecognitionsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffTelephonesValidator = new StaffTelephonePutPostRequestValidator();

            foreach (var item in instance.StaffTelephones)
            {
                var validationResult = staffTelephonesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffTribalAffiliationsValidator = new StaffTribalAffiliationPutPostRequestValidator();

            foreach (var item in instance.StaffTribalAffiliations)
            {
                var validationResult = staffTribalAffiliationsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffVisasValidator = new StaffVisaPutPostRequestValidator();

            foreach (var item in instance.StaffVisas)
            {
                var validationResult = staffVisasValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffAddress table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffAddress : Entities.Common.EdFi.IStaffAddress, Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StaffAddress()
        {
            StaffAddressPeriods = new List<StaffAddressPeriod>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffAddress.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressTypeDescriptor"), NaturalKeyMember]
        public string AddressTypeDescriptor { get; set; }

        /// <summary>
        /// The name of the city in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="city"), NaturalKeyMember]
        public string City { get; set; }

        /// <summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="postalCode"), NaturalKeyMember]
        public string PostalCode { get; set; }

        /// <summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="stateAbbreviationDescriptor"), NaturalKeyMember]
        public string StateAbbreviationDescriptor { get; set; }

        /// <summary>
        /// The street number and street name or post office box number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="streetNumberName"), NaturalKeyMember]
        public string StreetNumberName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffAddress;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).AddressTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffAddress).AddressTypeDescriptor.Equals(compareTo.AddressTypeDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).City == null
                || !(this as Entities.Common.EdFi.IStaffAddress).City.Equals(compareTo.City)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).PostalCode == null
                || !(this as Entities.Common.EdFi.IStaffAddress).PostalCode.Equals(compareTo.PostalCode)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).StateAbbreviationDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffAddress).StateAbbreviationDescriptor.Equals(compareTo.StateAbbreviationDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).StreetNumberName == null
                || !(this as Entities.Common.EdFi.IStaffAddress).StreetNumberName.Equals(compareTo.StreetNumberName)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).AddressTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).AddressTypeDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).City != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).City.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).PostalCode != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).PostalCode.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).StateAbbreviationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).StateAbbreviationDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).StreetNumberName != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).StreetNumberName.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The apartment, room, or suite number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="apartmentRoomSuiteNumber")]
        public string ApartmentRoomSuiteNumber { get; set; }

        /// <summary>
        /// The number of the building on the site, if more than one building shares the same address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="buildingSiteNumber")]
        public string BuildingSiteNumber { get; set; }

        /// <summary>
        /// The congressional district in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="congressionalDistrict")]
        public string CongressionalDistrict { get; set; }

        /// <summary>
        /// The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \"first-order subdivisions\" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="countyFIPSCode")]
        public string CountyFIPSCode { get; set; }

        /// <summary>
        /// An indication that the address should not be published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// A general geographic indicator that categorizes U.S. territory (e.g., City, Suburban).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="localeDescriptor")]
        public string LocaleDescriptor { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }

        /// <summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in                        'which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nameOfCounty")]
        public string NameOfCounty { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffAddress")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffAddressPeriod> _staffAddressPeriods;
        private ICollection<Entities.Common.EdFi.IStaffAddressPeriod> _staffAddressPeriodsCovariant;

        [DataMember(Name="periods"), NoDuplicateMembers]
        public ICollection<StaffAddressPeriod> StaffAddressPeriods
        {
            get { return _staffAddressPeriods; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffAddressPeriod>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffAddressPeriod)e.Item).StaffAddress = this);
                _staffAddressPeriods = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffAddressPeriod, StaffAddressPeriod>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffAddressPeriod)e.Item).StaffAddress = this;
                _staffAddressPeriodsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffAddressPeriod> Entities.Common.EdFi.IStaffAddress.StaffAddressPeriods
        {
            get { return _staffAddressPeriodsCovariant; }
            set { StaffAddressPeriods = new List<StaffAddressPeriod>(value.Cast<StaffAddressPeriod>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffAddressPeriods != null) foreach (var item in _staffAddressPeriods)
            {
                item.StaffAddress = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffAddressMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffAddress)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffAddressMapper.MapTo(this, (Entities.Common.EdFi.IStaffAddress)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsApartmentRoomSuiteNumberSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsBuildingSiteNumberSupported        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsCongressionalDistrictSupported     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsCountyFIPSCodeSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsLatitudeSupported                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsLocaleDescriptorSupported          { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsLongitudeSupported                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsNameOfCountySupported              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsStaffAddressPeriodsSupported       { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.EdFi.IStaffAddressPeriod, bool> Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsStaffAddressPeriodIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffAddressPutPostRequestValidator : FluentValidation.AbstractValidator<StaffAddress>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffAddress> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var staffAddressPeriodsValidator = new StaffAddressPeriodPutPostRequestValidator();

            foreach (var item in instance.StaffAddressPeriods)
            {
                var validationResult = staffAddressPeriodsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffAddressPeriod table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffAddressPeriod : Entities.Common.EdFi.IStaffAddressPeriod, Entities.Common.EdFi.IStaffAddressPeriodSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaffAddress _staffAddress;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaffAddress Entities.Common.EdFi.IStaffAddressPeriod.StaffAddress
        {
            get { return _staffAddress; }
            set { SetStaffAddress(value); }
        }

        internal Entities.Common.EdFi.IStaffAddress StaffAddress
        {
            set { SetStaffAddress(value); }
        }

        private void SetStaffAddress(Entities.Common.EdFi.IStaffAddress value)
        {
            _staffAddress = value;
        }

        /// <summary>
        /// The month, day, and year for the start of the period.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate"), NaturalKeyMember][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime BeginDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffAddressPeriod;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staffAddress == null || !_staffAddress.Equals(compareTo.StaffAddress))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddressPeriod).BeginDate == null
                || !(this as Entities.Common.EdFi.IStaffAddressPeriod).BeginDate.Equals(compareTo.BeginDate)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffAddress != null)
                    hash = hash * 23 + _staffAddress.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddressPeriod).BeginDate != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddressPeriod).BeginDate.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year for the end of the period.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffAddressPeriod")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffAddressPeriodMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffAddressPeriod)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffAddressPeriodMapper.MapTo(this, (Entities.Common.EdFi.IStaffAddressPeriod)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffAddressPeriodSynchronizationSourceSupport.IsEndDateSupported  { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffAddressPeriodPutPostRequestValidator : FluentValidation.AbstractValidator<StaffAddressPeriod>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffAddressPeriod> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffCredential table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffCredential : Entities.Common.EdFi.IStaffCredential, Entities.Common.EdFi.IStaffCredentialSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _credentialReferenceExplicitlyAssigned;
        private Credential.EdFi.CredentialReference _credentialReference;
        private Credential.EdFi.CredentialReference ImplicitCredentialReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_credentialReference == null && !_credentialReferenceExplicitlyAssigned)
                    _credentialReference = new Credential.EdFi.CredentialReference();

                return _credentialReference;
            }
        }

        [DataMember(Name="credentialReference")][NaturalKeyMember]
        public Credential.EdFi.CredentialReference CredentialReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitCredentialReference != null
                    && (_credentialReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitCredentialReference.IsReferenceFullyDefined()))
                    return ImplicitCredentialReference;

                return null;
            }
            set
            {
                _credentialReferenceExplicitlyAssigned = true;
                _credentialReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffCredential.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// Identifier or serial number assigned to the credential.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.EdFi.IStaffCredential.CredentialIdentifier
        {
            get
            {
                if (ImplicitCredentialReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCredentialReference.IsReferenceFullyDefined()))
                    return ImplicitCredentialReference.CredentialIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Credential
                _credentialReferenceExplicitlyAssigned = false;
                ImplicitCredentialReference.CredentialIdentifier = value;
            }
        }

        /// <summary>
        /// The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued.
        /// </summary>

        // IS in a reference (StaffCredential.StateOfIssueStateAbbreviationDescriptorId), IS a lookup column 
        string Entities.Common.EdFi.IStaffCredential.StateOfIssueStateAbbreviationDescriptor
        {
            get
            {
                if (ImplicitCredentialReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCredentialReference.IsReferenceFullyDefined()))
                    return ImplicitCredentialReference.StateOfIssueStateAbbreviationDescriptor;

                return null;
            }
            set
            {
                ImplicitCredentialReference.StateOfIssueStateAbbreviationDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffCredential;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Referenced Property
            if ((this as Entities.Common.EdFi.IStaffCredential).CredentialIdentifier == null
                || !(this as Entities.Common.EdFi.IStaffCredential).CredentialIdentifier.Equals(compareTo.CredentialIdentifier)) 
                return false;
 
            // Unified Type Property
            if ((this as Entities.Common.EdFi.IStaffCredential).StateOfIssueStateAbbreviationDescriptor == null
                ||!(this as Entities.Common.EdFi.IStaffCredential).StateOfIssueStateAbbreviationDescriptor.Equals(compareTo.StateOfIssueStateAbbreviationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                //Referenced Property
                if ((this as Entities.Common.EdFi.IStaffCredential).CredentialIdentifier != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffCredential).CredentialIdentifier.GetHashCode();
 
                //Unified Type Property
                if ((this as Entities.Common.EdFi.IStaffCredential).StateOfIssueStateAbbreviationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffCredential).StateOfIssueStateAbbreviationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffCredential")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffCredentialMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffCredential)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffCredentialMapper.MapTo(this, (Entities.Common.EdFi.IStaffCredential)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.EdFi.IStaffCredential.CredentialResourceId 
        { 
            get { return null; }
            set { ImplicitCredentialReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.EdFi.IStaffCredential.CredentialDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitCredentialReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffCredentialPutPostRequestValidator : FluentValidation.AbstractValidator<StaffCredential>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffCredential> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffElectronicMail table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffElectronicMail : Entities.Common.EdFi.IStaffElectronicMail, Entities.Common.EdFi.IStaffElectronicMailSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffElectronicMail.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The electronic mail (e-mail) address listed for an individual or organization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="electronicMailAddress"), NaturalKeyMember]
        public string ElectronicMailAddress { get; set; }

        /// <summary>
        /// The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="electronicMailTypeDescriptor"), NaturalKeyMember]
        public string ElectronicMailTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffElectronicMail;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailAddress == null
                || !(this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailAddress.Equals(compareTo.ElectronicMailAddress)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailTypeDescriptor.Equals(compareTo.ElectronicMailTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailAddress != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailAddress.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication that the electronic email address should not be published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="primaryEmailAddressIndicator")]
        public bool? PrimaryEmailAddressIndicator { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffElectronicMail")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffElectronicMailMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffElectronicMail)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffElectronicMailMapper.MapTo(this, (Entities.Common.EdFi.IStaffElectronicMail)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffElectronicMailSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported         { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffElectronicMailSynchronizationSourceSupport.IsPrimaryEmailAddressIndicatorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffElectronicMailPutPostRequestValidator : FluentValidation.AbstractValidator<StaffElectronicMail>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffElectronicMail> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffIdentificationCode table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffIdentificationCode : Entities.Common.EdFi.IStaffIdentificationCode, Entities.Common.EdFi.IStaffIdentificationCodeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffIdentificationCode.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a staff member.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="staffIdentificationSystemDescriptor"), NaturalKeyMember]
        public string StaffIdentificationSystemDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffIdentificationCode;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffIdentificationCode).StaffIdentificationSystemDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffIdentificationCode).StaffIdentificationSystemDescriptor.Equals(compareTo.StaffIdentificationSystemDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffIdentificationCode).StaffIdentificationSystemDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffIdentificationCode).StaffIdentificationSystemDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The organization code or name assigning the staff Identification Code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="assigningOrganizationIdentificationCode")]
        public string AssigningOrganizationIdentificationCode { get; set; }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="identificationCode")]
        public string IdentificationCode { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffIdentificationCode")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffIdentificationCodeMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffIdentificationCode)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffIdentificationCodeMapper.MapTo(this, (Entities.Common.EdFi.IStaffIdentificationCode)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffIdentificationCodeSynchronizationSourceSupport.IsAssigningOrganizationIdentificationCodeSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationCodeSynchronizationSourceSupport.IsIdentificationCodeSupported                       { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffIdentificationCodePutPostRequestValidator : FluentValidation.AbstractValidator<StaffIdentificationCode>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffIdentificationCode> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffIdentificationDocument table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffIdentificationDocument : Entities.Common.EdFi.IStaffIdentificationDocument, Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffIdentificationDocument.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The primary function of the document used for establishing identity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="identificationDocumentUseDescriptor"), NaturalKeyMember]
        public string IdentificationDocumentUseDescriptor { get; set; }

        /// <summary>
        /// The category of the document relative to its purpose.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="personalInformationVerificationDescriptor"), NaturalKeyMember]
        public string PersonalInformationVerificationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffIdentificationDocument;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffIdentificationDocument).IdentificationDocumentUseDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffIdentificationDocument).IdentificationDocumentUseDescriptor.Equals(compareTo.IdentificationDocumentUseDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffIdentificationDocument).PersonalInformationVerificationDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffIdentificationDocument).PersonalInformationVerificationDescriptor.Equals(compareTo.PersonalInformationVerificationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffIdentificationDocument).IdentificationDocumentUseDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffIdentificationDocument).IdentificationDocumentUseDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffIdentificationDocument).PersonalInformationVerificationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffIdentificationDocument).PersonalInformationVerificationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The day when the document  expires, if null then never expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentExpirationDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? DocumentExpirationDate { get; set; }

        /// <summary>
        /// The title of the document given by the issuer.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentTitle")]
        public string DocumentTitle { get; set; }

        /// <summary>
        /// Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="issuerCountryDescriptor")]
        public string IssuerCountryDescriptor { get; set; }

        /// <summary>
        /// The unique identifier on the issuer's identification system.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerDocumentIdentificationCode")]
        public string IssuerDocumentIdentificationCode { get; set; }

        /// <summary>
        /// Name of the entity or institution that issued the document.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffIdentificationDocument")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffIdentificationDocumentMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffIdentificationDocumentMapper.MapTo(this, (Entities.Common.EdFi.IStaffIdentificationDocument)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported                        { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffIdentificationDocumentPutPostRequestValidator : FluentValidation.AbstractValidator<StaffIdentificationDocument>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffIdentificationDocument> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffInternationalAddress table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffInternationalAddress : Entities.Common.EdFi.IStaffInternationalAddress, Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffInternationalAddress.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The type of address listed for an individual or organization. For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressTypeDescriptor"), NaturalKeyMember]
        public string AddressTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffInternationalAddress;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffInternationalAddress).AddressTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffInternationalAddress).AddressTypeDescriptor.Equals(compareTo.AddressTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffInternationalAddress).AddressTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffInternationalAddress).AddressTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The first line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine1")]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// The second line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine2")]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// The third line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine3")]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// The fourth line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine4")]
        public string AddressLine4 { get; set; }

        /// <summary>
        /// The first date the address is valid. For physical addresses, the date the person moved to that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The name of the country. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="countryDescriptor")]
        public string CountryDescriptor { get; set; }

        /// <summary>
        /// The last date the address is valid. For physical addresses, this would be the date the person moved from that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffInternationalAddress")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffInternationalAddressMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffInternationalAddress)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffInternationalAddressMapper.MapTo(this, (Entities.Common.EdFi.IStaffInternationalAddress)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine1Supported       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine2Supported       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine3Supported       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine4Supported       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsBeginDateSupported          { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsCountryDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsEndDateSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsLatitudeSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsLongitudeSupported          { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffInternationalAddressPutPostRequestValidator : FluentValidation.AbstractValidator<StaffInternationalAddress>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffInternationalAddress> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffLanguage table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffLanguage : Entities.Common.EdFi.IStaffLanguage, Entities.Common.EdFi.IStaffLanguageSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StaffLanguage()
        {
            StaffLanguageUses = new List<StaffLanguageUse>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffLanguage.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// A specification of which written or spoken communication is being used.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="languageDescriptor"), NaturalKeyMember]
        public string LanguageDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffLanguage;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffLanguage).LanguageDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffLanguage).LanguageDescriptor.Equals(compareTo.LanguageDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffLanguage).LanguageDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffLanguage).LanguageDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffLanguage")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffLanguageUse> _staffLanguageUses;
        private ICollection<Entities.Common.EdFi.IStaffLanguageUse> _staffLanguageUsesCovariant;

        [DataMember(Name="uses"), NoDuplicateMembers]
        public ICollection<StaffLanguageUse> StaffLanguageUses
        {
            get { return _staffLanguageUses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffLanguageUse>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffLanguageUse)e.Item).StaffLanguage = this);
                _staffLanguageUses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffLanguageUse, StaffLanguageUse>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffLanguageUse)e.Item).StaffLanguage = this;
                _staffLanguageUsesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffLanguageUse> Entities.Common.EdFi.IStaffLanguage.StaffLanguageUses
        {
            get { return _staffLanguageUsesCovariant; }
            set { StaffLanguageUses = new List<StaffLanguageUse>(value.Cast<StaffLanguageUse>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffLanguageUses != null) foreach (var item in _staffLanguageUses)
            {
                item.StaffLanguage = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffLanguageMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffLanguage)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffLanguageMapper.MapTo(this, (Entities.Common.EdFi.IStaffLanguage)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffLanguageSynchronizationSourceSupport.IsStaffLanguageUsesSupported  { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.EdFi.IStaffLanguageUse, bool> Entities.Common.EdFi.IStaffLanguageSynchronizationSourceSupport.IsStaffLanguageUseIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffLanguagePutPostRequestValidator : FluentValidation.AbstractValidator<StaffLanguage>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffLanguage> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var staffLanguageUsesValidator = new StaffLanguageUsePutPostRequestValidator();

            foreach (var item in instance.StaffLanguageUses)
            {
                var validationResult = staffLanguageUsesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffLanguageUse table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffLanguageUse : Entities.Common.EdFi.IStaffLanguageUse, Entities.Common.EdFi.IStaffLanguageUseSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaffLanguage _staffLanguage;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaffLanguage Entities.Common.EdFi.IStaffLanguageUse.StaffLanguage
        {
            get { return _staffLanguage; }
            set { SetStaffLanguage(value); }
        }

        internal Entities.Common.EdFi.IStaffLanguage StaffLanguage
        {
            set { SetStaffLanguage(value); }
        }

        private void SetStaffLanguage(Entities.Common.EdFi.IStaffLanguage value)
        {
            _staffLanguage = value;
        }

        /// <summary>
        /// A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="languageUseDescriptor"), NaturalKeyMember]
        public string LanguageUseDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffLanguageUse;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staffLanguage == null || !_staffLanguage.Equals(compareTo.StaffLanguage))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffLanguageUse).LanguageUseDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffLanguageUse).LanguageUseDescriptor.Equals(compareTo.LanguageUseDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffLanguage != null)
                    hash = hash * 23 + _staffLanguage.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffLanguageUse).LanguageUseDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffLanguageUse).LanguageUseDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffLanguageUse")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffLanguageUseMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffLanguageUse)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffLanguageUseMapper.MapTo(this, (Entities.Common.EdFi.IStaffLanguageUse)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffLanguageUsePutPostRequestValidator : FluentValidation.AbstractValidator<StaffLanguageUse>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffLanguageUse> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffOtherName table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffOtherName : Entities.Common.EdFi.IStaffOtherName, Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffOtherName.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The types of alternate names for a person.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="otherNameTypeDescriptor"), NaturalKeyMember]
        public string OtherNameTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffOtherName;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffOtherName).OtherNameTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffOtherName).OtherNameTypeDescriptor.Equals(compareTo.OtherNameTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffOtherName).OtherNameTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffOtherName).OtherNameTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffOtherName")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffOtherNameMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffOtherName)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffOtherNameMapper.MapTo(this, (Entities.Common.EdFi.IStaffOtherName)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsFirstNameSupported             { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsGenerationCodeSuffixSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsLastSurnameSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsMiddleNameSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsPersonalTitlePrefixSupported   { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffOtherNamePutPostRequestValidator : FluentValidation.AbstractValidator<StaffOtherName>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffOtherName> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffPersonalIdentificationDocument table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffPersonalIdentificationDocument : Entities.Common.EdFi.IStaffPersonalIdentificationDocument, Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffPersonalIdentificationDocument.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The primary function of the document used for establishing identity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="identificationDocumentUseDescriptor"), NaturalKeyMember]
        public string IdentificationDocumentUseDescriptor { get; set; }

        /// <summary>
        /// The category of the document relative to its purpose.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="personalInformationVerificationDescriptor"), NaturalKeyMember]
        public string PersonalInformationVerificationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffPersonalIdentificationDocument;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).IdentificationDocumentUseDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).IdentificationDocumentUseDescriptor.Equals(compareTo.IdentificationDocumentUseDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).PersonalInformationVerificationDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).PersonalInformationVerificationDescriptor.Equals(compareTo.PersonalInformationVerificationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).IdentificationDocumentUseDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).IdentificationDocumentUseDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).PersonalInformationVerificationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).PersonalInformationVerificationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The day when the document  expires, if null then never expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentExpirationDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? DocumentExpirationDate { get; set; }

        /// <summary>
        /// The title of the document given by the issuer.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentTitle")]
        public string DocumentTitle { get; set; }

        /// <summary>
        /// Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="issuerCountryDescriptor")]
        public string IssuerCountryDescriptor { get; set; }

        /// <summary>
        /// The unique identifier on the issuer's identification system.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerDocumentIdentificationCode")]
        public string IssuerDocumentIdentificationCode { get; set; }

        /// <summary>
        /// Name of the entity or institution that issued the document.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffPersonalIdentificationDocument")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffPersonalIdentificationDocumentMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffPersonalIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffPersonalIdentificationDocumentMapper.MapTo(this, (Entities.Common.EdFi.IStaffPersonalIdentificationDocument)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported                        { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPersonalIdentificationDocumentPutPostRequestValidator : FluentValidation.AbstractValidator<StaffPersonalIdentificationDocument>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffPersonalIdentificationDocument> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffRace table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffRace : Entities.Common.EdFi.IStaffRace, Entities.Common.EdFi.IStaffRaceSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffRace.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The general racial category which most clearly reflects the individual's recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="raceDescriptor"), NaturalKeyMember]
        public string RaceDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffRace;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffRace).RaceDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffRace).RaceDescriptor.Equals(compareTo.RaceDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffRace).RaceDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffRace).RaceDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffRace")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffRaceMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffRace)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffRaceMapper.MapTo(this, (Entities.Common.EdFi.IStaffRace)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffRacePutPostRequestValidator : FluentValidation.AbstractValidator<StaffRace>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffRace> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffRecognition table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffRecognition : Entities.Common.EdFi.IStaffRecognition, Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffRecognition.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The nature of recognition given to the learner for accomplishments in a co-curricular, or extra-curricular activity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="recognitionTypeDescriptor"), NaturalKeyMember]
        public string RecognitionTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffRecognition;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffRecognition).RecognitionTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffRecognition).RecognitionTypeDescriptor.Equals(compareTo.RecognitionTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffRecognition).RecognitionTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffRecognition).RecognitionTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The category of achievement attributed to the learner.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="achievementCategoryDescriptor")]
        public string AchievementCategoryDescriptor { get; set; }

        /// <summary>
        /// The system that defines the categories by which an achievement is attributed to the learner.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="achievementCategorySystem")]
        public string AchievementCategorySystem { get; set; }

        /// <summary>
        /// The title assigned to the achievement.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="achievementTitle")]
        public string AchievementTitle { get; set; }

        /// <summary>
        /// The criteria for competency-based completion of the achievement/award.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="criteria")]
        public string Criteria { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="criteriaURL")]
        public string CriteriaURL { get; set; }

        /// <summary>
        /// A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="evidenceStatement")]
        public string EvidenceStatement { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="imageURL")]
        public string ImageURL { get; set; }

        /// <summary>
        /// The name of the agent, entity, or institution issuing the element.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) from which the award was issued.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerOriginURL")]
        public string IssuerOriginURL { get; set; }

        /// <summary>
        /// The date the recognition was awarded or earned.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="recognitionAwardDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? RecognitionAwardDate { get; set; }

        /// <summary>
        /// Date on which the award expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="recognitionAwardExpiresDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? RecognitionAwardExpiresDate { get; set; }

        /// <summary>
        /// A description of the type of academic distinctions earned by or awarded to the individual.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="recognitionDescription")]
        public string RecognitionDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffRecognition")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffRecognitionMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffRecognition)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffRecognitionMapper.MapTo(this, (Entities.Common.EdFi.IStaffRecognition)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsAchievementCategoryDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsAchievementCategorySystemSupported      { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsAchievementTitleSupported               { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsCriteriaSupported                       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsCriteriaURLSupported                    { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsEvidenceStatementSupported              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsImageURLSupported                       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsIssuerNameSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsIssuerOriginURLSupported                { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsRecognitionAwardDateSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsRecognitionAwardExpiresDateSupported    { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsRecognitionDescriptionSupported         { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffRecognitionPutPostRequestValidator : FluentValidation.AbstractValidator<StaffRecognition>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffRecognition> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffTelephone table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffTelephone : Entities.Common.EdFi.IStaffTelephone, Entities.Common.EdFi.IStaffTelephoneSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffTelephone.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The telephone number including the area code, and extension, if applicable.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="telephoneNumber"), NaturalKeyMember]
        public string TelephoneNumber { get; set; }

        /// <summary>
        /// The type of communication number listed for an individual or organization.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="telephoneNumberTypeDescriptor"), NaturalKeyMember]
        public string TelephoneNumberTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffTelephone;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumber == null
                || !(this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumber.Equals(compareTo.TelephoneNumber)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumberTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumberTypeDescriptor.Equals(compareTo.TelephoneNumberTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumber != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumber.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumberTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumberTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication that the telephone number should not be published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="orderOfPriority")]
        public int? OrderOfPriority { get; set; }

        /// <summary>
        /// An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="textMessageCapabilityIndicator")]
        public bool? TextMessageCapabilityIndicator { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffTelephone")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffTelephoneMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffTelephone)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffTelephoneMapper.MapTo(this, (Entities.Common.EdFi.IStaffTelephone)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffTelephoneSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffTelephoneSynchronizationSourceSupport.IsOrderOfPrioritySupported                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffTelephoneSynchronizationSourceSupport.IsTextMessageCapabilityIndicatorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffTelephonePutPostRequestValidator : FluentValidation.AbstractValidator<StaffTelephone>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffTelephone> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffTribalAffiliation table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffTribalAffiliation : Entities.Common.EdFi.IStaffTribalAffiliation, Entities.Common.EdFi.IStaffTribalAffiliationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffTribalAffiliation.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// An American Indian tribe with which the staff member is affiliated.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="tribalAffiliationDescriptor"), NaturalKeyMember]
        public string TribalAffiliationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffTribalAffiliation;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffTribalAffiliation).TribalAffiliationDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffTribalAffiliation).TribalAffiliationDescriptor.Equals(compareTo.TribalAffiliationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffTribalAffiliation).TribalAffiliationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffTribalAffiliation).TribalAffiliationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffTribalAffiliation")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffTribalAffiliationMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffTribalAffiliation)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffTribalAffiliationMapper.MapTo(this, (Entities.Common.EdFi.IStaffTribalAffiliation)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffTribalAffiliationPutPostRequestValidator : FluentValidation.AbstractValidator<StaffTribalAffiliation>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffTribalAffiliation> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffVisa table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffVisa : Entities.Common.EdFi.IStaffVisa, Entities.Common.EdFi.IStaffVisaSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffVisa.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// An indicator of a non-US citizen's Visa type.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="visaDescriptor"), NaturalKeyMember]
        public string VisaDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffVisa;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffVisa).VisaDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffVisa).VisaDescriptor.Equals(compareTo.VisaDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffVisa).VisaDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffVisa).VisaDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffVisa")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffVisaMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffVisa)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffVisaMapper.MapTo(this, (Entities.Common.EdFi.IStaffVisa)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffVisaPutPostRequestValidator : FluentValidation.AbstractValidator<StaffVisa>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffVisa> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Staff

namespace EdFi.Ods.Api.Models.Resources.Staff.EdFi.Staff_Include_All_Writable.Extensions.GrandBend
{
    /// <summary>
    /// A class which represents the grandbend.StaffExtension table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffExtension : Entities.Common.GrandBend.IStaffExtension, Entities.Common.GrandBend.IStaffExtensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.GrandBend.IStaffExtension.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.GrandBend.IStaffExtension;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The date that the staff member's new hire probationary period was completed.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="probationCompleteDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? ProbationCompleteDate { get; set; }

        /// <summary>
        /// An indication as to whether the staff member is tenured.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="tenured")]
        public bool? Tenured { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.GrandBend.StaffExtensionMapper.SynchronizeTo(this, (Entities.Common.GrandBend.IStaffExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.GrandBend.StaffExtensionMapper.MapTo(this, (Entities.Common.GrandBend.IStaffExtension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.GrandBend.IStaffExtensionSynchronizationSourceSupport.IsProbationCompleteDateSupported  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IStaffExtensionSynchronizationSourceSupport.IsTenuredSupported                { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<StaffExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Staff

namespace EdFi.Ods.Api.Models.Resources.Staff.EdFi.Staff_Include_All_Writable.Extensions.Sample
{
    /// <summary>
    /// A class which represents the sample.StaffExtension table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffExtension : Entities.Common.Sample.IStaffExtension, Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StaffExtension()
        {
            StaffPets = new List<StaffPet>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.Sample.IStaffExtension.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStaffExtension;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The date the staff member adopted the first household pet.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstPetOwnedDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? FirstPetOwnedDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        /// <summary>
        /// petPreference
        /// </summary>
        [DataMember(Name = "petPreference")]
        public StaffPetPreference StaffPetPreference { get; set; }

        Entities.Common.Sample.IStaffPetPreference Entities.Common.Sample.IStaffExtension.StaffPetPreference
        {
            get { return StaffPetPreference; }
            set { StaffPetPreference = (StaffPetPreference) value; }
        }

        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffPet> _staffPets;
        private ICollection<Entities.Common.Sample.IStaffPet> _staffPetsCovariant;

        [DataMember(Name="pets"), NoDuplicateMembers]
        public ICollection<StaffPet> StaffPets
        {
            get { return _staffPets; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffPet>(value,
                    (s, e) => ((Entities.Common.Sample.IStaffPet)e.Item).StaffExtension = this);
                _staffPets = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.Sample.IStaffPet, StaffPet>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.Sample.IStaffPet)e.Item).StaffExtension = this;
                _staffPetsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.Sample.IStaffPet> Entities.Common.Sample.IStaffExtension.StaffPets
        {
            get { return _staffPetsCovariant; }
            set { StaffPets = new List<StaffPet>(value.Cast<StaffPet>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffPets != null) foreach (var item in _staffPets)
            {
                item.StaffExtension = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StaffExtensionMapper.SynchronizeTo(this, (Entities.Common.Sample.IStaffExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StaffExtensionMapper.MapTo(this, (Entities.Common.Sample.IStaffExtension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport.IsFirstPetOwnedDateSupported   { get { return true; } set { } }
        bool Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport.IsStaffPetPreferenceSupported  { get { return true; } set { } }
        bool Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport.IsStaffPetsSupported           { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.Sample.IStaffPet, bool> Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport.IsStaffPetIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<StaffExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var staffPetsValidator = new StaffPetPutPostRequestValidator();

            foreach (var item in instance.StaffPets)
            {
                var validationResult = staffPetsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the sample.StaffPet table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffPet : Entities.Common.Sample.IStaffPet, Entities.Common.Sample.IStaffPetSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.Sample.IStaffExtension _staffExtension;

        [IgnoreDataMember]
        Entities.Common.Sample.IStaffExtension Entities.Common.Sample.IStaffPet.StaffExtension
        {
            get { return _staffExtension; }
            set { SetStaffExtension(value); }
        }

        internal Entities.Common.Sample.IStaffExtension StaffExtension
        {
            set { SetStaffExtension(value); }
        }

        private void SetStaffExtension(Entities.Common.Sample.IStaffExtension value)
        {
            _staffExtension = value;
        }

        /// <summary>
        /// The pet's name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="petName"), NaturalKeyMember]
        public string PetName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStaffPet;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staffExtension == null || !_staffExtension.Equals(compareTo.StaffExtension))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.Sample.IStaffPet).PetName == null
                || !(this as Entities.Common.Sample.IStaffPet).PetName.Equals(compareTo.PetName)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffExtension != null)
                    hash = hash * 23 + _staffExtension.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.Sample.IStaffPet).PetName != null) 
                    hash = hash * 23 + (this as Entities.Common.Sample.IStaffPet).PetName.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication as to whether the pet has been spayed/neutered.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="isFixed")]
        public bool? IsFixed { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StaffPetMapper.SynchronizeTo(this, (Entities.Common.Sample.IStaffPet)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StaffPetMapper.MapTo(this, (Entities.Common.Sample.IStaffPet)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStaffPetSynchronizationSourceSupport.IsIsFixedSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPetPutPostRequestValidator : FluentValidation.AbstractValidator<StaffPet>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffPet> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the sample.StaffPetPreference table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffPetPreference : Entities.Common.Sample.IStaffPetPreference, Entities.Common.Sample.IStaffPetPreferenceSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.Sample.IStaffExtension _staffExtension;

        [IgnoreDataMember]
        Entities.Common.Sample.IStaffExtension Entities.Common.Sample.IStaffPetPreference.StaffExtension
        {
            get { return _staffExtension; }
            set { SetStaffExtension(value); }
        }

        internal Entities.Common.Sample.IStaffExtension StaffExtension
        {
            set { SetStaffExtension(value); }
        }

        private void SetStaffExtension(Entities.Common.Sample.IStaffExtension value)
        {
            _staffExtension = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStaffPetPreference;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staffExtension == null || !_staffExtension.Equals(compareTo.StaffExtension))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffExtension != null)
                    hash = hash * 23 + _staffExtension.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The preferred maximum weight of a household pet.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maximumWeight")]
        public int MaximumWeight { get; set; }

        /// <summary>
        /// The preferred minimum weight of a household pet.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="minimumWeight")]
        public int MinimumWeight { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StaffPetPreferenceMapper.SynchronizeTo(this, (Entities.Common.Sample.IStaffPetPreference)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StaffPetPreferenceMapper.MapTo(this, (Entities.Common.Sample.IStaffPetPreference)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStaffPetPreferenceSynchronizationSourceSupport.IsMaximumWeightSupported  { get { return true; } set { } }
        bool Entities.Common.Sample.IStaffPetPreferenceSynchronizationSourceSupport.IsMinimumWeightSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPetPreferencePutPostRequestValidator : FluentValidation.AbstractValidator<StaffPetPreference>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffPetPreference> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Applicant

namespace EdFi.Ods.Api.Models.Resources.Applicant.GrandBend.Staff_and_Prospect_MixedInclude_Readable
{
    /// <summary>
    /// Represents a reference to the Applicant resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantReference
    {
        [DataMember(Name="applicantIdentifier"), NaturalKeyMember]
        public string ApplicantIdentifier { get; set; }

        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return ApplicantIdentifier != default(string) && EducationOrganizationId != default(int);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "Applicant",
                Href = $"/grand-bend/applicants/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new Common.Models.Domain.FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the grandbend.Applicant table of the Applicant aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class Applicant : Entities.Common.GrandBend.IApplicant, IHasETag, Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Applicant()
        {
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Applicant resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EdFi.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EdFi.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EdFi.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EdFi.EducationOrganizationReference EducationOrganizationReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set
            {
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to an applicant.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="applicantIdentifier"), NaturalKeyMember]
        public string ApplicantIdentifier { get; set; }

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int Entities.Common.GrandBend.IApplicant.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.GrandBend.IApplicant;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
 
            // Standard Property
            if ((this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier == null
                || !(this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier.Equals(compareTo.ApplicantIdentifier)) 
                return false;
 
            // Referenced Property
            if ((this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId == null
                || !(this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId.Equals(compareTo.EducationOrganizationId)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier != null) 
                    hash = hash * 23 + (this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier.GetHashCode();
 
                //Referenced Property
                if ((this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        DateTime? Entities.Common.GrandBend.IApplicant.BirthDate
        {
            get { return default(DateTime?); }
            set { }
        }

        /// <summary>
        /// An indicator of whether or not the person is a U.S. citizen.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="citizenshipStatusDescriptor")]
        public string CitizenshipStatusDescriptor { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.GenerationCodeSuffix
        {
            get { return default(string); }
            set { }
        }

        // IS a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.HighestCompletedLevelOfEducationDescriptor
        {
            get { return null; }
            set { }
        }

        // IS a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.HighlyQualifiedAcademicSubjectDescriptor
        {
            get { return null; }
            set { }
        }

        /// <summary>
        /// An indication of whether a teacher applicant is classified as highly qualified for his/her prospective assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections to be taught.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="highlyQualifiedTeacher")]
        public bool? HighlyQualifiedTeacher { get; set; }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        bool? Entities.Common.GrandBend.IApplicant.HispanicLatinoEthnicity
        {
            get { return default(bool?); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.LastSurname
        {
            get { return default(string); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.LoginId
        {
            get { return default(string); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.MaidenName
        {
            get { return default(string); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.MiddleName
        {
            get { return default(string); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.PersonalTitlePrefix
        {
            get { return default(string); }
            set { }
        }

        // IS a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.SexDescriptor
        {
            get { return null; }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        decimal? Entities.Common.GrandBend.IApplicant.YearsOfPriorProfessionalExperience
        {
            get { return default(decimal?); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        decimal? Entities.Common.GrandBend.IApplicant.YearsOfPriorTeachingExperience
        {
            get { return default(decimal?); }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.GrandBend.IApplicantAddress> Entities.Common.GrandBend.IApplicant.ApplicantAddresses
        {
            get { return null; }
            set { }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.GrandBend.ApplicantMapper.SynchronizeTo(this, (Entities.Common.GrandBend.IApplicant)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.GrandBend.ApplicantMapper.MapTo(this, (Entities.Common.GrandBend.IApplicant)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsApplicantAddressesSupported                          { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsBirthDateSupported                                   { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsCitizenshipStatusDescriptorSupported                 { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsFirstNameSupported                                   { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsGenerationCodeSuffixSupported                        { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHighestCompletedLevelOfEducationDescriptorSupported  { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHighlyQualifiedAcademicSubjectDescriptorSupported    { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHighlyQualifiedTeacherSupported                      { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHispanicLatinoEthnicitySupported                     { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsLastSurnameSupported                                 { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsLoginIdSupported                                     { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsMaidenNameSupported                                  { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsMiddleNameSupported                                  { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsPersonalTitlePrefixSupported                         { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsSexDescriptorSupported                               { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsYearsOfPriorProfessionalExperienceSupported          { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsYearsOfPriorTeachingExperienceSupported              { get { return false; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.GrandBend.IApplicantAddress, bool> Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsApplicantAddressIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.GrandBend.IApplicant.EducationOrganizationResourceId 
        { 
            get { return null; }
            set { ImplicitEducationOrganizationReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.GrandBend.IApplicant.EducationOrganizationDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEducationOrganizationReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantPutPostRequestValidator : FluentValidation.AbstractValidator<Applicant>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<Applicant> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Staff

namespace EdFi.Ods.Api.Models.Resources.Staff.EdFi.Staff_and_Prospect_MixedInclude_Readable
{
    /// <summary>
    /// Represents a reference to the Staff resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffReference
    {
        [DataMember(Name="staffUniqueId"), NaturalKeyMember]
        public string StaffUniqueId { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return StaffUniqueId != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "Staff",
                Href = $"/ed-fi/staffs/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new Common.Models.Domain.FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.Staff table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class Staff : Entities.Common.EdFi.IStaff, IHasETag, Entities.Common.EdFi.IStaffSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Staff()
        {
            StaffAddresses = new List<StaffAddress>();
            StaffCredentials = new List<StaffCredential>();
            StaffElectronicMails = new List<StaffElectronicMail>();
            StaffIdentificationCodes = new List<StaffIdentificationCode>();
            StaffIdentificationDocuments = new List<StaffIdentificationDocument>();
            StaffInternationalAddresses = new List<StaffInternationalAddress>();
            StaffLanguages = new List<StaffLanguage>();
            StaffOtherNames = new List<StaffOtherName>();
            StaffPersonalIdentificationDocuments = new List<StaffPersonalIdentificationDocument>();
            StaffRaces = new List<StaffRace>();
            StaffRecognitions = new List<StaffRecognition>();
            StaffTelephones = new List<StaffTelephone>();
            StaffTribalAffiliations = new List<StaffTribalAffiliation>();
            StaffVisas = new List<StaffVisa>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Staff resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to a staff.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="staffUniqueId"), NaturalKeyMember, UniqueId]
        public string StaffUniqueId { get; set; }

        string IIdentifiablePerson.UniqueId { get { return StaffUniqueId; } }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaff;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Property
            if ((this as Entities.Common.EdFi.IStaff).StaffUniqueId == null
                || !(this as Entities.Common.EdFi.IStaff).StaffUniqueId.Equals(compareTo.StaffUniqueId)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Property
                if ((this as Entities.Common.EdFi.IStaff).StaffUniqueId != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaff).StaffUniqueId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="birthDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BirthDate { get; set; }

        /// <summary>
        /// An indicator of whether or not the person is a U.S. citizen.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="citizenshipStatusDescriptor")]
        public string CitizenshipStatusDescriptor { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="highestCompletedLevelOfEducationDescriptor")]
        public string HighestCompletedLevelOfEducationDescriptor { get; set; }

        /// <summary>
        /// An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="highlyQualifiedTeacher")]
        public bool? HighlyQualifiedTeacher { get; set; }

        /// <summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="hispanicLatinoEthnicity")]
        public bool? HispanicLatinoEthnicity { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// The login ID for the user; used for security access control interface.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="loginId")]
        public string LoginId { get; set; }

        /// <summary>
        /// The person's maiden name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maidenName")]
        public string MaidenName { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// Previous definition of Ethnicity combining Hispanic/Latino and race:          1 - American Indian or Alaskan Native          2 - Asian or Pacific Islander          3 - Black, not of Hispanic origin          4 - Hispanic          5 - White, not of Hispanic origin.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="oldEthnicityDescriptor")]
        public string OldEthnicityDescriptor { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }

        /// <summary>
        /// A person's gender.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="sexDescriptor")]
        public string SexDescriptor { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a similar professional position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorProfessionalExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorProfessionalExperience { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a teaching position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorTeachingExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorTeachingExperience { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "Staff")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffAddress> _staffAddresses;
        private ICollection<Entities.Common.EdFi.IStaffAddress> _staffAddressesCovariant;

        [DataMember(Name="addresses"), NoDuplicateMembers]
        public ICollection<StaffAddress> StaffAddresses
        {
            get { return _staffAddresses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffAddress>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffAddress)e.Item).Staff = this);
                _staffAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffAddress, StaffAddress>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffAddress)e.Item).Staff = this;
                _staffAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffAddress> Entities.Common.EdFi.IStaff.StaffAddresses
        {
            get { return _staffAddressesCovariant; }
            set { StaffAddresses = new List<StaffAddress>(value.Cast<StaffAddress>()); }
        }

        private ICollection<StaffCredential> _staffCredentials;
        private ICollection<Entities.Common.EdFi.IStaffCredential> _staffCredentialsCovariant;

        [DataMember(Name="credentials"), NoDuplicateMembers]
        public ICollection<StaffCredential> StaffCredentials
        {
            get { return _staffCredentials; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffCredential>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffCredential)e.Item).Staff = this);
                _staffCredentials = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffCredential, StaffCredential>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffCredential)e.Item).Staff = this;
                _staffCredentialsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffCredential> Entities.Common.EdFi.IStaff.StaffCredentials
        {
            get { return _staffCredentialsCovariant; }
            set { StaffCredentials = new List<StaffCredential>(value.Cast<StaffCredential>()); }
        }

        private ICollection<StaffElectronicMail> _staffElectronicMails;
        private ICollection<Entities.Common.EdFi.IStaffElectronicMail> _staffElectronicMailsCovariant;

        [DataMember(Name="electronicMails"), NoDuplicateMembers]
        public ICollection<StaffElectronicMail> StaffElectronicMails
        {
            get { return _staffElectronicMails; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffElectronicMail>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffElectronicMail)e.Item).Staff = this);
                _staffElectronicMails = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffElectronicMail, StaffElectronicMail>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffElectronicMail)e.Item).Staff = this;
                _staffElectronicMailsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffElectronicMail> Entities.Common.EdFi.IStaff.StaffElectronicMails
        {
            get { return _staffElectronicMailsCovariant; }
            set { StaffElectronicMails = new List<StaffElectronicMail>(value.Cast<StaffElectronicMail>()); }
        }

        private ICollection<StaffIdentificationCode> _staffIdentificationCodes;
        private ICollection<Entities.Common.EdFi.IStaffIdentificationCode> _staffIdentificationCodesCovariant;

        [DataMember(Name="identificationCodes"), NoDuplicateMembers]
        public ICollection<StaffIdentificationCode> StaffIdentificationCodes
        {
            get { return _staffIdentificationCodes; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffIdentificationCode>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffIdentificationCode)e.Item).Staff = this);
                _staffIdentificationCodes = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffIdentificationCode, StaffIdentificationCode>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffIdentificationCode)e.Item).Staff = this;
                _staffIdentificationCodesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffIdentificationCode> Entities.Common.EdFi.IStaff.StaffIdentificationCodes
        {
            get { return _staffIdentificationCodesCovariant; }
            set { StaffIdentificationCodes = new List<StaffIdentificationCode>(value.Cast<StaffIdentificationCode>()); }
        }

        private ICollection<StaffIdentificationDocument> _staffIdentificationDocuments;
        private ICollection<Entities.Common.EdFi.IStaffIdentificationDocument> _staffIdentificationDocumentsCovariant;

        [DataMember(Name="identificationDocuments"), NoDuplicateMembers]
        public ICollection<StaffIdentificationDocument> StaffIdentificationDocuments
        {
            get { return _staffIdentificationDocuments; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffIdentificationDocument>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffIdentificationDocument)e.Item).Staff = this);
                _staffIdentificationDocuments = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffIdentificationDocument, StaffIdentificationDocument>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffIdentificationDocument)e.Item).Staff = this;
                _staffIdentificationDocumentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffIdentificationDocument> Entities.Common.EdFi.IStaff.StaffIdentificationDocuments
        {
            get { return _staffIdentificationDocumentsCovariant; }
            set { StaffIdentificationDocuments = new List<StaffIdentificationDocument>(value.Cast<StaffIdentificationDocument>()); }
        }

        private ICollection<StaffInternationalAddress> _staffInternationalAddresses;
        private ICollection<Entities.Common.EdFi.IStaffInternationalAddress> _staffInternationalAddressesCovariant;

        [DataMember(Name="internationalAddresses"), NoDuplicateMembers]
        public ICollection<StaffInternationalAddress> StaffInternationalAddresses
        {
            get { return _staffInternationalAddresses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffInternationalAddress>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffInternationalAddress)e.Item).Staff = this);
                _staffInternationalAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffInternationalAddress, StaffInternationalAddress>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffInternationalAddress)e.Item).Staff = this;
                _staffInternationalAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffInternationalAddress> Entities.Common.EdFi.IStaff.StaffInternationalAddresses
        {
            get { return _staffInternationalAddressesCovariant; }
            set { StaffInternationalAddresses = new List<StaffInternationalAddress>(value.Cast<StaffInternationalAddress>()); }
        }

        private ICollection<StaffLanguage> _staffLanguages;
        private ICollection<Entities.Common.EdFi.IStaffLanguage> _staffLanguagesCovariant;

        [DataMember(Name="languages"), NoDuplicateMembers]
        public ICollection<StaffLanguage> StaffLanguages
        {
            get { return _staffLanguages; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffLanguage>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffLanguage)e.Item).Staff = this);
                _staffLanguages = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffLanguage, StaffLanguage>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffLanguage)e.Item).Staff = this;
                _staffLanguagesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffLanguage> Entities.Common.EdFi.IStaff.StaffLanguages
        {
            get { return _staffLanguagesCovariant; }
            set { StaffLanguages = new List<StaffLanguage>(value.Cast<StaffLanguage>()); }
        }

        private ICollection<StaffOtherName> _staffOtherNames;
        private ICollection<Entities.Common.EdFi.IStaffOtherName> _staffOtherNamesCovariant;

        [DataMember(Name="otherNames"), NoDuplicateMembers]
        public ICollection<StaffOtherName> StaffOtherNames
        {
            get { return _staffOtherNames; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffOtherName>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffOtherName)e.Item).Staff = this);
                _staffOtherNames = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffOtherName, StaffOtherName>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffOtherName)e.Item).Staff = this;
                _staffOtherNamesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffOtherName> Entities.Common.EdFi.IStaff.StaffOtherNames
        {
            get { return _staffOtherNamesCovariant; }
            set { StaffOtherNames = new List<StaffOtherName>(value.Cast<StaffOtherName>()); }
        }

        private ICollection<StaffPersonalIdentificationDocument> _staffPersonalIdentificationDocuments;
        private ICollection<Entities.Common.EdFi.IStaffPersonalIdentificationDocument> _staffPersonalIdentificationDocumentsCovariant;

        [DataMember(Name="personalIdentificationDocuments"), NoDuplicateMembers]
        public ICollection<StaffPersonalIdentificationDocument> StaffPersonalIdentificationDocuments
        {
            get { return _staffPersonalIdentificationDocuments; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffPersonalIdentificationDocument>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffPersonalIdentificationDocument)e.Item).Staff = this);
                _staffPersonalIdentificationDocuments = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffPersonalIdentificationDocument, StaffPersonalIdentificationDocument>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffPersonalIdentificationDocument)e.Item).Staff = this;
                _staffPersonalIdentificationDocumentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffPersonalIdentificationDocument> Entities.Common.EdFi.IStaff.StaffPersonalIdentificationDocuments
        {
            get { return _staffPersonalIdentificationDocumentsCovariant; }
            set { StaffPersonalIdentificationDocuments = new List<StaffPersonalIdentificationDocument>(value.Cast<StaffPersonalIdentificationDocument>()); }
        }

        private ICollection<StaffRace> _staffRaces;
        private ICollection<Entities.Common.EdFi.IStaffRace> _staffRacesCovariant;

        [DataMember(Name="races"), NoDuplicateMembers]
        public ICollection<StaffRace> StaffRaces
        {
            get { return _staffRaces; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffRace>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffRace)e.Item).Staff = this);
                _staffRaces = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffRace, StaffRace>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffRace)e.Item).Staff = this;
                _staffRacesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffRace> Entities.Common.EdFi.IStaff.StaffRaces
        {
            get { return _staffRacesCovariant; }
            set { StaffRaces = new List<StaffRace>(value.Cast<StaffRace>()); }
        }

        private ICollection<StaffRecognition> _staffRecognitions;
        private ICollection<Entities.Common.EdFi.IStaffRecognition> _staffRecognitionsCovariant;

        [DataMember(Name="recognitions"), NoDuplicateMembers]
        public ICollection<StaffRecognition> StaffRecognitions
        {
            get { return _staffRecognitions; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffRecognition>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffRecognition)e.Item).Staff = this);
                _staffRecognitions = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffRecognition, StaffRecognition>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffRecognition)e.Item).Staff = this;
                _staffRecognitionsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffRecognition> Entities.Common.EdFi.IStaff.StaffRecognitions
        {
            get { return _staffRecognitionsCovariant; }
            set { StaffRecognitions = new List<StaffRecognition>(value.Cast<StaffRecognition>()); }
        }

        private ICollection<StaffTelephone> _staffTelephones;
        private ICollection<Entities.Common.EdFi.IStaffTelephone> _staffTelephonesCovariant;

        [DataMember(Name="telephones"), NoDuplicateMembers]
        public ICollection<StaffTelephone> StaffTelephones
        {
            get { return _staffTelephones; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffTelephone>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffTelephone)e.Item).Staff = this);
                _staffTelephones = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffTelephone, StaffTelephone>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffTelephone)e.Item).Staff = this;
                _staffTelephonesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffTelephone> Entities.Common.EdFi.IStaff.StaffTelephones
        {
            get { return _staffTelephonesCovariant; }
            set { StaffTelephones = new List<StaffTelephone>(value.Cast<StaffTelephone>()); }
        }

        private ICollection<StaffTribalAffiliation> _staffTribalAffiliations;
        private ICollection<Entities.Common.EdFi.IStaffTribalAffiliation> _staffTribalAffiliationsCovariant;

        [DataMember(Name="tribalAffiliations"), NoDuplicateMembers]
        public ICollection<StaffTribalAffiliation> StaffTribalAffiliations
        {
            get { return _staffTribalAffiliations; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffTribalAffiliation>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffTribalAffiliation)e.Item).Staff = this);
                _staffTribalAffiliations = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffTribalAffiliation, StaffTribalAffiliation>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffTribalAffiliation)e.Item).Staff = this;
                _staffTribalAffiliationsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffTribalAffiliation> Entities.Common.EdFi.IStaff.StaffTribalAffiliations
        {
            get { return _staffTribalAffiliationsCovariant; }
            set { StaffTribalAffiliations = new List<StaffTribalAffiliation>(value.Cast<StaffTribalAffiliation>()); }
        }

        private ICollection<StaffVisa> _staffVisas;
        private ICollection<Entities.Common.EdFi.IStaffVisa> _staffVisasCovariant;

        [DataMember(Name="visas"), NoDuplicateMembers]
        public ICollection<StaffVisa> StaffVisas
        {
            get { return _staffVisas; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffVisa>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffVisa)e.Item).Staff = this);
                _staffVisas = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffVisa, StaffVisa>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffVisa)e.Item).Staff = this;
                _staffVisasCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffVisa> Entities.Common.EdFi.IStaff.StaffVisas
        {
            get { return _staffVisasCovariant; }
            set { StaffVisas = new List<StaffVisa>(value.Cast<StaffVisa>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffAddresses != null) foreach (var item in _staffAddresses)
            {
                item.Staff = this;
            }

            if (_staffCredentials != null) foreach (var item in _staffCredentials)
            {
                item.Staff = this;
            }

            if (_staffElectronicMails != null) foreach (var item in _staffElectronicMails)
            {
                item.Staff = this;
            }

            if (_staffIdentificationCodes != null) foreach (var item in _staffIdentificationCodes)
            {
                item.Staff = this;
            }

            if (_staffIdentificationDocuments != null) foreach (var item in _staffIdentificationDocuments)
            {
                item.Staff = this;
            }

            if (_staffInternationalAddresses != null) foreach (var item in _staffInternationalAddresses)
            {
                item.Staff = this;
            }

            if (_staffLanguages != null) foreach (var item in _staffLanguages)
            {
                item.Staff = this;
            }

            if (_staffOtherNames != null) foreach (var item in _staffOtherNames)
            {
                item.Staff = this;
            }

            if (_staffPersonalIdentificationDocuments != null) foreach (var item in _staffPersonalIdentificationDocuments)
            {
                item.Staff = this;
            }

            if (_staffRaces != null) foreach (var item in _staffRaces)
            {
                item.Staff = this;
            }

            if (_staffRecognitions != null) foreach (var item in _staffRecognitions)
            {
                item.Staff = this;
            }

            if (_staffTelephones != null) foreach (var item in _staffTelephones)
            {
                item.Staff = this;
            }

            if (_staffTribalAffiliations != null) foreach (var item in _staffTribalAffiliations)
            {
                item.Staff = this;
            }

            if (_staffVisas != null) foreach (var item in _staffVisas)
            {
                item.Staff = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaff)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffMapper.MapTo(this, (Entities.Common.EdFi.IStaff)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsBirthDateSupported                                   { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsCitizenshipStatusDescriptorSupported                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsFirstNameSupported                                   { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsGenerationCodeSuffixSupported                        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsHighestCompletedLevelOfEducationDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsHighlyQualifiedTeacherSupported                      { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsHispanicLatinoEthnicitySupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsLastSurnameSupported                                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsLoginIdSupported                                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsMaidenNameSupported                                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsMiddleNameSupported                                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsOldEthnicityDescriptorSupported                      { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsPersonalTitlePrefixSupported                         { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsSexDescriptorSupported                               { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffAddressesSupported                              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffCredentialsSupported                            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffElectronicMailsSupported                        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationCodesSupported                    { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationDocumentsSupported                { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffInternationalAddressesSupported                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffLanguagesSupported                              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffOtherNamesSupported                             { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffPersonalIdentificationDocumentsSupported        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRacesSupported                                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRecognitionsSupported                           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTelephonesSupported                             { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTribalAffiliationsSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffUniqueIdSupported                               { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffVisasSupported                                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsYearsOfPriorProfessionalExperienceSupported          { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsYearsOfPriorTeachingExperienceSupported              { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.EdFi.IStaffAddress, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffAddressIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffCredential, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffCredentialIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffElectronicMail, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffElectronicMailIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffIdentificationCode, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationCodeIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffIdentificationDocument, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationDocumentIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffInternationalAddress, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffInternationalAddressIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffLanguage, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffLanguageIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffOtherName, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffOtherNameIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffPersonalIdentificationDocument, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffPersonalIdentificationDocumentIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffRace, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRaceIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffRecognition, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRecognitionIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffTelephone, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTelephoneIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffTribalAffiliation, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTribalAffiliationIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffVisa, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffVisaIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPutPostRequestValidator : FluentValidation.AbstractValidator<Staff>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<Staff> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var staffAddressesValidator = new StaffAddressPutPostRequestValidator();

            foreach (var item in instance.StaffAddresses)
            {
                var validationResult = staffAddressesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffCredentialsValidator = new StaffCredentialPutPostRequestValidator();

            foreach (var item in instance.StaffCredentials)
            {
                var validationResult = staffCredentialsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffElectronicMailsValidator = new StaffElectronicMailPutPostRequestValidator();

            foreach (var item in instance.StaffElectronicMails)
            {
                var validationResult = staffElectronicMailsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffIdentificationCodesValidator = new StaffIdentificationCodePutPostRequestValidator();

            foreach (var item in instance.StaffIdentificationCodes)
            {
                var validationResult = staffIdentificationCodesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffIdentificationDocumentsValidator = new StaffIdentificationDocumentPutPostRequestValidator();

            foreach (var item in instance.StaffIdentificationDocuments)
            {
                var validationResult = staffIdentificationDocumentsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffInternationalAddressesValidator = new StaffInternationalAddressPutPostRequestValidator();

            foreach (var item in instance.StaffInternationalAddresses)
            {
                var validationResult = staffInternationalAddressesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffLanguagesValidator = new StaffLanguagePutPostRequestValidator();

            foreach (var item in instance.StaffLanguages)
            {
                var validationResult = staffLanguagesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffOtherNamesValidator = new StaffOtherNamePutPostRequestValidator();

            foreach (var item in instance.StaffOtherNames)
            {
                var validationResult = staffOtherNamesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffPersonalIdentificationDocumentsValidator = new StaffPersonalIdentificationDocumentPutPostRequestValidator();

            foreach (var item in instance.StaffPersonalIdentificationDocuments)
            {
                var validationResult = staffPersonalIdentificationDocumentsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffRacesValidator = new StaffRacePutPostRequestValidator();

            foreach (var item in instance.StaffRaces)
            {
                var validationResult = staffRacesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffRecognitionsValidator = new StaffRecognitionPutPostRequestValidator();

            foreach (var item in instance.StaffRecognitions)
            {
                var validationResult = staffRecognitionsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffTelephonesValidator = new StaffTelephonePutPostRequestValidator();

            foreach (var item in instance.StaffTelephones)
            {
                var validationResult = staffTelephonesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffTribalAffiliationsValidator = new StaffTribalAffiliationPutPostRequestValidator();

            foreach (var item in instance.StaffTribalAffiliations)
            {
                var validationResult = staffTribalAffiliationsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffVisasValidator = new StaffVisaPutPostRequestValidator();

            foreach (var item in instance.StaffVisas)
            {
                var validationResult = staffVisasValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffAddress table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffAddress : Entities.Common.EdFi.IStaffAddress, Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StaffAddress()
        {
            StaffAddressPeriods = new List<StaffAddressPeriod>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffAddress.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressTypeDescriptor"), NaturalKeyMember]
        public string AddressTypeDescriptor { get; set; }

        /// <summary>
        /// The name of the city in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="city"), NaturalKeyMember]
        public string City { get; set; }

        /// <summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="postalCode"), NaturalKeyMember]
        public string PostalCode { get; set; }

        /// <summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="stateAbbreviationDescriptor"), NaturalKeyMember]
        public string StateAbbreviationDescriptor { get; set; }

        /// <summary>
        /// The street number and street name or post office box number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="streetNumberName"), NaturalKeyMember]
        public string StreetNumberName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffAddress;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).AddressTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffAddress).AddressTypeDescriptor.Equals(compareTo.AddressTypeDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).City == null
                || !(this as Entities.Common.EdFi.IStaffAddress).City.Equals(compareTo.City)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).PostalCode == null
                || !(this as Entities.Common.EdFi.IStaffAddress).PostalCode.Equals(compareTo.PostalCode)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).StateAbbreviationDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffAddress).StateAbbreviationDescriptor.Equals(compareTo.StateAbbreviationDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).StreetNumberName == null
                || !(this as Entities.Common.EdFi.IStaffAddress).StreetNumberName.Equals(compareTo.StreetNumberName)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).AddressTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).AddressTypeDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).City != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).City.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).PostalCode != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).PostalCode.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).StateAbbreviationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).StateAbbreviationDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).StreetNumberName != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).StreetNumberName.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The apartment, room, or suite number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="apartmentRoomSuiteNumber")]
        public string ApartmentRoomSuiteNumber { get; set; }

        /// <summary>
        /// The number of the building on the site, if more than one building shares the same address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="buildingSiteNumber")]
        public string BuildingSiteNumber { get; set; }

        /// <summary>
        /// The congressional district in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="congressionalDistrict")]
        public string CongressionalDistrict { get; set; }

        /// <summary>
        /// The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \"first-order subdivisions\" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="countyFIPSCode")]
        public string CountyFIPSCode { get; set; }

        /// <summary>
        /// An indication that the address should not be published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// A general geographic indicator that categorizes U.S. territory (e.g., City, Suburban).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="localeDescriptor")]
        public string LocaleDescriptor { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }

        /// <summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in                        'which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nameOfCounty")]
        public string NameOfCounty { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffAddress")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffAddressPeriod> _staffAddressPeriods;
        private ICollection<Entities.Common.EdFi.IStaffAddressPeriod> _staffAddressPeriodsCovariant;

        [DataMember(Name="periods"), NoDuplicateMembers]
        public ICollection<StaffAddressPeriod> StaffAddressPeriods
        {
            get { return _staffAddressPeriods; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffAddressPeriod>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffAddressPeriod)e.Item).StaffAddress = this);
                _staffAddressPeriods = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffAddressPeriod, StaffAddressPeriod>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffAddressPeriod)e.Item).StaffAddress = this;
                _staffAddressPeriodsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffAddressPeriod> Entities.Common.EdFi.IStaffAddress.StaffAddressPeriods
        {
            get { return _staffAddressPeriodsCovariant; }
            set { StaffAddressPeriods = new List<StaffAddressPeriod>(value.Cast<StaffAddressPeriod>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffAddressPeriods != null) foreach (var item in _staffAddressPeriods)
            {
                item.StaffAddress = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffAddressMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffAddress)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffAddressMapper.MapTo(this, (Entities.Common.EdFi.IStaffAddress)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsApartmentRoomSuiteNumberSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsBuildingSiteNumberSupported        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsCongressionalDistrictSupported     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsCountyFIPSCodeSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsLatitudeSupported                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsLocaleDescriptorSupported          { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsLongitudeSupported                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsNameOfCountySupported              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsStaffAddressPeriodsSupported       { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.EdFi.IStaffAddressPeriod, bool> Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsStaffAddressPeriodIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffAddressPutPostRequestValidator : FluentValidation.AbstractValidator<StaffAddress>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffAddress> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var staffAddressPeriodsValidator = new StaffAddressPeriodPutPostRequestValidator();

            foreach (var item in instance.StaffAddressPeriods)
            {
                var validationResult = staffAddressPeriodsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffAddressPeriod table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffAddressPeriod : Entities.Common.EdFi.IStaffAddressPeriod, Entities.Common.EdFi.IStaffAddressPeriodSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaffAddress _staffAddress;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaffAddress Entities.Common.EdFi.IStaffAddressPeriod.StaffAddress
        {
            get { return _staffAddress; }
            set { SetStaffAddress(value); }
        }

        internal Entities.Common.EdFi.IStaffAddress StaffAddress
        {
            set { SetStaffAddress(value); }
        }

        private void SetStaffAddress(Entities.Common.EdFi.IStaffAddress value)
        {
            _staffAddress = value;
        }

        /// <summary>
        /// The month, day, and year for the start of the period.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate"), NaturalKeyMember][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime BeginDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffAddressPeriod;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staffAddress == null || !_staffAddress.Equals(compareTo.StaffAddress))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddressPeriod).BeginDate == null
                || !(this as Entities.Common.EdFi.IStaffAddressPeriod).BeginDate.Equals(compareTo.BeginDate)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffAddress != null)
                    hash = hash * 23 + _staffAddress.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddressPeriod).BeginDate != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddressPeriod).BeginDate.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year for the end of the period.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffAddressPeriod")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffAddressPeriodMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffAddressPeriod)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffAddressPeriodMapper.MapTo(this, (Entities.Common.EdFi.IStaffAddressPeriod)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffAddressPeriodSynchronizationSourceSupport.IsEndDateSupported  { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffAddressPeriodPutPostRequestValidator : FluentValidation.AbstractValidator<StaffAddressPeriod>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffAddressPeriod> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffCredential table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffCredential : Entities.Common.EdFi.IStaffCredential, Entities.Common.EdFi.IStaffCredentialSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _credentialReferenceExplicitlyAssigned;
        private Credential.EdFi.CredentialReference _credentialReference;
        private Credential.EdFi.CredentialReference ImplicitCredentialReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_credentialReference == null && !_credentialReferenceExplicitlyAssigned)
                    _credentialReference = new Credential.EdFi.CredentialReference();

                return _credentialReference;
            }
        }

        [DataMember(Name="credentialReference")][NaturalKeyMember]
        public Credential.EdFi.CredentialReference CredentialReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitCredentialReference != null
                    && (_credentialReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitCredentialReference.IsReferenceFullyDefined()))
                    return ImplicitCredentialReference;

                return null;
            }
            set
            {
                _credentialReferenceExplicitlyAssigned = true;
                _credentialReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffCredential.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// Identifier or serial number assigned to the credential.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.EdFi.IStaffCredential.CredentialIdentifier
        {
            get
            {
                if (ImplicitCredentialReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCredentialReference.IsReferenceFullyDefined()))
                    return ImplicitCredentialReference.CredentialIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Credential
                _credentialReferenceExplicitlyAssigned = false;
                ImplicitCredentialReference.CredentialIdentifier = value;
            }
        }

        /// <summary>
        /// The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued.
        /// </summary>

        // IS in a reference (StaffCredential.StateOfIssueStateAbbreviationDescriptorId), IS a lookup column 
        string Entities.Common.EdFi.IStaffCredential.StateOfIssueStateAbbreviationDescriptor
        {
            get
            {
                if (ImplicitCredentialReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCredentialReference.IsReferenceFullyDefined()))
                    return ImplicitCredentialReference.StateOfIssueStateAbbreviationDescriptor;

                return null;
            }
            set
            {
                ImplicitCredentialReference.StateOfIssueStateAbbreviationDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffCredential;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Referenced Property
            if ((this as Entities.Common.EdFi.IStaffCredential).CredentialIdentifier == null
                || !(this as Entities.Common.EdFi.IStaffCredential).CredentialIdentifier.Equals(compareTo.CredentialIdentifier)) 
                return false;
 
            // Unified Type Property
            if ((this as Entities.Common.EdFi.IStaffCredential).StateOfIssueStateAbbreviationDescriptor == null
                ||!(this as Entities.Common.EdFi.IStaffCredential).StateOfIssueStateAbbreviationDescriptor.Equals(compareTo.StateOfIssueStateAbbreviationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                //Referenced Property
                if ((this as Entities.Common.EdFi.IStaffCredential).CredentialIdentifier != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffCredential).CredentialIdentifier.GetHashCode();
 
                //Unified Type Property
                if ((this as Entities.Common.EdFi.IStaffCredential).StateOfIssueStateAbbreviationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffCredential).StateOfIssueStateAbbreviationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffCredential")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffCredentialMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffCredential)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffCredentialMapper.MapTo(this, (Entities.Common.EdFi.IStaffCredential)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.EdFi.IStaffCredential.CredentialResourceId 
        { 
            get { return null; }
            set { ImplicitCredentialReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.EdFi.IStaffCredential.CredentialDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitCredentialReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffCredentialPutPostRequestValidator : FluentValidation.AbstractValidator<StaffCredential>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffCredential> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffElectronicMail table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffElectronicMail : Entities.Common.EdFi.IStaffElectronicMail, Entities.Common.EdFi.IStaffElectronicMailSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffElectronicMail.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The electronic mail (e-mail) address listed for an individual or organization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="electronicMailAddress"), NaturalKeyMember]
        public string ElectronicMailAddress { get; set; }

        /// <summary>
        /// The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="electronicMailTypeDescriptor"), NaturalKeyMember]
        public string ElectronicMailTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffElectronicMail;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailAddress == null
                || !(this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailAddress.Equals(compareTo.ElectronicMailAddress)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailTypeDescriptor.Equals(compareTo.ElectronicMailTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailAddress != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailAddress.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication that the electronic email address should not be published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="primaryEmailAddressIndicator")]
        public bool? PrimaryEmailAddressIndicator { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffElectronicMail")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffElectronicMailMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffElectronicMail)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffElectronicMailMapper.MapTo(this, (Entities.Common.EdFi.IStaffElectronicMail)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffElectronicMailSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported         { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffElectronicMailSynchronizationSourceSupport.IsPrimaryEmailAddressIndicatorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffElectronicMailPutPostRequestValidator : FluentValidation.AbstractValidator<StaffElectronicMail>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffElectronicMail> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffIdentificationCode table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffIdentificationCode : Entities.Common.EdFi.IStaffIdentificationCode, Entities.Common.EdFi.IStaffIdentificationCodeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffIdentificationCode.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a staff member.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="staffIdentificationSystemDescriptor"), NaturalKeyMember]
        public string StaffIdentificationSystemDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffIdentificationCode;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffIdentificationCode).StaffIdentificationSystemDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffIdentificationCode).StaffIdentificationSystemDescriptor.Equals(compareTo.StaffIdentificationSystemDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffIdentificationCode).StaffIdentificationSystemDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffIdentificationCode).StaffIdentificationSystemDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The organization code or name assigning the staff Identification Code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="assigningOrganizationIdentificationCode")]
        public string AssigningOrganizationIdentificationCode { get; set; }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="identificationCode")]
        public string IdentificationCode { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffIdentificationCode")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffIdentificationCodeMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffIdentificationCode)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffIdentificationCodeMapper.MapTo(this, (Entities.Common.EdFi.IStaffIdentificationCode)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffIdentificationCodeSynchronizationSourceSupport.IsAssigningOrganizationIdentificationCodeSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationCodeSynchronizationSourceSupport.IsIdentificationCodeSupported                       { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffIdentificationCodePutPostRequestValidator : FluentValidation.AbstractValidator<StaffIdentificationCode>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffIdentificationCode> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffIdentificationDocument table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffIdentificationDocument : Entities.Common.EdFi.IStaffIdentificationDocument, Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffIdentificationDocument.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The primary function of the document used for establishing identity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="identificationDocumentUseDescriptor"), NaturalKeyMember]
        public string IdentificationDocumentUseDescriptor { get; set; }

        /// <summary>
        /// The category of the document relative to its purpose.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="personalInformationVerificationDescriptor"), NaturalKeyMember]
        public string PersonalInformationVerificationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffIdentificationDocument;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffIdentificationDocument).IdentificationDocumentUseDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffIdentificationDocument).IdentificationDocumentUseDescriptor.Equals(compareTo.IdentificationDocumentUseDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffIdentificationDocument).PersonalInformationVerificationDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffIdentificationDocument).PersonalInformationVerificationDescriptor.Equals(compareTo.PersonalInformationVerificationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffIdentificationDocument).IdentificationDocumentUseDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffIdentificationDocument).IdentificationDocumentUseDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffIdentificationDocument).PersonalInformationVerificationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffIdentificationDocument).PersonalInformationVerificationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The day when the document  expires, if null then never expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentExpirationDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? DocumentExpirationDate { get; set; }

        /// <summary>
        /// The title of the document given by the issuer.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentTitle")]
        public string DocumentTitle { get; set; }

        /// <summary>
        /// Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="issuerCountryDescriptor")]
        public string IssuerCountryDescriptor { get; set; }

        /// <summary>
        /// The unique identifier on the issuer's identification system.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerDocumentIdentificationCode")]
        public string IssuerDocumentIdentificationCode { get; set; }

        /// <summary>
        /// Name of the entity or institution that issued the document.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffIdentificationDocument")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffIdentificationDocumentMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffIdentificationDocumentMapper.MapTo(this, (Entities.Common.EdFi.IStaffIdentificationDocument)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported                        { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffIdentificationDocumentPutPostRequestValidator : FluentValidation.AbstractValidator<StaffIdentificationDocument>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffIdentificationDocument> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffInternationalAddress table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffInternationalAddress : Entities.Common.EdFi.IStaffInternationalAddress, Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffInternationalAddress.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The type of address listed for an individual or organization. For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressTypeDescriptor"), NaturalKeyMember]
        public string AddressTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffInternationalAddress;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffInternationalAddress).AddressTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffInternationalAddress).AddressTypeDescriptor.Equals(compareTo.AddressTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffInternationalAddress).AddressTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffInternationalAddress).AddressTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The first line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine1")]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// The second line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine2")]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// The third line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine3")]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// The fourth line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine4")]
        public string AddressLine4 { get; set; }

        /// <summary>
        /// The first date the address is valid. For physical addresses, the date the person moved to that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The name of the country. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="countryDescriptor")]
        public string CountryDescriptor { get; set; }

        /// <summary>
        /// The last date the address is valid. For physical addresses, this would be the date the person moved from that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffInternationalAddress")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffInternationalAddressMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffInternationalAddress)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffInternationalAddressMapper.MapTo(this, (Entities.Common.EdFi.IStaffInternationalAddress)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine1Supported       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine2Supported       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine3Supported       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine4Supported       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsBeginDateSupported          { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsCountryDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsEndDateSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsLatitudeSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsLongitudeSupported          { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffInternationalAddressPutPostRequestValidator : FluentValidation.AbstractValidator<StaffInternationalAddress>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffInternationalAddress> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffLanguage table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffLanguage : Entities.Common.EdFi.IStaffLanguage, Entities.Common.EdFi.IStaffLanguageSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StaffLanguage()
        {
            StaffLanguageUses = new List<StaffLanguageUse>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffLanguage.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// A specification of which written or spoken communication is being used.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="languageDescriptor"), NaturalKeyMember]
        public string LanguageDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffLanguage;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffLanguage).LanguageDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffLanguage).LanguageDescriptor.Equals(compareTo.LanguageDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffLanguage).LanguageDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffLanguage).LanguageDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffLanguage")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffLanguageUse> _staffLanguageUses;
        private ICollection<Entities.Common.EdFi.IStaffLanguageUse> _staffLanguageUsesCovariant;

        [DataMember(Name="uses"), NoDuplicateMembers]
        public ICollection<StaffLanguageUse> StaffLanguageUses
        {
            get { return _staffLanguageUses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffLanguageUse>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffLanguageUse)e.Item).StaffLanguage = this);
                _staffLanguageUses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffLanguageUse, StaffLanguageUse>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffLanguageUse)e.Item).StaffLanguage = this;
                _staffLanguageUsesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffLanguageUse> Entities.Common.EdFi.IStaffLanguage.StaffLanguageUses
        {
            get { return _staffLanguageUsesCovariant; }
            set { StaffLanguageUses = new List<StaffLanguageUse>(value.Cast<StaffLanguageUse>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffLanguageUses != null) foreach (var item in _staffLanguageUses)
            {
                item.StaffLanguage = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffLanguageMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffLanguage)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffLanguageMapper.MapTo(this, (Entities.Common.EdFi.IStaffLanguage)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffLanguageSynchronizationSourceSupport.IsStaffLanguageUsesSupported  { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.EdFi.IStaffLanguageUse, bool> Entities.Common.EdFi.IStaffLanguageSynchronizationSourceSupport.IsStaffLanguageUseIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffLanguagePutPostRequestValidator : FluentValidation.AbstractValidator<StaffLanguage>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffLanguage> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var staffLanguageUsesValidator = new StaffLanguageUsePutPostRequestValidator();

            foreach (var item in instance.StaffLanguageUses)
            {
                var validationResult = staffLanguageUsesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffLanguageUse table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffLanguageUse : Entities.Common.EdFi.IStaffLanguageUse, Entities.Common.EdFi.IStaffLanguageUseSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaffLanguage _staffLanguage;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaffLanguage Entities.Common.EdFi.IStaffLanguageUse.StaffLanguage
        {
            get { return _staffLanguage; }
            set { SetStaffLanguage(value); }
        }

        internal Entities.Common.EdFi.IStaffLanguage StaffLanguage
        {
            set { SetStaffLanguage(value); }
        }

        private void SetStaffLanguage(Entities.Common.EdFi.IStaffLanguage value)
        {
            _staffLanguage = value;
        }

        /// <summary>
        /// A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="languageUseDescriptor"), NaturalKeyMember]
        public string LanguageUseDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffLanguageUse;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staffLanguage == null || !_staffLanguage.Equals(compareTo.StaffLanguage))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffLanguageUse).LanguageUseDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffLanguageUse).LanguageUseDescriptor.Equals(compareTo.LanguageUseDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffLanguage != null)
                    hash = hash * 23 + _staffLanguage.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffLanguageUse).LanguageUseDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffLanguageUse).LanguageUseDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffLanguageUse")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffLanguageUseMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffLanguageUse)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffLanguageUseMapper.MapTo(this, (Entities.Common.EdFi.IStaffLanguageUse)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffLanguageUsePutPostRequestValidator : FluentValidation.AbstractValidator<StaffLanguageUse>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffLanguageUse> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffOtherName table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffOtherName : Entities.Common.EdFi.IStaffOtherName, Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffOtherName.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The types of alternate names for a person.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="otherNameTypeDescriptor"), NaturalKeyMember]
        public string OtherNameTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffOtherName;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffOtherName).OtherNameTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffOtherName).OtherNameTypeDescriptor.Equals(compareTo.OtherNameTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffOtherName).OtherNameTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffOtherName).OtherNameTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffOtherName")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffOtherNameMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffOtherName)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffOtherNameMapper.MapTo(this, (Entities.Common.EdFi.IStaffOtherName)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsFirstNameSupported             { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsGenerationCodeSuffixSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsLastSurnameSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsMiddleNameSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsPersonalTitlePrefixSupported   { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffOtherNamePutPostRequestValidator : FluentValidation.AbstractValidator<StaffOtherName>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffOtherName> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffPersonalIdentificationDocument table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffPersonalIdentificationDocument : Entities.Common.EdFi.IStaffPersonalIdentificationDocument, Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffPersonalIdentificationDocument.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The primary function of the document used for establishing identity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="identificationDocumentUseDescriptor"), NaturalKeyMember]
        public string IdentificationDocumentUseDescriptor { get; set; }

        /// <summary>
        /// The category of the document relative to its purpose.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="personalInformationVerificationDescriptor"), NaturalKeyMember]
        public string PersonalInformationVerificationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffPersonalIdentificationDocument;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).IdentificationDocumentUseDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).IdentificationDocumentUseDescriptor.Equals(compareTo.IdentificationDocumentUseDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).PersonalInformationVerificationDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).PersonalInformationVerificationDescriptor.Equals(compareTo.PersonalInformationVerificationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).IdentificationDocumentUseDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).IdentificationDocumentUseDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).PersonalInformationVerificationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).PersonalInformationVerificationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The day when the document  expires, if null then never expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentExpirationDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? DocumentExpirationDate { get; set; }

        /// <summary>
        /// The title of the document given by the issuer.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentTitle")]
        public string DocumentTitle { get; set; }

        /// <summary>
        /// Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="issuerCountryDescriptor")]
        public string IssuerCountryDescriptor { get; set; }

        /// <summary>
        /// The unique identifier on the issuer's identification system.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerDocumentIdentificationCode")]
        public string IssuerDocumentIdentificationCode { get; set; }

        /// <summary>
        /// Name of the entity or institution that issued the document.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffPersonalIdentificationDocument")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffPersonalIdentificationDocumentMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffPersonalIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffPersonalIdentificationDocumentMapper.MapTo(this, (Entities.Common.EdFi.IStaffPersonalIdentificationDocument)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported                        { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPersonalIdentificationDocumentPutPostRequestValidator : FluentValidation.AbstractValidator<StaffPersonalIdentificationDocument>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffPersonalIdentificationDocument> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffRace table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffRace : Entities.Common.EdFi.IStaffRace, Entities.Common.EdFi.IStaffRaceSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffRace.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The general racial category which most clearly reflects the individual's recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="raceDescriptor"), NaturalKeyMember]
        public string RaceDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffRace;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffRace).RaceDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffRace).RaceDescriptor.Equals(compareTo.RaceDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffRace).RaceDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffRace).RaceDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffRace")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffRaceMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffRace)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffRaceMapper.MapTo(this, (Entities.Common.EdFi.IStaffRace)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffRacePutPostRequestValidator : FluentValidation.AbstractValidator<StaffRace>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffRace> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffRecognition table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffRecognition : Entities.Common.EdFi.IStaffRecognition, Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffRecognition.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The nature of recognition given to the learner for accomplishments in a co-curricular, or extra-curricular activity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="recognitionTypeDescriptor"), NaturalKeyMember]
        public string RecognitionTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffRecognition;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffRecognition).RecognitionTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffRecognition).RecognitionTypeDescriptor.Equals(compareTo.RecognitionTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffRecognition).RecognitionTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffRecognition).RecognitionTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The category of achievement attributed to the learner.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="achievementCategoryDescriptor")]
        public string AchievementCategoryDescriptor { get; set; }

        /// <summary>
        /// The system that defines the categories by which an achievement is attributed to the learner.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="achievementCategorySystem")]
        public string AchievementCategorySystem { get; set; }

        /// <summary>
        /// The title assigned to the achievement.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="achievementTitle")]
        public string AchievementTitle { get; set; }

        /// <summary>
        /// The criteria for competency-based completion of the achievement/award.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="criteria")]
        public string Criteria { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="criteriaURL")]
        public string CriteriaURL { get; set; }

        /// <summary>
        /// A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="evidenceStatement")]
        public string EvidenceStatement { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="imageURL")]
        public string ImageURL { get; set; }

        /// <summary>
        /// The name of the agent, entity, or institution issuing the element.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) from which the award was issued.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerOriginURL")]
        public string IssuerOriginURL { get; set; }

        /// <summary>
        /// The date the recognition was awarded or earned.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="recognitionAwardDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? RecognitionAwardDate { get; set; }

        /// <summary>
        /// Date on which the award expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="recognitionAwardExpiresDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? RecognitionAwardExpiresDate { get; set; }

        /// <summary>
        /// A description of the type of academic distinctions earned by or awarded to the individual.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="recognitionDescription")]
        public string RecognitionDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffRecognition")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffRecognitionMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffRecognition)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffRecognitionMapper.MapTo(this, (Entities.Common.EdFi.IStaffRecognition)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsAchievementCategoryDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsAchievementCategorySystemSupported      { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsAchievementTitleSupported               { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsCriteriaSupported                       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsCriteriaURLSupported                    { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsEvidenceStatementSupported              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsImageURLSupported                       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsIssuerNameSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsIssuerOriginURLSupported                { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsRecognitionAwardDateSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsRecognitionAwardExpiresDateSupported    { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsRecognitionDescriptionSupported         { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffRecognitionPutPostRequestValidator : FluentValidation.AbstractValidator<StaffRecognition>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffRecognition> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffTelephone table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffTelephone : Entities.Common.EdFi.IStaffTelephone, Entities.Common.EdFi.IStaffTelephoneSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffTelephone.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The telephone number including the area code, and extension, if applicable.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="telephoneNumber"), NaturalKeyMember]
        public string TelephoneNumber { get; set; }

        /// <summary>
        /// The type of communication number listed for an individual or organization.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="telephoneNumberTypeDescriptor"), NaturalKeyMember]
        public string TelephoneNumberTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffTelephone;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumber == null
                || !(this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumber.Equals(compareTo.TelephoneNumber)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumberTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumberTypeDescriptor.Equals(compareTo.TelephoneNumberTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumber != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumber.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumberTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumberTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication that the telephone number should not be published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="orderOfPriority")]
        public int? OrderOfPriority { get; set; }

        /// <summary>
        /// An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="textMessageCapabilityIndicator")]
        public bool? TextMessageCapabilityIndicator { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffTelephone")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffTelephoneMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffTelephone)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffTelephoneMapper.MapTo(this, (Entities.Common.EdFi.IStaffTelephone)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffTelephoneSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffTelephoneSynchronizationSourceSupport.IsOrderOfPrioritySupported                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffTelephoneSynchronizationSourceSupport.IsTextMessageCapabilityIndicatorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffTelephonePutPostRequestValidator : FluentValidation.AbstractValidator<StaffTelephone>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffTelephone> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffTribalAffiliation table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffTribalAffiliation : Entities.Common.EdFi.IStaffTribalAffiliation, Entities.Common.EdFi.IStaffTribalAffiliationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffTribalAffiliation.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// An American Indian tribe with which the staff member is affiliated.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="tribalAffiliationDescriptor"), NaturalKeyMember]
        public string TribalAffiliationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffTribalAffiliation;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffTribalAffiliation).TribalAffiliationDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffTribalAffiliation).TribalAffiliationDescriptor.Equals(compareTo.TribalAffiliationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffTribalAffiliation).TribalAffiliationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffTribalAffiliation).TribalAffiliationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffTribalAffiliation")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffTribalAffiliationMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffTribalAffiliation)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffTribalAffiliationMapper.MapTo(this, (Entities.Common.EdFi.IStaffTribalAffiliation)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffTribalAffiliationPutPostRequestValidator : FluentValidation.AbstractValidator<StaffTribalAffiliation>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffTribalAffiliation> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffVisa table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffVisa : Entities.Common.EdFi.IStaffVisa, Entities.Common.EdFi.IStaffVisaSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffVisa.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// An indicator of a non-US citizen's Visa type.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="visaDescriptor"), NaturalKeyMember]
        public string VisaDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffVisa;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffVisa).VisaDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffVisa).VisaDescriptor.Equals(compareTo.VisaDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffVisa).VisaDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffVisa).VisaDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffVisa")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffVisaMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffVisa)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffVisaMapper.MapTo(this, (Entities.Common.EdFi.IStaffVisa)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffVisaPutPostRequestValidator : FluentValidation.AbstractValidator<StaffVisa>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffVisa> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Staff

namespace EdFi.Ods.Api.Models.Resources.Staff.EdFi.Staff_and_Prospect_MixedInclude_Readable.Extensions.GrandBend
{
    /// <summary>
    /// A class which represents the grandbend.StaffExtension table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffExtension : Entities.Common.GrandBend.IStaffExtension, Entities.Common.GrandBend.IStaffExtensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.GrandBend.IStaffExtension.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.GrandBend.IStaffExtension;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The date that the staff member's new hire probationary period was completed.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="probationCompleteDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? ProbationCompleteDate { get; set; }

        /// <summary>
        /// An indication as to whether the staff member is tenured.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="tenured")]
        public bool? Tenured { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.GrandBend.StaffExtensionMapper.SynchronizeTo(this, (Entities.Common.GrandBend.IStaffExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.GrandBend.StaffExtensionMapper.MapTo(this, (Entities.Common.GrandBend.IStaffExtension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.GrandBend.IStaffExtensionSynchronizationSourceSupport.IsProbationCompleteDateSupported  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IStaffExtensionSynchronizationSourceSupport.IsTenuredSupported                { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<StaffExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Staff

namespace EdFi.Ods.Api.Models.Resources.Staff.EdFi.Staff_and_Prospect_MixedInclude_Readable.Extensions.Sample
{
    /// <summary>
    /// A class which represents the sample.StaffExtension table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffExtension : Entities.Common.Sample.IStaffExtension, Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StaffExtension()
        {
            StaffPets = new List<StaffPet>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.Sample.IStaffExtension.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStaffExtension;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The date the staff member adopted the first household pet.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstPetOwnedDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? FirstPetOwnedDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        /// <summary>
        /// petPreference
        /// </summary>
        [DataMember(Name = "petPreference")]
        public StaffPetPreference StaffPetPreference { get; set; }

        Entities.Common.Sample.IStaffPetPreference Entities.Common.Sample.IStaffExtension.StaffPetPreference
        {
            get { return StaffPetPreference; }
            set { StaffPetPreference = (StaffPetPreference) value; }
        }

        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffPet> _staffPets;
        private ICollection<Entities.Common.Sample.IStaffPet> _staffPetsCovariant;

        [DataMember(Name="pets"), NoDuplicateMembers]
        public ICollection<StaffPet> StaffPets
        {
            get { return _staffPets; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffPet>(value,
                    (s, e) => ((Entities.Common.Sample.IStaffPet)e.Item).StaffExtension = this);
                _staffPets = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.Sample.IStaffPet, StaffPet>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.Sample.IStaffPet)e.Item).StaffExtension = this;
                _staffPetsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.Sample.IStaffPet> Entities.Common.Sample.IStaffExtension.StaffPets
        {
            get { return _staffPetsCovariant; }
            set { StaffPets = new List<StaffPet>(value.Cast<StaffPet>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffPets != null) foreach (var item in _staffPets)
            {
                item.StaffExtension = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StaffExtensionMapper.SynchronizeTo(this, (Entities.Common.Sample.IStaffExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StaffExtensionMapper.MapTo(this, (Entities.Common.Sample.IStaffExtension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport.IsFirstPetOwnedDateSupported   { get { return true; } set { } }
        bool Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport.IsStaffPetPreferenceSupported  { get { return true; } set { } }
        bool Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport.IsStaffPetsSupported           { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.Sample.IStaffPet, bool> Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport.IsStaffPetIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<StaffExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var staffPetsValidator = new StaffPetPutPostRequestValidator();

            foreach (var item in instance.StaffPets)
            {
                var validationResult = staffPetsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the sample.StaffPet table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffPet : Entities.Common.Sample.IStaffPet, Entities.Common.Sample.IStaffPetSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.Sample.IStaffExtension _staffExtension;

        [IgnoreDataMember]
        Entities.Common.Sample.IStaffExtension Entities.Common.Sample.IStaffPet.StaffExtension
        {
            get { return _staffExtension; }
            set { SetStaffExtension(value); }
        }

        internal Entities.Common.Sample.IStaffExtension StaffExtension
        {
            set { SetStaffExtension(value); }
        }

        private void SetStaffExtension(Entities.Common.Sample.IStaffExtension value)
        {
            _staffExtension = value;
        }

        /// <summary>
        /// The pet's name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="petName"), NaturalKeyMember]
        public string PetName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStaffPet;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staffExtension == null || !_staffExtension.Equals(compareTo.StaffExtension))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.Sample.IStaffPet).PetName == null
                || !(this as Entities.Common.Sample.IStaffPet).PetName.Equals(compareTo.PetName)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffExtension != null)
                    hash = hash * 23 + _staffExtension.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.Sample.IStaffPet).PetName != null) 
                    hash = hash * 23 + (this as Entities.Common.Sample.IStaffPet).PetName.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication as to whether the pet has been spayed/neutered.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="isFixed")]
        public bool? IsFixed { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StaffPetMapper.SynchronizeTo(this, (Entities.Common.Sample.IStaffPet)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StaffPetMapper.MapTo(this, (Entities.Common.Sample.IStaffPet)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStaffPetSynchronizationSourceSupport.IsIsFixedSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPetPutPostRequestValidator : FluentValidation.AbstractValidator<StaffPet>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffPet> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the sample.StaffPetPreference table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffPetPreference : Entities.Common.Sample.IStaffPetPreference, Entities.Common.Sample.IStaffPetPreferenceSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.Sample.IStaffExtension _staffExtension;

        [IgnoreDataMember]
        Entities.Common.Sample.IStaffExtension Entities.Common.Sample.IStaffPetPreference.StaffExtension
        {
            get { return _staffExtension; }
            set { SetStaffExtension(value); }
        }

        internal Entities.Common.Sample.IStaffExtension StaffExtension
        {
            set { SetStaffExtension(value); }
        }

        private void SetStaffExtension(Entities.Common.Sample.IStaffExtension value)
        {
            _staffExtension = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStaffPetPreference;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staffExtension == null || !_staffExtension.Equals(compareTo.StaffExtension))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffExtension != null)
                    hash = hash * 23 + _staffExtension.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The preferred maximum weight of a household pet.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maximumWeight")]
        public int MaximumWeight { get; set; }

        /// <summary>
        /// The preferred minimum weight of a household pet.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="minimumWeight")]
        public int MinimumWeight { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StaffPetPreferenceMapper.SynchronizeTo(this, (Entities.Common.Sample.IStaffPetPreference)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StaffPetPreferenceMapper.MapTo(this, (Entities.Common.Sample.IStaffPetPreference)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStaffPetPreferenceSynchronizationSourceSupport.IsMaximumWeightSupported  { get { return true; } set { } }
        bool Entities.Common.Sample.IStaffPetPreferenceSynchronizationSourceSupport.IsMinimumWeightSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPetPreferencePutPostRequestValidator : FluentValidation.AbstractValidator<StaffPetPreference>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffPetPreference> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Applicant

namespace EdFi.Ods.Api.Models.Resources.Applicant.GrandBend.Staff_and_Prospect_MixedInclude_Writable
{
    /// <summary>
    /// Represents a reference to the Applicant resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantReference
    {
        [DataMember(Name="applicantIdentifier"), NaturalKeyMember]
        public string ApplicantIdentifier { get; set; }

        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return ApplicantIdentifier != default(string) && EducationOrganizationId != default(int);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "Applicant",
                Href = $"/grand-bend/applicants/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new Common.Models.Domain.FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the grandbend.Applicant table of the Applicant aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class Applicant : Entities.Common.GrandBend.IApplicant, IHasETag, Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Applicant()
        {
            ApplicantAddresses = new List<ApplicantAddress>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Applicant resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EdFi.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EdFi.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EdFi.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EdFi.EducationOrganizationReference EducationOrganizationReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set
            {
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to an applicant.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="applicantIdentifier"), NaturalKeyMember]
        public string ApplicantIdentifier { get; set; }

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int Entities.Common.GrandBend.IApplicant.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.GrandBend.IApplicant;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
 
            // Standard Property
            if ((this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier == null
                || !(this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier.Equals(compareTo.ApplicantIdentifier)) 
                return false;
 
            // Referenced Property
            if ((this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId == null
                || !(this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId.Equals(compareTo.EducationOrganizationId)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier != null) 
                    hash = hash * 23 + (this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier.GetHashCode();
 
                //Referenced Property
                if ((this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="birthDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BirthDate { get; set; }

        /// <summary>
        /// An indicator of whether or not the person is a U.S. citizen.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="citizenshipStatusDescriptor")]
        public string CitizenshipStatusDescriptor { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="highestCompletedLevelOfEducationDescriptor")]
        public string HighestCompletedLevelOfEducationDescriptor { get; set; }

        /// <summary>
        /// An applicant subject in which a teacher applicant is classified as highly qualified.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="highlyQualifiedAcademicSubjectDescriptor")]
        public string HighlyQualifiedAcademicSubjectDescriptor { get; set; }

        /// <summary>
        /// An indication of whether a teacher applicant is classified as highly qualified for his/her prospective assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections to be taught.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="highlyQualifiedTeacher")]
        public bool? HighlyQualifiedTeacher { get; set; }

        /// <summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="hispanicLatinoEthnicity")]
        public bool? HispanicLatinoEthnicity { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// The login ID for the user; used for security access control interface.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="loginId")]
        public string LoginId { get; set; }

        /// <summary>
        /// The person's maiden name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maidenName")]
        public string MaidenName { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }

        /// <summary>
        /// A person's gender.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="sexDescriptor")]
        public string SexDescriptor { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a similar professional position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorProfessionalExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorProfessionalExperience { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a teaching position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorTeachingExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorTeachingExperience { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<ApplicantAddress> _applicantAddresses;
        private ICollection<Entities.Common.GrandBend.IApplicantAddress> _applicantAddressesCovariant;

        [DataMember(Name="addresses"), NoDuplicateMembers]
        public ICollection<ApplicantAddress> ApplicantAddresses
        {
            get { return _applicantAddresses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<ApplicantAddress>(value,
                    (s, e) => ((Entities.Common.GrandBend.IApplicantAddress)e.Item).Applicant = this);
                _applicantAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.GrandBend.IApplicantAddress, ApplicantAddress>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.GrandBend.IApplicantAddress)e.Item).Applicant = this;
                _applicantAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.GrandBend.IApplicantAddress> Entities.Common.GrandBend.IApplicant.ApplicantAddresses
        {
            get { return _applicantAddressesCovariant; }
            set { ApplicantAddresses = new List<ApplicantAddress>(value.Cast<ApplicantAddress>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_applicantAddresses != null) foreach (var item in _applicantAddresses)
            {
                item.Applicant = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.GrandBend.ApplicantMapper.SynchronizeTo(this, (Entities.Common.GrandBend.IApplicant)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.GrandBend.ApplicantMapper.MapTo(this, (Entities.Common.GrandBend.IApplicant)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsApplicantAddressesSupported                          { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsBirthDateSupported                                   { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsCitizenshipStatusDescriptorSupported                 { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsFirstNameSupported                                   { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsGenerationCodeSuffixSupported                        { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHighestCompletedLevelOfEducationDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHighlyQualifiedAcademicSubjectDescriptorSupported    { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHighlyQualifiedTeacherSupported                      { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHispanicLatinoEthnicitySupported                     { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsLastSurnameSupported                                 { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsLoginIdSupported                                     { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsMaidenNameSupported                                  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsMiddleNameSupported                                  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsPersonalTitlePrefixSupported                         { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsSexDescriptorSupported                               { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsYearsOfPriorProfessionalExperienceSupported          { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsYearsOfPriorTeachingExperienceSupported              { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.GrandBend.IApplicantAddress, bool> Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsApplicantAddressIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.GrandBend.IApplicant.EducationOrganizationResourceId 
        { 
            get { return null; }
            set { ImplicitEducationOrganizationReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.GrandBend.IApplicant.EducationOrganizationDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEducationOrganizationReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantPutPostRequestValidator : FluentValidation.AbstractValidator<Applicant>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<Applicant> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var applicantAddressesValidator = new ApplicantAddressPutPostRequestValidator();

            foreach (var item in instance.ApplicantAddresses)
            {
                var validationResult = applicantAddressesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the grandbend.ApplicantAddress table of the Applicant aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantAddress : Entities.Common.GrandBend.IApplicantAddress, Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.GrandBend.IApplicant _applicant;

        [IgnoreDataMember]
        Entities.Common.GrandBend.IApplicant Entities.Common.GrandBend.IApplicantAddress.Applicant
        {
            get { return _applicant; }
            set { SetApplicant(value); }
        }

        internal Entities.Common.GrandBend.IApplicant Applicant
        {
            set { SetApplicant(value); }
        }

        private void SetApplicant(Entities.Common.GrandBend.IApplicant value)
        {
            _applicant = value;
        }

        /// <summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressTypeDescriptor"), NaturalKeyMember]
        public string AddressTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.GrandBend.IApplicantAddress;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_applicant == null || !_applicant.Equals(compareTo.Applicant))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor == null
                || !(this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor.Equals(compareTo.AddressTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_applicant != null)
                    hash = hash * 23 + _applicant.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The apartment, room, or suite number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="apartmentRoomSuiteNumber")]
        public string ApartmentRoomSuiteNumber { get; set; }

        /// <summary>
        /// The month, day, and year the address became effective.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The number of the building on the site, if more than one building shares the same address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="buildingSiteNumber")]
        public string BuildingSiteNumber { get; set; }

        /// <summary>
        /// The name of the city in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="city")]
        public string City { get; set; }

        /// <summary>
        /// The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \"first-order subdivisions\" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="countyFIPSCode")]
        public string CountyFIPSCode { get; set; }

        /// <summary>
        /// The month, day, and year the address ceased to be in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }

        /// <summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in                        'which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nameOfCounty")]
        public string NameOfCounty { get; set; }

        /// <summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="stateAbbreviationDescriptor")]
        public string StateAbbreviationDescriptor { get; set; }

        /// <summary>
        /// The street number and street name or post office box number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="streetNumberName")]
        public string StreetNumberName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.GrandBend.ApplicantAddressMapper.SynchronizeTo(this, (Entities.Common.GrandBend.IApplicantAddress)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.GrandBend.ApplicantAddressMapper.MapTo(this, (Entities.Common.GrandBend.IApplicantAddress)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsApartmentRoomSuiteNumberSupported     { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsBeginDateSupported                    { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsBuildingSiteNumberSupported           { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsCitySupported                         { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsCountyFIPSCodeSupported               { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsEndDateSupported                      { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsLatitudeSupported                     { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsLongitudeSupported                    { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsNameOfCountySupported                 { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsPostalCodeSupported                   { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsStateAbbreviationDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsStreetNumberNameSupported             { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantAddressPutPostRequestValidator : FluentValidation.AbstractValidator<ApplicantAddress>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicantAddress> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Staff

namespace EdFi.Ods.Api.Models.Resources.Staff.EdFi.Staff_and_Prospect_MixedInclude_Writable
{
    /// <summary>
    /// Represents a reference to the Staff resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffReference
    {
        [DataMember(Name="staffUniqueId"), NaturalKeyMember]
        public string StaffUniqueId { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return StaffUniqueId != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "Staff",
                Href = $"/ed-fi/staffs/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new Common.Models.Domain.FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.Staff table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class Staff : Entities.Common.EdFi.IStaff, IHasETag, Entities.Common.EdFi.IStaffSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Staff()
        {
            StaffAddresses = new List<StaffAddress>();
            StaffCredentials = new List<StaffCredential>();
            StaffElectronicMails = new List<StaffElectronicMail>();
            StaffIdentificationCodes = new List<StaffIdentificationCode>();
            StaffIdentificationDocuments = new List<StaffIdentificationDocument>();
            StaffInternationalAddresses = new List<StaffInternationalAddress>();
            StaffLanguages = new List<StaffLanguage>();
            StaffOtherNames = new List<StaffOtherName>();
            StaffPersonalIdentificationDocuments = new List<StaffPersonalIdentificationDocument>();
            StaffRaces = new List<StaffRace>();
            StaffRecognitions = new List<StaffRecognition>();
            StaffTelephones = new List<StaffTelephone>();
            StaffTribalAffiliations = new List<StaffTribalAffiliation>();
            StaffVisas = new List<StaffVisa>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Staff resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to a staff.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="staffUniqueId"), NaturalKeyMember, UniqueId]
        public string StaffUniqueId { get; set; }

        string IIdentifiablePerson.UniqueId { get { return StaffUniqueId; } }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaff;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Property
            if ((this as Entities.Common.EdFi.IStaff).StaffUniqueId == null
                || !(this as Entities.Common.EdFi.IStaff).StaffUniqueId.Equals(compareTo.StaffUniqueId)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Property
                if ((this as Entities.Common.EdFi.IStaff).StaffUniqueId != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaff).StaffUniqueId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="birthDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BirthDate { get; set; }

        /// <summary>
        /// An indicator of whether or not the person is a U.S. citizen.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="citizenshipStatusDescriptor")]
        public string CitizenshipStatusDescriptor { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="highestCompletedLevelOfEducationDescriptor")]
        public string HighestCompletedLevelOfEducationDescriptor { get; set; }

        /// <summary>
        /// An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="highlyQualifiedTeacher")]
        public bool? HighlyQualifiedTeacher { get; set; }

        /// <summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="hispanicLatinoEthnicity")]
        public bool? HispanicLatinoEthnicity { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// The login ID for the user; used for security access control interface.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="loginId")]
        public string LoginId { get; set; }

        /// <summary>
        /// The person's maiden name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maidenName")]
        public string MaidenName { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// Previous definition of Ethnicity combining Hispanic/Latino and race:          1 - American Indian or Alaskan Native          2 - Asian or Pacific Islander          3 - Black, not of Hispanic origin          4 - Hispanic          5 - White, not of Hispanic origin.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="oldEthnicityDescriptor")]
        public string OldEthnicityDescriptor { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }

        /// <summary>
        /// A person's gender.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="sexDescriptor")]
        public string SexDescriptor { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a similar professional position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorProfessionalExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorProfessionalExperience { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a teaching position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorTeachingExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorTeachingExperience { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "Staff")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffAddress> _staffAddresses;
        private ICollection<Entities.Common.EdFi.IStaffAddress> _staffAddressesCovariant;

        [DataMember(Name="addresses"), NoDuplicateMembers]
        public ICollection<StaffAddress> StaffAddresses
        {
            get { return _staffAddresses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffAddress>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffAddress)e.Item).Staff = this);
                _staffAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffAddress, StaffAddress>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffAddress)e.Item).Staff = this;
                _staffAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffAddress> Entities.Common.EdFi.IStaff.StaffAddresses
        {
            get { return _staffAddressesCovariant; }
            set { StaffAddresses = new List<StaffAddress>(value.Cast<StaffAddress>()); }
        }

        private ICollection<StaffCredential> _staffCredentials;
        private ICollection<Entities.Common.EdFi.IStaffCredential> _staffCredentialsCovariant;

        [DataMember(Name="credentials"), NoDuplicateMembers]
        public ICollection<StaffCredential> StaffCredentials
        {
            get { return _staffCredentials; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffCredential>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffCredential)e.Item).Staff = this);
                _staffCredentials = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffCredential, StaffCredential>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffCredential)e.Item).Staff = this;
                _staffCredentialsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffCredential> Entities.Common.EdFi.IStaff.StaffCredentials
        {
            get { return _staffCredentialsCovariant; }
            set { StaffCredentials = new List<StaffCredential>(value.Cast<StaffCredential>()); }
        }

        private ICollection<StaffElectronicMail> _staffElectronicMails;
        private ICollection<Entities.Common.EdFi.IStaffElectronicMail> _staffElectronicMailsCovariant;

        [DataMember(Name="electronicMails"), NoDuplicateMembers]
        public ICollection<StaffElectronicMail> StaffElectronicMails
        {
            get { return _staffElectronicMails; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffElectronicMail>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffElectronicMail)e.Item).Staff = this);
                _staffElectronicMails = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffElectronicMail, StaffElectronicMail>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffElectronicMail)e.Item).Staff = this;
                _staffElectronicMailsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffElectronicMail> Entities.Common.EdFi.IStaff.StaffElectronicMails
        {
            get { return _staffElectronicMailsCovariant; }
            set { StaffElectronicMails = new List<StaffElectronicMail>(value.Cast<StaffElectronicMail>()); }
        }

        private ICollection<StaffIdentificationCode> _staffIdentificationCodes;
        private ICollection<Entities.Common.EdFi.IStaffIdentificationCode> _staffIdentificationCodesCovariant;

        [DataMember(Name="identificationCodes"), NoDuplicateMembers]
        public ICollection<StaffIdentificationCode> StaffIdentificationCodes
        {
            get { return _staffIdentificationCodes; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffIdentificationCode>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffIdentificationCode)e.Item).Staff = this);
                _staffIdentificationCodes = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffIdentificationCode, StaffIdentificationCode>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffIdentificationCode)e.Item).Staff = this;
                _staffIdentificationCodesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffIdentificationCode> Entities.Common.EdFi.IStaff.StaffIdentificationCodes
        {
            get { return _staffIdentificationCodesCovariant; }
            set { StaffIdentificationCodes = new List<StaffIdentificationCode>(value.Cast<StaffIdentificationCode>()); }
        }

        private ICollection<StaffIdentificationDocument> _staffIdentificationDocuments;
        private ICollection<Entities.Common.EdFi.IStaffIdentificationDocument> _staffIdentificationDocumentsCovariant;

        [DataMember(Name="identificationDocuments"), NoDuplicateMembers]
        public ICollection<StaffIdentificationDocument> StaffIdentificationDocuments
        {
            get { return _staffIdentificationDocuments; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffIdentificationDocument>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffIdentificationDocument)e.Item).Staff = this);
                _staffIdentificationDocuments = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffIdentificationDocument, StaffIdentificationDocument>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffIdentificationDocument)e.Item).Staff = this;
                _staffIdentificationDocumentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffIdentificationDocument> Entities.Common.EdFi.IStaff.StaffIdentificationDocuments
        {
            get { return _staffIdentificationDocumentsCovariant; }
            set { StaffIdentificationDocuments = new List<StaffIdentificationDocument>(value.Cast<StaffIdentificationDocument>()); }
        }

        private ICollection<StaffInternationalAddress> _staffInternationalAddresses;
        private ICollection<Entities.Common.EdFi.IStaffInternationalAddress> _staffInternationalAddressesCovariant;

        [DataMember(Name="internationalAddresses"), NoDuplicateMembers]
        public ICollection<StaffInternationalAddress> StaffInternationalAddresses
        {
            get { return _staffInternationalAddresses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffInternationalAddress>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffInternationalAddress)e.Item).Staff = this);
                _staffInternationalAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffInternationalAddress, StaffInternationalAddress>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffInternationalAddress)e.Item).Staff = this;
                _staffInternationalAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffInternationalAddress> Entities.Common.EdFi.IStaff.StaffInternationalAddresses
        {
            get { return _staffInternationalAddressesCovariant; }
            set { StaffInternationalAddresses = new List<StaffInternationalAddress>(value.Cast<StaffInternationalAddress>()); }
        }

        private ICollection<StaffLanguage> _staffLanguages;
        private ICollection<Entities.Common.EdFi.IStaffLanguage> _staffLanguagesCovariant;

        [DataMember(Name="languages"), NoDuplicateMembers]
        public ICollection<StaffLanguage> StaffLanguages
        {
            get { return _staffLanguages; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffLanguage>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffLanguage)e.Item).Staff = this);
                _staffLanguages = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffLanguage, StaffLanguage>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffLanguage)e.Item).Staff = this;
                _staffLanguagesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffLanguage> Entities.Common.EdFi.IStaff.StaffLanguages
        {
            get { return _staffLanguagesCovariant; }
            set { StaffLanguages = new List<StaffLanguage>(value.Cast<StaffLanguage>()); }
        }

        private ICollection<StaffOtherName> _staffOtherNames;
        private ICollection<Entities.Common.EdFi.IStaffOtherName> _staffOtherNamesCovariant;

        [DataMember(Name="otherNames"), NoDuplicateMembers]
        public ICollection<StaffOtherName> StaffOtherNames
        {
            get { return _staffOtherNames; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffOtherName>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffOtherName)e.Item).Staff = this);
                _staffOtherNames = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffOtherName, StaffOtherName>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffOtherName)e.Item).Staff = this;
                _staffOtherNamesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffOtherName> Entities.Common.EdFi.IStaff.StaffOtherNames
        {
            get { return _staffOtherNamesCovariant; }
            set { StaffOtherNames = new List<StaffOtherName>(value.Cast<StaffOtherName>()); }
        }

        private ICollection<StaffPersonalIdentificationDocument> _staffPersonalIdentificationDocuments;
        private ICollection<Entities.Common.EdFi.IStaffPersonalIdentificationDocument> _staffPersonalIdentificationDocumentsCovariant;

        [DataMember(Name="personalIdentificationDocuments"), NoDuplicateMembers]
        public ICollection<StaffPersonalIdentificationDocument> StaffPersonalIdentificationDocuments
        {
            get { return _staffPersonalIdentificationDocuments; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffPersonalIdentificationDocument>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffPersonalIdentificationDocument)e.Item).Staff = this);
                _staffPersonalIdentificationDocuments = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffPersonalIdentificationDocument, StaffPersonalIdentificationDocument>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffPersonalIdentificationDocument)e.Item).Staff = this;
                _staffPersonalIdentificationDocumentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffPersonalIdentificationDocument> Entities.Common.EdFi.IStaff.StaffPersonalIdentificationDocuments
        {
            get { return _staffPersonalIdentificationDocumentsCovariant; }
            set { StaffPersonalIdentificationDocuments = new List<StaffPersonalIdentificationDocument>(value.Cast<StaffPersonalIdentificationDocument>()); }
        }

        private ICollection<StaffRace> _staffRaces;
        private ICollection<Entities.Common.EdFi.IStaffRace> _staffRacesCovariant;

        [DataMember(Name="races"), NoDuplicateMembers]
        public ICollection<StaffRace> StaffRaces
        {
            get { return _staffRaces; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffRace>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffRace)e.Item).Staff = this);
                _staffRaces = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffRace, StaffRace>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffRace)e.Item).Staff = this;
                _staffRacesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffRace> Entities.Common.EdFi.IStaff.StaffRaces
        {
            get { return _staffRacesCovariant; }
            set { StaffRaces = new List<StaffRace>(value.Cast<StaffRace>()); }
        }

        private ICollection<StaffRecognition> _staffRecognitions;
        private ICollection<Entities.Common.EdFi.IStaffRecognition> _staffRecognitionsCovariant;

        [DataMember(Name="recognitions"), NoDuplicateMembers]
        public ICollection<StaffRecognition> StaffRecognitions
        {
            get { return _staffRecognitions; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffRecognition>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffRecognition)e.Item).Staff = this);
                _staffRecognitions = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffRecognition, StaffRecognition>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffRecognition)e.Item).Staff = this;
                _staffRecognitionsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffRecognition> Entities.Common.EdFi.IStaff.StaffRecognitions
        {
            get { return _staffRecognitionsCovariant; }
            set { StaffRecognitions = new List<StaffRecognition>(value.Cast<StaffRecognition>()); }
        }

        private ICollection<StaffTelephone> _staffTelephones;
        private ICollection<Entities.Common.EdFi.IStaffTelephone> _staffTelephonesCovariant;

        [DataMember(Name="telephones"), NoDuplicateMembers]
        public ICollection<StaffTelephone> StaffTelephones
        {
            get { return _staffTelephones; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffTelephone>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffTelephone)e.Item).Staff = this);
                _staffTelephones = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffTelephone, StaffTelephone>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffTelephone)e.Item).Staff = this;
                _staffTelephonesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffTelephone> Entities.Common.EdFi.IStaff.StaffTelephones
        {
            get { return _staffTelephonesCovariant; }
            set { StaffTelephones = new List<StaffTelephone>(value.Cast<StaffTelephone>()); }
        }

        private ICollection<StaffTribalAffiliation> _staffTribalAffiliations;
        private ICollection<Entities.Common.EdFi.IStaffTribalAffiliation> _staffTribalAffiliationsCovariant;

        [DataMember(Name="tribalAffiliations"), NoDuplicateMembers]
        public ICollection<StaffTribalAffiliation> StaffTribalAffiliations
        {
            get { return _staffTribalAffiliations; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffTribalAffiliation>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffTribalAffiliation)e.Item).Staff = this);
                _staffTribalAffiliations = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffTribalAffiliation, StaffTribalAffiliation>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffTribalAffiliation)e.Item).Staff = this;
                _staffTribalAffiliationsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffTribalAffiliation> Entities.Common.EdFi.IStaff.StaffTribalAffiliations
        {
            get { return _staffTribalAffiliationsCovariant; }
            set { StaffTribalAffiliations = new List<StaffTribalAffiliation>(value.Cast<StaffTribalAffiliation>()); }
        }

        private ICollection<StaffVisa> _staffVisas;
        private ICollection<Entities.Common.EdFi.IStaffVisa> _staffVisasCovariant;

        [DataMember(Name="visas"), NoDuplicateMembers]
        public ICollection<StaffVisa> StaffVisas
        {
            get { return _staffVisas; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffVisa>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffVisa)e.Item).Staff = this);
                _staffVisas = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffVisa, StaffVisa>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffVisa)e.Item).Staff = this;
                _staffVisasCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffVisa> Entities.Common.EdFi.IStaff.StaffVisas
        {
            get { return _staffVisasCovariant; }
            set { StaffVisas = new List<StaffVisa>(value.Cast<StaffVisa>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffAddresses != null) foreach (var item in _staffAddresses)
            {
                item.Staff = this;
            }

            if (_staffCredentials != null) foreach (var item in _staffCredentials)
            {
                item.Staff = this;
            }

            if (_staffElectronicMails != null) foreach (var item in _staffElectronicMails)
            {
                item.Staff = this;
            }

            if (_staffIdentificationCodes != null) foreach (var item in _staffIdentificationCodes)
            {
                item.Staff = this;
            }

            if (_staffIdentificationDocuments != null) foreach (var item in _staffIdentificationDocuments)
            {
                item.Staff = this;
            }

            if (_staffInternationalAddresses != null) foreach (var item in _staffInternationalAddresses)
            {
                item.Staff = this;
            }

            if (_staffLanguages != null) foreach (var item in _staffLanguages)
            {
                item.Staff = this;
            }

            if (_staffOtherNames != null) foreach (var item in _staffOtherNames)
            {
                item.Staff = this;
            }

            if (_staffPersonalIdentificationDocuments != null) foreach (var item in _staffPersonalIdentificationDocuments)
            {
                item.Staff = this;
            }

            if (_staffRaces != null) foreach (var item in _staffRaces)
            {
                item.Staff = this;
            }

            if (_staffRecognitions != null) foreach (var item in _staffRecognitions)
            {
                item.Staff = this;
            }

            if (_staffTelephones != null) foreach (var item in _staffTelephones)
            {
                item.Staff = this;
            }

            if (_staffTribalAffiliations != null) foreach (var item in _staffTribalAffiliations)
            {
                item.Staff = this;
            }

            if (_staffVisas != null) foreach (var item in _staffVisas)
            {
                item.Staff = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaff)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffMapper.MapTo(this, (Entities.Common.EdFi.IStaff)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsBirthDateSupported                                   { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsCitizenshipStatusDescriptorSupported                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsFirstNameSupported                                   { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsGenerationCodeSuffixSupported                        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsHighestCompletedLevelOfEducationDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsHighlyQualifiedTeacherSupported                      { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsHispanicLatinoEthnicitySupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsLastSurnameSupported                                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsLoginIdSupported                                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsMaidenNameSupported                                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsMiddleNameSupported                                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsOldEthnicityDescriptorSupported                      { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsPersonalTitlePrefixSupported                         { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsSexDescriptorSupported                               { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffAddressesSupported                              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffCredentialsSupported                            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffElectronicMailsSupported                        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationCodesSupported                    { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationDocumentsSupported                { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffInternationalAddressesSupported                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffLanguagesSupported                              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffOtherNamesSupported                             { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffPersonalIdentificationDocumentsSupported        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRacesSupported                                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRecognitionsSupported                           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTelephonesSupported                             { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTribalAffiliationsSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffUniqueIdSupported                               { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffVisasSupported                                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsYearsOfPriorProfessionalExperienceSupported          { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsYearsOfPriorTeachingExperienceSupported              { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.EdFi.IStaffAddress, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffAddressIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffCredential, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffCredentialIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffElectronicMail, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffElectronicMailIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffIdentificationCode, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationCodeIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffIdentificationDocument, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationDocumentIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffInternationalAddress, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffInternationalAddressIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffLanguage, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffLanguageIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffOtherName, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffOtherNameIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffPersonalIdentificationDocument, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffPersonalIdentificationDocumentIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffRace, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRaceIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffRecognition, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRecognitionIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffTelephone, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTelephoneIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffTribalAffiliation, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTribalAffiliationIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffVisa, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffVisaIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPutPostRequestValidator : FluentValidation.AbstractValidator<Staff>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<Staff> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var staffAddressesValidator = new StaffAddressPutPostRequestValidator();

            foreach (var item in instance.StaffAddresses)
            {
                var validationResult = staffAddressesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffCredentialsValidator = new StaffCredentialPutPostRequestValidator();

            foreach (var item in instance.StaffCredentials)
            {
                var validationResult = staffCredentialsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffElectronicMailsValidator = new StaffElectronicMailPutPostRequestValidator();

            foreach (var item in instance.StaffElectronicMails)
            {
                var validationResult = staffElectronicMailsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffIdentificationCodesValidator = new StaffIdentificationCodePutPostRequestValidator();

            foreach (var item in instance.StaffIdentificationCodes)
            {
                var validationResult = staffIdentificationCodesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffIdentificationDocumentsValidator = new StaffIdentificationDocumentPutPostRequestValidator();

            foreach (var item in instance.StaffIdentificationDocuments)
            {
                var validationResult = staffIdentificationDocumentsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffInternationalAddressesValidator = new StaffInternationalAddressPutPostRequestValidator();

            foreach (var item in instance.StaffInternationalAddresses)
            {
                var validationResult = staffInternationalAddressesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffLanguagesValidator = new StaffLanguagePutPostRequestValidator();

            foreach (var item in instance.StaffLanguages)
            {
                var validationResult = staffLanguagesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffOtherNamesValidator = new StaffOtherNamePutPostRequestValidator();

            foreach (var item in instance.StaffOtherNames)
            {
                var validationResult = staffOtherNamesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffPersonalIdentificationDocumentsValidator = new StaffPersonalIdentificationDocumentPutPostRequestValidator();

            foreach (var item in instance.StaffPersonalIdentificationDocuments)
            {
                var validationResult = staffPersonalIdentificationDocumentsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffRacesValidator = new StaffRacePutPostRequestValidator();

            foreach (var item in instance.StaffRaces)
            {
                var validationResult = staffRacesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffRecognitionsValidator = new StaffRecognitionPutPostRequestValidator();

            foreach (var item in instance.StaffRecognitions)
            {
                var validationResult = staffRecognitionsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffTelephonesValidator = new StaffTelephonePutPostRequestValidator();

            foreach (var item in instance.StaffTelephones)
            {
                var validationResult = staffTelephonesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffTribalAffiliationsValidator = new StaffTribalAffiliationPutPostRequestValidator();

            foreach (var item in instance.StaffTribalAffiliations)
            {
                var validationResult = staffTribalAffiliationsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffVisasValidator = new StaffVisaPutPostRequestValidator();

            foreach (var item in instance.StaffVisas)
            {
                var validationResult = staffVisasValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffAddress table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffAddress : Entities.Common.EdFi.IStaffAddress, Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StaffAddress()
        {
            StaffAddressPeriods = new List<StaffAddressPeriod>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffAddress.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressTypeDescriptor"), NaturalKeyMember]
        public string AddressTypeDescriptor { get; set; }

        /// <summary>
        /// The name of the city in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="city"), NaturalKeyMember]
        public string City { get; set; }

        /// <summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="postalCode"), NaturalKeyMember]
        public string PostalCode { get; set; }

        /// <summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="stateAbbreviationDescriptor"), NaturalKeyMember]
        public string StateAbbreviationDescriptor { get; set; }

        /// <summary>
        /// The street number and street name or post office box number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="streetNumberName"), NaturalKeyMember]
        public string StreetNumberName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffAddress;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).AddressTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffAddress).AddressTypeDescriptor.Equals(compareTo.AddressTypeDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).City == null
                || !(this as Entities.Common.EdFi.IStaffAddress).City.Equals(compareTo.City)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).PostalCode == null
                || !(this as Entities.Common.EdFi.IStaffAddress).PostalCode.Equals(compareTo.PostalCode)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).StateAbbreviationDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffAddress).StateAbbreviationDescriptor.Equals(compareTo.StateAbbreviationDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).StreetNumberName == null
                || !(this as Entities.Common.EdFi.IStaffAddress).StreetNumberName.Equals(compareTo.StreetNumberName)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).AddressTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).AddressTypeDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).City != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).City.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).PostalCode != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).PostalCode.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).StateAbbreviationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).StateAbbreviationDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).StreetNumberName != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).StreetNumberName.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The apartment, room, or suite number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="apartmentRoomSuiteNumber")]
        public string ApartmentRoomSuiteNumber { get; set; }

        /// <summary>
        /// The number of the building on the site, if more than one building shares the same address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="buildingSiteNumber")]
        public string BuildingSiteNumber { get; set; }

        /// <summary>
        /// The congressional district in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="congressionalDistrict")]
        public string CongressionalDistrict { get; set; }

        /// <summary>
        /// The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \"first-order subdivisions\" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="countyFIPSCode")]
        public string CountyFIPSCode { get; set; }

        /// <summary>
        /// An indication that the address should not be published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// A general geographic indicator that categorizes U.S. territory (e.g., City, Suburban).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="localeDescriptor")]
        public string LocaleDescriptor { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }

        /// <summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in                        'which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nameOfCounty")]
        public string NameOfCounty { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffAddress")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffAddressPeriod> _staffAddressPeriods;
        private ICollection<Entities.Common.EdFi.IStaffAddressPeriod> _staffAddressPeriodsCovariant;

        [DataMember(Name="periods"), NoDuplicateMembers]
        public ICollection<StaffAddressPeriod> StaffAddressPeriods
        {
            get { return _staffAddressPeriods; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffAddressPeriod>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffAddressPeriod)e.Item).StaffAddress = this);
                _staffAddressPeriods = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffAddressPeriod, StaffAddressPeriod>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffAddressPeriod)e.Item).StaffAddress = this;
                _staffAddressPeriodsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffAddressPeriod> Entities.Common.EdFi.IStaffAddress.StaffAddressPeriods
        {
            get { return _staffAddressPeriodsCovariant; }
            set { StaffAddressPeriods = new List<StaffAddressPeriod>(value.Cast<StaffAddressPeriod>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffAddressPeriods != null) foreach (var item in _staffAddressPeriods)
            {
                item.StaffAddress = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffAddressMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffAddress)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffAddressMapper.MapTo(this, (Entities.Common.EdFi.IStaffAddress)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsApartmentRoomSuiteNumberSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsBuildingSiteNumberSupported        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsCongressionalDistrictSupported     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsCountyFIPSCodeSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsLatitudeSupported                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsLocaleDescriptorSupported          { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsLongitudeSupported                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsNameOfCountySupported              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsStaffAddressPeriodsSupported       { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.EdFi.IStaffAddressPeriod, bool> Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsStaffAddressPeriodIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffAddressPutPostRequestValidator : FluentValidation.AbstractValidator<StaffAddress>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffAddress> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var staffAddressPeriodsValidator = new StaffAddressPeriodPutPostRequestValidator();

            foreach (var item in instance.StaffAddressPeriods)
            {
                var validationResult = staffAddressPeriodsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffAddressPeriod table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffAddressPeriod : Entities.Common.EdFi.IStaffAddressPeriod, Entities.Common.EdFi.IStaffAddressPeriodSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaffAddress _staffAddress;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaffAddress Entities.Common.EdFi.IStaffAddressPeriod.StaffAddress
        {
            get { return _staffAddress; }
            set { SetStaffAddress(value); }
        }

        internal Entities.Common.EdFi.IStaffAddress StaffAddress
        {
            set { SetStaffAddress(value); }
        }

        private void SetStaffAddress(Entities.Common.EdFi.IStaffAddress value)
        {
            _staffAddress = value;
        }

        /// <summary>
        /// The month, day, and year for the start of the period.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate"), NaturalKeyMember][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime BeginDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffAddressPeriod;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staffAddress == null || !_staffAddress.Equals(compareTo.StaffAddress))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddressPeriod).BeginDate == null
                || !(this as Entities.Common.EdFi.IStaffAddressPeriod).BeginDate.Equals(compareTo.BeginDate)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffAddress != null)
                    hash = hash * 23 + _staffAddress.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddressPeriod).BeginDate != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddressPeriod).BeginDate.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year for the end of the period.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffAddressPeriod")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffAddressPeriodMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffAddressPeriod)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffAddressPeriodMapper.MapTo(this, (Entities.Common.EdFi.IStaffAddressPeriod)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffAddressPeriodSynchronizationSourceSupport.IsEndDateSupported  { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffAddressPeriodPutPostRequestValidator : FluentValidation.AbstractValidator<StaffAddressPeriod>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffAddressPeriod> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffCredential table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffCredential : Entities.Common.EdFi.IStaffCredential, Entities.Common.EdFi.IStaffCredentialSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _credentialReferenceExplicitlyAssigned;
        private Credential.EdFi.CredentialReference _credentialReference;
        private Credential.EdFi.CredentialReference ImplicitCredentialReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_credentialReference == null && !_credentialReferenceExplicitlyAssigned)
                    _credentialReference = new Credential.EdFi.CredentialReference();

                return _credentialReference;
            }
        }

        [DataMember(Name="credentialReference")][NaturalKeyMember]
        public Credential.EdFi.CredentialReference CredentialReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitCredentialReference != null
                    && (_credentialReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitCredentialReference.IsReferenceFullyDefined()))
                    return ImplicitCredentialReference;

                return null;
            }
            set
            {
                _credentialReferenceExplicitlyAssigned = true;
                _credentialReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffCredential.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// Identifier or serial number assigned to the credential.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.EdFi.IStaffCredential.CredentialIdentifier
        {
            get
            {
                if (ImplicitCredentialReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCredentialReference.IsReferenceFullyDefined()))
                    return ImplicitCredentialReference.CredentialIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Credential
                _credentialReferenceExplicitlyAssigned = false;
                ImplicitCredentialReference.CredentialIdentifier = value;
            }
        }

        /// <summary>
        /// The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued.
        /// </summary>

        // IS in a reference (StaffCredential.StateOfIssueStateAbbreviationDescriptorId), IS a lookup column 
        string Entities.Common.EdFi.IStaffCredential.StateOfIssueStateAbbreviationDescriptor
        {
            get
            {
                if (ImplicitCredentialReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCredentialReference.IsReferenceFullyDefined()))
                    return ImplicitCredentialReference.StateOfIssueStateAbbreviationDescriptor;

                return null;
            }
            set
            {
                ImplicitCredentialReference.StateOfIssueStateAbbreviationDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffCredential;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Referenced Property
            if ((this as Entities.Common.EdFi.IStaffCredential).CredentialIdentifier == null
                || !(this as Entities.Common.EdFi.IStaffCredential).CredentialIdentifier.Equals(compareTo.CredentialIdentifier)) 
                return false;
 
            // Unified Type Property
            if ((this as Entities.Common.EdFi.IStaffCredential).StateOfIssueStateAbbreviationDescriptor == null
                ||!(this as Entities.Common.EdFi.IStaffCredential).StateOfIssueStateAbbreviationDescriptor.Equals(compareTo.StateOfIssueStateAbbreviationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                //Referenced Property
                if ((this as Entities.Common.EdFi.IStaffCredential).CredentialIdentifier != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffCredential).CredentialIdentifier.GetHashCode();
 
                //Unified Type Property
                if ((this as Entities.Common.EdFi.IStaffCredential).StateOfIssueStateAbbreviationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffCredential).StateOfIssueStateAbbreviationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffCredential")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffCredentialMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffCredential)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffCredentialMapper.MapTo(this, (Entities.Common.EdFi.IStaffCredential)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.EdFi.IStaffCredential.CredentialResourceId 
        { 
            get { return null; }
            set { ImplicitCredentialReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.EdFi.IStaffCredential.CredentialDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitCredentialReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffCredentialPutPostRequestValidator : FluentValidation.AbstractValidator<StaffCredential>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffCredential> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffElectronicMail table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffElectronicMail : Entities.Common.EdFi.IStaffElectronicMail, Entities.Common.EdFi.IStaffElectronicMailSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffElectronicMail.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The electronic mail (e-mail) address listed for an individual or organization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="electronicMailAddress"), NaturalKeyMember]
        public string ElectronicMailAddress { get; set; }

        /// <summary>
        /// The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="electronicMailTypeDescriptor"), NaturalKeyMember]
        public string ElectronicMailTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffElectronicMail;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailAddress == null
                || !(this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailAddress.Equals(compareTo.ElectronicMailAddress)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailTypeDescriptor.Equals(compareTo.ElectronicMailTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailAddress != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailAddress.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication that the electronic email address should not be published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="primaryEmailAddressIndicator")]
        public bool? PrimaryEmailAddressIndicator { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffElectronicMail")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffElectronicMailMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffElectronicMail)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffElectronicMailMapper.MapTo(this, (Entities.Common.EdFi.IStaffElectronicMail)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffElectronicMailSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported         { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffElectronicMailSynchronizationSourceSupport.IsPrimaryEmailAddressIndicatorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffElectronicMailPutPostRequestValidator : FluentValidation.AbstractValidator<StaffElectronicMail>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffElectronicMail> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffIdentificationCode table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffIdentificationCode : Entities.Common.EdFi.IStaffIdentificationCode, Entities.Common.EdFi.IStaffIdentificationCodeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffIdentificationCode.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a staff member.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="staffIdentificationSystemDescriptor"), NaturalKeyMember]
        public string StaffIdentificationSystemDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffIdentificationCode;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffIdentificationCode).StaffIdentificationSystemDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffIdentificationCode).StaffIdentificationSystemDescriptor.Equals(compareTo.StaffIdentificationSystemDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffIdentificationCode).StaffIdentificationSystemDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffIdentificationCode).StaffIdentificationSystemDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The organization code or name assigning the staff Identification Code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="assigningOrganizationIdentificationCode")]
        public string AssigningOrganizationIdentificationCode { get; set; }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="identificationCode")]
        public string IdentificationCode { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffIdentificationCode")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffIdentificationCodeMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffIdentificationCode)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffIdentificationCodeMapper.MapTo(this, (Entities.Common.EdFi.IStaffIdentificationCode)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffIdentificationCodeSynchronizationSourceSupport.IsAssigningOrganizationIdentificationCodeSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationCodeSynchronizationSourceSupport.IsIdentificationCodeSupported                       { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffIdentificationCodePutPostRequestValidator : FluentValidation.AbstractValidator<StaffIdentificationCode>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffIdentificationCode> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffIdentificationDocument table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffIdentificationDocument : Entities.Common.EdFi.IStaffIdentificationDocument, Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffIdentificationDocument.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The primary function of the document used for establishing identity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="identificationDocumentUseDescriptor"), NaturalKeyMember]
        public string IdentificationDocumentUseDescriptor { get; set; }

        /// <summary>
        /// The category of the document relative to its purpose.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="personalInformationVerificationDescriptor"), NaturalKeyMember]
        public string PersonalInformationVerificationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffIdentificationDocument;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffIdentificationDocument).IdentificationDocumentUseDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffIdentificationDocument).IdentificationDocumentUseDescriptor.Equals(compareTo.IdentificationDocumentUseDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffIdentificationDocument).PersonalInformationVerificationDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffIdentificationDocument).PersonalInformationVerificationDescriptor.Equals(compareTo.PersonalInformationVerificationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffIdentificationDocument).IdentificationDocumentUseDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffIdentificationDocument).IdentificationDocumentUseDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffIdentificationDocument).PersonalInformationVerificationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffIdentificationDocument).PersonalInformationVerificationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The day when the document  expires, if null then never expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentExpirationDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? DocumentExpirationDate { get; set; }

        /// <summary>
        /// The title of the document given by the issuer.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentTitle")]
        public string DocumentTitle { get; set; }

        /// <summary>
        /// Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="issuerCountryDescriptor")]
        public string IssuerCountryDescriptor { get; set; }

        /// <summary>
        /// The unique identifier on the issuer's identification system.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerDocumentIdentificationCode")]
        public string IssuerDocumentIdentificationCode { get; set; }

        /// <summary>
        /// Name of the entity or institution that issued the document.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffIdentificationDocument")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffIdentificationDocumentMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffIdentificationDocumentMapper.MapTo(this, (Entities.Common.EdFi.IStaffIdentificationDocument)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported                        { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffIdentificationDocumentPutPostRequestValidator : FluentValidation.AbstractValidator<StaffIdentificationDocument>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffIdentificationDocument> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffInternationalAddress table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffInternationalAddress : Entities.Common.EdFi.IStaffInternationalAddress, Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffInternationalAddress.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The type of address listed for an individual or organization. For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressTypeDescriptor"), NaturalKeyMember]
        public string AddressTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffInternationalAddress;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffInternationalAddress).AddressTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffInternationalAddress).AddressTypeDescriptor.Equals(compareTo.AddressTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffInternationalAddress).AddressTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffInternationalAddress).AddressTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The first line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine1")]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// The second line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine2")]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// The third line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine3")]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// The fourth line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine4")]
        public string AddressLine4 { get; set; }

        /// <summary>
        /// The first date the address is valid. For physical addresses, the date the person moved to that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The name of the country. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="countryDescriptor")]
        public string CountryDescriptor { get; set; }

        /// <summary>
        /// The last date the address is valid. For physical addresses, this would be the date the person moved from that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffInternationalAddress")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffInternationalAddressMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffInternationalAddress)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffInternationalAddressMapper.MapTo(this, (Entities.Common.EdFi.IStaffInternationalAddress)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine1Supported       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine2Supported       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine3Supported       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine4Supported       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsBeginDateSupported          { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsCountryDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsEndDateSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsLatitudeSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsLongitudeSupported          { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffInternationalAddressPutPostRequestValidator : FluentValidation.AbstractValidator<StaffInternationalAddress>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffInternationalAddress> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffLanguage table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffLanguage : Entities.Common.EdFi.IStaffLanguage, Entities.Common.EdFi.IStaffLanguageSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StaffLanguage()
        {
            StaffLanguageUses = new List<StaffLanguageUse>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffLanguage.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// A specification of which written or spoken communication is being used.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="languageDescriptor"), NaturalKeyMember]
        public string LanguageDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffLanguage;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffLanguage).LanguageDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffLanguage).LanguageDescriptor.Equals(compareTo.LanguageDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffLanguage).LanguageDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffLanguage).LanguageDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffLanguage")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffLanguageUse> _staffLanguageUses;
        private ICollection<Entities.Common.EdFi.IStaffLanguageUse> _staffLanguageUsesCovariant;

        [DataMember(Name="uses"), NoDuplicateMembers]
        public ICollection<StaffLanguageUse> StaffLanguageUses
        {
            get { return _staffLanguageUses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffLanguageUse>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffLanguageUse)e.Item).StaffLanguage = this);
                _staffLanguageUses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffLanguageUse, StaffLanguageUse>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffLanguageUse)e.Item).StaffLanguage = this;
                _staffLanguageUsesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffLanguageUse> Entities.Common.EdFi.IStaffLanguage.StaffLanguageUses
        {
            get { return _staffLanguageUsesCovariant; }
            set { StaffLanguageUses = new List<StaffLanguageUse>(value.Cast<StaffLanguageUse>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffLanguageUses != null) foreach (var item in _staffLanguageUses)
            {
                item.StaffLanguage = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffLanguageMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffLanguage)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffLanguageMapper.MapTo(this, (Entities.Common.EdFi.IStaffLanguage)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffLanguageSynchronizationSourceSupport.IsStaffLanguageUsesSupported  { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.EdFi.IStaffLanguageUse, bool> Entities.Common.EdFi.IStaffLanguageSynchronizationSourceSupport.IsStaffLanguageUseIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffLanguagePutPostRequestValidator : FluentValidation.AbstractValidator<StaffLanguage>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffLanguage> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var staffLanguageUsesValidator = new StaffLanguageUsePutPostRequestValidator();

            foreach (var item in instance.StaffLanguageUses)
            {
                var validationResult = staffLanguageUsesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffLanguageUse table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffLanguageUse : Entities.Common.EdFi.IStaffLanguageUse, Entities.Common.EdFi.IStaffLanguageUseSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaffLanguage _staffLanguage;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaffLanguage Entities.Common.EdFi.IStaffLanguageUse.StaffLanguage
        {
            get { return _staffLanguage; }
            set { SetStaffLanguage(value); }
        }

        internal Entities.Common.EdFi.IStaffLanguage StaffLanguage
        {
            set { SetStaffLanguage(value); }
        }

        private void SetStaffLanguage(Entities.Common.EdFi.IStaffLanguage value)
        {
            _staffLanguage = value;
        }

        /// <summary>
        /// A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="languageUseDescriptor"), NaturalKeyMember]
        public string LanguageUseDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffLanguageUse;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staffLanguage == null || !_staffLanguage.Equals(compareTo.StaffLanguage))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffLanguageUse).LanguageUseDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffLanguageUse).LanguageUseDescriptor.Equals(compareTo.LanguageUseDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffLanguage != null)
                    hash = hash * 23 + _staffLanguage.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffLanguageUse).LanguageUseDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffLanguageUse).LanguageUseDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffLanguageUse")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffLanguageUseMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffLanguageUse)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffLanguageUseMapper.MapTo(this, (Entities.Common.EdFi.IStaffLanguageUse)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffLanguageUsePutPostRequestValidator : FluentValidation.AbstractValidator<StaffLanguageUse>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffLanguageUse> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffOtherName table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffOtherName : Entities.Common.EdFi.IStaffOtherName, Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffOtherName.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The types of alternate names for a person.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="otherNameTypeDescriptor"), NaturalKeyMember]
        public string OtherNameTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffOtherName;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffOtherName).OtherNameTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffOtherName).OtherNameTypeDescriptor.Equals(compareTo.OtherNameTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffOtherName).OtherNameTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffOtherName).OtherNameTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffOtherName")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffOtherNameMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffOtherName)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffOtherNameMapper.MapTo(this, (Entities.Common.EdFi.IStaffOtherName)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsFirstNameSupported             { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsGenerationCodeSuffixSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsLastSurnameSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsMiddleNameSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsPersonalTitlePrefixSupported   { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffOtherNamePutPostRequestValidator : FluentValidation.AbstractValidator<StaffOtherName>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffOtherName> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffPersonalIdentificationDocument table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffPersonalIdentificationDocument : Entities.Common.EdFi.IStaffPersonalIdentificationDocument, Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffPersonalIdentificationDocument.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The primary function of the document used for establishing identity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="identificationDocumentUseDescriptor"), NaturalKeyMember]
        public string IdentificationDocumentUseDescriptor { get; set; }

        /// <summary>
        /// The category of the document relative to its purpose.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="personalInformationVerificationDescriptor"), NaturalKeyMember]
        public string PersonalInformationVerificationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffPersonalIdentificationDocument;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).IdentificationDocumentUseDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).IdentificationDocumentUseDescriptor.Equals(compareTo.IdentificationDocumentUseDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).PersonalInformationVerificationDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).PersonalInformationVerificationDescriptor.Equals(compareTo.PersonalInformationVerificationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).IdentificationDocumentUseDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).IdentificationDocumentUseDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).PersonalInformationVerificationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).PersonalInformationVerificationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The day when the document  expires, if null then never expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentExpirationDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? DocumentExpirationDate { get; set; }

        /// <summary>
        /// The title of the document given by the issuer.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentTitle")]
        public string DocumentTitle { get; set; }

        /// <summary>
        /// Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="issuerCountryDescriptor")]
        public string IssuerCountryDescriptor { get; set; }

        /// <summary>
        /// The unique identifier on the issuer's identification system.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerDocumentIdentificationCode")]
        public string IssuerDocumentIdentificationCode { get; set; }

        /// <summary>
        /// Name of the entity or institution that issued the document.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffPersonalIdentificationDocument")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffPersonalIdentificationDocumentMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffPersonalIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffPersonalIdentificationDocumentMapper.MapTo(this, (Entities.Common.EdFi.IStaffPersonalIdentificationDocument)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported                        { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPersonalIdentificationDocumentPutPostRequestValidator : FluentValidation.AbstractValidator<StaffPersonalIdentificationDocument>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffPersonalIdentificationDocument> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffRace table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffRace : Entities.Common.EdFi.IStaffRace, Entities.Common.EdFi.IStaffRaceSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffRace.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The general racial category which most clearly reflects the individual's recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="raceDescriptor"), NaturalKeyMember]
        public string RaceDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffRace;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffRace).RaceDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffRace).RaceDescriptor.Equals(compareTo.RaceDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffRace).RaceDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffRace).RaceDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffRace")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffRaceMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffRace)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffRaceMapper.MapTo(this, (Entities.Common.EdFi.IStaffRace)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffRacePutPostRequestValidator : FluentValidation.AbstractValidator<StaffRace>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffRace> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffRecognition table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffRecognition : Entities.Common.EdFi.IStaffRecognition, Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffRecognition.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The nature of recognition given to the learner for accomplishments in a co-curricular, or extra-curricular activity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="recognitionTypeDescriptor"), NaturalKeyMember]
        public string RecognitionTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffRecognition;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffRecognition).RecognitionTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffRecognition).RecognitionTypeDescriptor.Equals(compareTo.RecognitionTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffRecognition).RecognitionTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffRecognition).RecognitionTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The category of achievement attributed to the learner.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="achievementCategoryDescriptor")]
        public string AchievementCategoryDescriptor { get; set; }

        /// <summary>
        /// The system that defines the categories by which an achievement is attributed to the learner.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="achievementCategorySystem")]
        public string AchievementCategorySystem { get; set; }

        /// <summary>
        /// The title assigned to the achievement.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="achievementTitle")]
        public string AchievementTitle { get; set; }

        /// <summary>
        /// The criteria for competency-based completion of the achievement/award.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="criteria")]
        public string Criteria { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="criteriaURL")]
        public string CriteriaURL { get; set; }

        /// <summary>
        /// A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="evidenceStatement")]
        public string EvidenceStatement { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="imageURL")]
        public string ImageURL { get; set; }

        /// <summary>
        /// The name of the agent, entity, or institution issuing the element.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) from which the award was issued.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerOriginURL")]
        public string IssuerOriginURL { get; set; }

        /// <summary>
        /// The date the recognition was awarded or earned.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="recognitionAwardDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? RecognitionAwardDate { get; set; }

        /// <summary>
        /// Date on which the award expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="recognitionAwardExpiresDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? RecognitionAwardExpiresDate { get; set; }

        /// <summary>
        /// A description of the type of academic distinctions earned by or awarded to the individual.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="recognitionDescription")]
        public string RecognitionDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffRecognition")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffRecognitionMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffRecognition)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffRecognitionMapper.MapTo(this, (Entities.Common.EdFi.IStaffRecognition)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsAchievementCategoryDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsAchievementCategorySystemSupported      { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsAchievementTitleSupported               { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsCriteriaSupported                       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsCriteriaURLSupported                    { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsEvidenceStatementSupported              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsImageURLSupported                       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsIssuerNameSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsIssuerOriginURLSupported                { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsRecognitionAwardDateSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsRecognitionAwardExpiresDateSupported    { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsRecognitionDescriptionSupported         { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffRecognitionPutPostRequestValidator : FluentValidation.AbstractValidator<StaffRecognition>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffRecognition> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffTelephone table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffTelephone : Entities.Common.EdFi.IStaffTelephone, Entities.Common.EdFi.IStaffTelephoneSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffTelephone.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The telephone number including the area code, and extension, if applicable.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="telephoneNumber"), NaturalKeyMember]
        public string TelephoneNumber { get; set; }

        /// <summary>
        /// The type of communication number listed for an individual or organization.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="telephoneNumberTypeDescriptor"), NaturalKeyMember]
        public string TelephoneNumberTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffTelephone;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumber == null
                || !(this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumber.Equals(compareTo.TelephoneNumber)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumberTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumberTypeDescriptor.Equals(compareTo.TelephoneNumberTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumber != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumber.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumberTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumberTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication that the telephone number should not be published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="orderOfPriority")]
        public int? OrderOfPriority { get; set; }

        /// <summary>
        /// An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="textMessageCapabilityIndicator")]
        public bool? TextMessageCapabilityIndicator { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffTelephone")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffTelephoneMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffTelephone)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffTelephoneMapper.MapTo(this, (Entities.Common.EdFi.IStaffTelephone)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffTelephoneSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffTelephoneSynchronizationSourceSupport.IsOrderOfPrioritySupported                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffTelephoneSynchronizationSourceSupport.IsTextMessageCapabilityIndicatorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffTelephonePutPostRequestValidator : FluentValidation.AbstractValidator<StaffTelephone>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffTelephone> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffTribalAffiliation table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffTribalAffiliation : Entities.Common.EdFi.IStaffTribalAffiliation, Entities.Common.EdFi.IStaffTribalAffiliationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffTribalAffiliation.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// An American Indian tribe with which the staff member is affiliated.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="tribalAffiliationDescriptor"), NaturalKeyMember]
        public string TribalAffiliationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffTribalAffiliation;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffTribalAffiliation).TribalAffiliationDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffTribalAffiliation).TribalAffiliationDescriptor.Equals(compareTo.TribalAffiliationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffTribalAffiliation).TribalAffiliationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffTribalAffiliation).TribalAffiliationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffTribalAffiliation")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffTribalAffiliationMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffTribalAffiliation)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffTribalAffiliationMapper.MapTo(this, (Entities.Common.EdFi.IStaffTribalAffiliation)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffTribalAffiliationPutPostRequestValidator : FluentValidation.AbstractValidator<StaffTribalAffiliation>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffTribalAffiliation> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffVisa table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffVisa : Entities.Common.EdFi.IStaffVisa, Entities.Common.EdFi.IStaffVisaSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffVisa.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// An indicator of a non-US citizen's Visa type.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="visaDescriptor"), NaturalKeyMember]
        public string VisaDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffVisa;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffVisa).VisaDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffVisa).VisaDescriptor.Equals(compareTo.VisaDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffVisa).VisaDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffVisa).VisaDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffVisa")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffVisaMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffVisa)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffVisaMapper.MapTo(this, (Entities.Common.EdFi.IStaffVisa)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffVisaPutPostRequestValidator : FluentValidation.AbstractValidator<StaffVisa>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffVisa> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Staff

namespace EdFi.Ods.Api.Models.Resources.Staff.EdFi.Staff_and_Prospect_MixedInclude_Writable.Extensions.GrandBend
{
    /// <summary>
    /// A class which represents the grandbend.StaffExtension table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffExtension : Entities.Common.GrandBend.IStaffExtension, Entities.Common.GrandBend.IStaffExtensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.GrandBend.IStaffExtension.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.GrandBend.IStaffExtension;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The date that the staff member's new hire probationary period was completed.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="probationCompleteDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? ProbationCompleteDate { get; set; }

        /// <summary>
        /// An indication as to whether the staff member is tenured.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="tenured")]
        public bool? Tenured { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.GrandBend.StaffExtensionMapper.SynchronizeTo(this, (Entities.Common.GrandBend.IStaffExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.GrandBend.StaffExtensionMapper.MapTo(this, (Entities.Common.GrandBend.IStaffExtension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.GrandBend.IStaffExtensionSynchronizationSourceSupport.IsProbationCompleteDateSupported  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IStaffExtensionSynchronizationSourceSupport.IsTenuredSupported                { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<StaffExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Staff

namespace EdFi.Ods.Api.Models.Resources.Staff.EdFi.Staff_and_Prospect_MixedInclude_Writable.Extensions.Sample
{
    /// <summary>
    /// A class which represents the sample.StaffExtension table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffExtension : Entities.Common.Sample.IStaffExtension, Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StaffExtension()
        {
            StaffPets = new List<StaffPet>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.Sample.IStaffExtension.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStaffExtension;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The date the staff member adopted the first household pet.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstPetOwnedDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? FirstPetOwnedDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        /// <summary>
        /// petPreference
        /// </summary>
        [DataMember(Name = "petPreference")]
        public StaffPetPreference StaffPetPreference { get; set; }

        Entities.Common.Sample.IStaffPetPreference Entities.Common.Sample.IStaffExtension.StaffPetPreference
        {
            get { return StaffPetPreference; }
            set { StaffPetPreference = (StaffPetPreference) value; }
        }

        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffPet> _staffPets;
        private ICollection<Entities.Common.Sample.IStaffPet> _staffPetsCovariant;

        [DataMember(Name="pets"), NoDuplicateMembers]
        public ICollection<StaffPet> StaffPets
        {
            get { return _staffPets; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffPet>(value,
                    (s, e) => ((Entities.Common.Sample.IStaffPet)e.Item).StaffExtension = this);
                _staffPets = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.Sample.IStaffPet, StaffPet>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.Sample.IStaffPet)e.Item).StaffExtension = this;
                _staffPetsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.Sample.IStaffPet> Entities.Common.Sample.IStaffExtension.StaffPets
        {
            get { return _staffPetsCovariant; }
            set { StaffPets = new List<StaffPet>(value.Cast<StaffPet>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffPets != null) foreach (var item in _staffPets)
            {
                item.StaffExtension = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StaffExtensionMapper.SynchronizeTo(this, (Entities.Common.Sample.IStaffExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StaffExtensionMapper.MapTo(this, (Entities.Common.Sample.IStaffExtension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport.IsFirstPetOwnedDateSupported   { get { return true; } set { } }
        bool Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport.IsStaffPetPreferenceSupported  { get { return true; } set { } }
        bool Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport.IsStaffPetsSupported           { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.Sample.IStaffPet, bool> Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport.IsStaffPetIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<StaffExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var staffPetsValidator = new StaffPetPutPostRequestValidator();

            foreach (var item in instance.StaffPets)
            {
                var validationResult = staffPetsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the sample.StaffPet table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffPet : Entities.Common.Sample.IStaffPet, Entities.Common.Sample.IStaffPetSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.Sample.IStaffExtension _staffExtension;

        [IgnoreDataMember]
        Entities.Common.Sample.IStaffExtension Entities.Common.Sample.IStaffPet.StaffExtension
        {
            get { return _staffExtension; }
            set { SetStaffExtension(value); }
        }

        internal Entities.Common.Sample.IStaffExtension StaffExtension
        {
            set { SetStaffExtension(value); }
        }

        private void SetStaffExtension(Entities.Common.Sample.IStaffExtension value)
        {
            _staffExtension = value;
        }

        /// <summary>
        /// The pet's name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="petName"), NaturalKeyMember]
        public string PetName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStaffPet;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staffExtension == null || !_staffExtension.Equals(compareTo.StaffExtension))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.Sample.IStaffPet).PetName == null
                || !(this as Entities.Common.Sample.IStaffPet).PetName.Equals(compareTo.PetName)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffExtension != null)
                    hash = hash * 23 + _staffExtension.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.Sample.IStaffPet).PetName != null) 
                    hash = hash * 23 + (this as Entities.Common.Sample.IStaffPet).PetName.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication as to whether the pet has been spayed/neutered.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="isFixed")]
        public bool? IsFixed { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StaffPetMapper.SynchronizeTo(this, (Entities.Common.Sample.IStaffPet)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StaffPetMapper.MapTo(this, (Entities.Common.Sample.IStaffPet)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStaffPetSynchronizationSourceSupport.IsIsFixedSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPetPutPostRequestValidator : FluentValidation.AbstractValidator<StaffPet>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffPet> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the sample.StaffPetPreference table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffPetPreference : Entities.Common.Sample.IStaffPetPreference, Entities.Common.Sample.IStaffPetPreferenceSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.Sample.IStaffExtension _staffExtension;

        [IgnoreDataMember]
        Entities.Common.Sample.IStaffExtension Entities.Common.Sample.IStaffPetPreference.StaffExtension
        {
            get { return _staffExtension; }
            set { SetStaffExtension(value); }
        }

        internal Entities.Common.Sample.IStaffExtension StaffExtension
        {
            set { SetStaffExtension(value); }
        }

        private void SetStaffExtension(Entities.Common.Sample.IStaffExtension value)
        {
            _staffExtension = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStaffPetPreference;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staffExtension == null || !_staffExtension.Equals(compareTo.StaffExtension))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffExtension != null)
                    hash = hash * 23 + _staffExtension.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The preferred maximum weight of a household pet.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maximumWeight")]
        public int MaximumWeight { get; set; }

        /// <summary>
        /// The preferred minimum weight of a household pet.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="minimumWeight")]
        public int MinimumWeight { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StaffPetPreferenceMapper.SynchronizeTo(this, (Entities.Common.Sample.IStaffPetPreference)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StaffPetPreferenceMapper.MapTo(this, (Entities.Common.Sample.IStaffPetPreference)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStaffPetPreferenceSynchronizationSourceSupport.IsMaximumWeightSupported  { get { return true; } set { } }
        bool Entities.Common.Sample.IStaffPetPreferenceSynchronizationSourceSupport.IsMinimumWeightSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPetPreferencePutPostRequestValidator : FluentValidation.AbstractValidator<StaffPetPreference>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffPetPreference> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Applicant

namespace EdFi.Ods.Api.Models.Resources.Applicant.GrandBend.Applicant_MixedInclude_Readable
{
    /// <summary>
    /// Represents a reference to the Applicant resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantReference
    {
        [DataMember(Name="applicantIdentifier"), NaturalKeyMember]
        public string ApplicantIdentifier { get; set; }

        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return ApplicantIdentifier != default(string) && EducationOrganizationId != default(int);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "Applicant",
                Href = $"/grand-bend/applicants/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new Common.Models.Domain.FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the grandbend.Applicant table of the Applicant aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class Applicant : Entities.Common.GrandBend.IApplicant, IHasETag, Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Applicant()
        {
            ApplicantAddresses = new List<ApplicantAddress>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Applicant resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EdFi.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EdFi.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EdFi.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EdFi.EducationOrganizationReference EducationOrganizationReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set
            {
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to an applicant.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="applicantIdentifier"), NaturalKeyMember]
        public string ApplicantIdentifier { get; set; }

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int Entities.Common.GrandBend.IApplicant.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.GrandBend.IApplicant;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
 
            // Standard Property
            if ((this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier == null
                || !(this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier.Equals(compareTo.ApplicantIdentifier)) 
                return false;
 
            // Referenced Property
            if ((this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId == null
                || !(this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId.Equals(compareTo.EducationOrganizationId)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier != null) 
                    hash = hash * 23 + (this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier.GetHashCode();
 
                //Referenced Property
                if ((this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="birthDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BirthDate { get; set; }

        // IS a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.CitizenshipStatusDescriptor
        {
            get { return null; }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.FirstName
        {
            get { return default(string); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.GenerationCodeSuffix
        {
            get { return default(string); }
            set { }
        }

        // IS a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.HighestCompletedLevelOfEducationDescriptor
        {
            get { return null; }
            set { }
        }

        // IS a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.HighlyQualifiedAcademicSubjectDescriptor
        {
            get { return null; }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        bool? Entities.Common.GrandBend.IApplicant.HighlyQualifiedTeacher
        {
            get { return default(bool?); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        bool? Entities.Common.GrandBend.IApplicant.HispanicLatinoEthnicity
        {
            get { return default(bool?); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.LastSurname
        {
            get { return default(string); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.LoginId
        {
            get { return default(string); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.MaidenName
        {
            get { return default(string); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.MiddleName
        {
            get { return default(string); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.PersonalTitlePrefix
        {
            get { return default(string); }
            set { }
        }

        // IS a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.SexDescriptor
        {
            get { return null; }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        decimal? Entities.Common.GrandBend.IApplicant.YearsOfPriorProfessionalExperience
        {
            get { return default(decimal?); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        decimal? Entities.Common.GrandBend.IApplicant.YearsOfPriorTeachingExperience
        {
            get { return default(decimal?); }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<ApplicantAddress> _applicantAddresses;
        private ICollection<Entities.Common.GrandBend.IApplicantAddress> _applicantAddressesCovariant;

        [DataMember(Name="addresses"), NoDuplicateMembers]
        public ICollection<ApplicantAddress> ApplicantAddresses
        {
            get { return _applicantAddresses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<ApplicantAddress>(value,
                    (s, e) => ((Entities.Common.GrandBend.IApplicantAddress)e.Item).Applicant = this);
                _applicantAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.GrandBend.IApplicantAddress, ApplicantAddress>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.GrandBend.IApplicantAddress)e.Item).Applicant = this;
                _applicantAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.GrandBend.IApplicantAddress> Entities.Common.GrandBend.IApplicant.ApplicantAddresses
        {
            get { return _applicantAddressesCovariant; }
            set { ApplicantAddresses = new List<ApplicantAddress>(value.Cast<ApplicantAddress>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_applicantAddresses != null) foreach (var item in _applicantAddresses)
            {
                item.Applicant = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.GrandBend.ApplicantMapper.SynchronizeTo(this, (Entities.Common.GrandBend.IApplicant)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.GrandBend.ApplicantMapper.MapTo(this, (Entities.Common.GrandBend.IApplicant)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsApplicantAddressesSupported                          { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsBirthDateSupported                                   { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsCitizenshipStatusDescriptorSupported                 { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsFirstNameSupported                                   { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsGenerationCodeSuffixSupported                        { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHighestCompletedLevelOfEducationDescriptorSupported  { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHighlyQualifiedAcademicSubjectDescriptorSupported    { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHighlyQualifiedTeacherSupported                      { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHispanicLatinoEthnicitySupported                     { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsLastSurnameSupported                                 { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsLoginIdSupported                                     { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsMaidenNameSupported                                  { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsMiddleNameSupported                                  { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsPersonalTitlePrefixSupported                         { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsSexDescriptorSupported                               { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsYearsOfPriorProfessionalExperienceSupported          { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsYearsOfPriorTeachingExperienceSupported              { get { return false; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.GrandBend.IApplicantAddress, bool> Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsApplicantAddressIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.GrandBend.IApplicant.EducationOrganizationResourceId 
        { 
            get { return null; }
            set { ImplicitEducationOrganizationReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.GrandBend.IApplicant.EducationOrganizationDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEducationOrganizationReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantPutPostRequestValidator : FluentValidation.AbstractValidator<Applicant>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<Applicant> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var applicantAddressesValidator = new ApplicantAddressPutPostRequestValidator();

            foreach (var item in instance.ApplicantAddresses)
            {
                var validationResult = applicantAddressesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the grandbend.ApplicantAddress table of the Applicant aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantAddress : Entities.Common.GrandBend.IApplicantAddress, Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.GrandBend.IApplicant _applicant;

        [IgnoreDataMember]
        Entities.Common.GrandBend.IApplicant Entities.Common.GrandBend.IApplicantAddress.Applicant
        {
            get { return _applicant; }
            set { SetApplicant(value); }
        }

        internal Entities.Common.GrandBend.IApplicant Applicant
        {
            set { SetApplicant(value); }
        }

        private void SetApplicant(Entities.Common.GrandBend.IApplicant value)
        {
            _applicant = value;
        }

        /// <summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressTypeDescriptor"), NaturalKeyMember]
        public string AddressTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.GrandBend.IApplicantAddress;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_applicant == null || !_applicant.Equals(compareTo.Applicant))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor == null
                || !(this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor.Equals(compareTo.AddressTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_applicant != null)
                    hash = hash * 23 + _applicant.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicantAddress.ApartmentRoomSuiteNumber
        {
            get { return default(string); }
            set { }
        }

        /// <summary>
        /// The month, day, and year the address became effective.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The number of the building on the site, if more than one building shares the same address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="buildingSiteNumber")]
        public string BuildingSiteNumber { get; set; }

        /// <summary>
        /// The name of the city in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="city")]
        public string City { get; set; }

        /// <summary>
        /// The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \"first-order subdivisions\" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="countyFIPSCode")]
        public string CountyFIPSCode { get; set; }

        /// <summary>
        /// The month, day, and year the address ceased to be in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }

        /// <summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in                        'which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nameOfCounty")]
        public string NameOfCounty { get; set; }

        /// <summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="stateAbbreviationDescriptor")]
        public string StateAbbreviationDescriptor { get; set; }

        /// <summary>
        /// The street number and street name or post office box number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="streetNumberName")]
        public string StreetNumberName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.GrandBend.ApplicantAddressMapper.SynchronizeTo(this, (Entities.Common.GrandBend.IApplicantAddress)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.GrandBend.ApplicantAddressMapper.MapTo(this, (Entities.Common.GrandBend.IApplicantAddress)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsApartmentRoomSuiteNumberSupported     { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsBeginDateSupported                    { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsBuildingSiteNumberSupported           { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsCitySupported                         { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsCountyFIPSCodeSupported               { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsEndDateSupported                      { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsLatitudeSupported                     { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsLongitudeSupported                    { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsNameOfCountySupported                 { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsPostalCodeSupported                   { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsStateAbbreviationDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsStreetNumberNameSupported             { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantAddressPutPostRequestValidator : FluentValidation.AbstractValidator<ApplicantAddress>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicantAddress> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Applicant

namespace EdFi.Ods.Api.Models.Resources.Applicant.GrandBend.Applicant_MixedInclude_Writable
{
    /// <summary>
    /// Represents a reference to the Applicant resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantReference
    {
        [DataMember(Name="applicantIdentifier"), NaturalKeyMember]
        public string ApplicantIdentifier { get; set; }

        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return ApplicantIdentifier != default(string) && EducationOrganizationId != default(int);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "Applicant",
                Href = $"/grand-bend/applicants/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new Common.Models.Domain.FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the grandbend.Applicant table of the Applicant aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class Applicant : Entities.Common.GrandBend.IApplicant, IHasETag, Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Applicant()
        {
            ApplicantAddresses = new List<ApplicantAddress>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Applicant resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EdFi.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EdFi.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EdFi.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EdFi.EducationOrganizationReference EducationOrganizationReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set
            {
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to an applicant.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="applicantIdentifier"), NaturalKeyMember]
        public string ApplicantIdentifier { get; set; }

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int Entities.Common.GrandBend.IApplicant.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.GrandBend.IApplicant;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
 
            // Standard Property
            if ((this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier == null
                || !(this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier.Equals(compareTo.ApplicantIdentifier)) 
                return false;
 
            // Referenced Property
            if ((this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId == null
                || !(this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId.Equals(compareTo.EducationOrganizationId)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier != null) 
                    hash = hash * 23 + (this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier.GetHashCode();
 
                //Referenced Property
                if ((this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="birthDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BirthDate { get; set; }

        /// <summary>
        /// An indicator of whether or not the person is a U.S. citizen.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="citizenshipStatusDescriptor")]
        public string CitizenshipStatusDescriptor { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="highestCompletedLevelOfEducationDescriptor")]
        public string HighestCompletedLevelOfEducationDescriptor { get; set; }

        /// <summary>
        /// An applicant subject in which a teacher applicant is classified as highly qualified.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="highlyQualifiedAcademicSubjectDescriptor")]
        public string HighlyQualifiedAcademicSubjectDescriptor { get; set; }

        /// <summary>
        /// An indication of whether a teacher applicant is classified as highly qualified for his/her prospective assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections to be taught.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="highlyQualifiedTeacher")]
        public bool? HighlyQualifiedTeacher { get; set; }

        /// <summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="hispanicLatinoEthnicity")]
        public bool? HispanicLatinoEthnicity { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// The login ID for the user; used for security access control interface.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="loginId")]
        public string LoginId { get; set; }

        /// <summary>
        /// The person's maiden name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maidenName")]
        public string MaidenName { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }

        /// <summary>
        /// A person's gender.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="sexDescriptor")]
        public string SexDescriptor { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a similar professional position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorProfessionalExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorProfessionalExperience { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a teaching position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorTeachingExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorTeachingExperience { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<ApplicantAddress> _applicantAddresses;
        private ICollection<Entities.Common.GrandBend.IApplicantAddress> _applicantAddressesCovariant;

        [DataMember(Name="addresses"), NoDuplicateMembers]
        public ICollection<ApplicantAddress> ApplicantAddresses
        {
            get { return _applicantAddresses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<ApplicantAddress>(value,
                    (s, e) => ((Entities.Common.GrandBend.IApplicantAddress)e.Item).Applicant = this);
                _applicantAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.GrandBend.IApplicantAddress, ApplicantAddress>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.GrandBend.IApplicantAddress)e.Item).Applicant = this;
                _applicantAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.GrandBend.IApplicantAddress> Entities.Common.GrandBend.IApplicant.ApplicantAddresses
        {
            get { return _applicantAddressesCovariant; }
            set { ApplicantAddresses = new List<ApplicantAddress>(value.Cast<ApplicantAddress>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_applicantAddresses != null) foreach (var item in _applicantAddresses)
            {
                item.Applicant = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.GrandBend.ApplicantMapper.SynchronizeTo(this, (Entities.Common.GrandBend.IApplicant)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.GrandBend.ApplicantMapper.MapTo(this, (Entities.Common.GrandBend.IApplicant)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsApplicantAddressesSupported                          { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsBirthDateSupported                                   { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsCitizenshipStatusDescriptorSupported                 { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsFirstNameSupported                                   { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsGenerationCodeSuffixSupported                        { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHighestCompletedLevelOfEducationDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHighlyQualifiedAcademicSubjectDescriptorSupported    { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHighlyQualifiedTeacherSupported                      { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHispanicLatinoEthnicitySupported                     { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsLastSurnameSupported                                 { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsLoginIdSupported                                     { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsMaidenNameSupported                                  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsMiddleNameSupported                                  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsPersonalTitlePrefixSupported                         { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsSexDescriptorSupported                               { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsYearsOfPriorProfessionalExperienceSupported          { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsYearsOfPriorTeachingExperienceSupported              { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.GrandBend.IApplicantAddress, bool> Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsApplicantAddressIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.GrandBend.IApplicant.EducationOrganizationResourceId 
        { 
            get { return null; }
            set { ImplicitEducationOrganizationReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.GrandBend.IApplicant.EducationOrganizationDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEducationOrganizationReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantPutPostRequestValidator : FluentValidation.AbstractValidator<Applicant>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<Applicant> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var applicantAddressesValidator = new ApplicantAddressPutPostRequestValidator();

            foreach (var item in instance.ApplicantAddresses)
            {
                var validationResult = applicantAddressesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the grandbend.ApplicantAddress table of the Applicant aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantAddress : Entities.Common.GrandBend.IApplicantAddress, Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.GrandBend.IApplicant _applicant;

        [IgnoreDataMember]
        Entities.Common.GrandBend.IApplicant Entities.Common.GrandBend.IApplicantAddress.Applicant
        {
            get { return _applicant; }
            set { SetApplicant(value); }
        }

        internal Entities.Common.GrandBend.IApplicant Applicant
        {
            set { SetApplicant(value); }
        }

        private void SetApplicant(Entities.Common.GrandBend.IApplicant value)
        {
            _applicant = value;
        }

        /// <summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressTypeDescriptor"), NaturalKeyMember]
        public string AddressTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.GrandBend.IApplicantAddress;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_applicant == null || !_applicant.Equals(compareTo.Applicant))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor == null
                || !(this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor.Equals(compareTo.AddressTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_applicant != null)
                    hash = hash * 23 + _applicant.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicantAddress.ApartmentRoomSuiteNumber
        {
            get { return default(string); }
            set { }
        }

        /// <summary>
        /// The month, day, and year the address became effective.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The number of the building on the site, if more than one building shares the same address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="buildingSiteNumber")]
        public string BuildingSiteNumber { get; set; }

        /// <summary>
        /// The name of the city in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="city")]
        public string City { get; set; }

        /// <summary>
        /// The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \"first-order subdivisions\" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="countyFIPSCode")]
        public string CountyFIPSCode { get; set; }

        /// <summary>
        /// The month, day, and year the address ceased to be in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }

        /// <summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in                        'which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nameOfCounty")]
        public string NameOfCounty { get; set; }

        /// <summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="stateAbbreviationDescriptor")]
        public string StateAbbreviationDescriptor { get; set; }

        /// <summary>
        /// The street number and street name or post office box number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="streetNumberName")]
        public string StreetNumberName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.GrandBend.ApplicantAddressMapper.SynchronizeTo(this, (Entities.Common.GrandBend.IApplicantAddress)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.GrandBend.ApplicantAddressMapper.MapTo(this, (Entities.Common.GrandBend.IApplicantAddress)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsApartmentRoomSuiteNumberSupported     { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsBeginDateSupported                    { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsBuildingSiteNumberSupported           { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsCitySupported                         { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsCountyFIPSCodeSupported               { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsEndDateSupported                      { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsLatitudeSupported                     { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsLongitudeSupported                    { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsNameOfCountySupported                 { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsPostalCodeSupported                   { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsStateAbbreviationDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsStreetNumberNameSupported             { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantAddressPutPostRequestValidator : FluentValidation.AbstractValidator<ApplicantAddress>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicantAddress> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Applicant

namespace EdFi.Ods.Api.Models.Resources.Applicant.GrandBend.Staff_and_Prospect_MixedExclude_Readable
{
    /// <summary>
    /// Represents a reference to the Applicant resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantReference
    {
        [DataMember(Name="applicantIdentifier"), NaturalKeyMember]
        public string ApplicantIdentifier { get; set; }

        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return ApplicantIdentifier != default(string) && EducationOrganizationId != default(int);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "Applicant",
                Href = $"/grand-bend/applicants/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new Common.Models.Domain.FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the grandbend.Applicant table of the Applicant aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class Applicant : Entities.Common.GrandBend.IApplicant, IHasETag, Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Applicant()
        {
            ApplicantAddresses = new List<ApplicantAddress>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Applicant resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EdFi.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EdFi.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EdFi.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EdFi.EducationOrganizationReference EducationOrganizationReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set
            {
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to an applicant.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="applicantIdentifier"), NaturalKeyMember]
        public string ApplicantIdentifier { get; set; }

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int Entities.Common.GrandBend.IApplicant.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.GrandBend.IApplicant;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
 
            // Standard Property
            if ((this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier == null
                || !(this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier.Equals(compareTo.ApplicantIdentifier)) 
                return false;
 
            // Referenced Property
            if ((this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId == null
                || !(this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId.Equals(compareTo.EducationOrganizationId)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier != null) 
                    hash = hash * 23 + (this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier.GetHashCode();
 
                //Referenced Property
                if ((this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="birthDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BirthDate { get; set; }

        // IS a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.CitizenshipStatusDescriptor
        {
            get { return null; }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.FirstName
        {
            get { return default(string); }
            set { }
        }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="highestCompletedLevelOfEducationDescriptor")]
        public string HighestCompletedLevelOfEducationDescriptor { get; set; }

        /// <summary>
        /// An applicant subject in which a teacher applicant is classified as highly qualified.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="highlyQualifiedAcademicSubjectDescriptor")]
        public string HighlyQualifiedAcademicSubjectDescriptor { get; set; }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        bool? Entities.Common.GrandBend.IApplicant.HighlyQualifiedTeacher
        {
            get { return default(bool?); }
            set { }
        }

        /// <summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="hispanicLatinoEthnicity")]
        public bool? HispanicLatinoEthnicity { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// The login ID for the user; used for security access control interface.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="loginId")]
        public string LoginId { get; set; }

        /// <summary>
        /// The person's maiden name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maidenName")]
        public string MaidenName { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }

        /// <summary>
        /// A person's gender.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="sexDescriptor")]
        public string SexDescriptor { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a similar professional position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorProfessionalExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorProfessionalExperience { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a teaching position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorTeachingExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorTeachingExperience { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<ApplicantAddress> _applicantAddresses;
        private ICollection<Entities.Common.GrandBend.IApplicantAddress> _applicantAddressesCovariant;

        [DataMember(Name="addresses"), NoDuplicateMembers]
        public ICollection<ApplicantAddress> ApplicantAddresses
        {
            get { return _applicantAddresses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<ApplicantAddress>(value,
                    (s, e) => ((Entities.Common.GrandBend.IApplicantAddress)e.Item).Applicant = this);
                _applicantAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.GrandBend.IApplicantAddress, ApplicantAddress>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.GrandBend.IApplicantAddress)e.Item).Applicant = this;
                _applicantAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.GrandBend.IApplicantAddress> Entities.Common.GrandBend.IApplicant.ApplicantAddresses
        {
            get { return _applicantAddressesCovariant; }
            set { ApplicantAddresses = new List<ApplicantAddress>(value.Cast<ApplicantAddress>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_applicantAddresses != null) foreach (var item in _applicantAddresses)
            {
                item.Applicant = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.GrandBend.ApplicantMapper.SynchronizeTo(this, (Entities.Common.GrandBend.IApplicant)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.GrandBend.ApplicantMapper.MapTo(this, (Entities.Common.GrandBend.IApplicant)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsApplicantAddressesSupported                          { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsBirthDateSupported                                   { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsCitizenshipStatusDescriptorSupported                 { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsFirstNameSupported                                   { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsGenerationCodeSuffixSupported                        { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHighestCompletedLevelOfEducationDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHighlyQualifiedAcademicSubjectDescriptorSupported    { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHighlyQualifiedTeacherSupported                      { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHispanicLatinoEthnicitySupported                     { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsLastSurnameSupported                                 { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsLoginIdSupported                                     { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsMaidenNameSupported                                  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsMiddleNameSupported                                  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsPersonalTitlePrefixSupported                         { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsSexDescriptorSupported                               { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsYearsOfPriorProfessionalExperienceSupported          { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsYearsOfPriorTeachingExperienceSupported              { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.GrandBend.IApplicantAddress, bool> Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsApplicantAddressIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.GrandBend.IApplicant.EducationOrganizationResourceId 
        { 
            get { return null; }
            set { ImplicitEducationOrganizationReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.GrandBend.IApplicant.EducationOrganizationDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEducationOrganizationReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantPutPostRequestValidator : FluentValidation.AbstractValidator<Applicant>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<Applicant> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var applicantAddressesValidator = new ApplicantAddressPutPostRequestValidator();

            foreach (var item in instance.ApplicantAddresses)
            {
                var validationResult = applicantAddressesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the grandbend.ApplicantAddress table of the Applicant aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantAddress : Entities.Common.GrandBend.IApplicantAddress, Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.GrandBend.IApplicant _applicant;

        [IgnoreDataMember]
        Entities.Common.GrandBend.IApplicant Entities.Common.GrandBend.IApplicantAddress.Applicant
        {
            get { return _applicant; }
            set { SetApplicant(value); }
        }

        internal Entities.Common.GrandBend.IApplicant Applicant
        {
            set { SetApplicant(value); }
        }

        private void SetApplicant(Entities.Common.GrandBend.IApplicant value)
        {
            _applicant = value;
        }

        /// <summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressTypeDescriptor"), NaturalKeyMember]
        public string AddressTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.GrandBend.IApplicantAddress;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_applicant == null || !_applicant.Equals(compareTo.Applicant))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor == null
                || !(this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor.Equals(compareTo.AddressTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_applicant != null)
                    hash = hash * 23 + _applicant.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The apartment, room, or suite number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="apartmentRoomSuiteNumber")]
        public string ApartmentRoomSuiteNumber { get; set; }

        /// <summary>
        /// The month, day, and year the address became effective.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The number of the building on the site, if more than one building shares the same address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="buildingSiteNumber")]
        public string BuildingSiteNumber { get; set; }

        /// <summary>
        /// The name of the city in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="city")]
        public string City { get; set; }

        /// <summary>
        /// The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \"first-order subdivisions\" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="countyFIPSCode")]
        public string CountyFIPSCode { get; set; }

        /// <summary>
        /// The month, day, and year the address ceased to be in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }

        /// <summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in                        'which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nameOfCounty")]
        public string NameOfCounty { get; set; }

        /// <summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="stateAbbreviationDescriptor")]
        public string StateAbbreviationDescriptor { get; set; }

        /// <summary>
        /// The street number and street name or post office box number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="streetNumberName")]
        public string StreetNumberName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.GrandBend.ApplicantAddressMapper.SynchronizeTo(this, (Entities.Common.GrandBend.IApplicantAddress)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.GrandBend.ApplicantAddressMapper.MapTo(this, (Entities.Common.GrandBend.IApplicantAddress)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsApartmentRoomSuiteNumberSupported     { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsBeginDateSupported                    { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsBuildingSiteNumberSupported           { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsCitySupported                         { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsCountyFIPSCodeSupported               { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsEndDateSupported                      { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsLatitudeSupported                     { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsLongitudeSupported                    { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsNameOfCountySupported                 { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsPostalCodeSupported                   { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsStateAbbreviationDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsStreetNumberNameSupported             { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantAddressPutPostRequestValidator : FluentValidation.AbstractValidator<ApplicantAddress>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicantAddress> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Staff

namespace EdFi.Ods.Api.Models.Resources.Staff.EdFi.Staff_and_Prospect_MixedExclude_Readable
{
    /// <summary>
    /// Represents a reference to the Staff resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffReference
    {
        [DataMember(Name="staffUniqueId"), NaturalKeyMember]
        public string StaffUniqueId { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return StaffUniqueId != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "Staff",
                Href = $"/ed-fi/staffs/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new Common.Models.Domain.FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.Staff table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class Staff : Entities.Common.EdFi.IStaff, IHasETag, Entities.Common.EdFi.IStaffSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Staff()
        {
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Staff resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to a staff.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="staffUniqueId"), NaturalKeyMember, UniqueId]
        public string StaffUniqueId { get; set; }

        string IIdentifiablePerson.UniqueId { get { return StaffUniqueId; } }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaff;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Property
            if ((this as Entities.Common.EdFi.IStaff).StaffUniqueId == null
                || !(this as Entities.Common.EdFi.IStaff).StaffUniqueId.Equals(compareTo.StaffUniqueId)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Property
                if ((this as Entities.Common.EdFi.IStaff).StaffUniqueId != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaff).StaffUniqueId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        DateTime? Entities.Common.EdFi.IStaff.BirthDate
        {
            get { return default(DateTime?); }
            set { }
        }

        // IS a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.EdFi.IStaff.CitizenshipStatusDescriptor
        {
            get { return null; }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.EdFi.IStaff.FirstName
        {
            get { return default(string); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.EdFi.IStaff.GenerationCodeSuffix
        {
            get { return default(string); }
            set { }
        }

        // IS a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.EdFi.IStaff.HighestCompletedLevelOfEducationDescriptor
        {
            get { return null; }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        bool? Entities.Common.EdFi.IStaff.HighlyQualifiedTeacher
        {
            get { return default(bool?); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        bool? Entities.Common.EdFi.IStaff.HispanicLatinoEthnicity
        {
            get { return default(bool?); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.EdFi.IStaff.LastSurname
        {
            get { return default(string); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.EdFi.IStaff.LoginId
        {
            get { return default(string); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.EdFi.IStaff.MaidenName
        {
            get { return default(string); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.EdFi.IStaff.MiddleName
        {
            get { return default(string); }
            set { }
        }

        // IS a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.EdFi.IStaff.OldEthnicityDescriptor
        {
            get { return null; }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.EdFi.IStaff.PersonalTitlePrefix
        {
            get { return default(string); }
            set { }
        }

        // IS a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.EdFi.IStaff.SexDescriptor
        {
            get { return null; }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        decimal? Entities.Common.EdFi.IStaff.YearsOfPriorProfessionalExperience
        {
            get { return default(decimal?); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        decimal? Entities.Common.EdFi.IStaff.YearsOfPriorTeachingExperience
        {
            get { return default(decimal?); }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "Staff")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffAddress> Entities.Common.EdFi.IStaff.StaffAddresses
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffCredential> Entities.Common.EdFi.IStaff.StaffCredentials
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffElectronicMail> Entities.Common.EdFi.IStaff.StaffElectronicMails
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffIdentificationCode> Entities.Common.EdFi.IStaff.StaffIdentificationCodes
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffIdentificationDocument> Entities.Common.EdFi.IStaff.StaffIdentificationDocuments
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffInternationalAddress> Entities.Common.EdFi.IStaff.StaffInternationalAddresses
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffLanguage> Entities.Common.EdFi.IStaff.StaffLanguages
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffOtherName> Entities.Common.EdFi.IStaff.StaffOtherNames
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffPersonalIdentificationDocument> Entities.Common.EdFi.IStaff.StaffPersonalIdentificationDocuments
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffRace> Entities.Common.EdFi.IStaff.StaffRaces
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffRecognition> Entities.Common.EdFi.IStaff.StaffRecognitions
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffTelephone> Entities.Common.EdFi.IStaff.StaffTelephones
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffTribalAffiliation> Entities.Common.EdFi.IStaff.StaffTribalAffiliations
        {
            get { return null; }
            set { }
        }

        // Not supported by this model, so there's "null object pattern" style implementation
        ICollection<Entities.Common.EdFi.IStaffVisa> Entities.Common.EdFi.IStaff.StaffVisas
        {
            get { return null; }
            set { }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaff)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffMapper.MapTo(this, (Entities.Common.EdFi.IStaff)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsBirthDateSupported                                   { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsCitizenshipStatusDescriptorSupported                 { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsFirstNameSupported                                   { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsGenerationCodeSuffixSupported                        { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsHighestCompletedLevelOfEducationDescriptorSupported  { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsHighlyQualifiedTeacherSupported                      { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsHispanicLatinoEthnicitySupported                     { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsLastSurnameSupported                                 { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsLoginIdSupported                                     { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsMaidenNameSupported                                  { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsMiddleNameSupported                                  { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsOldEthnicityDescriptorSupported                      { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsPersonalTitlePrefixSupported                         { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsSexDescriptorSupported                               { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffAddressesSupported                              { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffCredentialsSupported                            { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffElectronicMailsSupported                        { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationCodesSupported                    { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationDocumentsSupported                { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffInternationalAddressesSupported                 { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffLanguagesSupported                              { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffOtherNamesSupported                             { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffPersonalIdentificationDocumentsSupported        { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRacesSupported                                  { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRecognitionsSupported                           { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTelephonesSupported                             { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTribalAffiliationsSupported                     { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffUniqueIdSupported                               { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffVisasSupported                                  { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsYearsOfPriorProfessionalExperienceSupported          { get { return false; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsYearsOfPriorTeachingExperienceSupported              { get { return false; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.EdFi.IStaffAddress, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffAddressIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffCredential, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffCredentialIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffElectronicMail, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffElectronicMailIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffIdentificationCode, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationCodeIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffIdentificationDocument, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationDocumentIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffInternationalAddress, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffInternationalAddressIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffLanguage, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffLanguageIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffOtherName, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffOtherNameIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffPersonalIdentificationDocument, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffPersonalIdentificationDocumentIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffRace, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRaceIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffRecognition, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRecognitionIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffTelephone, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTelephoneIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffTribalAffiliation, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTribalAffiliationIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffVisa, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffVisaIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPutPostRequestValidator : FluentValidation.AbstractValidator<Staff>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<Staff> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Staff

namespace EdFi.Ods.Api.Models.Resources.Staff.EdFi.Staff_and_Prospect_MixedExclude_Readable.Extensions.GrandBend
{
    /// <summary>
    /// A class which represents the grandbend.StaffExtension table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffExtension : Entities.Common.GrandBend.IStaffExtension, Entities.Common.GrandBend.IStaffExtensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.GrandBend.IStaffExtension.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.GrandBend.IStaffExtension;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        DateTime? Entities.Common.GrandBend.IStaffExtension.ProbationCompleteDate
        {
            get { return default(DateTime?); }
            set { }
        }

        /// <summary>
        /// An indication as to whether the staff member is tenured.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="tenured")]
        public bool? Tenured { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.GrandBend.StaffExtensionMapper.SynchronizeTo(this, (Entities.Common.GrandBend.IStaffExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.GrandBend.StaffExtensionMapper.MapTo(this, (Entities.Common.GrandBend.IStaffExtension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.GrandBend.IStaffExtensionSynchronizationSourceSupport.IsProbationCompleteDateSupported  { get { return false; } set { } }
        bool Entities.Common.GrandBend.IStaffExtensionSynchronizationSourceSupport.IsTenuredSupported                { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<StaffExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Applicant

namespace EdFi.Ods.Api.Models.Resources.Applicant.GrandBend.Staff_and_Prospect_MixedExclude_Writable
{
    /// <summary>
    /// Represents a reference to the Applicant resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantReference
    {
        [DataMember(Name="applicantIdentifier"), NaturalKeyMember]
        public string ApplicantIdentifier { get; set; }

        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return ApplicantIdentifier != default(string) && EducationOrganizationId != default(int);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "Applicant",
                Href = $"/grand-bend/applicants/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new Common.Models.Domain.FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the grandbend.Applicant table of the Applicant aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class Applicant : Entities.Common.GrandBend.IApplicant, IHasETag, Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Applicant()
        {
            ApplicantAddresses = new List<ApplicantAddress>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Applicant resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EdFi.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EdFi.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EdFi.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EdFi.EducationOrganizationReference EducationOrganizationReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set
            {
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to an applicant.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="applicantIdentifier"), NaturalKeyMember]
        public string ApplicantIdentifier { get; set; }

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int Entities.Common.GrandBend.IApplicant.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.GrandBend.IApplicant;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
 
            // Standard Property
            if ((this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier == null
                || !(this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier.Equals(compareTo.ApplicantIdentifier)) 
                return false;
 
            // Referenced Property
            if ((this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId == null
                || !(this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId.Equals(compareTo.EducationOrganizationId)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier != null) 
                    hash = hash * 23 + (this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier.GetHashCode();
 
                //Referenced Property
                if ((this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="birthDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BirthDate { get; set; }

        /// <summary>
        /// An indicator of whether or not the person is a U.S. citizen.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="citizenshipStatusDescriptor")]
        public string CitizenshipStatusDescriptor { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="highestCompletedLevelOfEducationDescriptor")]
        public string HighestCompletedLevelOfEducationDescriptor { get; set; }

        /// <summary>
        /// An applicant subject in which a teacher applicant is classified as highly qualified.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="highlyQualifiedAcademicSubjectDescriptor")]
        public string HighlyQualifiedAcademicSubjectDescriptor { get; set; }

        /// <summary>
        /// An indication of whether a teacher applicant is classified as highly qualified for his/her prospective assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections to be taught.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="highlyQualifiedTeacher")]
        public bool? HighlyQualifiedTeacher { get; set; }

        /// <summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="hispanicLatinoEthnicity")]
        public bool? HispanicLatinoEthnicity { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// The login ID for the user; used for security access control interface.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="loginId")]
        public string LoginId { get; set; }

        /// <summary>
        /// The person's maiden name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maidenName")]
        public string MaidenName { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }

        /// <summary>
        /// A person's gender.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="sexDescriptor")]
        public string SexDescriptor { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a similar professional position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorProfessionalExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorProfessionalExperience { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a teaching position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorTeachingExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorTeachingExperience { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<ApplicantAddress> _applicantAddresses;
        private ICollection<Entities.Common.GrandBend.IApplicantAddress> _applicantAddressesCovariant;

        [DataMember(Name="addresses"), NoDuplicateMembers]
        public ICollection<ApplicantAddress> ApplicantAddresses
        {
            get { return _applicantAddresses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<ApplicantAddress>(value,
                    (s, e) => ((Entities.Common.GrandBend.IApplicantAddress)e.Item).Applicant = this);
                _applicantAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.GrandBend.IApplicantAddress, ApplicantAddress>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.GrandBend.IApplicantAddress)e.Item).Applicant = this;
                _applicantAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.GrandBend.IApplicantAddress> Entities.Common.GrandBend.IApplicant.ApplicantAddresses
        {
            get { return _applicantAddressesCovariant; }
            set { ApplicantAddresses = new List<ApplicantAddress>(value.Cast<ApplicantAddress>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_applicantAddresses != null) foreach (var item in _applicantAddresses)
            {
                item.Applicant = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.GrandBend.ApplicantMapper.SynchronizeTo(this, (Entities.Common.GrandBend.IApplicant)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.GrandBend.ApplicantMapper.MapTo(this, (Entities.Common.GrandBend.IApplicant)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsApplicantAddressesSupported                          { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsBirthDateSupported                                   { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsCitizenshipStatusDescriptorSupported                 { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsFirstNameSupported                                   { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsGenerationCodeSuffixSupported                        { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHighestCompletedLevelOfEducationDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHighlyQualifiedAcademicSubjectDescriptorSupported    { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHighlyQualifiedTeacherSupported                      { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHispanicLatinoEthnicitySupported                     { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsLastSurnameSupported                                 { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsLoginIdSupported                                     { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsMaidenNameSupported                                  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsMiddleNameSupported                                  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsPersonalTitlePrefixSupported                         { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsSexDescriptorSupported                               { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsYearsOfPriorProfessionalExperienceSupported          { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsYearsOfPriorTeachingExperienceSupported              { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.GrandBend.IApplicantAddress, bool> Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsApplicantAddressIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.GrandBend.IApplicant.EducationOrganizationResourceId 
        { 
            get { return null; }
            set { ImplicitEducationOrganizationReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.GrandBend.IApplicant.EducationOrganizationDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEducationOrganizationReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantPutPostRequestValidator : FluentValidation.AbstractValidator<Applicant>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<Applicant> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var applicantAddressesValidator = new ApplicantAddressPutPostRequestValidator();

            foreach (var item in instance.ApplicantAddresses)
            {
                var validationResult = applicantAddressesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the grandbend.ApplicantAddress table of the Applicant aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantAddress : Entities.Common.GrandBend.IApplicantAddress, Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.GrandBend.IApplicant _applicant;

        [IgnoreDataMember]
        Entities.Common.GrandBend.IApplicant Entities.Common.GrandBend.IApplicantAddress.Applicant
        {
            get { return _applicant; }
            set { SetApplicant(value); }
        }

        internal Entities.Common.GrandBend.IApplicant Applicant
        {
            set { SetApplicant(value); }
        }

        private void SetApplicant(Entities.Common.GrandBend.IApplicant value)
        {
            _applicant = value;
        }

        /// <summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressTypeDescriptor"), NaturalKeyMember]
        public string AddressTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.GrandBend.IApplicantAddress;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_applicant == null || !_applicant.Equals(compareTo.Applicant))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor == null
                || !(this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor.Equals(compareTo.AddressTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_applicant != null)
                    hash = hash * 23 + _applicant.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The apartment, room, or suite number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="apartmentRoomSuiteNumber")]
        public string ApartmentRoomSuiteNumber { get; set; }

        /// <summary>
        /// The month, day, and year the address became effective.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The number of the building on the site, if more than one building shares the same address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="buildingSiteNumber")]
        public string BuildingSiteNumber { get; set; }

        /// <summary>
        /// The name of the city in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="city")]
        public string City { get; set; }

        /// <summary>
        /// The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \"first-order subdivisions\" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="countyFIPSCode")]
        public string CountyFIPSCode { get; set; }

        /// <summary>
        /// The month, day, and year the address ceased to be in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }

        /// <summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in                        'which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nameOfCounty")]
        public string NameOfCounty { get; set; }

        /// <summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="stateAbbreviationDescriptor")]
        public string StateAbbreviationDescriptor { get; set; }

        /// <summary>
        /// The street number and street name or post office box number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="streetNumberName")]
        public string StreetNumberName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.GrandBend.ApplicantAddressMapper.SynchronizeTo(this, (Entities.Common.GrandBend.IApplicantAddress)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.GrandBend.ApplicantAddressMapper.MapTo(this, (Entities.Common.GrandBend.IApplicantAddress)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsApartmentRoomSuiteNumberSupported     { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsBeginDateSupported                    { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsBuildingSiteNumberSupported           { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsCitySupported                         { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsCountyFIPSCodeSupported               { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsEndDateSupported                      { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsLatitudeSupported                     { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsLongitudeSupported                    { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsNameOfCountySupported                 { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsPostalCodeSupported                   { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsStateAbbreviationDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsStreetNumberNameSupported             { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantAddressPutPostRequestValidator : FluentValidation.AbstractValidator<ApplicantAddress>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicantAddress> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Staff

namespace EdFi.Ods.Api.Models.Resources.Staff.EdFi.Staff_and_Prospect_MixedExclude_Writable
{
    /// <summary>
    /// Represents a reference to the Staff resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffReference
    {
        [DataMember(Name="staffUniqueId"), NaturalKeyMember]
        public string StaffUniqueId { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return StaffUniqueId != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "Staff",
                Href = $"/ed-fi/staffs/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new Common.Models.Domain.FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.Staff table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class Staff : Entities.Common.EdFi.IStaff, IHasETag, Entities.Common.EdFi.IStaffSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Staff()
        {
            StaffAddresses = new List<StaffAddress>();
            StaffCredentials = new List<StaffCredential>();
            StaffElectronicMails = new List<StaffElectronicMail>();
            StaffIdentificationCodes = new List<StaffIdentificationCode>();
            StaffIdentificationDocuments = new List<StaffIdentificationDocument>();
            StaffInternationalAddresses = new List<StaffInternationalAddress>();
            StaffLanguages = new List<StaffLanguage>();
            StaffOtherNames = new List<StaffOtherName>();
            StaffPersonalIdentificationDocuments = new List<StaffPersonalIdentificationDocument>();
            StaffRaces = new List<StaffRace>();
            StaffRecognitions = new List<StaffRecognition>();
            StaffTelephones = new List<StaffTelephone>();
            StaffTribalAffiliations = new List<StaffTribalAffiliation>();
            StaffVisas = new List<StaffVisa>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Staff resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to a staff.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="staffUniqueId"), NaturalKeyMember, UniqueId]
        public string StaffUniqueId { get; set; }

        string IIdentifiablePerson.UniqueId { get { return StaffUniqueId; } }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaff;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Property
            if ((this as Entities.Common.EdFi.IStaff).StaffUniqueId == null
                || !(this as Entities.Common.EdFi.IStaff).StaffUniqueId.Equals(compareTo.StaffUniqueId)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Property
                if ((this as Entities.Common.EdFi.IStaff).StaffUniqueId != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaff).StaffUniqueId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="birthDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BirthDate { get; set; }

        /// <summary>
        /// An indicator of whether or not the person is a U.S. citizen.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="citizenshipStatusDescriptor")]
        public string CitizenshipStatusDescriptor { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="highestCompletedLevelOfEducationDescriptor")]
        public string HighestCompletedLevelOfEducationDescriptor { get; set; }

        /// <summary>
        /// An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="highlyQualifiedTeacher")]
        public bool? HighlyQualifiedTeacher { get; set; }

        /// <summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="hispanicLatinoEthnicity")]
        public bool? HispanicLatinoEthnicity { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// The login ID for the user; used for security access control interface.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="loginId")]
        public string LoginId { get; set; }

        /// <summary>
        /// The person's maiden name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maidenName")]
        public string MaidenName { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// Previous definition of Ethnicity combining Hispanic/Latino and race:          1 - American Indian or Alaskan Native          2 - Asian or Pacific Islander          3 - Black, not of Hispanic origin          4 - Hispanic          5 - White, not of Hispanic origin.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="oldEthnicityDescriptor")]
        public string OldEthnicityDescriptor { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }

        /// <summary>
        /// A person's gender.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="sexDescriptor")]
        public string SexDescriptor { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a similar professional position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorProfessionalExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorProfessionalExperience { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a teaching position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorTeachingExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorTeachingExperience { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "Staff")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffAddress> _staffAddresses;
        private ICollection<Entities.Common.EdFi.IStaffAddress> _staffAddressesCovariant;

        [DataMember(Name="addresses"), NoDuplicateMembers]
        public ICollection<StaffAddress> StaffAddresses
        {
            get { return _staffAddresses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffAddress>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffAddress)e.Item).Staff = this);
                _staffAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffAddress, StaffAddress>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffAddress)e.Item).Staff = this;
                _staffAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffAddress> Entities.Common.EdFi.IStaff.StaffAddresses
        {
            get { return _staffAddressesCovariant; }
            set { StaffAddresses = new List<StaffAddress>(value.Cast<StaffAddress>()); }
        }

        private ICollection<StaffCredential> _staffCredentials;
        private ICollection<Entities.Common.EdFi.IStaffCredential> _staffCredentialsCovariant;

        [DataMember(Name="credentials"), NoDuplicateMembers]
        public ICollection<StaffCredential> StaffCredentials
        {
            get { return _staffCredentials; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffCredential>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffCredential)e.Item).Staff = this);
                _staffCredentials = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffCredential, StaffCredential>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffCredential)e.Item).Staff = this;
                _staffCredentialsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffCredential> Entities.Common.EdFi.IStaff.StaffCredentials
        {
            get { return _staffCredentialsCovariant; }
            set { StaffCredentials = new List<StaffCredential>(value.Cast<StaffCredential>()); }
        }

        private ICollection<StaffElectronicMail> _staffElectronicMails;
        private ICollection<Entities.Common.EdFi.IStaffElectronicMail> _staffElectronicMailsCovariant;

        [DataMember(Name="electronicMails"), NoDuplicateMembers]
        public ICollection<StaffElectronicMail> StaffElectronicMails
        {
            get { return _staffElectronicMails; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffElectronicMail>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffElectronicMail)e.Item).Staff = this);
                _staffElectronicMails = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffElectronicMail, StaffElectronicMail>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffElectronicMail)e.Item).Staff = this;
                _staffElectronicMailsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffElectronicMail> Entities.Common.EdFi.IStaff.StaffElectronicMails
        {
            get { return _staffElectronicMailsCovariant; }
            set { StaffElectronicMails = new List<StaffElectronicMail>(value.Cast<StaffElectronicMail>()); }
        }

        private ICollection<StaffIdentificationCode> _staffIdentificationCodes;
        private ICollection<Entities.Common.EdFi.IStaffIdentificationCode> _staffIdentificationCodesCovariant;

        [DataMember(Name="identificationCodes"), NoDuplicateMembers]
        public ICollection<StaffIdentificationCode> StaffIdentificationCodes
        {
            get { return _staffIdentificationCodes; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffIdentificationCode>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffIdentificationCode)e.Item).Staff = this);
                _staffIdentificationCodes = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffIdentificationCode, StaffIdentificationCode>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffIdentificationCode)e.Item).Staff = this;
                _staffIdentificationCodesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffIdentificationCode> Entities.Common.EdFi.IStaff.StaffIdentificationCodes
        {
            get { return _staffIdentificationCodesCovariant; }
            set { StaffIdentificationCodes = new List<StaffIdentificationCode>(value.Cast<StaffIdentificationCode>()); }
        }

        private ICollection<StaffIdentificationDocument> _staffIdentificationDocuments;
        private ICollection<Entities.Common.EdFi.IStaffIdentificationDocument> _staffIdentificationDocumentsCovariant;

        [DataMember(Name="identificationDocuments"), NoDuplicateMembers]
        public ICollection<StaffIdentificationDocument> StaffIdentificationDocuments
        {
            get { return _staffIdentificationDocuments; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffIdentificationDocument>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffIdentificationDocument)e.Item).Staff = this);
                _staffIdentificationDocuments = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffIdentificationDocument, StaffIdentificationDocument>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffIdentificationDocument)e.Item).Staff = this;
                _staffIdentificationDocumentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffIdentificationDocument> Entities.Common.EdFi.IStaff.StaffIdentificationDocuments
        {
            get { return _staffIdentificationDocumentsCovariant; }
            set { StaffIdentificationDocuments = new List<StaffIdentificationDocument>(value.Cast<StaffIdentificationDocument>()); }
        }

        private ICollection<StaffInternationalAddress> _staffInternationalAddresses;
        private ICollection<Entities.Common.EdFi.IStaffInternationalAddress> _staffInternationalAddressesCovariant;

        [DataMember(Name="internationalAddresses"), NoDuplicateMembers]
        public ICollection<StaffInternationalAddress> StaffInternationalAddresses
        {
            get { return _staffInternationalAddresses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffInternationalAddress>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffInternationalAddress)e.Item).Staff = this);
                _staffInternationalAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffInternationalAddress, StaffInternationalAddress>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffInternationalAddress)e.Item).Staff = this;
                _staffInternationalAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffInternationalAddress> Entities.Common.EdFi.IStaff.StaffInternationalAddresses
        {
            get { return _staffInternationalAddressesCovariant; }
            set { StaffInternationalAddresses = new List<StaffInternationalAddress>(value.Cast<StaffInternationalAddress>()); }
        }

        private ICollection<StaffLanguage> _staffLanguages;
        private ICollection<Entities.Common.EdFi.IStaffLanguage> _staffLanguagesCovariant;

        [DataMember(Name="languages"), NoDuplicateMembers]
        public ICollection<StaffLanguage> StaffLanguages
        {
            get { return _staffLanguages; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffLanguage>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffLanguage)e.Item).Staff = this);
                _staffLanguages = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffLanguage, StaffLanguage>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffLanguage)e.Item).Staff = this;
                _staffLanguagesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffLanguage> Entities.Common.EdFi.IStaff.StaffLanguages
        {
            get { return _staffLanguagesCovariant; }
            set { StaffLanguages = new List<StaffLanguage>(value.Cast<StaffLanguage>()); }
        }

        private ICollection<StaffOtherName> _staffOtherNames;
        private ICollection<Entities.Common.EdFi.IStaffOtherName> _staffOtherNamesCovariant;

        [DataMember(Name="otherNames"), NoDuplicateMembers]
        public ICollection<StaffOtherName> StaffOtherNames
        {
            get { return _staffOtherNames; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffOtherName>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffOtherName)e.Item).Staff = this);
                _staffOtherNames = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffOtherName, StaffOtherName>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffOtherName)e.Item).Staff = this;
                _staffOtherNamesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffOtherName> Entities.Common.EdFi.IStaff.StaffOtherNames
        {
            get { return _staffOtherNamesCovariant; }
            set { StaffOtherNames = new List<StaffOtherName>(value.Cast<StaffOtherName>()); }
        }

        private ICollection<StaffPersonalIdentificationDocument> _staffPersonalIdentificationDocuments;
        private ICollection<Entities.Common.EdFi.IStaffPersonalIdentificationDocument> _staffPersonalIdentificationDocumentsCovariant;

        [DataMember(Name="personalIdentificationDocuments"), NoDuplicateMembers]
        public ICollection<StaffPersonalIdentificationDocument> StaffPersonalIdentificationDocuments
        {
            get { return _staffPersonalIdentificationDocuments; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffPersonalIdentificationDocument>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffPersonalIdentificationDocument)e.Item).Staff = this);
                _staffPersonalIdentificationDocuments = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffPersonalIdentificationDocument, StaffPersonalIdentificationDocument>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffPersonalIdentificationDocument)e.Item).Staff = this;
                _staffPersonalIdentificationDocumentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffPersonalIdentificationDocument> Entities.Common.EdFi.IStaff.StaffPersonalIdentificationDocuments
        {
            get { return _staffPersonalIdentificationDocumentsCovariant; }
            set { StaffPersonalIdentificationDocuments = new List<StaffPersonalIdentificationDocument>(value.Cast<StaffPersonalIdentificationDocument>()); }
        }

        private ICollection<StaffRace> _staffRaces;
        private ICollection<Entities.Common.EdFi.IStaffRace> _staffRacesCovariant;

        [DataMember(Name="races"), NoDuplicateMembers]
        public ICollection<StaffRace> StaffRaces
        {
            get { return _staffRaces; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffRace>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffRace)e.Item).Staff = this);
                _staffRaces = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffRace, StaffRace>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffRace)e.Item).Staff = this;
                _staffRacesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffRace> Entities.Common.EdFi.IStaff.StaffRaces
        {
            get { return _staffRacesCovariant; }
            set { StaffRaces = new List<StaffRace>(value.Cast<StaffRace>()); }
        }

        private ICollection<StaffRecognition> _staffRecognitions;
        private ICollection<Entities.Common.EdFi.IStaffRecognition> _staffRecognitionsCovariant;

        [DataMember(Name="recognitions"), NoDuplicateMembers]
        public ICollection<StaffRecognition> StaffRecognitions
        {
            get { return _staffRecognitions; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffRecognition>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffRecognition)e.Item).Staff = this);
                _staffRecognitions = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffRecognition, StaffRecognition>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffRecognition)e.Item).Staff = this;
                _staffRecognitionsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffRecognition> Entities.Common.EdFi.IStaff.StaffRecognitions
        {
            get { return _staffRecognitionsCovariant; }
            set { StaffRecognitions = new List<StaffRecognition>(value.Cast<StaffRecognition>()); }
        }

        private ICollection<StaffTelephone> _staffTelephones;
        private ICollection<Entities.Common.EdFi.IStaffTelephone> _staffTelephonesCovariant;

        [DataMember(Name="telephones"), NoDuplicateMembers]
        public ICollection<StaffTelephone> StaffTelephones
        {
            get { return _staffTelephones; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffTelephone>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffTelephone)e.Item).Staff = this);
                _staffTelephones = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffTelephone, StaffTelephone>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffTelephone)e.Item).Staff = this;
                _staffTelephonesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffTelephone> Entities.Common.EdFi.IStaff.StaffTelephones
        {
            get { return _staffTelephonesCovariant; }
            set { StaffTelephones = new List<StaffTelephone>(value.Cast<StaffTelephone>()); }
        }

        private ICollection<StaffTribalAffiliation> _staffTribalAffiliations;
        private ICollection<Entities.Common.EdFi.IStaffTribalAffiliation> _staffTribalAffiliationsCovariant;

        [DataMember(Name="tribalAffiliations"), NoDuplicateMembers]
        public ICollection<StaffTribalAffiliation> StaffTribalAffiliations
        {
            get { return _staffTribalAffiliations; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffTribalAffiliation>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffTribalAffiliation)e.Item).Staff = this);
                _staffTribalAffiliations = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffTribalAffiliation, StaffTribalAffiliation>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffTribalAffiliation)e.Item).Staff = this;
                _staffTribalAffiliationsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffTribalAffiliation> Entities.Common.EdFi.IStaff.StaffTribalAffiliations
        {
            get { return _staffTribalAffiliationsCovariant; }
            set { StaffTribalAffiliations = new List<StaffTribalAffiliation>(value.Cast<StaffTribalAffiliation>()); }
        }

        private ICollection<StaffVisa> _staffVisas;
        private ICollection<Entities.Common.EdFi.IStaffVisa> _staffVisasCovariant;

        [DataMember(Name="visas"), NoDuplicateMembers]
        public ICollection<StaffVisa> StaffVisas
        {
            get { return _staffVisas; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffVisa>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffVisa)e.Item).Staff = this);
                _staffVisas = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffVisa, StaffVisa>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffVisa)e.Item).Staff = this;
                _staffVisasCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffVisa> Entities.Common.EdFi.IStaff.StaffVisas
        {
            get { return _staffVisasCovariant; }
            set { StaffVisas = new List<StaffVisa>(value.Cast<StaffVisa>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffAddresses != null) foreach (var item in _staffAddresses)
            {
                item.Staff = this;
            }

            if (_staffCredentials != null) foreach (var item in _staffCredentials)
            {
                item.Staff = this;
            }

            if (_staffElectronicMails != null) foreach (var item in _staffElectronicMails)
            {
                item.Staff = this;
            }

            if (_staffIdentificationCodes != null) foreach (var item in _staffIdentificationCodes)
            {
                item.Staff = this;
            }

            if (_staffIdentificationDocuments != null) foreach (var item in _staffIdentificationDocuments)
            {
                item.Staff = this;
            }

            if (_staffInternationalAddresses != null) foreach (var item in _staffInternationalAddresses)
            {
                item.Staff = this;
            }

            if (_staffLanguages != null) foreach (var item in _staffLanguages)
            {
                item.Staff = this;
            }

            if (_staffOtherNames != null) foreach (var item in _staffOtherNames)
            {
                item.Staff = this;
            }

            if (_staffPersonalIdentificationDocuments != null) foreach (var item in _staffPersonalIdentificationDocuments)
            {
                item.Staff = this;
            }

            if (_staffRaces != null) foreach (var item in _staffRaces)
            {
                item.Staff = this;
            }

            if (_staffRecognitions != null) foreach (var item in _staffRecognitions)
            {
                item.Staff = this;
            }

            if (_staffTelephones != null) foreach (var item in _staffTelephones)
            {
                item.Staff = this;
            }

            if (_staffTribalAffiliations != null) foreach (var item in _staffTribalAffiliations)
            {
                item.Staff = this;
            }

            if (_staffVisas != null) foreach (var item in _staffVisas)
            {
                item.Staff = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaff)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffMapper.MapTo(this, (Entities.Common.EdFi.IStaff)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsBirthDateSupported                                   { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsCitizenshipStatusDescriptorSupported                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsFirstNameSupported                                   { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsGenerationCodeSuffixSupported                        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsHighestCompletedLevelOfEducationDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsHighlyQualifiedTeacherSupported                      { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsHispanicLatinoEthnicitySupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsLastSurnameSupported                                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsLoginIdSupported                                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsMaidenNameSupported                                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsMiddleNameSupported                                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsOldEthnicityDescriptorSupported                      { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsPersonalTitlePrefixSupported                         { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsSexDescriptorSupported                               { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffAddressesSupported                              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffCredentialsSupported                            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffElectronicMailsSupported                        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationCodesSupported                    { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationDocumentsSupported                { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffInternationalAddressesSupported                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffLanguagesSupported                              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffOtherNamesSupported                             { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffPersonalIdentificationDocumentsSupported        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRacesSupported                                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRecognitionsSupported                           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTelephonesSupported                             { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTribalAffiliationsSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffUniqueIdSupported                               { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffVisasSupported                                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsYearsOfPriorProfessionalExperienceSupported          { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsYearsOfPriorTeachingExperienceSupported              { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.EdFi.IStaffAddress, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffAddressIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffCredential, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffCredentialIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffElectronicMail, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffElectronicMailIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffIdentificationCode, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationCodeIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffIdentificationDocument, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationDocumentIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffInternationalAddress, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffInternationalAddressIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffLanguage, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffLanguageIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffOtherName, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffOtherNameIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffPersonalIdentificationDocument, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffPersonalIdentificationDocumentIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffRace, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRaceIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffRecognition, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRecognitionIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffTelephone, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTelephoneIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffTribalAffiliation, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTribalAffiliationIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffVisa, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffVisaIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPutPostRequestValidator : FluentValidation.AbstractValidator<Staff>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<Staff> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var staffAddressesValidator = new StaffAddressPutPostRequestValidator();

            foreach (var item in instance.StaffAddresses)
            {
                var validationResult = staffAddressesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffCredentialsValidator = new StaffCredentialPutPostRequestValidator();

            foreach (var item in instance.StaffCredentials)
            {
                var validationResult = staffCredentialsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffElectronicMailsValidator = new StaffElectronicMailPutPostRequestValidator();

            foreach (var item in instance.StaffElectronicMails)
            {
                var validationResult = staffElectronicMailsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffIdentificationCodesValidator = new StaffIdentificationCodePutPostRequestValidator();

            foreach (var item in instance.StaffIdentificationCodes)
            {
                var validationResult = staffIdentificationCodesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffIdentificationDocumentsValidator = new StaffIdentificationDocumentPutPostRequestValidator();

            foreach (var item in instance.StaffIdentificationDocuments)
            {
                var validationResult = staffIdentificationDocumentsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffInternationalAddressesValidator = new StaffInternationalAddressPutPostRequestValidator();

            foreach (var item in instance.StaffInternationalAddresses)
            {
                var validationResult = staffInternationalAddressesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffLanguagesValidator = new StaffLanguagePutPostRequestValidator();

            foreach (var item in instance.StaffLanguages)
            {
                var validationResult = staffLanguagesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffOtherNamesValidator = new StaffOtherNamePutPostRequestValidator();

            foreach (var item in instance.StaffOtherNames)
            {
                var validationResult = staffOtherNamesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffPersonalIdentificationDocumentsValidator = new StaffPersonalIdentificationDocumentPutPostRequestValidator();

            foreach (var item in instance.StaffPersonalIdentificationDocuments)
            {
                var validationResult = staffPersonalIdentificationDocumentsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffRacesValidator = new StaffRacePutPostRequestValidator();

            foreach (var item in instance.StaffRaces)
            {
                var validationResult = staffRacesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffRecognitionsValidator = new StaffRecognitionPutPostRequestValidator();

            foreach (var item in instance.StaffRecognitions)
            {
                var validationResult = staffRecognitionsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffTelephonesValidator = new StaffTelephonePutPostRequestValidator();

            foreach (var item in instance.StaffTelephones)
            {
                var validationResult = staffTelephonesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffTribalAffiliationsValidator = new StaffTribalAffiliationPutPostRequestValidator();

            foreach (var item in instance.StaffTribalAffiliations)
            {
                var validationResult = staffTribalAffiliationsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffVisasValidator = new StaffVisaPutPostRequestValidator();

            foreach (var item in instance.StaffVisas)
            {
                var validationResult = staffVisasValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffAddress table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffAddress : Entities.Common.EdFi.IStaffAddress, Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StaffAddress()
        {
            StaffAddressPeriods = new List<StaffAddressPeriod>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffAddress.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressTypeDescriptor"), NaturalKeyMember]
        public string AddressTypeDescriptor { get; set; }

        /// <summary>
        /// The name of the city in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="city"), NaturalKeyMember]
        public string City { get; set; }

        /// <summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="postalCode"), NaturalKeyMember]
        public string PostalCode { get; set; }

        /// <summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="stateAbbreviationDescriptor"), NaturalKeyMember]
        public string StateAbbreviationDescriptor { get; set; }

        /// <summary>
        /// The street number and street name or post office box number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="streetNumberName"), NaturalKeyMember]
        public string StreetNumberName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffAddress;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).AddressTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffAddress).AddressTypeDescriptor.Equals(compareTo.AddressTypeDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).City == null
                || !(this as Entities.Common.EdFi.IStaffAddress).City.Equals(compareTo.City)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).PostalCode == null
                || !(this as Entities.Common.EdFi.IStaffAddress).PostalCode.Equals(compareTo.PostalCode)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).StateAbbreviationDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffAddress).StateAbbreviationDescriptor.Equals(compareTo.StateAbbreviationDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).StreetNumberName == null
                || !(this as Entities.Common.EdFi.IStaffAddress).StreetNumberName.Equals(compareTo.StreetNumberName)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).AddressTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).AddressTypeDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).City != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).City.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).PostalCode != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).PostalCode.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).StateAbbreviationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).StateAbbreviationDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).StreetNumberName != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).StreetNumberName.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The apartment, room, or suite number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="apartmentRoomSuiteNumber")]
        public string ApartmentRoomSuiteNumber { get; set; }

        /// <summary>
        /// The number of the building on the site, if more than one building shares the same address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="buildingSiteNumber")]
        public string BuildingSiteNumber { get; set; }

        /// <summary>
        /// The congressional district in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="congressionalDistrict")]
        public string CongressionalDistrict { get; set; }

        /// <summary>
        /// The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \"first-order subdivisions\" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="countyFIPSCode")]
        public string CountyFIPSCode { get; set; }

        /// <summary>
        /// An indication that the address should not be published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// A general geographic indicator that categorizes U.S. territory (e.g., City, Suburban).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="localeDescriptor")]
        public string LocaleDescriptor { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }

        /// <summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in                        'which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nameOfCounty")]
        public string NameOfCounty { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffAddress")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffAddressPeriod> _staffAddressPeriods;
        private ICollection<Entities.Common.EdFi.IStaffAddressPeriod> _staffAddressPeriodsCovariant;

        [DataMember(Name="periods"), NoDuplicateMembers]
        public ICollection<StaffAddressPeriod> StaffAddressPeriods
        {
            get { return _staffAddressPeriods; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffAddressPeriod>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffAddressPeriod)e.Item).StaffAddress = this);
                _staffAddressPeriods = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffAddressPeriod, StaffAddressPeriod>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffAddressPeriod)e.Item).StaffAddress = this;
                _staffAddressPeriodsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffAddressPeriod> Entities.Common.EdFi.IStaffAddress.StaffAddressPeriods
        {
            get { return _staffAddressPeriodsCovariant; }
            set { StaffAddressPeriods = new List<StaffAddressPeriod>(value.Cast<StaffAddressPeriod>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffAddressPeriods != null) foreach (var item in _staffAddressPeriods)
            {
                item.StaffAddress = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffAddressMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffAddress)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffAddressMapper.MapTo(this, (Entities.Common.EdFi.IStaffAddress)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsApartmentRoomSuiteNumberSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsBuildingSiteNumberSupported        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsCongressionalDistrictSupported     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsCountyFIPSCodeSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsLatitudeSupported                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsLocaleDescriptorSupported          { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsLongitudeSupported                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsNameOfCountySupported              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsStaffAddressPeriodsSupported       { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.EdFi.IStaffAddressPeriod, bool> Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsStaffAddressPeriodIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffAddressPutPostRequestValidator : FluentValidation.AbstractValidator<StaffAddress>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffAddress> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var staffAddressPeriodsValidator = new StaffAddressPeriodPutPostRequestValidator();

            foreach (var item in instance.StaffAddressPeriods)
            {
                var validationResult = staffAddressPeriodsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffAddressPeriod table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffAddressPeriod : Entities.Common.EdFi.IStaffAddressPeriod, Entities.Common.EdFi.IStaffAddressPeriodSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaffAddress _staffAddress;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaffAddress Entities.Common.EdFi.IStaffAddressPeriod.StaffAddress
        {
            get { return _staffAddress; }
            set { SetStaffAddress(value); }
        }

        internal Entities.Common.EdFi.IStaffAddress StaffAddress
        {
            set { SetStaffAddress(value); }
        }

        private void SetStaffAddress(Entities.Common.EdFi.IStaffAddress value)
        {
            _staffAddress = value;
        }

        /// <summary>
        /// The month, day, and year for the start of the period.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate"), NaturalKeyMember][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime BeginDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffAddressPeriod;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staffAddress == null || !_staffAddress.Equals(compareTo.StaffAddress))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddressPeriod).BeginDate == null
                || !(this as Entities.Common.EdFi.IStaffAddressPeriod).BeginDate.Equals(compareTo.BeginDate)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffAddress != null)
                    hash = hash * 23 + _staffAddress.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddressPeriod).BeginDate != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddressPeriod).BeginDate.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year for the end of the period.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffAddressPeriod")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffAddressPeriodMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffAddressPeriod)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffAddressPeriodMapper.MapTo(this, (Entities.Common.EdFi.IStaffAddressPeriod)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffAddressPeriodSynchronizationSourceSupport.IsEndDateSupported  { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffAddressPeriodPutPostRequestValidator : FluentValidation.AbstractValidator<StaffAddressPeriod>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffAddressPeriod> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffCredential table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffCredential : Entities.Common.EdFi.IStaffCredential, Entities.Common.EdFi.IStaffCredentialSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _credentialReferenceExplicitlyAssigned;
        private Credential.EdFi.CredentialReference _credentialReference;
        private Credential.EdFi.CredentialReference ImplicitCredentialReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_credentialReference == null && !_credentialReferenceExplicitlyAssigned)
                    _credentialReference = new Credential.EdFi.CredentialReference();

                return _credentialReference;
            }
        }

        [DataMember(Name="credentialReference")][NaturalKeyMember]
        public Credential.EdFi.CredentialReference CredentialReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitCredentialReference != null
                    && (_credentialReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitCredentialReference.IsReferenceFullyDefined()))
                    return ImplicitCredentialReference;

                return null;
            }
            set
            {
                _credentialReferenceExplicitlyAssigned = true;
                _credentialReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffCredential.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// Identifier or serial number assigned to the credential.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.EdFi.IStaffCredential.CredentialIdentifier
        {
            get
            {
                if (ImplicitCredentialReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCredentialReference.IsReferenceFullyDefined()))
                    return ImplicitCredentialReference.CredentialIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Credential
                _credentialReferenceExplicitlyAssigned = false;
                ImplicitCredentialReference.CredentialIdentifier = value;
            }
        }

        /// <summary>
        /// The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued.
        /// </summary>

        // IS in a reference (StaffCredential.StateOfIssueStateAbbreviationDescriptorId), IS a lookup column 
        string Entities.Common.EdFi.IStaffCredential.StateOfIssueStateAbbreviationDescriptor
        {
            get
            {
                if (ImplicitCredentialReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCredentialReference.IsReferenceFullyDefined()))
                    return ImplicitCredentialReference.StateOfIssueStateAbbreviationDescriptor;

                return null;
            }
            set
            {
                ImplicitCredentialReference.StateOfIssueStateAbbreviationDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffCredential;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Referenced Property
            if ((this as Entities.Common.EdFi.IStaffCredential).CredentialIdentifier == null
                || !(this as Entities.Common.EdFi.IStaffCredential).CredentialIdentifier.Equals(compareTo.CredentialIdentifier)) 
                return false;
 
            // Unified Type Property
            if ((this as Entities.Common.EdFi.IStaffCredential).StateOfIssueStateAbbreviationDescriptor == null
                ||!(this as Entities.Common.EdFi.IStaffCredential).StateOfIssueStateAbbreviationDescriptor.Equals(compareTo.StateOfIssueStateAbbreviationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                //Referenced Property
                if ((this as Entities.Common.EdFi.IStaffCredential).CredentialIdentifier != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffCredential).CredentialIdentifier.GetHashCode();
 
                //Unified Type Property
                if ((this as Entities.Common.EdFi.IStaffCredential).StateOfIssueStateAbbreviationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffCredential).StateOfIssueStateAbbreviationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffCredential")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffCredentialMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffCredential)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffCredentialMapper.MapTo(this, (Entities.Common.EdFi.IStaffCredential)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.EdFi.IStaffCredential.CredentialResourceId 
        { 
            get { return null; }
            set { ImplicitCredentialReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.EdFi.IStaffCredential.CredentialDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitCredentialReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffCredentialPutPostRequestValidator : FluentValidation.AbstractValidator<StaffCredential>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffCredential> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffElectronicMail table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffElectronicMail : Entities.Common.EdFi.IStaffElectronicMail, Entities.Common.EdFi.IStaffElectronicMailSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffElectronicMail.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The electronic mail (e-mail) address listed for an individual or organization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="electronicMailAddress"), NaturalKeyMember]
        public string ElectronicMailAddress { get; set; }

        /// <summary>
        /// The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="electronicMailTypeDescriptor"), NaturalKeyMember]
        public string ElectronicMailTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffElectronicMail;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailAddress == null
                || !(this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailAddress.Equals(compareTo.ElectronicMailAddress)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailTypeDescriptor.Equals(compareTo.ElectronicMailTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailAddress != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailAddress.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication that the electronic email address should not be published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="primaryEmailAddressIndicator")]
        public bool? PrimaryEmailAddressIndicator { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffElectronicMail")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffElectronicMailMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffElectronicMail)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffElectronicMailMapper.MapTo(this, (Entities.Common.EdFi.IStaffElectronicMail)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffElectronicMailSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported         { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffElectronicMailSynchronizationSourceSupport.IsPrimaryEmailAddressIndicatorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffElectronicMailPutPostRequestValidator : FluentValidation.AbstractValidator<StaffElectronicMail>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffElectronicMail> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffIdentificationCode table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffIdentificationCode : Entities.Common.EdFi.IStaffIdentificationCode, Entities.Common.EdFi.IStaffIdentificationCodeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffIdentificationCode.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a staff member.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="staffIdentificationSystemDescriptor"), NaturalKeyMember]
        public string StaffIdentificationSystemDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffIdentificationCode;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffIdentificationCode).StaffIdentificationSystemDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffIdentificationCode).StaffIdentificationSystemDescriptor.Equals(compareTo.StaffIdentificationSystemDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffIdentificationCode).StaffIdentificationSystemDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffIdentificationCode).StaffIdentificationSystemDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The organization code or name assigning the staff Identification Code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="assigningOrganizationIdentificationCode")]
        public string AssigningOrganizationIdentificationCode { get; set; }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="identificationCode")]
        public string IdentificationCode { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffIdentificationCode")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffIdentificationCodeMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffIdentificationCode)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffIdentificationCodeMapper.MapTo(this, (Entities.Common.EdFi.IStaffIdentificationCode)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffIdentificationCodeSynchronizationSourceSupport.IsAssigningOrganizationIdentificationCodeSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationCodeSynchronizationSourceSupport.IsIdentificationCodeSupported                       { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffIdentificationCodePutPostRequestValidator : FluentValidation.AbstractValidator<StaffIdentificationCode>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffIdentificationCode> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffIdentificationDocument table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffIdentificationDocument : Entities.Common.EdFi.IStaffIdentificationDocument, Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffIdentificationDocument.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The primary function of the document used for establishing identity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="identificationDocumentUseDescriptor"), NaturalKeyMember]
        public string IdentificationDocumentUseDescriptor { get; set; }

        /// <summary>
        /// The category of the document relative to its purpose.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="personalInformationVerificationDescriptor"), NaturalKeyMember]
        public string PersonalInformationVerificationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffIdentificationDocument;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffIdentificationDocument).IdentificationDocumentUseDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffIdentificationDocument).IdentificationDocumentUseDescriptor.Equals(compareTo.IdentificationDocumentUseDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffIdentificationDocument).PersonalInformationVerificationDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffIdentificationDocument).PersonalInformationVerificationDescriptor.Equals(compareTo.PersonalInformationVerificationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffIdentificationDocument).IdentificationDocumentUseDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffIdentificationDocument).IdentificationDocumentUseDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffIdentificationDocument).PersonalInformationVerificationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffIdentificationDocument).PersonalInformationVerificationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The day when the document  expires, if null then never expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentExpirationDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? DocumentExpirationDate { get; set; }

        /// <summary>
        /// The title of the document given by the issuer.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentTitle")]
        public string DocumentTitle { get; set; }

        /// <summary>
        /// Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="issuerCountryDescriptor")]
        public string IssuerCountryDescriptor { get; set; }

        /// <summary>
        /// The unique identifier on the issuer's identification system.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerDocumentIdentificationCode")]
        public string IssuerDocumentIdentificationCode { get; set; }

        /// <summary>
        /// Name of the entity or institution that issued the document.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffIdentificationDocument")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffIdentificationDocumentMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffIdentificationDocumentMapper.MapTo(this, (Entities.Common.EdFi.IStaffIdentificationDocument)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported                        { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffIdentificationDocumentPutPostRequestValidator : FluentValidation.AbstractValidator<StaffIdentificationDocument>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffIdentificationDocument> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffInternationalAddress table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffInternationalAddress : Entities.Common.EdFi.IStaffInternationalAddress, Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffInternationalAddress.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The type of address listed for an individual or organization. For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressTypeDescriptor"), NaturalKeyMember]
        public string AddressTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffInternationalAddress;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffInternationalAddress).AddressTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffInternationalAddress).AddressTypeDescriptor.Equals(compareTo.AddressTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffInternationalAddress).AddressTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffInternationalAddress).AddressTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The first line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine1")]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// The second line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine2")]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// The third line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine3")]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// The fourth line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine4")]
        public string AddressLine4 { get; set; }

        /// <summary>
        /// The first date the address is valid. For physical addresses, the date the person moved to that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The name of the country. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="countryDescriptor")]
        public string CountryDescriptor { get; set; }

        /// <summary>
        /// The last date the address is valid. For physical addresses, this would be the date the person moved from that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffInternationalAddress")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffInternationalAddressMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffInternationalAddress)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffInternationalAddressMapper.MapTo(this, (Entities.Common.EdFi.IStaffInternationalAddress)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine1Supported       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine2Supported       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine3Supported       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine4Supported       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsBeginDateSupported          { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsCountryDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsEndDateSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsLatitudeSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsLongitudeSupported          { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffInternationalAddressPutPostRequestValidator : FluentValidation.AbstractValidator<StaffInternationalAddress>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffInternationalAddress> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffLanguage table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffLanguage : Entities.Common.EdFi.IStaffLanguage, Entities.Common.EdFi.IStaffLanguageSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StaffLanguage()
        {
            StaffLanguageUses = new List<StaffLanguageUse>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffLanguage.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// A specification of which written or spoken communication is being used.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="languageDescriptor"), NaturalKeyMember]
        public string LanguageDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffLanguage;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffLanguage).LanguageDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffLanguage).LanguageDescriptor.Equals(compareTo.LanguageDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffLanguage).LanguageDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffLanguage).LanguageDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffLanguage")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffLanguageUse> _staffLanguageUses;
        private ICollection<Entities.Common.EdFi.IStaffLanguageUse> _staffLanguageUsesCovariant;

        [DataMember(Name="uses"), NoDuplicateMembers]
        public ICollection<StaffLanguageUse> StaffLanguageUses
        {
            get { return _staffLanguageUses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffLanguageUse>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffLanguageUse)e.Item).StaffLanguage = this);
                _staffLanguageUses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffLanguageUse, StaffLanguageUse>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffLanguageUse)e.Item).StaffLanguage = this;
                _staffLanguageUsesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffLanguageUse> Entities.Common.EdFi.IStaffLanguage.StaffLanguageUses
        {
            get { return _staffLanguageUsesCovariant; }
            set { StaffLanguageUses = new List<StaffLanguageUse>(value.Cast<StaffLanguageUse>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffLanguageUses != null) foreach (var item in _staffLanguageUses)
            {
                item.StaffLanguage = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffLanguageMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffLanguage)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffLanguageMapper.MapTo(this, (Entities.Common.EdFi.IStaffLanguage)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffLanguageSynchronizationSourceSupport.IsStaffLanguageUsesSupported  { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.EdFi.IStaffLanguageUse, bool> Entities.Common.EdFi.IStaffLanguageSynchronizationSourceSupport.IsStaffLanguageUseIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffLanguagePutPostRequestValidator : FluentValidation.AbstractValidator<StaffLanguage>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffLanguage> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var staffLanguageUsesValidator = new StaffLanguageUsePutPostRequestValidator();

            foreach (var item in instance.StaffLanguageUses)
            {
                var validationResult = staffLanguageUsesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffLanguageUse table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffLanguageUse : Entities.Common.EdFi.IStaffLanguageUse, Entities.Common.EdFi.IStaffLanguageUseSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaffLanguage _staffLanguage;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaffLanguage Entities.Common.EdFi.IStaffLanguageUse.StaffLanguage
        {
            get { return _staffLanguage; }
            set { SetStaffLanguage(value); }
        }

        internal Entities.Common.EdFi.IStaffLanguage StaffLanguage
        {
            set { SetStaffLanguage(value); }
        }

        private void SetStaffLanguage(Entities.Common.EdFi.IStaffLanguage value)
        {
            _staffLanguage = value;
        }

        /// <summary>
        /// A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="languageUseDescriptor"), NaturalKeyMember]
        public string LanguageUseDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffLanguageUse;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staffLanguage == null || !_staffLanguage.Equals(compareTo.StaffLanguage))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffLanguageUse).LanguageUseDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffLanguageUse).LanguageUseDescriptor.Equals(compareTo.LanguageUseDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffLanguage != null)
                    hash = hash * 23 + _staffLanguage.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffLanguageUse).LanguageUseDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffLanguageUse).LanguageUseDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffLanguageUse")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffLanguageUseMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffLanguageUse)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffLanguageUseMapper.MapTo(this, (Entities.Common.EdFi.IStaffLanguageUse)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffLanguageUsePutPostRequestValidator : FluentValidation.AbstractValidator<StaffLanguageUse>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffLanguageUse> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffOtherName table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffOtherName : Entities.Common.EdFi.IStaffOtherName, Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffOtherName.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The types of alternate names for a person.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="otherNameTypeDescriptor"), NaturalKeyMember]
        public string OtherNameTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffOtherName;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffOtherName).OtherNameTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffOtherName).OtherNameTypeDescriptor.Equals(compareTo.OtherNameTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffOtherName).OtherNameTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffOtherName).OtherNameTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffOtherName")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffOtherNameMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffOtherName)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffOtherNameMapper.MapTo(this, (Entities.Common.EdFi.IStaffOtherName)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsFirstNameSupported             { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsGenerationCodeSuffixSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsLastSurnameSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsMiddleNameSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsPersonalTitlePrefixSupported   { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffOtherNamePutPostRequestValidator : FluentValidation.AbstractValidator<StaffOtherName>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffOtherName> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffPersonalIdentificationDocument table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffPersonalIdentificationDocument : Entities.Common.EdFi.IStaffPersonalIdentificationDocument, Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffPersonalIdentificationDocument.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The primary function of the document used for establishing identity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="identificationDocumentUseDescriptor"), NaturalKeyMember]
        public string IdentificationDocumentUseDescriptor { get; set; }

        /// <summary>
        /// The category of the document relative to its purpose.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="personalInformationVerificationDescriptor"), NaturalKeyMember]
        public string PersonalInformationVerificationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffPersonalIdentificationDocument;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).IdentificationDocumentUseDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).IdentificationDocumentUseDescriptor.Equals(compareTo.IdentificationDocumentUseDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).PersonalInformationVerificationDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).PersonalInformationVerificationDescriptor.Equals(compareTo.PersonalInformationVerificationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).IdentificationDocumentUseDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).IdentificationDocumentUseDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).PersonalInformationVerificationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).PersonalInformationVerificationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The day when the document  expires, if null then never expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentExpirationDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? DocumentExpirationDate { get; set; }

        /// <summary>
        /// The title of the document given by the issuer.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentTitle")]
        public string DocumentTitle { get; set; }

        /// <summary>
        /// Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="issuerCountryDescriptor")]
        public string IssuerCountryDescriptor { get; set; }

        /// <summary>
        /// The unique identifier on the issuer's identification system.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerDocumentIdentificationCode")]
        public string IssuerDocumentIdentificationCode { get; set; }

        /// <summary>
        /// Name of the entity or institution that issued the document.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffPersonalIdentificationDocument")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffPersonalIdentificationDocumentMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffPersonalIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffPersonalIdentificationDocumentMapper.MapTo(this, (Entities.Common.EdFi.IStaffPersonalIdentificationDocument)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported                        { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPersonalIdentificationDocumentPutPostRequestValidator : FluentValidation.AbstractValidator<StaffPersonalIdentificationDocument>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffPersonalIdentificationDocument> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffRace table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffRace : Entities.Common.EdFi.IStaffRace, Entities.Common.EdFi.IStaffRaceSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffRace.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The general racial category which most clearly reflects the individual's recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="raceDescriptor"), NaturalKeyMember]
        public string RaceDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffRace;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffRace).RaceDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffRace).RaceDescriptor.Equals(compareTo.RaceDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffRace).RaceDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffRace).RaceDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffRace")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffRaceMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffRace)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffRaceMapper.MapTo(this, (Entities.Common.EdFi.IStaffRace)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffRacePutPostRequestValidator : FluentValidation.AbstractValidator<StaffRace>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffRace> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffRecognition table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffRecognition : Entities.Common.EdFi.IStaffRecognition, Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffRecognition.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The nature of recognition given to the learner for accomplishments in a co-curricular, or extra-curricular activity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="recognitionTypeDescriptor"), NaturalKeyMember]
        public string RecognitionTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffRecognition;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffRecognition).RecognitionTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffRecognition).RecognitionTypeDescriptor.Equals(compareTo.RecognitionTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffRecognition).RecognitionTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffRecognition).RecognitionTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The category of achievement attributed to the learner.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="achievementCategoryDescriptor")]
        public string AchievementCategoryDescriptor { get; set; }

        /// <summary>
        /// The system that defines the categories by which an achievement is attributed to the learner.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="achievementCategorySystem")]
        public string AchievementCategorySystem { get; set; }

        /// <summary>
        /// The title assigned to the achievement.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="achievementTitle")]
        public string AchievementTitle { get; set; }

        /// <summary>
        /// The criteria for competency-based completion of the achievement/award.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="criteria")]
        public string Criteria { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="criteriaURL")]
        public string CriteriaURL { get; set; }

        /// <summary>
        /// A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="evidenceStatement")]
        public string EvidenceStatement { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="imageURL")]
        public string ImageURL { get; set; }

        /// <summary>
        /// The name of the agent, entity, or institution issuing the element.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) from which the award was issued.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerOriginURL")]
        public string IssuerOriginURL { get; set; }

        /// <summary>
        /// The date the recognition was awarded or earned.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="recognitionAwardDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? RecognitionAwardDate { get; set; }

        /// <summary>
        /// Date on which the award expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="recognitionAwardExpiresDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? RecognitionAwardExpiresDate { get; set; }

        /// <summary>
        /// A description of the type of academic distinctions earned by or awarded to the individual.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="recognitionDescription")]
        public string RecognitionDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffRecognition")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffRecognitionMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffRecognition)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffRecognitionMapper.MapTo(this, (Entities.Common.EdFi.IStaffRecognition)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsAchievementCategoryDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsAchievementCategorySystemSupported      { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsAchievementTitleSupported               { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsCriteriaSupported                       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsCriteriaURLSupported                    { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsEvidenceStatementSupported              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsImageURLSupported                       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsIssuerNameSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsIssuerOriginURLSupported                { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsRecognitionAwardDateSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsRecognitionAwardExpiresDateSupported    { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsRecognitionDescriptionSupported         { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffRecognitionPutPostRequestValidator : FluentValidation.AbstractValidator<StaffRecognition>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffRecognition> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffTelephone table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffTelephone : Entities.Common.EdFi.IStaffTelephone, Entities.Common.EdFi.IStaffTelephoneSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffTelephone.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The telephone number including the area code, and extension, if applicable.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="telephoneNumber"), NaturalKeyMember]
        public string TelephoneNumber { get; set; }

        /// <summary>
        /// The type of communication number listed for an individual or organization.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="telephoneNumberTypeDescriptor"), NaturalKeyMember]
        public string TelephoneNumberTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffTelephone;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumber == null
                || !(this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumber.Equals(compareTo.TelephoneNumber)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumberTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumberTypeDescriptor.Equals(compareTo.TelephoneNumberTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumber != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumber.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumberTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumberTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication that the telephone number should not be published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="orderOfPriority")]
        public int? OrderOfPriority { get; set; }

        /// <summary>
        /// An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="textMessageCapabilityIndicator")]
        public bool? TextMessageCapabilityIndicator { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffTelephone")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffTelephoneMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffTelephone)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffTelephoneMapper.MapTo(this, (Entities.Common.EdFi.IStaffTelephone)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffTelephoneSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffTelephoneSynchronizationSourceSupport.IsOrderOfPrioritySupported                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffTelephoneSynchronizationSourceSupport.IsTextMessageCapabilityIndicatorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffTelephonePutPostRequestValidator : FluentValidation.AbstractValidator<StaffTelephone>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffTelephone> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffTribalAffiliation table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffTribalAffiliation : Entities.Common.EdFi.IStaffTribalAffiliation, Entities.Common.EdFi.IStaffTribalAffiliationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffTribalAffiliation.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// An American Indian tribe with which the staff member is affiliated.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="tribalAffiliationDescriptor"), NaturalKeyMember]
        public string TribalAffiliationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffTribalAffiliation;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffTribalAffiliation).TribalAffiliationDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffTribalAffiliation).TribalAffiliationDescriptor.Equals(compareTo.TribalAffiliationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffTribalAffiliation).TribalAffiliationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffTribalAffiliation).TribalAffiliationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffTribalAffiliation")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffTribalAffiliationMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffTribalAffiliation)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffTribalAffiliationMapper.MapTo(this, (Entities.Common.EdFi.IStaffTribalAffiliation)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffTribalAffiliationPutPostRequestValidator : FluentValidation.AbstractValidator<StaffTribalAffiliation>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffTribalAffiliation> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffVisa table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffVisa : Entities.Common.EdFi.IStaffVisa, Entities.Common.EdFi.IStaffVisaSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffVisa.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// An indicator of a non-US citizen's Visa type.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="visaDescriptor"), NaturalKeyMember]
        public string VisaDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffVisa;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffVisa).VisaDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffVisa).VisaDescriptor.Equals(compareTo.VisaDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffVisa).VisaDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffVisa).VisaDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffVisa")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffVisaMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffVisa)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffVisaMapper.MapTo(this, (Entities.Common.EdFi.IStaffVisa)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffVisaPutPostRequestValidator : FluentValidation.AbstractValidator<StaffVisa>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffVisa> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Staff

namespace EdFi.Ods.Api.Models.Resources.Staff.EdFi.Staff_and_Prospect_MixedExclude_Writable.Extensions.GrandBend
{
    /// <summary>
    /// A class which represents the grandbend.StaffExtension table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffExtension : Entities.Common.GrandBend.IStaffExtension, Entities.Common.GrandBend.IStaffExtensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.GrandBend.IStaffExtension.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.GrandBend.IStaffExtension;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The date that the staff member's new hire probationary period was completed.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="probationCompleteDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? ProbationCompleteDate { get; set; }

        /// <summary>
        /// An indication as to whether the staff member is tenured.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="tenured")]
        public bool? Tenured { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.GrandBend.StaffExtensionMapper.SynchronizeTo(this, (Entities.Common.GrandBend.IStaffExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.GrandBend.StaffExtensionMapper.MapTo(this, (Entities.Common.GrandBend.IStaffExtension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.GrandBend.IStaffExtensionSynchronizationSourceSupport.IsProbationCompleteDateSupported  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IStaffExtensionSynchronizationSourceSupport.IsTenuredSupported                { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<StaffExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Staff

namespace EdFi.Ods.Api.Models.Resources.Staff.EdFi.Staff_and_Prospect_MixedExclude_Writable.Extensions.Sample
{
    /// <summary>
    /// A class which represents the sample.StaffExtension table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffExtension : Entities.Common.Sample.IStaffExtension, Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StaffExtension()
        {
            StaffPets = new List<StaffPet>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.Sample.IStaffExtension.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStaffExtension;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The date the staff member adopted the first household pet.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstPetOwnedDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? FirstPetOwnedDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        /// <summary>
        /// petPreference
        /// </summary>
        [DataMember(Name = "petPreference")]
        public StaffPetPreference StaffPetPreference { get; set; }

        Entities.Common.Sample.IStaffPetPreference Entities.Common.Sample.IStaffExtension.StaffPetPreference
        {
            get { return StaffPetPreference; }
            set { StaffPetPreference = (StaffPetPreference) value; }
        }

        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffPet> _staffPets;
        private ICollection<Entities.Common.Sample.IStaffPet> _staffPetsCovariant;

        [DataMember(Name="pets"), NoDuplicateMembers]
        public ICollection<StaffPet> StaffPets
        {
            get { return _staffPets; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffPet>(value,
                    (s, e) => ((Entities.Common.Sample.IStaffPet)e.Item).StaffExtension = this);
                _staffPets = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.Sample.IStaffPet, StaffPet>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.Sample.IStaffPet)e.Item).StaffExtension = this;
                _staffPetsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.Sample.IStaffPet> Entities.Common.Sample.IStaffExtension.StaffPets
        {
            get { return _staffPetsCovariant; }
            set { StaffPets = new List<StaffPet>(value.Cast<StaffPet>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffPets != null) foreach (var item in _staffPets)
            {
                item.StaffExtension = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StaffExtensionMapper.SynchronizeTo(this, (Entities.Common.Sample.IStaffExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StaffExtensionMapper.MapTo(this, (Entities.Common.Sample.IStaffExtension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport.IsFirstPetOwnedDateSupported   { get { return true; } set { } }
        bool Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport.IsStaffPetPreferenceSupported  { get { return true; } set { } }
        bool Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport.IsStaffPetsSupported           { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.Sample.IStaffPet, bool> Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport.IsStaffPetIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<StaffExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var staffPetsValidator = new StaffPetPutPostRequestValidator();

            foreach (var item in instance.StaffPets)
            {
                var validationResult = staffPetsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the sample.StaffPet table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffPet : Entities.Common.Sample.IStaffPet, Entities.Common.Sample.IStaffPetSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.Sample.IStaffExtension _staffExtension;

        [IgnoreDataMember]
        Entities.Common.Sample.IStaffExtension Entities.Common.Sample.IStaffPet.StaffExtension
        {
            get { return _staffExtension; }
            set { SetStaffExtension(value); }
        }

        internal Entities.Common.Sample.IStaffExtension StaffExtension
        {
            set { SetStaffExtension(value); }
        }

        private void SetStaffExtension(Entities.Common.Sample.IStaffExtension value)
        {
            _staffExtension = value;
        }

        /// <summary>
        /// The pet's name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="petName"), NaturalKeyMember]
        public string PetName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStaffPet;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staffExtension == null || !_staffExtension.Equals(compareTo.StaffExtension))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.Sample.IStaffPet).PetName == null
                || !(this as Entities.Common.Sample.IStaffPet).PetName.Equals(compareTo.PetName)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffExtension != null)
                    hash = hash * 23 + _staffExtension.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.Sample.IStaffPet).PetName != null) 
                    hash = hash * 23 + (this as Entities.Common.Sample.IStaffPet).PetName.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication as to whether the pet has been spayed/neutered.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="isFixed")]
        public bool? IsFixed { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StaffPetMapper.SynchronizeTo(this, (Entities.Common.Sample.IStaffPet)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StaffPetMapper.MapTo(this, (Entities.Common.Sample.IStaffPet)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStaffPetSynchronizationSourceSupport.IsIsFixedSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPetPutPostRequestValidator : FluentValidation.AbstractValidator<StaffPet>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffPet> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the sample.StaffPetPreference table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffPetPreference : Entities.Common.Sample.IStaffPetPreference, Entities.Common.Sample.IStaffPetPreferenceSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.Sample.IStaffExtension _staffExtension;

        [IgnoreDataMember]
        Entities.Common.Sample.IStaffExtension Entities.Common.Sample.IStaffPetPreference.StaffExtension
        {
            get { return _staffExtension; }
            set { SetStaffExtension(value); }
        }

        internal Entities.Common.Sample.IStaffExtension StaffExtension
        {
            set { SetStaffExtension(value); }
        }

        private void SetStaffExtension(Entities.Common.Sample.IStaffExtension value)
        {
            _staffExtension = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStaffPetPreference;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staffExtension == null || !_staffExtension.Equals(compareTo.StaffExtension))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffExtension != null)
                    hash = hash * 23 + _staffExtension.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The preferred maximum weight of a household pet.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maximumWeight")]
        public int MaximumWeight { get; set; }

        /// <summary>
        /// The preferred minimum weight of a household pet.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="minimumWeight")]
        public int MinimumWeight { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StaffPetPreferenceMapper.SynchronizeTo(this, (Entities.Common.Sample.IStaffPetPreference)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StaffPetPreferenceMapper.MapTo(this, (Entities.Common.Sample.IStaffPetPreference)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStaffPetPreferenceSynchronizationSourceSupport.IsMaximumWeightSupported  { get { return true; } set { } }
        bool Entities.Common.Sample.IStaffPetPreferenceSynchronizationSourceSupport.IsMinimumWeightSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPetPreferencePutPostRequestValidator : FluentValidation.AbstractValidator<StaffPetPreference>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffPetPreference> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Applicant

namespace EdFi.Ods.Api.Models.Resources.Applicant.GrandBend.Staff_and_Prospect_MixedExclude2_Readable
{
    /// <summary>
    /// Represents a reference to the Applicant resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantReference
    {
        [DataMember(Name="applicantIdentifier"), NaturalKeyMember]
        public string ApplicantIdentifier { get; set; }

        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return ApplicantIdentifier != default(string) && EducationOrganizationId != default(int);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "Applicant",
                Href = $"/grand-bend/applicants/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new Common.Models.Domain.FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the grandbend.Applicant table of the Applicant aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class Applicant : Entities.Common.GrandBend.IApplicant, IHasETag, Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Applicant()
        {
            ApplicantAddresses = new List<ApplicantAddress>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Applicant resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EdFi.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EdFi.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EdFi.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EdFi.EducationOrganizationReference EducationOrganizationReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set
            {
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to an applicant.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="applicantIdentifier"), NaturalKeyMember]
        public string ApplicantIdentifier { get; set; }

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int Entities.Common.GrandBend.IApplicant.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.GrandBend.IApplicant;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
 
            // Standard Property
            if ((this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier == null
                || !(this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier.Equals(compareTo.ApplicantIdentifier)) 
                return false;
 
            // Referenced Property
            if ((this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId == null
                || !(this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId.Equals(compareTo.EducationOrganizationId)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier != null) 
                    hash = hash * 23 + (this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier.GetHashCode();
 
                //Referenced Property
                if ((this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="birthDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BirthDate { get; set; }

        /// <summary>
        /// An indicator of whether or not the person is a U.S. citizen.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="citizenshipStatusDescriptor")]
        public string CitizenshipStatusDescriptor { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="highestCompletedLevelOfEducationDescriptor")]
        public string HighestCompletedLevelOfEducationDescriptor { get; set; }

        /// <summary>
        /// An applicant subject in which a teacher applicant is classified as highly qualified.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="highlyQualifiedAcademicSubjectDescriptor")]
        public string HighlyQualifiedAcademicSubjectDescriptor { get; set; }

        /// <summary>
        /// An indication of whether a teacher applicant is classified as highly qualified for his/her prospective assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections to be taught.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="highlyQualifiedTeacher")]
        public bool? HighlyQualifiedTeacher { get; set; }

        /// <summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="hispanicLatinoEthnicity")]
        public bool? HispanicLatinoEthnicity { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// The login ID for the user; used for security access control interface.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="loginId")]
        public string LoginId { get; set; }

        /// <summary>
        /// The person's maiden name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maidenName")]
        public string MaidenName { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }

        /// <summary>
        /// A person's gender.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="sexDescriptor")]
        public string SexDescriptor { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a similar professional position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorProfessionalExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorProfessionalExperience { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a teaching position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorTeachingExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorTeachingExperience { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<ApplicantAddress> _applicantAddresses;
        private ICollection<Entities.Common.GrandBend.IApplicantAddress> _applicantAddressesCovariant;

        [DataMember(Name="addresses"), NoDuplicateMembers]
        public ICollection<ApplicantAddress> ApplicantAddresses
        {
            get { return _applicantAddresses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<ApplicantAddress>(value,
                    (s, e) => ((Entities.Common.GrandBend.IApplicantAddress)e.Item).Applicant = this);
                _applicantAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.GrandBend.IApplicantAddress, ApplicantAddress>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.GrandBend.IApplicantAddress)e.Item).Applicant = this;
                _applicantAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.GrandBend.IApplicantAddress> Entities.Common.GrandBend.IApplicant.ApplicantAddresses
        {
            get { return _applicantAddressesCovariant; }
            set { ApplicantAddresses = new List<ApplicantAddress>(value.Cast<ApplicantAddress>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_applicantAddresses != null) foreach (var item in _applicantAddresses)
            {
                item.Applicant = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.GrandBend.ApplicantMapper.SynchronizeTo(this, (Entities.Common.GrandBend.IApplicant)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.GrandBend.ApplicantMapper.MapTo(this, (Entities.Common.GrandBend.IApplicant)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsApplicantAddressesSupported                          { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsBirthDateSupported                                   { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsCitizenshipStatusDescriptorSupported                 { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsFirstNameSupported                                   { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsGenerationCodeSuffixSupported                        { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHighestCompletedLevelOfEducationDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHighlyQualifiedAcademicSubjectDescriptorSupported    { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHighlyQualifiedTeacherSupported                      { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHispanicLatinoEthnicitySupported                     { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsLastSurnameSupported                                 { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsLoginIdSupported                                     { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsMaidenNameSupported                                  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsMiddleNameSupported                                  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsPersonalTitlePrefixSupported                         { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsSexDescriptorSupported                               { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsYearsOfPriorProfessionalExperienceSupported          { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsYearsOfPriorTeachingExperienceSupported              { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.GrandBend.IApplicantAddress, bool> Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsApplicantAddressIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.GrandBend.IApplicant.EducationOrganizationResourceId 
        { 
            get { return null; }
            set { ImplicitEducationOrganizationReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.GrandBend.IApplicant.EducationOrganizationDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEducationOrganizationReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantPutPostRequestValidator : FluentValidation.AbstractValidator<Applicant>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<Applicant> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var applicantAddressesValidator = new ApplicantAddressPutPostRequestValidator();

            foreach (var item in instance.ApplicantAddresses)
            {
                var validationResult = applicantAddressesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the grandbend.ApplicantAddress table of the Applicant aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantAddress : Entities.Common.GrandBend.IApplicantAddress, Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.GrandBend.IApplicant _applicant;

        [IgnoreDataMember]
        Entities.Common.GrandBend.IApplicant Entities.Common.GrandBend.IApplicantAddress.Applicant
        {
            get { return _applicant; }
            set { SetApplicant(value); }
        }

        internal Entities.Common.GrandBend.IApplicant Applicant
        {
            set { SetApplicant(value); }
        }

        private void SetApplicant(Entities.Common.GrandBend.IApplicant value)
        {
            _applicant = value;
        }

        /// <summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressTypeDescriptor"), NaturalKeyMember]
        public string AddressTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.GrandBend.IApplicantAddress;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_applicant == null || !_applicant.Equals(compareTo.Applicant))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor == null
                || !(this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor.Equals(compareTo.AddressTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_applicant != null)
                    hash = hash * 23 + _applicant.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The apartment, room, or suite number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="apartmentRoomSuiteNumber")]
        public string ApartmentRoomSuiteNumber { get; set; }

        /// <summary>
        /// The month, day, and year the address became effective.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The number of the building on the site, if more than one building shares the same address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="buildingSiteNumber")]
        public string BuildingSiteNumber { get; set; }

        /// <summary>
        /// The name of the city in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="city")]
        public string City { get; set; }

        /// <summary>
        /// The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \"first-order subdivisions\" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="countyFIPSCode")]
        public string CountyFIPSCode { get; set; }

        /// <summary>
        /// The month, day, and year the address ceased to be in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }

        /// <summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in                        'which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nameOfCounty")]
        public string NameOfCounty { get; set; }

        /// <summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="stateAbbreviationDescriptor")]
        public string StateAbbreviationDescriptor { get; set; }

        /// <summary>
        /// The street number and street name or post office box number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="streetNumberName")]
        public string StreetNumberName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.GrandBend.ApplicantAddressMapper.SynchronizeTo(this, (Entities.Common.GrandBend.IApplicantAddress)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.GrandBend.ApplicantAddressMapper.MapTo(this, (Entities.Common.GrandBend.IApplicantAddress)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsApartmentRoomSuiteNumberSupported     { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsBeginDateSupported                    { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsBuildingSiteNumberSupported           { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsCitySupported                         { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsCountyFIPSCodeSupported               { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsEndDateSupported                      { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsLatitudeSupported                     { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsLongitudeSupported                    { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsNameOfCountySupported                 { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsPostalCodeSupported                   { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsStateAbbreviationDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsStreetNumberNameSupported             { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantAddressPutPostRequestValidator : FluentValidation.AbstractValidator<ApplicantAddress>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicantAddress> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Staff

namespace EdFi.Ods.Api.Models.Resources.Staff.EdFi.Staff_and_Prospect_MixedExclude2_Readable
{
    /// <summary>
    /// Represents a reference to the Staff resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffReference
    {
        [DataMember(Name="staffUniqueId"), NaturalKeyMember]
        public string StaffUniqueId { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return StaffUniqueId != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "Staff",
                Href = $"/ed-fi/staffs/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new Common.Models.Domain.FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.Staff table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class Staff : Entities.Common.EdFi.IStaff, IHasETag, Entities.Common.EdFi.IStaffSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Staff()
        {
            StaffAddresses = new List<StaffAddress>();
            StaffCredentials = new List<StaffCredential>();
            StaffElectronicMails = new List<StaffElectronicMail>();
            StaffIdentificationCodes = new List<StaffIdentificationCode>();
            StaffIdentificationDocuments = new List<StaffIdentificationDocument>();
            StaffInternationalAddresses = new List<StaffInternationalAddress>();
            StaffLanguages = new List<StaffLanguage>();
            StaffOtherNames = new List<StaffOtherName>();
            StaffPersonalIdentificationDocuments = new List<StaffPersonalIdentificationDocument>();
            StaffRaces = new List<StaffRace>();
            StaffRecognitions = new List<StaffRecognition>();
            StaffTelephones = new List<StaffTelephone>();
            StaffTribalAffiliations = new List<StaffTribalAffiliation>();
            StaffVisas = new List<StaffVisa>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Staff resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to a staff.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="staffUniqueId"), NaturalKeyMember, UniqueId]
        public string StaffUniqueId { get; set; }

        string IIdentifiablePerson.UniqueId { get { return StaffUniqueId; } }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaff;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Property
            if ((this as Entities.Common.EdFi.IStaff).StaffUniqueId == null
                || !(this as Entities.Common.EdFi.IStaff).StaffUniqueId.Equals(compareTo.StaffUniqueId)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Property
                if ((this as Entities.Common.EdFi.IStaff).StaffUniqueId != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaff).StaffUniqueId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="birthDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BirthDate { get; set; }

        /// <summary>
        /// An indicator of whether or not the person is a U.S. citizen.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="citizenshipStatusDescriptor")]
        public string CitizenshipStatusDescriptor { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="highestCompletedLevelOfEducationDescriptor")]
        public string HighestCompletedLevelOfEducationDescriptor { get; set; }

        /// <summary>
        /// An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="highlyQualifiedTeacher")]
        public bool? HighlyQualifiedTeacher { get; set; }

        /// <summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="hispanicLatinoEthnicity")]
        public bool? HispanicLatinoEthnicity { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// The login ID for the user; used for security access control interface.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="loginId")]
        public string LoginId { get; set; }

        /// <summary>
        /// The person's maiden name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maidenName")]
        public string MaidenName { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// Previous definition of Ethnicity combining Hispanic/Latino and race:          1 - American Indian or Alaskan Native          2 - Asian or Pacific Islander          3 - Black, not of Hispanic origin          4 - Hispanic          5 - White, not of Hispanic origin.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="oldEthnicityDescriptor")]
        public string OldEthnicityDescriptor { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }

        /// <summary>
        /// A person's gender.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="sexDescriptor")]
        public string SexDescriptor { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a similar professional position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorProfessionalExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorProfessionalExperience { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a teaching position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorTeachingExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorTeachingExperience { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "Staff")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffAddress> _staffAddresses;
        private ICollection<Entities.Common.EdFi.IStaffAddress> _staffAddressesCovariant;

        [DataMember(Name="addresses"), NoDuplicateMembers]
        public ICollection<StaffAddress> StaffAddresses
        {
            get { return _staffAddresses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffAddress>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffAddress)e.Item).Staff = this);
                _staffAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffAddress, StaffAddress>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffAddress)e.Item).Staff = this;
                _staffAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffAddress> Entities.Common.EdFi.IStaff.StaffAddresses
        {
            get { return _staffAddressesCovariant; }
            set { StaffAddresses = new List<StaffAddress>(value.Cast<StaffAddress>()); }
        }

        private ICollection<StaffCredential> _staffCredentials;
        private ICollection<Entities.Common.EdFi.IStaffCredential> _staffCredentialsCovariant;

        [DataMember(Name="credentials"), NoDuplicateMembers]
        public ICollection<StaffCredential> StaffCredentials
        {
            get { return _staffCredentials; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffCredential>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffCredential)e.Item).Staff = this);
                _staffCredentials = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffCredential, StaffCredential>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffCredential)e.Item).Staff = this;
                _staffCredentialsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffCredential> Entities.Common.EdFi.IStaff.StaffCredentials
        {
            get { return _staffCredentialsCovariant; }
            set { StaffCredentials = new List<StaffCredential>(value.Cast<StaffCredential>()); }
        }

        private ICollection<StaffElectronicMail> _staffElectronicMails;
        private ICollection<Entities.Common.EdFi.IStaffElectronicMail> _staffElectronicMailsCovariant;

        [DataMember(Name="electronicMails"), NoDuplicateMembers]
        public ICollection<StaffElectronicMail> StaffElectronicMails
        {
            get { return _staffElectronicMails; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffElectronicMail>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffElectronicMail)e.Item).Staff = this);
                _staffElectronicMails = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffElectronicMail, StaffElectronicMail>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffElectronicMail)e.Item).Staff = this;
                _staffElectronicMailsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffElectronicMail> Entities.Common.EdFi.IStaff.StaffElectronicMails
        {
            get { return _staffElectronicMailsCovariant; }
            set { StaffElectronicMails = new List<StaffElectronicMail>(value.Cast<StaffElectronicMail>()); }
        }

        private ICollection<StaffIdentificationCode> _staffIdentificationCodes;
        private ICollection<Entities.Common.EdFi.IStaffIdentificationCode> _staffIdentificationCodesCovariant;

        [DataMember(Name="identificationCodes"), NoDuplicateMembers]
        public ICollection<StaffIdentificationCode> StaffIdentificationCodes
        {
            get { return _staffIdentificationCodes; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffIdentificationCode>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffIdentificationCode)e.Item).Staff = this);
                _staffIdentificationCodes = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffIdentificationCode, StaffIdentificationCode>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffIdentificationCode)e.Item).Staff = this;
                _staffIdentificationCodesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffIdentificationCode> Entities.Common.EdFi.IStaff.StaffIdentificationCodes
        {
            get { return _staffIdentificationCodesCovariant; }
            set { StaffIdentificationCodes = new List<StaffIdentificationCode>(value.Cast<StaffIdentificationCode>()); }
        }

        private ICollection<StaffIdentificationDocument> _staffIdentificationDocuments;
        private ICollection<Entities.Common.EdFi.IStaffIdentificationDocument> _staffIdentificationDocumentsCovariant;

        [DataMember(Name="identificationDocuments"), NoDuplicateMembers]
        public ICollection<StaffIdentificationDocument> StaffIdentificationDocuments
        {
            get { return _staffIdentificationDocuments; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffIdentificationDocument>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffIdentificationDocument)e.Item).Staff = this);
                _staffIdentificationDocuments = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffIdentificationDocument, StaffIdentificationDocument>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffIdentificationDocument)e.Item).Staff = this;
                _staffIdentificationDocumentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffIdentificationDocument> Entities.Common.EdFi.IStaff.StaffIdentificationDocuments
        {
            get { return _staffIdentificationDocumentsCovariant; }
            set { StaffIdentificationDocuments = new List<StaffIdentificationDocument>(value.Cast<StaffIdentificationDocument>()); }
        }

        private ICollection<StaffInternationalAddress> _staffInternationalAddresses;
        private ICollection<Entities.Common.EdFi.IStaffInternationalAddress> _staffInternationalAddressesCovariant;

        [DataMember(Name="internationalAddresses"), NoDuplicateMembers]
        public ICollection<StaffInternationalAddress> StaffInternationalAddresses
        {
            get { return _staffInternationalAddresses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffInternationalAddress>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffInternationalAddress)e.Item).Staff = this);
                _staffInternationalAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffInternationalAddress, StaffInternationalAddress>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffInternationalAddress)e.Item).Staff = this;
                _staffInternationalAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffInternationalAddress> Entities.Common.EdFi.IStaff.StaffInternationalAddresses
        {
            get { return _staffInternationalAddressesCovariant; }
            set { StaffInternationalAddresses = new List<StaffInternationalAddress>(value.Cast<StaffInternationalAddress>()); }
        }

        private ICollection<StaffLanguage> _staffLanguages;
        private ICollection<Entities.Common.EdFi.IStaffLanguage> _staffLanguagesCovariant;

        [DataMember(Name="languages"), NoDuplicateMembers]
        public ICollection<StaffLanguage> StaffLanguages
        {
            get { return _staffLanguages; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffLanguage>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffLanguage)e.Item).Staff = this);
                _staffLanguages = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffLanguage, StaffLanguage>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffLanguage)e.Item).Staff = this;
                _staffLanguagesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffLanguage> Entities.Common.EdFi.IStaff.StaffLanguages
        {
            get { return _staffLanguagesCovariant; }
            set { StaffLanguages = new List<StaffLanguage>(value.Cast<StaffLanguage>()); }
        }

        private ICollection<StaffOtherName> _staffOtherNames;
        private ICollection<Entities.Common.EdFi.IStaffOtherName> _staffOtherNamesCovariant;

        [DataMember(Name="otherNames"), NoDuplicateMembers]
        public ICollection<StaffOtherName> StaffOtherNames
        {
            get { return _staffOtherNames; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffOtherName>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffOtherName)e.Item).Staff = this);
                _staffOtherNames = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffOtherName, StaffOtherName>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffOtherName)e.Item).Staff = this;
                _staffOtherNamesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffOtherName> Entities.Common.EdFi.IStaff.StaffOtherNames
        {
            get { return _staffOtherNamesCovariant; }
            set { StaffOtherNames = new List<StaffOtherName>(value.Cast<StaffOtherName>()); }
        }

        private ICollection<StaffPersonalIdentificationDocument> _staffPersonalIdentificationDocuments;
        private ICollection<Entities.Common.EdFi.IStaffPersonalIdentificationDocument> _staffPersonalIdentificationDocumentsCovariant;

        [DataMember(Name="personalIdentificationDocuments"), NoDuplicateMembers]
        public ICollection<StaffPersonalIdentificationDocument> StaffPersonalIdentificationDocuments
        {
            get { return _staffPersonalIdentificationDocuments; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffPersonalIdentificationDocument>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffPersonalIdentificationDocument)e.Item).Staff = this);
                _staffPersonalIdentificationDocuments = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffPersonalIdentificationDocument, StaffPersonalIdentificationDocument>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffPersonalIdentificationDocument)e.Item).Staff = this;
                _staffPersonalIdentificationDocumentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffPersonalIdentificationDocument> Entities.Common.EdFi.IStaff.StaffPersonalIdentificationDocuments
        {
            get { return _staffPersonalIdentificationDocumentsCovariant; }
            set { StaffPersonalIdentificationDocuments = new List<StaffPersonalIdentificationDocument>(value.Cast<StaffPersonalIdentificationDocument>()); }
        }

        private ICollection<StaffRace> _staffRaces;
        private ICollection<Entities.Common.EdFi.IStaffRace> _staffRacesCovariant;

        [DataMember(Name="races"), NoDuplicateMembers]
        public ICollection<StaffRace> StaffRaces
        {
            get { return _staffRaces; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffRace>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffRace)e.Item).Staff = this);
                _staffRaces = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffRace, StaffRace>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffRace)e.Item).Staff = this;
                _staffRacesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffRace> Entities.Common.EdFi.IStaff.StaffRaces
        {
            get { return _staffRacesCovariant; }
            set { StaffRaces = new List<StaffRace>(value.Cast<StaffRace>()); }
        }

        private ICollection<StaffRecognition> _staffRecognitions;
        private ICollection<Entities.Common.EdFi.IStaffRecognition> _staffRecognitionsCovariant;

        [DataMember(Name="recognitions"), NoDuplicateMembers]
        public ICollection<StaffRecognition> StaffRecognitions
        {
            get { return _staffRecognitions; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffRecognition>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffRecognition)e.Item).Staff = this);
                _staffRecognitions = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffRecognition, StaffRecognition>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffRecognition)e.Item).Staff = this;
                _staffRecognitionsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffRecognition> Entities.Common.EdFi.IStaff.StaffRecognitions
        {
            get { return _staffRecognitionsCovariant; }
            set { StaffRecognitions = new List<StaffRecognition>(value.Cast<StaffRecognition>()); }
        }

        private ICollection<StaffTelephone> _staffTelephones;
        private ICollection<Entities.Common.EdFi.IStaffTelephone> _staffTelephonesCovariant;

        [DataMember(Name="telephones"), NoDuplicateMembers]
        public ICollection<StaffTelephone> StaffTelephones
        {
            get { return _staffTelephones; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffTelephone>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffTelephone)e.Item).Staff = this);
                _staffTelephones = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffTelephone, StaffTelephone>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffTelephone)e.Item).Staff = this;
                _staffTelephonesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffTelephone> Entities.Common.EdFi.IStaff.StaffTelephones
        {
            get { return _staffTelephonesCovariant; }
            set { StaffTelephones = new List<StaffTelephone>(value.Cast<StaffTelephone>()); }
        }

        private ICollection<StaffTribalAffiliation> _staffTribalAffiliations;
        private ICollection<Entities.Common.EdFi.IStaffTribalAffiliation> _staffTribalAffiliationsCovariant;

        [DataMember(Name="tribalAffiliations"), NoDuplicateMembers]
        public ICollection<StaffTribalAffiliation> StaffTribalAffiliations
        {
            get { return _staffTribalAffiliations; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffTribalAffiliation>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffTribalAffiliation)e.Item).Staff = this);
                _staffTribalAffiliations = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffTribalAffiliation, StaffTribalAffiliation>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffTribalAffiliation)e.Item).Staff = this;
                _staffTribalAffiliationsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffTribalAffiliation> Entities.Common.EdFi.IStaff.StaffTribalAffiliations
        {
            get { return _staffTribalAffiliationsCovariant; }
            set { StaffTribalAffiliations = new List<StaffTribalAffiliation>(value.Cast<StaffTribalAffiliation>()); }
        }

        private ICollection<StaffVisa> _staffVisas;
        private ICollection<Entities.Common.EdFi.IStaffVisa> _staffVisasCovariant;

        [DataMember(Name="visas"), NoDuplicateMembers]
        public ICollection<StaffVisa> StaffVisas
        {
            get { return _staffVisas; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffVisa>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffVisa)e.Item).Staff = this);
                _staffVisas = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffVisa, StaffVisa>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffVisa)e.Item).Staff = this;
                _staffVisasCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffVisa> Entities.Common.EdFi.IStaff.StaffVisas
        {
            get { return _staffVisasCovariant; }
            set { StaffVisas = new List<StaffVisa>(value.Cast<StaffVisa>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffAddresses != null) foreach (var item in _staffAddresses)
            {
                item.Staff = this;
            }

            if (_staffCredentials != null) foreach (var item in _staffCredentials)
            {
                item.Staff = this;
            }

            if (_staffElectronicMails != null) foreach (var item in _staffElectronicMails)
            {
                item.Staff = this;
            }

            if (_staffIdentificationCodes != null) foreach (var item in _staffIdentificationCodes)
            {
                item.Staff = this;
            }

            if (_staffIdentificationDocuments != null) foreach (var item in _staffIdentificationDocuments)
            {
                item.Staff = this;
            }

            if (_staffInternationalAddresses != null) foreach (var item in _staffInternationalAddresses)
            {
                item.Staff = this;
            }

            if (_staffLanguages != null) foreach (var item in _staffLanguages)
            {
                item.Staff = this;
            }

            if (_staffOtherNames != null) foreach (var item in _staffOtherNames)
            {
                item.Staff = this;
            }

            if (_staffPersonalIdentificationDocuments != null) foreach (var item in _staffPersonalIdentificationDocuments)
            {
                item.Staff = this;
            }

            if (_staffRaces != null) foreach (var item in _staffRaces)
            {
                item.Staff = this;
            }

            if (_staffRecognitions != null) foreach (var item in _staffRecognitions)
            {
                item.Staff = this;
            }

            if (_staffTelephones != null) foreach (var item in _staffTelephones)
            {
                item.Staff = this;
            }

            if (_staffTribalAffiliations != null) foreach (var item in _staffTribalAffiliations)
            {
                item.Staff = this;
            }

            if (_staffVisas != null) foreach (var item in _staffVisas)
            {
                item.Staff = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaff)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffMapper.MapTo(this, (Entities.Common.EdFi.IStaff)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsBirthDateSupported                                   { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsCitizenshipStatusDescriptorSupported                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsFirstNameSupported                                   { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsGenerationCodeSuffixSupported                        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsHighestCompletedLevelOfEducationDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsHighlyQualifiedTeacherSupported                      { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsHispanicLatinoEthnicitySupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsLastSurnameSupported                                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsLoginIdSupported                                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsMaidenNameSupported                                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsMiddleNameSupported                                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsOldEthnicityDescriptorSupported                      { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsPersonalTitlePrefixSupported                         { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsSexDescriptorSupported                               { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffAddressesSupported                              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffCredentialsSupported                            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffElectronicMailsSupported                        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationCodesSupported                    { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationDocumentsSupported                { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffInternationalAddressesSupported                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffLanguagesSupported                              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffOtherNamesSupported                             { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffPersonalIdentificationDocumentsSupported        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRacesSupported                                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRecognitionsSupported                           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTelephonesSupported                             { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTribalAffiliationsSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffUniqueIdSupported                               { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffVisasSupported                                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsYearsOfPriorProfessionalExperienceSupported          { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsYearsOfPriorTeachingExperienceSupported              { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.EdFi.IStaffAddress, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffAddressIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffCredential, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffCredentialIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffElectronicMail, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffElectronicMailIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffIdentificationCode, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationCodeIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffIdentificationDocument, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationDocumentIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffInternationalAddress, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffInternationalAddressIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffLanguage, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffLanguageIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffOtherName, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffOtherNameIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffPersonalIdentificationDocument, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffPersonalIdentificationDocumentIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffRace, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRaceIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffRecognition, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRecognitionIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffTelephone, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTelephoneIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffTribalAffiliation, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTribalAffiliationIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffVisa, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffVisaIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPutPostRequestValidator : FluentValidation.AbstractValidator<Staff>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<Staff> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var staffAddressesValidator = new StaffAddressPutPostRequestValidator();

            foreach (var item in instance.StaffAddresses)
            {
                var validationResult = staffAddressesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffCredentialsValidator = new StaffCredentialPutPostRequestValidator();

            foreach (var item in instance.StaffCredentials)
            {
                var validationResult = staffCredentialsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffElectronicMailsValidator = new StaffElectronicMailPutPostRequestValidator();

            foreach (var item in instance.StaffElectronicMails)
            {
                var validationResult = staffElectronicMailsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffIdentificationCodesValidator = new StaffIdentificationCodePutPostRequestValidator();

            foreach (var item in instance.StaffIdentificationCodes)
            {
                var validationResult = staffIdentificationCodesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffIdentificationDocumentsValidator = new StaffIdentificationDocumentPutPostRequestValidator();

            foreach (var item in instance.StaffIdentificationDocuments)
            {
                var validationResult = staffIdentificationDocumentsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffInternationalAddressesValidator = new StaffInternationalAddressPutPostRequestValidator();

            foreach (var item in instance.StaffInternationalAddresses)
            {
                var validationResult = staffInternationalAddressesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffLanguagesValidator = new StaffLanguagePutPostRequestValidator();

            foreach (var item in instance.StaffLanguages)
            {
                var validationResult = staffLanguagesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffOtherNamesValidator = new StaffOtherNamePutPostRequestValidator();

            foreach (var item in instance.StaffOtherNames)
            {
                var validationResult = staffOtherNamesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffPersonalIdentificationDocumentsValidator = new StaffPersonalIdentificationDocumentPutPostRequestValidator();

            foreach (var item in instance.StaffPersonalIdentificationDocuments)
            {
                var validationResult = staffPersonalIdentificationDocumentsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffRacesValidator = new StaffRacePutPostRequestValidator();

            foreach (var item in instance.StaffRaces)
            {
                var validationResult = staffRacesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffRecognitionsValidator = new StaffRecognitionPutPostRequestValidator();

            foreach (var item in instance.StaffRecognitions)
            {
                var validationResult = staffRecognitionsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffTelephonesValidator = new StaffTelephonePutPostRequestValidator();

            foreach (var item in instance.StaffTelephones)
            {
                var validationResult = staffTelephonesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffTribalAffiliationsValidator = new StaffTribalAffiliationPutPostRequestValidator();

            foreach (var item in instance.StaffTribalAffiliations)
            {
                var validationResult = staffTribalAffiliationsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffVisasValidator = new StaffVisaPutPostRequestValidator();

            foreach (var item in instance.StaffVisas)
            {
                var validationResult = staffVisasValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffAddress table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffAddress : Entities.Common.EdFi.IStaffAddress, Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StaffAddress()
        {
            StaffAddressPeriods = new List<StaffAddressPeriod>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffAddress.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressTypeDescriptor"), NaturalKeyMember]
        public string AddressTypeDescriptor { get; set; }

        /// <summary>
        /// The name of the city in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="city"), NaturalKeyMember]
        public string City { get; set; }

        /// <summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="postalCode"), NaturalKeyMember]
        public string PostalCode { get; set; }

        /// <summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="stateAbbreviationDescriptor"), NaturalKeyMember]
        public string StateAbbreviationDescriptor { get; set; }

        /// <summary>
        /// The street number and street name or post office box number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="streetNumberName"), NaturalKeyMember]
        public string StreetNumberName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffAddress;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).AddressTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffAddress).AddressTypeDescriptor.Equals(compareTo.AddressTypeDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).City == null
                || !(this as Entities.Common.EdFi.IStaffAddress).City.Equals(compareTo.City)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).PostalCode == null
                || !(this as Entities.Common.EdFi.IStaffAddress).PostalCode.Equals(compareTo.PostalCode)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).StateAbbreviationDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffAddress).StateAbbreviationDescriptor.Equals(compareTo.StateAbbreviationDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).StreetNumberName == null
                || !(this as Entities.Common.EdFi.IStaffAddress).StreetNumberName.Equals(compareTo.StreetNumberName)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).AddressTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).AddressTypeDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).City != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).City.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).PostalCode != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).PostalCode.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).StateAbbreviationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).StateAbbreviationDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).StreetNumberName != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).StreetNumberName.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The apartment, room, or suite number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="apartmentRoomSuiteNumber")]
        public string ApartmentRoomSuiteNumber { get; set; }

        /// <summary>
        /// The number of the building on the site, if more than one building shares the same address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="buildingSiteNumber")]
        public string BuildingSiteNumber { get; set; }

        /// <summary>
        /// The congressional district in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="congressionalDistrict")]
        public string CongressionalDistrict { get; set; }

        /// <summary>
        /// The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \"first-order subdivisions\" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="countyFIPSCode")]
        public string CountyFIPSCode { get; set; }

        /// <summary>
        /// An indication that the address should not be published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// A general geographic indicator that categorizes U.S. territory (e.g., City, Suburban).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="localeDescriptor")]
        public string LocaleDescriptor { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }

        /// <summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in                        'which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nameOfCounty")]
        public string NameOfCounty { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffAddress")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffAddressPeriod> _staffAddressPeriods;
        private ICollection<Entities.Common.EdFi.IStaffAddressPeriod> _staffAddressPeriodsCovariant;

        [DataMember(Name="periods"), NoDuplicateMembers]
        public ICollection<StaffAddressPeriod> StaffAddressPeriods
        {
            get { return _staffAddressPeriods; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffAddressPeriod>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffAddressPeriod)e.Item).StaffAddress = this);
                _staffAddressPeriods = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffAddressPeriod, StaffAddressPeriod>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffAddressPeriod)e.Item).StaffAddress = this;
                _staffAddressPeriodsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffAddressPeriod> Entities.Common.EdFi.IStaffAddress.StaffAddressPeriods
        {
            get { return _staffAddressPeriodsCovariant; }
            set { StaffAddressPeriods = new List<StaffAddressPeriod>(value.Cast<StaffAddressPeriod>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffAddressPeriods != null) foreach (var item in _staffAddressPeriods)
            {
                item.StaffAddress = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffAddressMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffAddress)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffAddressMapper.MapTo(this, (Entities.Common.EdFi.IStaffAddress)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsApartmentRoomSuiteNumberSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsBuildingSiteNumberSupported        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsCongressionalDistrictSupported     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsCountyFIPSCodeSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsLatitudeSupported                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsLocaleDescriptorSupported          { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsLongitudeSupported                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsNameOfCountySupported              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsStaffAddressPeriodsSupported       { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.EdFi.IStaffAddressPeriod, bool> Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsStaffAddressPeriodIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffAddressPutPostRequestValidator : FluentValidation.AbstractValidator<StaffAddress>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffAddress> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var staffAddressPeriodsValidator = new StaffAddressPeriodPutPostRequestValidator();

            foreach (var item in instance.StaffAddressPeriods)
            {
                var validationResult = staffAddressPeriodsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffAddressPeriod table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffAddressPeriod : Entities.Common.EdFi.IStaffAddressPeriod, Entities.Common.EdFi.IStaffAddressPeriodSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaffAddress _staffAddress;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaffAddress Entities.Common.EdFi.IStaffAddressPeriod.StaffAddress
        {
            get { return _staffAddress; }
            set { SetStaffAddress(value); }
        }

        internal Entities.Common.EdFi.IStaffAddress StaffAddress
        {
            set { SetStaffAddress(value); }
        }

        private void SetStaffAddress(Entities.Common.EdFi.IStaffAddress value)
        {
            _staffAddress = value;
        }

        /// <summary>
        /// The month, day, and year for the start of the period.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate"), NaturalKeyMember][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime BeginDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffAddressPeriod;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staffAddress == null || !_staffAddress.Equals(compareTo.StaffAddress))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddressPeriod).BeginDate == null
                || !(this as Entities.Common.EdFi.IStaffAddressPeriod).BeginDate.Equals(compareTo.BeginDate)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffAddress != null)
                    hash = hash * 23 + _staffAddress.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddressPeriod).BeginDate != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddressPeriod).BeginDate.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year for the end of the period.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffAddressPeriod")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffAddressPeriodMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffAddressPeriod)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffAddressPeriodMapper.MapTo(this, (Entities.Common.EdFi.IStaffAddressPeriod)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffAddressPeriodSynchronizationSourceSupport.IsEndDateSupported  { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffAddressPeriodPutPostRequestValidator : FluentValidation.AbstractValidator<StaffAddressPeriod>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffAddressPeriod> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffCredential table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffCredential : Entities.Common.EdFi.IStaffCredential, Entities.Common.EdFi.IStaffCredentialSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _credentialReferenceExplicitlyAssigned;
        private Credential.EdFi.CredentialReference _credentialReference;
        private Credential.EdFi.CredentialReference ImplicitCredentialReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_credentialReference == null && !_credentialReferenceExplicitlyAssigned)
                    _credentialReference = new Credential.EdFi.CredentialReference();

                return _credentialReference;
            }
        }

        [DataMember(Name="credentialReference")][NaturalKeyMember]
        public Credential.EdFi.CredentialReference CredentialReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitCredentialReference != null
                    && (_credentialReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitCredentialReference.IsReferenceFullyDefined()))
                    return ImplicitCredentialReference;

                return null;
            }
            set
            {
                _credentialReferenceExplicitlyAssigned = true;
                _credentialReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffCredential.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// Identifier or serial number assigned to the credential.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.EdFi.IStaffCredential.CredentialIdentifier
        {
            get
            {
                if (ImplicitCredentialReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCredentialReference.IsReferenceFullyDefined()))
                    return ImplicitCredentialReference.CredentialIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Credential
                _credentialReferenceExplicitlyAssigned = false;
                ImplicitCredentialReference.CredentialIdentifier = value;
            }
        }

        /// <summary>
        /// The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued.
        /// </summary>

        // IS in a reference (StaffCredential.StateOfIssueStateAbbreviationDescriptorId), IS a lookup column 
        string Entities.Common.EdFi.IStaffCredential.StateOfIssueStateAbbreviationDescriptor
        {
            get
            {
                if (ImplicitCredentialReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCredentialReference.IsReferenceFullyDefined()))
                    return ImplicitCredentialReference.StateOfIssueStateAbbreviationDescriptor;

                return null;
            }
            set
            {
                ImplicitCredentialReference.StateOfIssueStateAbbreviationDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffCredential;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Referenced Property
            if ((this as Entities.Common.EdFi.IStaffCredential).CredentialIdentifier == null
                || !(this as Entities.Common.EdFi.IStaffCredential).CredentialIdentifier.Equals(compareTo.CredentialIdentifier)) 
                return false;
 
            // Unified Type Property
            if ((this as Entities.Common.EdFi.IStaffCredential).StateOfIssueStateAbbreviationDescriptor == null
                ||!(this as Entities.Common.EdFi.IStaffCredential).StateOfIssueStateAbbreviationDescriptor.Equals(compareTo.StateOfIssueStateAbbreviationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                //Referenced Property
                if ((this as Entities.Common.EdFi.IStaffCredential).CredentialIdentifier != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffCredential).CredentialIdentifier.GetHashCode();
 
                //Unified Type Property
                if ((this as Entities.Common.EdFi.IStaffCredential).StateOfIssueStateAbbreviationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffCredential).StateOfIssueStateAbbreviationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffCredential")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffCredentialMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffCredential)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffCredentialMapper.MapTo(this, (Entities.Common.EdFi.IStaffCredential)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.EdFi.IStaffCredential.CredentialResourceId 
        { 
            get { return null; }
            set { ImplicitCredentialReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.EdFi.IStaffCredential.CredentialDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitCredentialReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffCredentialPutPostRequestValidator : FluentValidation.AbstractValidator<StaffCredential>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffCredential> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffElectronicMail table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffElectronicMail : Entities.Common.EdFi.IStaffElectronicMail, Entities.Common.EdFi.IStaffElectronicMailSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffElectronicMail.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The electronic mail (e-mail) address listed for an individual or organization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="electronicMailAddress"), NaturalKeyMember]
        public string ElectronicMailAddress { get; set; }

        /// <summary>
        /// The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="electronicMailTypeDescriptor"), NaturalKeyMember]
        public string ElectronicMailTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffElectronicMail;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailAddress == null
                || !(this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailAddress.Equals(compareTo.ElectronicMailAddress)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailTypeDescriptor.Equals(compareTo.ElectronicMailTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailAddress != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailAddress.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication that the electronic email address should not be published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="primaryEmailAddressIndicator")]
        public bool? PrimaryEmailAddressIndicator { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffElectronicMail")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffElectronicMailMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffElectronicMail)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffElectronicMailMapper.MapTo(this, (Entities.Common.EdFi.IStaffElectronicMail)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffElectronicMailSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported         { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffElectronicMailSynchronizationSourceSupport.IsPrimaryEmailAddressIndicatorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffElectronicMailPutPostRequestValidator : FluentValidation.AbstractValidator<StaffElectronicMail>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffElectronicMail> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffIdentificationCode table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffIdentificationCode : Entities.Common.EdFi.IStaffIdentificationCode, Entities.Common.EdFi.IStaffIdentificationCodeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffIdentificationCode.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a staff member.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="staffIdentificationSystemDescriptor"), NaturalKeyMember]
        public string StaffIdentificationSystemDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffIdentificationCode;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffIdentificationCode).StaffIdentificationSystemDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffIdentificationCode).StaffIdentificationSystemDescriptor.Equals(compareTo.StaffIdentificationSystemDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffIdentificationCode).StaffIdentificationSystemDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffIdentificationCode).StaffIdentificationSystemDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The organization code or name assigning the staff Identification Code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="assigningOrganizationIdentificationCode")]
        public string AssigningOrganizationIdentificationCode { get; set; }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="identificationCode")]
        public string IdentificationCode { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffIdentificationCode")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffIdentificationCodeMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffIdentificationCode)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffIdentificationCodeMapper.MapTo(this, (Entities.Common.EdFi.IStaffIdentificationCode)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffIdentificationCodeSynchronizationSourceSupport.IsAssigningOrganizationIdentificationCodeSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationCodeSynchronizationSourceSupport.IsIdentificationCodeSupported                       { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffIdentificationCodePutPostRequestValidator : FluentValidation.AbstractValidator<StaffIdentificationCode>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffIdentificationCode> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffIdentificationDocument table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffIdentificationDocument : Entities.Common.EdFi.IStaffIdentificationDocument, Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffIdentificationDocument.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The primary function of the document used for establishing identity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="identificationDocumentUseDescriptor"), NaturalKeyMember]
        public string IdentificationDocumentUseDescriptor { get; set; }

        /// <summary>
        /// The category of the document relative to its purpose.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="personalInformationVerificationDescriptor"), NaturalKeyMember]
        public string PersonalInformationVerificationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffIdentificationDocument;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffIdentificationDocument).IdentificationDocumentUseDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffIdentificationDocument).IdentificationDocumentUseDescriptor.Equals(compareTo.IdentificationDocumentUseDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffIdentificationDocument).PersonalInformationVerificationDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffIdentificationDocument).PersonalInformationVerificationDescriptor.Equals(compareTo.PersonalInformationVerificationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffIdentificationDocument).IdentificationDocumentUseDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffIdentificationDocument).IdentificationDocumentUseDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffIdentificationDocument).PersonalInformationVerificationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffIdentificationDocument).PersonalInformationVerificationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The day when the document  expires, if null then never expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentExpirationDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? DocumentExpirationDate { get; set; }

        /// <summary>
        /// The title of the document given by the issuer.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentTitle")]
        public string DocumentTitle { get; set; }

        /// <summary>
        /// Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="issuerCountryDescriptor")]
        public string IssuerCountryDescriptor { get; set; }

        /// <summary>
        /// The unique identifier on the issuer's identification system.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerDocumentIdentificationCode")]
        public string IssuerDocumentIdentificationCode { get; set; }

        /// <summary>
        /// Name of the entity or institution that issued the document.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffIdentificationDocument")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffIdentificationDocumentMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffIdentificationDocumentMapper.MapTo(this, (Entities.Common.EdFi.IStaffIdentificationDocument)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported                        { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffIdentificationDocumentPutPostRequestValidator : FluentValidation.AbstractValidator<StaffIdentificationDocument>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffIdentificationDocument> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffInternationalAddress table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffInternationalAddress : Entities.Common.EdFi.IStaffInternationalAddress, Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffInternationalAddress.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The type of address listed for an individual or organization. For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressTypeDescriptor"), NaturalKeyMember]
        public string AddressTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffInternationalAddress;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffInternationalAddress).AddressTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffInternationalAddress).AddressTypeDescriptor.Equals(compareTo.AddressTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffInternationalAddress).AddressTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffInternationalAddress).AddressTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The first line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine1")]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// The second line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine2")]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// The third line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine3")]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// The fourth line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine4")]
        public string AddressLine4 { get; set; }

        /// <summary>
        /// The first date the address is valid. For physical addresses, the date the person moved to that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The name of the country. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="countryDescriptor")]
        public string CountryDescriptor { get; set; }

        /// <summary>
        /// The last date the address is valid. For physical addresses, this would be the date the person moved from that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffInternationalAddress")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffInternationalAddressMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffInternationalAddress)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffInternationalAddressMapper.MapTo(this, (Entities.Common.EdFi.IStaffInternationalAddress)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine1Supported       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine2Supported       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine3Supported       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine4Supported       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsBeginDateSupported          { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsCountryDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsEndDateSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsLatitudeSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsLongitudeSupported          { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffInternationalAddressPutPostRequestValidator : FluentValidation.AbstractValidator<StaffInternationalAddress>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffInternationalAddress> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffLanguage table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffLanguage : Entities.Common.EdFi.IStaffLanguage, Entities.Common.EdFi.IStaffLanguageSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StaffLanguage()
        {
            StaffLanguageUses = new List<StaffLanguageUse>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffLanguage.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// A specification of which written or spoken communication is being used.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="languageDescriptor"), NaturalKeyMember]
        public string LanguageDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffLanguage;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffLanguage).LanguageDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffLanguage).LanguageDescriptor.Equals(compareTo.LanguageDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffLanguage).LanguageDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffLanguage).LanguageDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffLanguage")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffLanguageUse> _staffLanguageUses;
        private ICollection<Entities.Common.EdFi.IStaffLanguageUse> _staffLanguageUsesCovariant;

        [DataMember(Name="uses"), NoDuplicateMembers]
        public ICollection<StaffLanguageUse> StaffLanguageUses
        {
            get { return _staffLanguageUses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffLanguageUse>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffLanguageUse)e.Item).StaffLanguage = this);
                _staffLanguageUses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffLanguageUse, StaffLanguageUse>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffLanguageUse)e.Item).StaffLanguage = this;
                _staffLanguageUsesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffLanguageUse> Entities.Common.EdFi.IStaffLanguage.StaffLanguageUses
        {
            get { return _staffLanguageUsesCovariant; }
            set { StaffLanguageUses = new List<StaffLanguageUse>(value.Cast<StaffLanguageUse>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffLanguageUses != null) foreach (var item in _staffLanguageUses)
            {
                item.StaffLanguage = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffLanguageMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffLanguage)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffLanguageMapper.MapTo(this, (Entities.Common.EdFi.IStaffLanguage)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffLanguageSynchronizationSourceSupport.IsStaffLanguageUsesSupported  { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.EdFi.IStaffLanguageUse, bool> Entities.Common.EdFi.IStaffLanguageSynchronizationSourceSupport.IsStaffLanguageUseIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffLanguagePutPostRequestValidator : FluentValidation.AbstractValidator<StaffLanguage>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffLanguage> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var staffLanguageUsesValidator = new StaffLanguageUsePutPostRequestValidator();

            foreach (var item in instance.StaffLanguageUses)
            {
                var validationResult = staffLanguageUsesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffLanguageUse table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffLanguageUse : Entities.Common.EdFi.IStaffLanguageUse, Entities.Common.EdFi.IStaffLanguageUseSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaffLanguage _staffLanguage;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaffLanguage Entities.Common.EdFi.IStaffLanguageUse.StaffLanguage
        {
            get { return _staffLanguage; }
            set { SetStaffLanguage(value); }
        }

        internal Entities.Common.EdFi.IStaffLanguage StaffLanguage
        {
            set { SetStaffLanguage(value); }
        }

        private void SetStaffLanguage(Entities.Common.EdFi.IStaffLanguage value)
        {
            _staffLanguage = value;
        }

        /// <summary>
        /// A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="languageUseDescriptor"), NaturalKeyMember]
        public string LanguageUseDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffLanguageUse;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staffLanguage == null || !_staffLanguage.Equals(compareTo.StaffLanguage))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffLanguageUse).LanguageUseDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffLanguageUse).LanguageUseDescriptor.Equals(compareTo.LanguageUseDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffLanguage != null)
                    hash = hash * 23 + _staffLanguage.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffLanguageUse).LanguageUseDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffLanguageUse).LanguageUseDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffLanguageUse")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffLanguageUseMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffLanguageUse)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffLanguageUseMapper.MapTo(this, (Entities.Common.EdFi.IStaffLanguageUse)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffLanguageUsePutPostRequestValidator : FluentValidation.AbstractValidator<StaffLanguageUse>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffLanguageUse> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffOtherName table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffOtherName : Entities.Common.EdFi.IStaffOtherName, Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffOtherName.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The types of alternate names for a person.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="otherNameTypeDescriptor"), NaturalKeyMember]
        public string OtherNameTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffOtherName;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffOtherName).OtherNameTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffOtherName).OtherNameTypeDescriptor.Equals(compareTo.OtherNameTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffOtherName).OtherNameTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffOtherName).OtherNameTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffOtherName")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffOtherNameMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffOtherName)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffOtherNameMapper.MapTo(this, (Entities.Common.EdFi.IStaffOtherName)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsFirstNameSupported             { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsGenerationCodeSuffixSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsLastSurnameSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsMiddleNameSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsPersonalTitlePrefixSupported   { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffOtherNamePutPostRequestValidator : FluentValidation.AbstractValidator<StaffOtherName>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffOtherName> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffPersonalIdentificationDocument table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffPersonalIdentificationDocument : Entities.Common.EdFi.IStaffPersonalIdentificationDocument, Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffPersonalIdentificationDocument.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The primary function of the document used for establishing identity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="identificationDocumentUseDescriptor"), NaturalKeyMember]
        public string IdentificationDocumentUseDescriptor { get; set; }

        /// <summary>
        /// The category of the document relative to its purpose.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="personalInformationVerificationDescriptor"), NaturalKeyMember]
        public string PersonalInformationVerificationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffPersonalIdentificationDocument;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).IdentificationDocumentUseDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).IdentificationDocumentUseDescriptor.Equals(compareTo.IdentificationDocumentUseDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).PersonalInformationVerificationDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).PersonalInformationVerificationDescriptor.Equals(compareTo.PersonalInformationVerificationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).IdentificationDocumentUseDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).IdentificationDocumentUseDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).PersonalInformationVerificationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).PersonalInformationVerificationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The day when the document  expires, if null then never expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentExpirationDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? DocumentExpirationDate { get; set; }

        /// <summary>
        /// The title of the document given by the issuer.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentTitle")]
        public string DocumentTitle { get; set; }

        /// <summary>
        /// Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="issuerCountryDescriptor")]
        public string IssuerCountryDescriptor { get; set; }

        /// <summary>
        /// The unique identifier on the issuer's identification system.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerDocumentIdentificationCode")]
        public string IssuerDocumentIdentificationCode { get; set; }

        /// <summary>
        /// Name of the entity or institution that issued the document.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffPersonalIdentificationDocument")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffPersonalIdentificationDocumentMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffPersonalIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffPersonalIdentificationDocumentMapper.MapTo(this, (Entities.Common.EdFi.IStaffPersonalIdentificationDocument)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported                        { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPersonalIdentificationDocumentPutPostRequestValidator : FluentValidation.AbstractValidator<StaffPersonalIdentificationDocument>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffPersonalIdentificationDocument> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffRace table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffRace : Entities.Common.EdFi.IStaffRace, Entities.Common.EdFi.IStaffRaceSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffRace.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The general racial category which most clearly reflects the individual's recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="raceDescriptor"), NaturalKeyMember]
        public string RaceDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffRace;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffRace).RaceDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffRace).RaceDescriptor.Equals(compareTo.RaceDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffRace).RaceDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffRace).RaceDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffRace")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffRaceMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffRace)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffRaceMapper.MapTo(this, (Entities.Common.EdFi.IStaffRace)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffRacePutPostRequestValidator : FluentValidation.AbstractValidator<StaffRace>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffRace> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffRecognition table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffRecognition : Entities.Common.EdFi.IStaffRecognition, Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffRecognition.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The nature of recognition given to the learner for accomplishments in a co-curricular, or extra-curricular activity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="recognitionTypeDescriptor"), NaturalKeyMember]
        public string RecognitionTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffRecognition;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffRecognition).RecognitionTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffRecognition).RecognitionTypeDescriptor.Equals(compareTo.RecognitionTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffRecognition).RecognitionTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffRecognition).RecognitionTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The category of achievement attributed to the learner.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="achievementCategoryDescriptor")]
        public string AchievementCategoryDescriptor { get; set; }

        /// <summary>
        /// The system that defines the categories by which an achievement is attributed to the learner.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="achievementCategorySystem")]
        public string AchievementCategorySystem { get; set; }

        /// <summary>
        /// The title assigned to the achievement.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="achievementTitle")]
        public string AchievementTitle { get; set; }

        /// <summary>
        /// The criteria for competency-based completion of the achievement/award.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="criteria")]
        public string Criteria { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="criteriaURL")]
        public string CriteriaURL { get; set; }

        /// <summary>
        /// A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="evidenceStatement")]
        public string EvidenceStatement { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="imageURL")]
        public string ImageURL { get; set; }

        /// <summary>
        /// The name of the agent, entity, or institution issuing the element.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) from which the award was issued.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerOriginURL")]
        public string IssuerOriginURL { get; set; }

        /// <summary>
        /// The date the recognition was awarded or earned.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="recognitionAwardDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? RecognitionAwardDate { get; set; }

        /// <summary>
        /// Date on which the award expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="recognitionAwardExpiresDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? RecognitionAwardExpiresDate { get; set; }

        /// <summary>
        /// A description of the type of academic distinctions earned by or awarded to the individual.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="recognitionDescription")]
        public string RecognitionDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffRecognition")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffRecognitionMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffRecognition)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffRecognitionMapper.MapTo(this, (Entities.Common.EdFi.IStaffRecognition)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsAchievementCategoryDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsAchievementCategorySystemSupported      { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsAchievementTitleSupported               { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsCriteriaSupported                       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsCriteriaURLSupported                    { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsEvidenceStatementSupported              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsImageURLSupported                       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsIssuerNameSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsIssuerOriginURLSupported                { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsRecognitionAwardDateSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsRecognitionAwardExpiresDateSupported    { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsRecognitionDescriptionSupported         { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffRecognitionPutPostRequestValidator : FluentValidation.AbstractValidator<StaffRecognition>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffRecognition> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffTelephone table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffTelephone : Entities.Common.EdFi.IStaffTelephone, Entities.Common.EdFi.IStaffTelephoneSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffTelephone.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The telephone number including the area code, and extension, if applicable.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="telephoneNumber"), NaturalKeyMember]
        public string TelephoneNumber { get; set; }

        /// <summary>
        /// The type of communication number listed for an individual or organization.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="telephoneNumberTypeDescriptor"), NaturalKeyMember]
        public string TelephoneNumberTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffTelephone;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumber == null
                || !(this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumber.Equals(compareTo.TelephoneNumber)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumberTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumberTypeDescriptor.Equals(compareTo.TelephoneNumberTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumber != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumber.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumberTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumberTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication that the telephone number should not be published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="orderOfPriority")]
        public int? OrderOfPriority { get; set; }

        /// <summary>
        /// An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="textMessageCapabilityIndicator")]
        public bool? TextMessageCapabilityIndicator { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffTelephone")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffTelephoneMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffTelephone)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffTelephoneMapper.MapTo(this, (Entities.Common.EdFi.IStaffTelephone)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffTelephoneSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffTelephoneSynchronizationSourceSupport.IsOrderOfPrioritySupported                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffTelephoneSynchronizationSourceSupport.IsTextMessageCapabilityIndicatorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffTelephonePutPostRequestValidator : FluentValidation.AbstractValidator<StaffTelephone>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffTelephone> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffTribalAffiliation table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffTribalAffiliation : Entities.Common.EdFi.IStaffTribalAffiliation, Entities.Common.EdFi.IStaffTribalAffiliationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffTribalAffiliation.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// An American Indian tribe with which the staff member is affiliated.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="tribalAffiliationDescriptor"), NaturalKeyMember]
        public string TribalAffiliationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffTribalAffiliation;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffTribalAffiliation).TribalAffiliationDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffTribalAffiliation).TribalAffiliationDescriptor.Equals(compareTo.TribalAffiliationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffTribalAffiliation).TribalAffiliationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffTribalAffiliation).TribalAffiliationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffTribalAffiliation")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffTribalAffiliationMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffTribalAffiliation)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffTribalAffiliationMapper.MapTo(this, (Entities.Common.EdFi.IStaffTribalAffiliation)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffTribalAffiliationPutPostRequestValidator : FluentValidation.AbstractValidator<StaffTribalAffiliation>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffTribalAffiliation> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffVisa table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffVisa : Entities.Common.EdFi.IStaffVisa, Entities.Common.EdFi.IStaffVisaSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffVisa.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// An indicator of a non-US citizen's Visa type.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="visaDescriptor"), NaturalKeyMember]
        public string VisaDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffVisa;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffVisa).VisaDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffVisa).VisaDescriptor.Equals(compareTo.VisaDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffVisa).VisaDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffVisa).VisaDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffVisa")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffVisaMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffVisa)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffVisaMapper.MapTo(this, (Entities.Common.EdFi.IStaffVisa)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffVisaPutPostRequestValidator : FluentValidation.AbstractValidator<StaffVisa>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffVisa> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Staff

namespace EdFi.Ods.Api.Models.Resources.Staff.EdFi.Staff_and_Prospect_MixedExclude2_Readable.Extensions.GrandBend
{
    /// <summary>
    /// A class which represents the grandbend.StaffExtension table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffExtension : Entities.Common.GrandBend.IStaffExtension, Entities.Common.GrandBend.IStaffExtensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.GrandBend.IStaffExtension.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.GrandBend.IStaffExtension;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The date that the staff member's new hire probationary period was completed.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="probationCompleteDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? ProbationCompleteDate { get; set; }

        /// <summary>
        /// An indication as to whether the staff member is tenured.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="tenured")]
        public bool? Tenured { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.GrandBend.StaffExtensionMapper.SynchronizeTo(this, (Entities.Common.GrandBend.IStaffExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.GrandBend.StaffExtensionMapper.MapTo(this, (Entities.Common.GrandBend.IStaffExtension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.GrandBend.IStaffExtensionSynchronizationSourceSupport.IsProbationCompleteDateSupported  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IStaffExtensionSynchronizationSourceSupport.IsTenuredSupported                { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<StaffExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Staff

namespace EdFi.Ods.Api.Models.Resources.Staff.EdFi.Staff_and_Prospect_MixedExclude2_Readable.Extensions.Sample
{
    /// <summary>
    /// A class which represents the sample.StaffExtension table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffExtension : Entities.Common.Sample.IStaffExtension, Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StaffExtension()
        {
            StaffPets = new List<StaffPet>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.Sample.IStaffExtension.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStaffExtension;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The date the staff member adopted the first household pet.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstPetOwnedDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? FirstPetOwnedDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        /// <summary>
        /// petPreference
        /// </summary>
        [DataMember(Name = "petPreference")]
        public StaffPetPreference StaffPetPreference { get; set; }

        Entities.Common.Sample.IStaffPetPreference Entities.Common.Sample.IStaffExtension.StaffPetPreference
        {
            get { return StaffPetPreference; }
            set { StaffPetPreference = (StaffPetPreference) value; }
        }

        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffPet> _staffPets;
        private ICollection<Entities.Common.Sample.IStaffPet> _staffPetsCovariant;

        [DataMember(Name="pets"), NoDuplicateMembers]
        public ICollection<StaffPet> StaffPets
        {
            get { return _staffPets; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffPet>(value,
                    (s, e) => ((Entities.Common.Sample.IStaffPet)e.Item).StaffExtension = this);
                _staffPets = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.Sample.IStaffPet, StaffPet>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.Sample.IStaffPet)e.Item).StaffExtension = this;
                _staffPetsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.Sample.IStaffPet> Entities.Common.Sample.IStaffExtension.StaffPets
        {
            get { return _staffPetsCovariant; }
            set { StaffPets = new List<StaffPet>(value.Cast<StaffPet>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffPets != null) foreach (var item in _staffPets)
            {
                item.StaffExtension = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StaffExtensionMapper.SynchronizeTo(this, (Entities.Common.Sample.IStaffExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StaffExtensionMapper.MapTo(this, (Entities.Common.Sample.IStaffExtension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport.IsFirstPetOwnedDateSupported   { get { return true; } set { } }
        bool Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport.IsStaffPetPreferenceSupported  { get { return true; } set { } }
        bool Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport.IsStaffPetsSupported           { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.Sample.IStaffPet, bool> Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport.IsStaffPetIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<StaffExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var staffPetsValidator = new StaffPetPutPostRequestValidator();

            foreach (var item in instance.StaffPets)
            {
                var validationResult = staffPetsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the sample.StaffPet table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffPet : Entities.Common.Sample.IStaffPet, Entities.Common.Sample.IStaffPetSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.Sample.IStaffExtension _staffExtension;

        [IgnoreDataMember]
        Entities.Common.Sample.IStaffExtension Entities.Common.Sample.IStaffPet.StaffExtension
        {
            get { return _staffExtension; }
            set { SetStaffExtension(value); }
        }

        internal Entities.Common.Sample.IStaffExtension StaffExtension
        {
            set { SetStaffExtension(value); }
        }

        private void SetStaffExtension(Entities.Common.Sample.IStaffExtension value)
        {
            _staffExtension = value;
        }

        /// <summary>
        /// The pet's name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="petName"), NaturalKeyMember]
        public string PetName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStaffPet;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staffExtension == null || !_staffExtension.Equals(compareTo.StaffExtension))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.Sample.IStaffPet).PetName == null
                || !(this as Entities.Common.Sample.IStaffPet).PetName.Equals(compareTo.PetName)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffExtension != null)
                    hash = hash * 23 + _staffExtension.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.Sample.IStaffPet).PetName != null) 
                    hash = hash * 23 + (this as Entities.Common.Sample.IStaffPet).PetName.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication as to whether the pet has been spayed/neutered.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="isFixed")]
        public bool? IsFixed { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StaffPetMapper.SynchronizeTo(this, (Entities.Common.Sample.IStaffPet)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StaffPetMapper.MapTo(this, (Entities.Common.Sample.IStaffPet)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStaffPetSynchronizationSourceSupport.IsIsFixedSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPetPutPostRequestValidator : FluentValidation.AbstractValidator<StaffPet>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffPet> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the sample.StaffPetPreference table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffPetPreference : Entities.Common.Sample.IStaffPetPreference, Entities.Common.Sample.IStaffPetPreferenceSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.Sample.IStaffExtension _staffExtension;

        [IgnoreDataMember]
        Entities.Common.Sample.IStaffExtension Entities.Common.Sample.IStaffPetPreference.StaffExtension
        {
            get { return _staffExtension; }
            set { SetStaffExtension(value); }
        }

        internal Entities.Common.Sample.IStaffExtension StaffExtension
        {
            set { SetStaffExtension(value); }
        }

        private void SetStaffExtension(Entities.Common.Sample.IStaffExtension value)
        {
            _staffExtension = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStaffPetPreference;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staffExtension == null || !_staffExtension.Equals(compareTo.StaffExtension))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffExtension != null)
                    hash = hash * 23 + _staffExtension.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The preferred maximum weight of a household pet.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maximumWeight")]
        public int MaximumWeight { get; set; }

        /// <summary>
        /// The preferred minimum weight of a household pet.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="minimumWeight")]
        public int MinimumWeight { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StaffPetPreferenceMapper.SynchronizeTo(this, (Entities.Common.Sample.IStaffPetPreference)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StaffPetPreferenceMapper.MapTo(this, (Entities.Common.Sample.IStaffPetPreference)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStaffPetPreferenceSynchronizationSourceSupport.IsMaximumWeightSupported  { get { return true; } set { } }
        bool Entities.Common.Sample.IStaffPetPreferenceSynchronizationSourceSupport.IsMinimumWeightSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPetPreferencePutPostRequestValidator : FluentValidation.AbstractValidator<StaffPetPreference>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffPetPreference> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Applicant

namespace EdFi.Ods.Api.Models.Resources.Applicant.GrandBend.Staff_and_Prospect_MixedExclude2_Writable
{
    /// <summary>
    /// Represents a reference to the Applicant resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantReference
    {
        [DataMember(Name="applicantIdentifier"), NaturalKeyMember]
        public string ApplicantIdentifier { get; set; }

        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return ApplicantIdentifier != default(string) && EducationOrganizationId != default(int);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "Applicant",
                Href = $"/grand-bend/applicants/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new Common.Models.Domain.FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the grandbend.Applicant table of the Applicant aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class Applicant : Entities.Common.GrandBend.IApplicant, IHasETag, Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Applicant()
        {
            ApplicantAddresses = new List<ApplicantAddress>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Applicant resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EdFi.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EdFi.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EdFi.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EdFi.EducationOrganizationReference EducationOrganizationReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set
            {
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to an applicant.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="applicantIdentifier"), NaturalKeyMember]
        public string ApplicantIdentifier { get; set; }

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int Entities.Common.GrandBend.IApplicant.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.GrandBend.IApplicant;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
 
            // Standard Property
            if ((this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier == null
                || !(this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier.Equals(compareTo.ApplicantIdentifier)) 
                return false;
 
            // Referenced Property
            if ((this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId == null
                || !(this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId.Equals(compareTo.EducationOrganizationId)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier != null) 
                    hash = hash * 23 + (this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier.GetHashCode();
 
                //Referenced Property
                if ((this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="birthDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BirthDate { get; set; }

        // IS a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.CitizenshipStatusDescriptor
        {
            get { return null; }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.FirstName
        {
            get { return default(string); }
            set { }
        }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="highestCompletedLevelOfEducationDescriptor")]
        public string HighestCompletedLevelOfEducationDescriptor { get; set; }

        /// <summary>
        /// An applicant subject in which a teacher applicant is classified as highly qualified.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="highlyQualifiedAcademicSubjectDescriptor")]
        public string HighlyQualifiedAcademicSubjectDescriptor { get; set; }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        bool? Entities.Common.GrandBend.IApplicant.HighlyQualifiedTeacher
        {
            get { return default(bool?); }
            set { }
        }

        /// <summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="hispanicLatinoEthnicity")]
        public bool? HispanicLatinoEthnicity { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// The login ID for the user; used for security access control interface.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="loginId")]
        public string LoginId { get; set; }

        /// <summary>
        /// The person's maiden name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maidenName")]
        public string MaidenName { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }

        /// <summary>
        /// A person's gender.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="sexDescriptor")]
        public string SexDescriptor { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a similar professional position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorProfessionalExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorProfessionalExperience { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a teaching position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorTeachingExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorTeachingExperience { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<ApplicantAddress> _applicantAddresses;
        private ICollection<Entities.Common.GrandBend.IApplicantAddress> _applicantAddressesCovariant;

        [DataMember(Name="addresses"), NoDuplicateMembers]
        public ICollection<ApplicantAddress> ApplicantAddresses
        {
            get { return _applicantAddresses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<ApplicantAddress>(value,
                    (s, e) => ((Entities.Common.GrandBend.IApplicantAddress)e.Item).Applicant = this);
                _applicantAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.GrandBend.IApplicantAddress, ApplicantAddress>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.GrandBend.IApplicantAddress)e.Item).Applicant = this;
                _applicantAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.GrandBend.IApplicantAddress> Entities.Common.GrandBend.IApplicant.ApplicantAddresses
        {
            get { return _applicantAddressesCovariant; }
            set { ApplicantAddresses = new List<ApplicantAddress>(value.Cast<ApplicantAddress>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_applicantAddresses != null) foreach (var item in _applicantAddresses)
            {
                item.Applicant = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.GrandBend.ApplicantMapper.SynchronizeTo(this, (Entities.Common.GrandBend.IApplicant)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.GrandBend.ApplicantMapper.MapTo(this, (Entities.Common.GrandBend.IApplicant)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsApplicantAddressesSupported                          { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsBirthDateSupported                                   { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsCitizenshipStatusDescriptorSupported                 { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsFirstNameSupported                                   { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsGenerationCodeSuffixSupported                        { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHighestCompletedLevelOfEducationDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHighlyQualifiedAcademicSubjectDescriptorSupported    { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHighlyQualifiedTeacherSupported                      { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHispanicLatinoEthnicitySupported                     { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsLastSurnameSupported                                 { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsLoginIdSupported                                     { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsMaidenNameSupported                                  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsMiddleNameSupported                                  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsPersonalTitlePrefixSupported                         { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsSexDescriptorSupported                               { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsYearsOfPriorProfessionalExperienceSupported          { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsYearsOfPriorTeachingExperienceSupported              { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.GrandBend.IApplicantAddress, bool> Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsApplicantAddressIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.GrandBend.IApplicant.EducationOrganizationResourceId 
        { 
            get { return null; }
            set { ImplicitEducationOrganizationReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.GrandBend.IApplicant.EducationOrganizationDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEducationOrganizationReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantPutPostRequestValidator : FluentValidation.AbstractValidator<Applicant>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<Applicant> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var applicantAddressesValidator = new ApplicantAddressPutPostRequestValidator();

            foreach (var item in instance.ApplicantAddresses)
            {
                var validationResult = applicantAddressesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the grandbend.ApplicantAddress table of the Applicant aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantAddress : Entities.Common.GrandBend.IApplicantAddress, Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.GrandBend.IApplicant _applicant;

        [IgnoreDataMember]
        Entities.Common.GrandBend.IApplicant Entities.Common.GrandBend.IApplicantAddress.Applicant
        {
            get { return _applicant; }
            set { SetApplicant(value); }
        }

        internal Entities.Common.GrandBend.IApplicant Applicant
        {
            set { SetApplicant(value); }
        }

        private void SetApplicant(Entities.Common.GrandBend.IApplicant value)
        {
            _applicant = value;
        }

        /// <summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressTypeDescriptor"), NaturalKeyMember]
        public string AddressTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.GrandBend.IApplicantAddress;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_applicant == null || !_applicant.Equals(compareTo.Applicant))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor == null
                || !(this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor.Equals(compareTo.AddressTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_applicant != null)
                    hash = hash * 23 + _applicant.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The apartment, room, or suite number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="apartmentRoomSuiteNumber")]
        public string ApartmentRoomSuiteNumber { get; set; }

        /// <summary>
        /// The month, day, and year the address became effective.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The number of the building on the site, if more than one building shares the same address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="buildingSiteNumber")]
        public string BuildingSiteNumber { get; set; }

        /// <summary>
        /// The name of the city in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="city")]
        public string City { get; set; }

        /// <summary>
        /// The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \"first-order subdivisions\" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="countyFIPSCode")]
        public string CountyFIPSCode { get; set; }

        /// <summary>
        /// The month, day, and year the address ceased to be in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }

        /// <summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in                        'which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nameOfCounty")]
        public string NameOfCounty { get; set; }

        /// <summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="stateAbbreviationDescriptor")]
        public string StateAbbreviationDescriptor { get; set; }

        /// <summary>
        /// The street number and street name or post office box number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="streetNumberName")]
        public string StreetNumberName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.GrandBend.ApplicantAddressMapper.SynchronizeTo(this, (Entities.Common.GrandBend.IApplicantAddress)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.GrandBend.ApplicantAddressMapper.MapTo(this, (Entities.Common.GrandBend.IApplicantAddress)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsApartmentRoomSuiteNumberSupported     { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsBeginDateSupported                    { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsBuildingSiteNumberSupported           { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsCitySupported                         { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsCountyFIPSCodeSupported               { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsEndDateSupported                      { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsLatitudeSupported                     { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsLongitudeSupported                    { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsNameOfCountySupported                 { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsPostalCodeSupported                   { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsStateAbbreviationDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsStreetNumberNameSupported             { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantAddressPutPostRequestValidator : FluentValidation.AbstractValidator<ApplicantAddress>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicantAddress> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Staff

namespace EdFi.Ods.Api.Models.Resources.Staff.EdFi.Staff_and_Prospect_MixedExclude2_Writable
{
    /// <summary>
    /// Represents a reference to the Staff resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffReference
    {
        [DataMember(Name="staffUniqueId"), NaturalKeyMember]
        public string StaffUniqueId { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return StaffUniqueId != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "Staff",
                Href = $"/ed-fi/staffs/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new Common.Models.Domain.FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.Staff table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class Staff : Entities.Common.EdFi.IStaff, IHasETag, Entities.Common.EdFi.IStaffSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Staff()
        {
            StaffAddresses = new List<StaffAddress>();
            StaffCredentials = new List<StaffCredential>();
            StaffElectronicMails = new List<StaffElectronicMail>();
            StaffIdentificationCodes = new List<StaffIdentificationCode>();
            StaffIdentificationDocuments = new List<StaffIdentificationDocument>();
            StaffInternationalAddresses = new List<StaffInternationalAddress>();
            StaffLanguages = new List<StaffLanguage>();
            StaffOtherNames = new List<StaffOtherName>();
            StaffPersonalIdentificationDocuments = new List<StaffPersonalIdentificationDocument>();
            StaffRaces = new List<StaffRace>();
            StaffRecognitions = new List<StaffRecognition>();
            StaffTelephones = new List<StaffTelephone>();
            StaffTribalAffiliations = new List<StaffTribalAffiliation>();
            StaffVisas = new List<StaffVisa>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Staff resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to a staff.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="staffUniqueId"), NaturalKeyMember, UniqueId]
        public string StaffUniqueId { get; set; }

        string IIdentifiablePerson.UniqueId { get { return StaffUniqueId; } }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaff;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Property
            if ((this as Entities.Common.EdFi.IStaff).StaffUniqueId == null
                || !(this as Entities.Common.EdFi.IStaff).StaffUniqueId.Equals(compareTo.StaffUniqueId)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Property
                if ((this as Entities.Common.EdFi.IStaff).StaffUniqueId != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaff).StaffUniqueId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="birthDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BirthDate { get; set; }

        /// <summary>
        /// An indicator of whether or not the person is a U.S. citizen.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="citizenshipStatusDescriptor")]
        public string CitizenshipStatusDescriptor { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="highestCompletedLevelOfEducationDescriptor")]
        public string HighestCompletedLevelOfEducationDescriptor { get; set; }

        /// <summary>
        /// An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="highlyQualifiedTeacher")]
        public bool? HighlyQualifiedTeacher { get; set; }

        /// <summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="hispanicLatinoEthnicity")]
        public bool? HispanicLatinoEthnicity { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// The login ID for the user; used for security access control interface.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="loginId")]
        public string LoginId { get; set; }

        /// <summary>
        /// The person's maiden name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maidenName")]
        public string MaidenName { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// Previous definition of Ethnicity combining Hispanic/Latino and race:          1 - American Indian or Alaskan Native          2 - Asian or Pacific Islander          3 - Black, not of Hispanic origin          4 - Hispanic          5 - White, not of Hispanic origin.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="oldEthnicityDescriptor")]
        public string OldEthnicityDescriptor { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }

        /// <summary>
        /// A person's gender.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="sexDescriptor")]
        public string SexDescriptor { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a similar professional position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorProfessionalExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorProfessionalExperience { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a teaching position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorTeachingExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorTeachingExperience { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "Staff")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffAddress> _staffAddresses;
        private ICollection<Entities.Common.EdFi.IStaffAddress> _staffAddressesCovariant;

        [DataMember(Name="addresses"), NoDuplicateMembers]
        public ICollection<StaffAddress> StaffAddresses
        {
            get { return _staffAddresses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffAddress>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffAddress)e.Item).Staff = this);
                _staffAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffAddress, StaffAddress>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffAddress)e.Item).Staff = this;
                _staffAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffAddress> Entities.Common.EdFi.IStaff.StaffAddresses
        {
            get { return _staffAddressesCovariant; }
            set { StaffAddresses = new List<StaffAddress>(value.Cast<StaffAddress>()); }
        }

        private ICollection<StaffCredential> _staffCredentials;
        private ICollection<Entities.Common.EdFi.IStaffCredential> _staffCredentialsCovariant;

        [DataMember(Name="credentials"), NoDuplicateMembers]
        public ICollection<StaffCredential> StaffCredentials
        {
            get { return _staffCredentials; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffCredential>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffCredential)e.Item).Staff = this);
                _staffCredentials = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffCredential, StaffCredential>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffCredential)e.Item).Staff = this;
                _staffCredentialsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffCredential> Entities.Common.EdFi.IStaff.StaffCredentials
        {
            get { return _staffCredentialsCovariant; }
            set { StaffCredentials = new List<StaffCredential>(value.Cast<StaffCredential>()); }
        }

        private ICollection<StaffElectronicMail> _staffElectronicMails;
        private ICollection<Entities.Common.EdFi.IStaffElectronicMail> _staffElectronicMailsCovariant;

        [DataMember(Name="electronicMails"), NoDuplicateMembers]
        public ICollection<StaffElectronicMail> StaffElectronicMails
        {
            get { return _staffElectronicMails; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffElectronicMail>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffElectronicMail)e.Item).Staff = this);
                _staffElectronicMails = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffElectronicMail, StaffElectronicMail>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffElectronicMail)e.Item).Staff = this;
                _staffElectronicMailsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffElectronicMail> Entities.Common.EdFi.IStaff.StaffElectronicMails
        {
            get { return _staffElectronicMailsCovariant; }
            set { StaffElectronicMails = new List<StaffElectronicMail>(value.Cast<StaffElectronicMail>()); }
        }

        private ICollection<StaffIdentificationCode> _staffIdentificationCodes;
        private ICollection<Entities.Common.EdFi.IStaffIdentificationCode> _staffIdentificationCodesCovariant;

        [DataMember(Name="identificationCodes"), NoDuplicateMembers]
        public ICollection<StaffIdentificationCode> StaffIdentificationCodes
        {
            get { return _staffIdentificationCodes; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffIdentificationCode>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffIdentificationCode)e.Item).Staff = this);
                _staffIdentificationCodes = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffIdentificationCode, StaffIdentificationCode>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffIdentificationCode)e.Item).Staff = this;
                _staffIdentificationCodesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffIdentificationCode> Entities.Common.EdFi.IStaff.StaffIdentificationCodes
        {
            get { return _staffIdentificationCodesCovariant; }
            set { StaffIdentificationCodes = new List<StaffIdentificationCode>(value.Cast<StaffIdentificationCode>()); }
        }

        private ICollection<StaffIdentificationDocument> _staffIdentificationDocuments;
        private ICollection<Entities.Common.EdFi.IStaffIdentificationDocument> _staffIdentificationDocumentsCovariant;

        [DataMember(Name="identificationDocuments"), NoDuplicateMembers]
        public ICollection<StaffIdentificationDocument> StaffIdentificationDocuments
        {
            get { return _staffIdentificationDocuments; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffIdentificationDocument>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffIdentificationDocument)e.Item).Staff = this);
                _staffIdentificationDocuments = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffIdentificationDocument, StaffIdentificationDocument>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffIdentificationDocument)e.Item).Staff = this;
                _staffIdentificationDocumentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffIdentificationDocument> Entities.Common.EdFi.IStaff.StaffIdentificationDocuments
        {
            get { return _staffIdentificationDocumentsCovariant; }
            set { StaffIdentificationDocuments = new List<StaffIdentificationDocument>(value.Cast<StaffIdentificationDocument>()); }
        }

        private ICollection<StaffInternationalAddress> _staffInternationalAddresses;
        private ICollection<Entities.Common.EdFi.IStaffInternationalAddress> _staffInternationalAddressesCovariant;

        [DataMember(Name="internationalAddresses"), NoDuplicateMembers]
        public ICollection<StaffInternationalAddress> StaffInternationalAddresses
        {
            get { return _staffInternationalAddresses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffInternationalAddress>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffInternationalAddress)e.Item).Staff = this);
                _staffInternationalAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffInternationalAddress, StaffInternationalAddress>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffInternationalAddress)e.Item).Staff = this;
                _staffInternationalAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffInternationalAddress> Entities.Common.EdFi.IStaff.StaffInternationalAddresses
        {
            get { return _staffInternationalAddressesCovariant; }
            set { StaffInternationalAddresses = new List<StaffInternationalAddress>(value.Cast<StaffInternationalAddress>()); }
        }

        private ICollection<StaffLanguage> _staffLanguages;
        private ICollection<Entities.Common.EdFi.IStaffLanguage> _staffLanguagesCovariant;

        [DataMember(Name="languages"), NoDuplicateMembers]
        public ICollection<StaffLanguage> StaffLanguages
        {
            get { return _staffLanguages; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffLanguage>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffLanguage)e.Item).Staff = this);
                _staffLanguages = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffLanguage, StaffLanguage>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffLanguage)e.Item).Staff = this;
                _staffLanguagesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffLanguage> Entities.Common.EdFi.IStaff.StaffLanguages
        {
            get { return _staffLanguagesCovariant; }
            set { StaffLanguages = new List<StaffLanguage>(value.Cast<StaffLanguage>()); }
        }

        private ICollection<StaffOtherName> _staffOtherNames;
        private ICollection<Entities.Common.EdFi.IStaffOtherName> _staffOtherNamesCovariant;

        [DataMember(Name="otherNames"), NoDuplicateMembers]
        public ICollection<StaffOtherName> StaffOtherNames
        {
            get { return _staffOtherNames; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffOtherName>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffOtherName)e.Item).Staff = this);
                _staffOtherNames = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffOtherName, StaffOtherName>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffOtherName)e.Item).Staff = this;
                _staffOtherNamesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffOtherName> Entities.Common.EdFi.IStaff.StaffOtherNames
        {
            get { return _staffOtherNamesCovariant; }
            set { StaffOtherNames = new List<StaffOtherName>(value.Cast<StaffOtherName>()); }
        }

        private ICollection<StaffPersonalIdentificationDocument> _staffPersonalIdentificationDocuments;
        private ICollection<Entities.Common.EdFi.IStaffPersonalIdentificationDocument> _staffPersonalIdentificationDocumentsCovariant;

        [DataMember(Name="personalIdentificationDocuments"), NoDuplicateMembers]
        public ICollection<StaffPersonalIdentificationDocument> StaffPersonalIdentificationDocuments
        {
            get { return _staffPersonalIdentificationDocuments; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffPersonalIdentificationDocument>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffPersonalIdentificationDocument)e.Item).Staff = this);
                _staffPersonalIdentificationDocuments = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffPersonalIdentificationDocument, StaffPersonalIdentificationDocument>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffPersonalIdentificationDocument)e.Item).Staff = this;
                _staffPersonalIdentificationDocumentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffPersonalIdentificationDocument> Entities.Common.EdFi.IStaff.StaffPersonalIdentificationDocuments
        {
            get { return _staffPersonalIdentificationDocumentsCovariant; }
            set { StaffPersonalIdentificationDocuments = new List<StaffPersonalIdentificationDocument>(value.Cast<StaffPersonalIdentificationDocument>()); }
        }

        private ICollection<StaffRace> _staffRaces;
        private ICollection<Entities.Common.EdFi.IStaffRace> _staffRacesCovariant;

        [DataMember(Name="races"), NoDuplicateMembers]
        public ICollection<StaffRace> StaffRaces
        {
            get { return _staffRaces; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffRace>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffRace)e.Item).Staff = this);
                _staffRaces = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffRace, StaffRace>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffRace)e.Item).Staff = this;
                _staffRacesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffRace> Entities.Common.EdFi.IStaff.StaffRaces
        {
            get { return _staffRacesCovariant; }
            set { StaffRaces = new List<StaffRace>(value.Cast<StaffRace>()); }
        }

        private ICollection<StaffRecognition> _staffRecognitions;
        private ICollection<Entities.Common.EdFi.IStaffRecognition> _staffRecognitionsCovariant;

        [DataMember(Name="recognitions"), NoDuplicateMembers]
        public ICollection<StaffRecognition> StaffRecognitions
        {
            get { return _staffRecognitions; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffRecognition>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffRecognition)e.Item).Staff = this);
                _staffRecognitions = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffRecognition, StaffRecognition>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffRecognition)e.Item).Staff = this;
                _staffRecognitionsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffRecognition> Entities.Common.EdFi.IStaff.StaffRecognitions
        {
            get { return _staffRecognitionsCovariant; }
            set { StaffRecognitions = new List<StaffRecognition>(value.Cast<StaffRecognition>()); }
        }

        private ICollection<StaffTelephone> _staffTelephones;
        private ICollection<Entities.Common.EdFi.IStaffTelephone> _staffTelephonesCovariant;

        [DataMember(Name="telephones"), NoDuplicateMembers]
        public ICollection<StaffTelephone> StaffTelephones
        {
            get { return _staffTelephones; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffTelephone>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffTelephone)e.Item).Staff = this);
                _staffTelephones = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffTelephone, StaffTelephone>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffTelephone)e.Item).Staff = this;
                _staffTelephonesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffTelephone> Entities.Common.EdFi.IStaff.StaffTelephones
        {
            get { return _staffTelephonesCovariant; }
            set { StaffTelephones = new List<StaffTelephone>(value.Cast<StaffTelephone>()); }
        }

        private ICollection<StaffTribalAffiliation> _staffTribalAffiliations;
        private ICollection<Entities.Common.EdFi.IStaffTribalAffiliation> _staffTribalAffiliationsCovariant;

        [DataMember(Name="tribalAffiliations"), NoDuplicateMembers]
        public ICollection<StaffTribalAffiliation> StaffTribalAffiliations
        {
            get { return _staffTribalAffiliations; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffTribalAffiliation>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffTribalAffiliation)e.Item).Staff = this);
                _staffTribalAffiliations = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffTribalAffiliation, StaffTribalAffiliation>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffTribalAffiliation)e.Item).Staff = this;
                _staffTribalAffiliationsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffTribalAffiliation> Entities.Common.EdFi.IStaff.StaffTribalAffiliations
        {
            get { return _staffTribalAffiliationsCovariant; }
            set { StaffTribalAffiliations = new List<StaffTribalAffiliation>(value.Cast<StaffTribalAffiliation>()); }
        }

        private ICollection<StaffVisa> _staffVisas;
        private ICollection<Entities.Common.EdFi.IStaffVisa> _staffVisasCovariant;

        [DataMember(Name="visas"), NoDuplicateMembers]
        public ICollection<StaffVisa> StaffVisas
        {
            get { return _staffVisas; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffVisa>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffVisa)e.Item).Staff = this);
                _staffVisas = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffVisa, StaffVisa>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffVisa)e.Item).Staff = this;
                _staffVisasCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffVisa> Entities.Common.EdFi.IStaff.StaffVisas
        {
            get { return _staffVisasCovariant; }
            set { StaffVisas = new List<StaffVisa>(value.Cast<StaffVisa>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffAddresses != null) foreach (var item in _staffAddresses)
            {
                item.Staff = this;
            }

            if (_staffCredentials != null) foreach (var item in _staffCredentials)
            {
                item.Staff = this;
            }

            if (_staffElectronicMails != null) foreach (var item in _staffElectronicMails)
            {
                item.Staff = this;
            }

            if (_staffIdentificationCodes != null) foreach (var item in _staffIdentificationCodes)
            {
                item.Staff = this;
            }

            if (_staffIdentificationDocuments != null) foreach (var item in _staffIdentificationDocuments)
            {
                item.Staff = this;
            }

            if (_staffInternationalAddresses != null) foreach (var item in _staffInternationalAddresses)
            {
                item.Staff = this;
            }

            if (_staffLanguages != null) foreach (var item in _staffLanguages)
            {
                item.Staff = this;
            }

            if (_staffOtherNames != null) foreach (var item in _staffOtherNames)
            {
                item.Staff = this;
            }

            if (_staffPersonalIdentificationDocuments != null) foreach (var item in _staffPersonalIdentificationDocuments)
            {
                item.Staff = this;
            }

            if (_staffRaces != null) foreach (var item in _staffRaces)
            {
                item.Staff = this;
            }

            if (_staffRecognitions != null) foreach (var item in _staffRecognitions)
            {
                item.Staff = this;
            }

            if (_staffTelephones != null) foreach (var item in _staffTelephones)
            {
                item.Staff = this;
            }

            if (_staffTribalAffiliations != null) foreach (var item in _staffTribalAffiliations)
            {
                item.Staff = this;
            }

            if (_staffVisas != null) foreach (var item in _staffVisas)
            {
                item.Staff = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaff)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffMapper.MapTo(this, (Entities.Common.EdFi.IStaff)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsBirthDateSupported                                   { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsCitizenshipStatusDescriptorSupported                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsFirstNameSupported                                   { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsGenerationCodeSuffixSupported                        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsHighestCompletedLevelOfEducationDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsHighlyQualifiedTeacherSupported                      { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsHispanicLatinoEthnicitySupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsLastSurnameSupported                                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsLoginIdSupported                                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsMaidenNameSupported                                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsMiddleNameSupported                                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsOldEthnicityDescriptorSupported                      { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsPersonalTitlePrefixSupported                         { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsSexDescriptorSupported                               { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffAddressesSupported                              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffCredentialsSupported                            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffElectronicMailsSupported                        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationCodesSupported                    { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationDocumentsSupported                { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffInternationalAddressesSupported                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffLanguagesSupported                              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffOtherNamesSupported                             { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffPersonalIdentificationDocumentsSupported        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRacesSupported                                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRecognitionsSupported                           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTelephonesSupported                             { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTribalAffiliationsSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffUniqueIdSupported                               { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffVisasSupported                                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsYearsOfPriorProfessionalExperienceSupported          { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsYearsOfPriorTeachingExperienceSupported              { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.EdFi.IStaffAddress, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffAddressIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffCredential, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffCredentialIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffElectronicMail, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffElectronicMailIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffIdentificationCode, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationCodeIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffIdentificationDocument, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffIdentificationDocumentIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffInternationalAddress, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffInternationalAddressIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffLanguage, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffLanguageIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffOtherName, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffOtherNameIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffPersonalIdentificationDocument, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffPersonalIdentificationDocumentIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffRace, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRaceIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffRecognition, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffRecognitionIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffTelephone, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTelephoneIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffTribalAffiliation, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffTribalAffiliationIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStaffVisa, bool> Entities.Common.EdFi.IStaffSynchronizationSourceSupport.IsStaffVisaIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPutPostRequestValidator : FluentValidation.AbstractValidator<Staff>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<Staff> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var staffAddressesValidator = new StaffAddressPutPostRequestValidator();

            foreach (var item in instance.StaffAddresses)
            {
                var validationResult = staffAddressesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffCredentialsValidator = new StaffCredentialPutPostRequestValidator();

            foreach (var item in instance.StaffCredentials)
            {
                var validationResult = staffCredentialsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffElectronicMailsValidator = new StaffElectronicMailPutPostRequestValidator();

            foreach (var item in instance.StaffElectronicMails)
            {
                var validationResult = staffElectronicMailsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffIdentificationCodesValidator = new StaffIdentificationCodePutPostRequestValidator();

            foreach (var item in instance.StaffIdentificationCodes)
            {
                var validationResult = staffIdentificationCodesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffIdentificationDocumentsValidator = new StaffIdentificationDocumentPutPostRequestValidator();

            foreach (var item in instance.StaffIdentificationDocuments)
            {
                var validationResult = staffIdentificationDocumentsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffInternationalAddressesValidator = new StaffInternationalAddressPutPostRequestValidator();

            foreach (var item in instance.StaffInternationalAddresses)
            {
                var validationResult = staffInternationalAddressesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffLanguagesValidator = new StaffLanguagePutPostRequestValidator();

            foreach (var item in instance.StaffLanguages)
            {
                var validationResult = staffLanguagesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffOtherNamesValidator = new StaffOtherNamePutPostRequestValidator();

            foreach (var item in instance.StaffOtherNames)
            {
                var validationResult = staffOtherNamesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffPersonalIdentificationDocumentsValidator = new StaffPersonalIdentificationDocumentPutPostRequestValidator();

            foreach (var item in instance.StaffPersonalIdentificationDocuments)
            {
                var validationResult = staffPersonalIdentificationDocumentsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffRacesValidator = new StaffRacePutPostRequestValidator();

            foreach (var item in instance.StaffRaces)
            {
                var validationResult = staffRacesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffRecognitionsValidator = new StaffRecognitionPutPostRequestValidator();

            foreach (var item in instance.StaffRecognitions)
            {
                var validationResult = staffRecognitionsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffTelephonesValidator = new StaffTelephonePutPostRequestValidator();

            foreach (var item in instance.StaffTelephones)
            {
                var validationResult = staffTelephonesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffTribalAffiliationsValidator = new StaffTribalAffiliationPutPostRequestValidator();

            foreach (var item in instance.StaffTribalAffiliations)
            {
                var validationResult = staffTribalAffiliationsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var staffVisasValidator = new StaffVisaPutPostRequestValidator();

            foreach (var item in instance.StaffVisas)
            {
                var validationResult = staffVisasValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffAddress table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffAddress : Entities.Common.EdFi.IStaffAddress, Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StaffAddress()
        {
            StaffAddressPeriods = new List<StaffAddressPeriod>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffAddress.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressTypeDescriptor"), NaturalKeyMember]
        public string AddressTypeDescriptor { get; set; }

        /// <summary>
        /// The name of the city in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="city"), NaturalKeyMember]
        public string City { get; set; }

        /// <summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="postalCode"), NaturalKeyMember]
        public string PostalCode { get; set; }

        /// <summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="stateAbbreviationDescriptor"), NaturalKeyMember]
        public string StateAbbreviationDescriptor { get; set; }

        /// <summary>
        /// The street number and street name or post office box number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="streetNumberName"), NaturalKeyMember]
        public string StreetNumberName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffAddress;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).AddressTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffAddress).AddressTypeDescriptor.Equals(compareTo.AddressTypeDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).City == null
                || !(this as Entities.Common.EdFi.IStaffAddress).City.Equals(compareTo.City)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).PostalCode == null
                || !(this as Entities.Common.EdFi.IStaffAddress).PostalCode.Equals(compareTo.PostalCode)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).StateAbbreviationDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffAddress).StateAbbreviationDescriptor.Equals(compareTo.StateAbbreviationDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddress).StreetNumberName == null
                || !(this as Entities.Common.EdFi.IStaffAddress).StreetNumberName.Equals(compareTo.StreetNumberName)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).AddressTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).AddressTypeDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).City != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).City.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).PostalCode != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).PostalCode.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).StateAbbreviationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).StateAbbreviationDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddress).StreetNumberName != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddress).StreetNumberName.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The apartment, room, or suite number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="apartmentRoomSuiteNumber")]
        public string ApartmentRoomSuiteNumber { get; set; }

        /// <summary>
        /// The number of the building on the site, if more than one building shares the same address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="buildingSiteNumber")]
        public string BuildingSiteNumber { get; set; }

        /// <summary>
        /// The congressional district in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="congressionalDistrict")]
        public string CongressionalDistrict { get; set; }

        /// <summary>
        /// The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \"first-order subdivisions\" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="countyFIPSCode")]
        public string CountyFIPSCode { get; set; }

        /// <summary>
        /// An indication that the address should not be published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// A general geographic indicator that categorizes U.S. territory (e.g., City, Suburban).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="localeDescriptor")]
        public string LocaleDescriptor { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }

        /// <summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in                        'which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nameOfCounty")]
        public string NameOfCounty { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffAddress")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffAddressPeriod> _staffAddressPeriods;
        private ICollection<Entities.Common.EdFi.IStaffAddressPeriod> _staffAddressPeriodsCovariant;

        [DataMember(Name="periods"), NoDuplicateMembers]
        public ICollection<StaffAddressPeriod> StaffAddressPeriods
        {
            get { return _staffAddressPeriods; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffAddressPeriod>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffAddressPeriod)e.Item).StaffAddress = this);
                _staffAddressPeriods = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffAddressPeriod, StaffAddressPeriod>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffAddressPeriod)e.Item).StaffAddress = this;
                _staffAddressPeriodsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffAddressPeriod> Entities.Common.EdFi.IStaffAddress.StaffAddressPeriods
        {
            get { return _staffAddressPeriodsCovariant; }
            set { StaffAddressPeriods = new List<StaffAddressPeriod>(value.Cast<StaffAddressPeriod>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffAddressPeriods != null) foreach (var item in _staffAddressPeriods)
            {
                item.StaffAddress = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffAddressMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffAddress)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffAddressMapper.MapTo(this, (Entities.Common.EdFi.IStaffAddress)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsApartmentRoomSuiteNumberSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsBuildingSiteNumberSupported        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsCongressionalDistrictSupported     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsCountyFIPSCodeSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsLatitudeSupported                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsLocaleDescriptorSupported          { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsLongitudeSupported                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsNameOfCountySupported              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsStaffAddressPeriodsSupported       { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.EdFi.IStaffAddressPeriod, bool> Entities.Common.EdFi.IStaffAddressSynchronizationSourceSupport.IsStaffAddressPeriodIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffAddressPutPostRequestValidator : FluentValidation.AbstractValidator<StaffAddress>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffAddress> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var staffAddressPeriodsValidator = new StaffAddressPeriodPutPostRequestValidator();

            foreach (var item in instance.StaffAddressPeriods)
            {
                var validationResult = staffAddressPeriodsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffAddressPeriod table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffAddressPeriod : Entities.Common.EdFi.IStaffAddressPeriod, Entities.Common.EdFi.IStaffAddressPeriodSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaffAddress _staffAddress;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaffAddress Entities.Common.EdFi.IStaffAddressPeriod.StaffAddress
        {
            get { return _staffAddress; }
            set { SetStaffAddress(value); }
        }

        internal Entities.Common.EdFi.IStaffAddress StaffAddress
        {
            set { SetStaffAddress(value); }
        }

        private void SetStaffAddress(Entities.Common.EdFi.IStaffAddress value)
        {
            _staffAddress = value;
        }

        /// <summary>
        /// The month, day, and year for the start of the period.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate"), NaturalKeyMember][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime BeginDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffAddressPeriod;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staffAddress == null || !_staffAddress.Equals(compareTo.StaffAddress))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffAddressPeriod).BeginDate == null
                || !(this as Entities.Common.EdFi.IStaffAddressPeriod).BeginDate.Equals(compareTo.BeginDate)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffAddress != null)
                    hash = hash * 23 + _staffAddress.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffAddressPeriod).BeginDate != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffAddressPeriod).BeginDate.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year for the end of the period.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffAddressPeriod")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffAddressPeriodMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffAddressPeriod)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffAddressPeriodMapper.MapTo(this, (Entities.Common.EdFi.IStaffAddressPeriod)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffAddressPeriodSynchronizationSourceSupport.IsEndDateSupported  { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffAddressPeriodPutPostRequestValidator : FluentValidation.AbstractValidator<StaffAddressPeriod>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffAddressPeriod> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffCredential table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffCredential : Entities.Common.EdFi.IStaffCredential, Entities.Common.EdFi.IStaffCredentialSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _credentialReferenceExplicitlyAssigned;
        private Credential.EdFi.CredentialReference _credentialReference;
        private Credential.EdFi.CredentialReference ImplicitCredentialReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_credentialReference == null && !_credentialReferenceExplicitlyAssigned)
                    _credentialReference = new Credential.EdFi.CredentialReference();

                return _credentialReference;
            }
        }

        [DataMember(Name="credentialReference")][NaturalKeyMember]
        public Credential.EdFi.CredentialReference CredentialReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitCredentialReference != null
                    && (_credentialReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitCredentialReference.IsReferenceFullyDefined()))
                    return ImplicitCredentialReference;

                return null;
            }
            set
            {
                _credentialReferenceExplicitlyAssigned = true;
                _credentialReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffCredential.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// Identifier or serial number assigned to the credential.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        string Entities.Common.EdFi.IStaffCredential.CredentialIdentifier
        {
            get
            {
                if (ImplicitCredentialReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCredentialReference.IsReferenceFullyDefined()))
                    return ImplicitCredentialReference.CredentialIdentifier;

                return default(string);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // Credential
                _credentialReferenceExplicitlyAssigned = false;
                ImplicitCredentialReference.CredentialIdentifier = value;
            }
        }

        /// <summary>
        /// The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued.
        /// </summary>

        // IS in a reference (StaffCredential.StateOfIssueStateAbbreviationDescriptorId), IS a lookup column 
        string Entities.Common.EdFi.IStaffCredential.StateOfIssueStateAbbreviationDescriptor
        {
            get
            {
                if (ImplicitCredentialReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitCredentialReference.IsReferenceFullyDefined()))
                    return ImplicitCredentialReference.StateOfIssueStateAbbreviationDescriptor;

                return null;
            }
            set
            {
                ImplicitCredentialReference.StateOfIssueStateAbbreviationDescriptor = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffCredential;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Referenced Property
            if ((this as Entities.Common.EdFi.IStaffCredential).CredentialIdentifier == null
                || !(this as Entities.Common.EdFi.IStaffCredential).CredentialIdentifier.Equals(compareTo.CredentialIdentifier)) 
                return false;
 
            // Unified Type Property
            if ((this as Entities.Common.EdFi.IStaffCredential).StateOfIssueStateAbbreviationDescriptor == null
                ||!(this as Entities.Common.EdFi.IStaffCredential).StateOfIssueStateAbbreviationDescriptor.Equals(compareTo.StateOfIssueStateAbbreviationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                //Referenced Property
                if ((this as Entities.Common.EdFi.IStaffCredential).CredentialIdentifier != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffCredential).CredentialIdentifier.GetHashCode();
 
                //Unified Type Property
                if ((this as Entities.Common.EdFi.IStaffCredential).StateOfIssueStateAbbreviationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffCredential).StateOfIssueStateAbbreviationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffCredential")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffCredentialMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffCredential)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffCredentialMapper.MapTo(this, (Entities.Common.EdFi.IStaffCredential)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.EdFi.IStaffCredential.CredentialResourceId 
        { 
            get { return null; }
            set { ImplicitCredentialReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.EdFi.IStaffCredential.CredentialDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitCredentialReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffCredentialPutPostRequestValidator : FluentValidation.AbstractValidator<StaffCredential>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffCredential> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffElectronicMail table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffElectronicMail : Entities.Common.EdFi.IStaffElectronicMail, Entities.Common.EdFi.IStaffElectronicMailSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffElectronicMail.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The electronic mail (e-mail) address listed for an individual or organization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="electronicMailAddress"), NaturalKeyMember]
        public string ElectronicMailAddress { get; set; }

        /// <summary>
        /// The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="electronicMailTypeDescriptor"), NaturalKeyMember]
        public string ElectronicMailTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffElectronicMail;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailAddress == null
                || !(this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailAddress.Equals(compareTo.ElectronicMailAddress)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailTypeDescriptor.Equals(compareTo.ElectronicMailTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailAddress != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailAddress.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffElectronicMail).ElectronicMailTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication that the electronic email address should not be published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="primaryEmailAddressIndicator")]
        public bool? PrimaryEmailAddressIndicator { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffElectronicMail")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffElectronicMailMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffElectronicMail)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffElectronicMailMapper.MapTo(this, (Entities.Common.EdFi.IStaffElectronicMail)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffElectronicMailSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported         { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffElectronicMailSynchronizationSourceSupport.IsPrimaryEmailAddressIndicatorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffElectronicMailPutPostRequestValidator : FluentValidation.AbstractValidator<StaffElectronicMail>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffElectronicMail> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffIdentificationCode table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffIdentificationCode : Entities.Common.EdFi.IStaffIdentificationCode, Entities.Common.EdFi.IStaffIdentificationCodeSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffIdentificationCode.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a staff member.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="staffIdentificationSystemDescriptor"), NaturalKeyMember]
        public string StaffIdentificationSystemDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffIdentificationCode;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffIdentificationCode).StaffIdentificationSystemDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffIdentificationCode).StaffIdentificationSystemDescriptor.Equals(compareTo.StaffIdentificationSystemDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffIdentificationCode).StaffIdentificationSystemDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffIdentificationCode).StaffIdentificationSystemDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The organization code or name assigning the staff Identification Code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="assigningOrganizationIdentificationCode")]
        public string AssigningOrganizationIdentificationCode { get; set; }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="identificationCode")]
        public string IdentificationCode { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffIdentificationCode")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffIdentificationCodeMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffIdentificationCode)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffIdentificationCodeMapper.MapTo(this, (Entities.Common.EdFi.IStaffIdentificationCode)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffIdentificationCodeSynchronizationSourceSupport.IsAssigningOrganizationIdentificationCodeSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationCodeSynchronizationSourceSupport.IsIdentificationCodeSupported                       { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffIdentificationCodePutPostRequestValidator : FluentValidation.AbstractValidator<StaffIdentificationCode>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffIdentificationCode> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffIdentificationDocument table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffIdentificationDocument : Entities.Common.EdFi.IStaffIdentificationDocument, Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffIdentificationDocument.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The primary function of the document used for establishing identity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="identificationDocumentUseDescriptor"), NaturalKeyMember]
        public string IdentificationDocumentUseDescriptor { get; set; }

        /// <summary>
        /// The category of the document relative to its purpose.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="personalInformationVerificationDescriptor"), NaturalKeyMember]
        public string PersonalInformationVerificationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffIdentificationDocument;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffIdentificationDocument).IdentificationDocumentUseDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffIdentificationDocument).IdentificationDocumentUseDescriptor.Equals(compareTo.IdentificationDocumentUseDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffIdentificationDocument).PersonalInformationVerificationDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffIdentificationDocument).PersonalInformationVerificationDescriptor.Equals(compareTo.PersonalInformationVerificationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffIdentificationDocument).IdentificationDocumentUseDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffIdentificationDocument).IdentificationDocumentUseDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffIdentificationDocument).PersonalInformationVerificationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffIdentificationDocument).PersonalInformationVerificationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The day when the document  expires, if null then never expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentExpirationDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? DocumentExpirationDate { get; set; }

        /// <summary>
        /// The title of the document given by the issuer.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentTitle")]
        public string DocumentTitle { get; set; }

        /// <summary>
        /// Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="issuerCountryDescriptor")]
        public string IssuerCountryDescriptor { get; set; }

        /// <summary>
        /// The unique identifier on the issuer's identification system.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerDocumentIdentificationCode")]
        public string IssuerDocumentIdentificationCode { get; set; }

        /// <summary>
        /// Name of the entity or institution that issued the document.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffIdentificationDocument")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffIdentificationDocumentMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffIdentificationDocumentMapper.MapTo(this, (Entities.Common.EdFi.IStaffIdentificationDocument)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported                        { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffIdentificationDocumentPutPostRequestValidator : FluentValidation.AbstractValidator<StaffIdentificationDocument>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffIdentificationDocument> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffInternationalAddress table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffInternationalAddress : Entities.Common.EdFi.IStaffInternationalAddress, Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffInternationalAddress.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The type of address listed for an individual or organization. For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressTypeDescriptor"), NaturalKeyMember]
        public string AddressTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffInternationalAddress;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffInternationalAddress).AddressTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffInternationalAddress).AddressTypeDescriptor.Equals(compareTo.AddressTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffInternationalAddress).AddressTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffInternationalAddress).AddressTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The first line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine1")]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// The second line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine2")]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// The third line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine3")]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// The fourth line of the address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="addressLine4")]
        public string AddressLine4 { get; set; }

        /// <summary>
        /// The first date the address is valid. For physical addresses, the date the person moved to that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The name of the country. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="countryDescriptor")]
        public string CountryDescriptor { get; set; }

        /// <summary>
        /// The last date the address is valid. For physical addresses, this would be the date the person moved from that address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffInternationalAddress")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffInternationalAddressMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffInternationalAddress)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffInternationalAddressMapper.MapTo(this, (Entities.Common.EdFi.IStaffInternationalAddress)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine1Supported       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine2Supported       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine3Supported       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsAddressLine4Supported       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsBeginDateSupported          { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsCountryDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsEndDateSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsLatitudeSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffInternationalAddressSynchronizationSourceSupport.IsLongitudeSupported          { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffInternationalAddressPutPostRequestValidator : FluentValidation.AbstractValidator<StaffInternationalAddress>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffInternationalAddress> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffLanguage table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffLanguage : Entities.Common.EdFi.IStaffLanguage, Entities.Common.EdFi.IStaffLanguageSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StaffLanguage()
        {
            StaffLanguageUses = new List<StaffLanguageUse>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffLanguage.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// A specification of which written or spoken communication is being used.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="languageDescriptor"), NaturalKeyMember]
        public string LanguageDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffLanguage;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffLanguage).LanguageDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffLanguage).LanguageDescriptor.Equals(compareTo.LanguageDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffLanguage).LanguageDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffLanguage).LanguageDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffLanguage")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffLanguageUse> _staffLanguageUses;
        private ICollection<Entities.Common.EdFi.IStaffLanguageUse> _staffLanguageUsesCovariant;

        [DataMember(Name="uses"), NoDuplicateMembers]
        public ICollection<StaffLanguageUse> StaffLanguageUses
        {
            get { return _staffLanguageUses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffLanguageUse>(value,
                    (s, e) => ((Entities.Common.EdFi.IStaffLanguageUse)e.Item).StaffLanguage = this);
                _staffLanguageUses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStaffLanguageUse, StaffLanguageUse>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStaffLanguageUse)e.Item).StaffLanguage = this;
                _staffLanguageUsesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStaffLanguageUse> Entities.Common.EdFi.IStaffLanguage.StaffLanguageUses
        {
            get { return _staffLanguageUsesCovariant; }
            set { StaffLanguageUses = new List<StaffLanguageUse>(value.Cast<StaffLanguageUse>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffLanguageUses != null) foreach (var item in _staffLanguageUses)
            {
                item.StaffLanguage = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffLanguageMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffLanguage)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffLanguageMapper.MapTo(this, (Entities.Common.EdFi.IStaffLanguage)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffLanguageSynchronizationSourceSupport.IsStaffLanguageUsesSupported  { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.EdFi.IStaffLanguageUse, bool> Entities.Common.EdFi.IStaffLanguageSynchronizationSourceSupport.IsStaffLanguageUseIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffLanguagePutPostRequestValidator : FluentValidation.AbstractValidator<StaffLanguage>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffLanguage> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var staffLanguageUsesValidator = new StaffLanguageUsePutPostRequestValidator();

            foreach (var item in instance.StaffLanguageUses)
            {
                var validationResult = staffLanguageUsesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffLanguageUse table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffLanguageUse : Entities.Common.EdFi.IStaffLanguageUse, Entities.Common.EdFi.IStaffLanguageUseSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaffLanguage _staffLanguage;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaffLanguage Entities.Common.EdFi.IStaffLanguageUse.StaffLanguage
        {
            get { return _staffLanguage; }
            set { SetStaffLanguage(value); }
        }

        internal Entities.Common.EdFi.IStaffLanguage StaffLanguage
        {
            set { SetStaffLanguage(value); }
        }

        private void SetStaffLanguage(Entities.Common.EdFi.IStaffLanguage value)
        {
            _staffLanguage = value;
        }

        /// <summary>
        /// A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="languageUseDescriptor"), NaturalKeyMember]
        public string LanguageUseDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffLanguageUse;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staffLanguage == null || !_staffLanguage.Equals(compareTo.StaffLanguage))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffLanguageUse).LanguageUseDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffLanguageUse).LanguageUseDescriptor.Equals(compareTo.LanguageUseDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffLanguage != null)
                    hash = hash * 23 + _staffLanguage.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffLanguageUse).LanguageUseDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffLanguageUse).LanguageUseDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffLanguageUse")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffLanguageUseMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffLanguageUse)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffLanguageUseMapper.MapTo(this, (Entities.Common.EdFi.IStaffLanguageUse)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffLanguageUsePutPostRequestValidator : FluentValidation.AbstractValidator<StaffLanguageUse>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffLanguageUse> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffOtherName table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffOtherName : Entities.Common.EdFi.IStaffOtherName, Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffOtherName.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The types of alternate names for a person.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="otherNameTypeDescriptor"), NaturalKeyMember]
        public string OtherNameTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffOtherName;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffOtherName).OtherNameTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffOtherName).OtherNameTypeDescriptor.Equals(compareTo.OtherNameTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffOtherName).OtherNameTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffOtherName).OtherNameTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffOtherName")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffOtherNameMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffOtherName)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffOtherNameMapper.MapTo(this, (Entities.Common.EdFi.IStaffOtherName)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsFirstNameSupported             { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsGenerationCodeSuffixSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsLastSurnameSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsMiddleNameSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffOtherNameSynchronizationSourceSupport.IsPersonalTitlePrefixSupported   { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffOtherNamePutPostRequestValidator : FluentValidation.AbstractValidator<StaffOtherName>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffOtherName> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffPersonalIdentificationDocument table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffPersonalIdentificationDocument : Entities.Common.EdFi.IStaffPersonalIdentificationDocument, Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffPersonalIdentificationDocument.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The primary function of the document used for establishing identity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="identificationDocumentUseDescriptor"), NaturalKeyMember]
        public string IdentificationDocumentUseDescriptor { get; set; }

        /// <summary>
        /// The category of the document relative to its purpose.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="personalInformationVerificationDescriptor"), NaturalKeyMember]
        public string PersonalInformationVerificationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffPersonalIdentificationDocument;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).IdentificationDocumentUseDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).IdentificationDocumentUseDescriptor.Equals(compareTo.IdentificationDocumentUseDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).PersonalInformationVerificationDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).PersonalInformationVerificationDescriptor.Equals(compareTo.PersonalInformationVerificationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).IdentificationDocumentUseDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).IdentificationDocumentUseDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).PersonalInformationVerificationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffPersonalIdentificationDocument).PersonalInformationVerificationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The day when the document  expires, if null then never expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentExpirationDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? DocumentExpirationDate { get; set; }

        /// <summary>
        /// The title of the document given by the issuer.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentTitle")]
        public string DocumentTitle { get; set; }

        /// <summary>
        /// Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="issuerCountryDescriptor")]
        public string IssuerCountryDescriptor { get; set; }

        /// <summary>
        /// The unique identifier on the issuer's identification system.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerDocumentIdentificationCode")]
        public string IssuerDocumentIdentificationCode { get; set; }

        /// <summary>
        /// Name of the entity or institution that issued the document.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffPersonalIdentificationDocument")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffPersonalIdentificationDocumentMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffPersonalIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffPersonalIdentificationDocumentMapper.MapTo(this, (Entities.Common.EdFi.IStaffPersonalIdentificationDocument)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported                        { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPersonalIdentificationDocumentPutPostRequestValidator : FluentValidation.AbstractValidator<StaffPersonalIdentificationDocument>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffPersonalIdentificationDocument> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffRace table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffRace : Entities.Common.EdFi.IStaffRace, Entities.Common.EdFi.IStaffRaceSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffRace.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The general racial category which most clearly reflects the individual's recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="raceDescriptor"), NaturalKeyMember]
        public string RaceDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffRace;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffRace).RaceDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffRace).RaceDescriptor.Equals(compareTo.RaceDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffRace).RaceDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffRace).RaceDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffRace")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffRaceMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffRace)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffRaceMapper.MapTo(this, (Entities.Common.EdFi.IStaffRace)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffRacePutPostRequestValidator : FluentValidation.AbstractValidator<StaffRace>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffRace> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffRecognition table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffRecognition : Entities.Common.EdFi.IStaffRecognition, Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffRecognition.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The nature of recognition given to the learner for accomplishments in a co-curricular, or extra-curricular activity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="recognitionTypeDescriptor"), NaturalKeyMember]
        public string RecognitionTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffRecognition;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffRecognition).RecognitionTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffRecognition).RecognitionTypeDescriptor.Equals(compareTo.RecognitionTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffRecognition).RecognitionTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffRecognition).RecognitionTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The category of achievement attributed to the learner.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="achievementCategoryDescriptor")]
        public string AchievementCategoryDescriptor { get; set; }

        /// <summary>
        /// The system that defines the categories by which an achievement is attributed to the learner.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="achievementCategorySystem")]
        public string AchievementCategorySystem { get; set; }

        /// <summary>
        /// The title assigned to the achievement.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="achievementTitle")]
        public string AchievementTitle { get; set; }

        /// <summary>
        /// The criteria for competency-based completion of the achievement/award.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="criteria")]
        public string Criteria { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="criteriaURL")]
        public string CriteriaURL { get; set; }

        /// <summary>
        /// A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="evidenceStatement")]
        public string EvidenceStatement { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="imageURL")]
        public string ImageURL { get; set; }

        /// <summary>
        /// The name of the agent, entity, or institution issuing the element.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) from which the award was issued.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerOriginURL")]
        public string IssuerOriginURL { get; set; }

        /// <summary>
        /// The date the recognition was awarded or earned.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="recognitionAwardDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? RecognitionAwardDate { get; set; }

        /// <summary>
        /// Date on which the award expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="recognitionAwardExpiresDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? RecognitionAwardExpiresDate { get; set; }

        /// <summary>
        /// A description of the type of academic distinctions earned by or awarded to the individual.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="recognitionDescription")]
        public string RecognitionDescription { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffRecognition")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffRecognitionMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffRecognition)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffRecognitionMapper.MapTo(this, (Entities.Common.EdFi.IStaffRecognition)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsAchievementCategoryDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsAchievementCategorySystemSupported      { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsAchievementTitleSupported               { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsCriteriaSupported                       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsCriteriaURLSupported                    { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsEvidenceStatementSupported              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsImageURLSupported                       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsIssuerNameSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsIssuerOriginURLSupported                { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsRecognitionAwardDateSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsRecognitionAwardExpiresDateSupported    { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffRecognitionSynchronizationSourceSupport.IsRecognitionDescriptionSupported         { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffRecognitionPutPostRequestValidator : FluentValidation.AbstractValidator<StaffRecognition>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffRecognition> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffTelephone table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffTelephone : Entities.Common.EdFi.IStaffTelephone, Entities.Common.EdFi.IStaffTelephoneSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffTelephone.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// The telephone number including the area code, and extension, if applicable.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="telephoneNumber"), NaturalKeyMember]
        public string TelephoneNumber { get; set; }

        /// <summary>
        /// The type of communication number listed for an individual or organization.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="telephoneNumberTypeDescriptor"), NaturalKeyMember]
        public string TelephoneNumberTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffTelephone;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumber == null
                || !(this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumber.Equals(compareTo.TelephoneNumber)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumberTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumberTypeDescriptor.Equals(compareTo.TelephoneNumberTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumber != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumber.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumberTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffTelephone).TelephoneNumberTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication that the telephone number should not be published.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get; set; }

        /// <summary>
        /// The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="orderOfPriority")]
        public int? OrderOfPriority { get; set; }

        /// <summary>
        /// An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="textMessageCapabilityIndicator")]
        public bool? TextMessageCapabilityIndicator { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffTelephone")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffTelephoneMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffTelephone)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffTelephoneMapper.MapTo(this, (Entities.Common.EdFi.IStaffTelephone)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStaffTelephoneSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffTelephoneSynchronizationSourceSupport.IsOrderOfPrioritySupported                 { get { return true; } set { } }
        bool Entities.Common.EdFi.IStaffTelephoneSynchronizationSourceSupport.IsTextMessageCapabilityIndicatorSupported  { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffTelephonePutPostRequestValidator : FluentValidation.AbstractValidator<StaffTelephone>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffTelephone> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffTribalAffiliation table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffTribalAffiliation : Entities.Common.EdFi.IStaffTribalAffiliation, Entities.Common.EdFi.IStaffTribalAffiliationSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffTribalAffiliation.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// An American Indian tribe with which the staff member is affiliated.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="tribalAffiliationDescriptor"), NaturalKeyMember]
        public string TribalAffiliationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffTribalAffiliation;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffTribalAffiliation).TribalAffiliationDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffTribalAffiliation).TribalAffiliationDescriptor.Equals(compareTo.TribalAffiliationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffTribalAffiliation).TribalAffiliationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffTribalAffiliation).TribalAffiliationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffTribalAffiliation")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffTribalAffiliationMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffTribalAffiliation)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffTribalAffiliationMapper.MapTo(this, (Entities.Common.EdFi.IStaffTribalAffiliation)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffTribalAffiliationPutPostRequestValidator : FluentValidation.AbstractValidator<StaffTribalAffiliation>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffTribalAffiliation> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StaffVisa table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffVisa : Entities.Common.EdFi.IStaffVisa, Entities.Common.EdFi.IStaffVisaSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.EdFi.IStaffVisa.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }

        /// <summary>
        /// An indicator of a non-US citizen's Visa type.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="visaDescriptor"), NaturalKeyMember]
        public string VisaDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStaffVisa;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStaffVisa).VisaDescriptor == null
                || !(this as Entities.Common.EdFi.IStaffVisa).VisaDescriptor.Equals(compareTo.VisaDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStaffVisa).VisaDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStaffVisa).VisaDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Staff", "StaffVisa")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StaffVisaMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStaffVisa)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StaffVisaMapper.MapTo(this, (Entities.Common.EdFi.IStaffVisa)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "GrandBend", "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffVisaPutPostRequestValidator : FluentValidation.AbstractValidator<StaffVisa>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffVisa> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Staff

namespace EdFi.Ods.Api.Models.Resources.Staff.EdFi.Staff_and_Prospect_MixedExclude2_Writable.Extensions.GrandBend
{
    /// <summary>
    /// A class which represents the grandbend.StaffExtension table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffExtension : Entities.Common.GrandBend.IStaffExtension, Entities.Common.GrandBend.IStaffExtensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.GrandBend.IStaffExtension.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.GrandBend.IStaffExtension;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The date that the staff member's new hire probationary period was completed.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="probationCompleteDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? ProbationCompleteDate { get; set; }

        /// <summary>
        /// An indication as to whether the staff member is tenured.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="tenured")]
        public bool? Tenured { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.GrandBend.StaffExtensionMapper.SynchronizeTo(this, (Entities.Common.GrandBend.IStaffExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.GrandBend.StaffExtensionMapper.MapTo(this, (Entities.Common.GrandBend.IStaffExtension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.GrandBend.IStaffExtensionSynchronizationSourceSupport.IsProbationCompleteDateSupported  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IStaffExtensionSynchronizationSourceSupport.IsTenuredSupported                { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<StaffExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Staff

namespace EdFi.Ods.Api.Models.Resources.Staff.EdFi.Staff_and_Prospect_MixedExclude2_Writable.Extensions.Sample
{
    /// <summary>
    /// A class which represents the sample.StaffExtension table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffExtension : Entities.Common.Sample.IStaffExtension, Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StaffExtension()
        {
            StaffPets = new List<StaffPet>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStaff _staff;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStaff Entities.Common.Sample.IStaffExtension.Staff
        {
            get { return _staff; }
            set { SetStaff(value); }
        }

        internal Entities.Common.EdFi.IStaff Staff
        {
            set { SetStaff(value); }
        }

        private void SetStaff(Entities.Common.EdFi.IStaff value)
        {
            _staff = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStaffExtension;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staff == null || !_staff.Equals(compareTo.Staff))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staff != null)
                    hash = hash * 23 + _staff.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The date the staff member adopted the first household pet.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstPetOwnedDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? FirstPetOwnedDate { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        /// <summary>
        /// petPreference
        /// </summary>
        [DataMember(Name = "petPreference")]
        public StaffPetPreference StaffPetPreference { get; set; }

        Entities.Common.Sample.IStaffPetPreference Entities.Common.Sample.IStaffExtension.StaffPetPreference
        {
            get { return StaffPetPreference; }
            set { StaffPetPreference = (StaffPetPreference) value; }
        }

        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StaffPet> _staffPets;
        private ICollection<Entities.Common.Sample.IStaffPet> _staffPetsCovariant;

        [DataMember(Name="pets"), NoDuplicateMembers]
        public ICollection<StaffPet> StaffPets
        {
            get { return _staffPets; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StaffPet>(value,
                    (s, e) => ((Entities.Common.Sample.IStaffPet)e.Item).StaffExtension = this);
                _staffPets = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.Sample.IStaffPet, StaffPet>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.Sample.IStaffPet)e.Item).StaffExtension = this;
                _staffPetsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.Sample.IStaffPet> Entities.Common.Sample.IStaffExtension.StaffPets
        {
            get { return _staffPetsCovariant; }
            set { StaffPets = new List<StaffPet>(value.Cast<StaffPet>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_staffPets != null) foreach (var item in _staffPets)
            {
                item.StaffExtension = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StaffExtensionMapper.SynchronizeTo(this, (Entities.Common.Sample.IStaffExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StaffExtensionMapper.MapTo(this, (Entities.Common.Sample.IStaffExtension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport.IsFirstPetOwnedDateSupported   { get { return true; } set { } }
        bool Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport.IsStaffPetPreferenceSupported  { get { return true; } set { } }
        bool Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport.IsStaffPetsSupported           { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.Sample.IStaffPet, bool> Entities.Common.Sample.IStaffExtensionSynchronizationSourceSupport.IsStaffPetIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<StaffExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var staffPetsValidator = new StaffPetPutPostRequestValidator();

            foreach (var item in instance.StaffPets)
            {
                var validationResult = staffPetsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the sample.StaffPet table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffPet : Entities.Common.Sample.IStaffPet, Entities.Common.Sample.IStaffPetSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.Sample.IStaffExtension _staffExtension;

        [IgnoreDataMember]
        Entities.Common.Sample.IStaffExtension Entities.Common.Sample.IStaffPet.StaffExtension
        {
            get { return _staffExtension; }
            set { SetStaffExtension(value); }
        }

        internal Entities.Common.Sample.IStaffExtension StaffExtension
        {
            set { SetStaffExtension(value); }
        }

        private void SetStaffExtension(Entities.Common.Sample.IStaffExtension value)
        {
            _staffExtension = value;
        }

        /// <summary>
        /// The pet's name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="petName"), NaturalKeyMember]
        public string PetName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStaffPet;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staffExtension == null || !_staffExtension.Equals(compareTo.StaffExtension))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.Sample.IStaffPet).PetName == null
                || !(this as Entities.Common.Sample.IStaffPet).PetName.Equals(compareTo.PetName)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffExtension != null)
                    hash = hash * 23 + _staffExtension.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.Sample.IStaffPet).PetName != null) 
                    hash = hash * 23 + (this as Entities.Common.Sample.IStaffPet).PetName.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication as to whether the pet has been spayed/neutered.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="isFixed")]
        public bool? IsFixed { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StaffPetMapper.SynchronizeTo(this, (Entities.Common.Sample.IStaffPet)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StaffPetMapper.MapTo(this, (Entities.Common.Sample.IStaffPet)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStaffPetSynchronizationSourceSupport.IsIsFixedSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPetPutPostRequestValidator : FluentValidation.AbstractValidator<StaffPet>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffPet> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the sample.StaffPetPreference table of the Staff aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StaffPetPreference : Entities.Common.Sample.IStaffPetPreference, Entities.Common.Sample.IStaffPetPreferenceSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.Sample.IStaffExtension _staffExtension;

        [IgnoreDataMember]
        Entities.Common.Sample.IStaffExtension Entities.Common.Sample.IStaffPetPreference.StaffExtension
        {
            get { return _staffExtension; }
            set { SetStaffExtension(value); }
        }

        internal Entities.Common.Sample.IStaffExtension StaffExtension
        {
            set { SetStaffExtension(value); }
        }

        private void SetStaffExtension(Entities.Common.Sample.IStaffExtension value)
        {
            _staffExtension = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStaffPetPreference;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_staffExtension == null || !_staffExtension.Equals(compareTo.StaffExtension))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_staffExtension != null)
                    hash = hash * 23 + _staffExtension.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The preferred maximum weight of a household pet.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maximumWeight")]
        public int MaximumWeight { get; set; }

        /// <summary>
        /// The preferred minimum weight of a household pet.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="minimumWeight")]
        public int MinimumWeight { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StaffPetPreferenceMapper.SynchronizeTo(this, (Entities.Common.Sample.IStaffPetPreference)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StaffPetPreferenceMapper.MapTo(this, (Entities.Common.Sample.IStaffPetPreference)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStaffPetPreferenceSynchronizationSourceSupport.IsMaximumWeightSupported  { get { return true; } set { } }
        bool Entities.Common.Sample.IStaffPetPreferenceSynchronizationSourceSupport.IsMinimumWeightSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StaffPetPreferencePutPostRequestValidator : FluentValidation.AbstractValidator<StaffPetPreference>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StaffPetPreference> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Applicant

namespace EdFi.Ods.Api.Models.Resources.Applicant.GrandBend.Applicant_MixedInclude2_Readable
{
    /// <summary>
    /// Represents a reference to the Applicant resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantReference
    {
        [DataMember(Name="applicantIdentifier"), NaturalKeyMember]
        public string ApplicantIdentifier { get; set; }

        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return ApplicantIdentifier != default(string) && EducationOrganizationId != default(int);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "Applicant",
                Href = $"/grand-bend/applicants/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new Common.Models.Domain.FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the grandbend.Applicant table of the Applicant aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class Applicant : Entities.Common.GrandBend.IApplicant, IHasETag, Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Applicant()
        {
            ApplicantAddresses = new List<ApplicantAddress>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Applicant resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EdFi.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EdFi.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EdFi.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EdFi.EducationOrganizationReference EducationOrganizationReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set
            {
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to an applicant.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="applicantIdentifier"), NaturalKeyMember]
        public string ApplicantIdentifier { get; set; }

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int Entities.Common.GrandBend.IApplicant.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.GrandBend.IApplicant;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
 
            // Standard Property
            if ((this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier == null
                || !(this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier.Equals(compareTo.ApplicantIdentifier)) 
                return false;
 
            // Referenced Property
            if ((this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId == null
                || !(this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId.Equals(compareTo.EducationOrganizationId)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier != null) 
                    hash = hash * 23 + (this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier.GetHashCode();
 
                //Referenced Property
                if ((this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="birthDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BirthDate { get; set; }

        // IS a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.CitizenshipStatusDescriptor
        {
            get { return null; }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.FirstName
        {
            get { return default(string); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.GenerationCodeSuffix
        {
            get { return default(string); }
            set { }
        }

        // IS a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.HighestCompletedLevelOfEducationDescriptor
        {
            get { return null; }
            set { }
        }

        // IS a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.HighlyQualifiedAcademicSubjectDescriptor
        {
            get { return null; }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        bool? Entities.Common.GrandBend.IApplicant.HighlyQualifiedTeacher
        {
            get { return default(bool?); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        bool? Entities.Common.GrandBend.IApplicant.HispanicLatinoEthnicity
        {
            get { return default(bool?); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.LastSurname
        {
            get { return default(string); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.LoginId
        {
            get { return default(string); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.MaidenName
        {
            get { return default(string); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.MiddleName
        {
            get { return default(string); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.PersonalTitlePrefix
        {
            get { return default(string); }
            set { }
        }

        // IS a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.SexDescriptor
        {
            get { return null; }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        decimal? Entities.Common.GrandBend.IApplicant.YearsOfPriorProfessionalExperience
        {
            get { return default(decimal?); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        decimal? Entities.Common.GrandBend.IApplicant.YearsOfPriorTeachingExperience
        {
            get { return default(decimal?); }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<ApplicantAddress> _applicantAddresses;
        private ICollection<Entities.Common.GrandBend.IApplicantAddress> _applicantAddressesCovariant;

        [DataMember(Name="addresses"), NoDuplicateMembers]
        public ICollection<ApplicantAddress> ApplicantAddresses
        {
            get { return _applicantAddresses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<ApplicantAddress>(value,
                    (s, e) => ((Entities.Common.GrandBend.IApplicantAddress)e.Item).Applicant = this);
                _applicantAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.GrandBend.IApplicantAddress, ApplicantAddress>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.GrandBend.IApplicantAddress)e.Item).Applicant = this;
                _applicantAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.GrandBend.IApplicantAddress> Entities.Common.GrandBend.IApplicant.ApplicantAddresses
        {
            get { return _applicantAddressesCovariant; }
            set { ApplicantAddresses = new List<ApplicantAddress>(value.Cast<ApplicantAddress>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_applicantAddresses != null) foreach (var item in _applicantAddresses)
            {
                item.Applicant = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.GrandBend.ApplicantMapper.SynchronizeTo(this, (Entities.Common.GrandBend.IApplicant)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.GrandBend.ApplicantMapper.MapTo(this, (Entities.Common.GrandBend.IApplicant)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsApplicantAddressesSupported                          { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsBirthDateSupported                                   { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsCitizenshipStatusDescriptorSupported                 { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsFirstNameSupported                                   { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsGenerationCodeSuffixSupported                        { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHighestCompletedLevelOfEducationDescriptorSupported  { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHighlyQualifiedAcademicSubjectDescriptorSupported    { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHighlyQualifiedTeacherSupported                      { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHispanicLatinoEthnicitySupported                     { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsLastSurnameSupported                                 { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsLoginIdSupported                                     { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsMaidenNameSupported                                  { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsMiddleNameSupported                                  { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsPersonalTitlePrefixSupported                         { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsSexDescriptorSupported                               { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsYearsOfPriorProfessionalExperienceSupported          { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsYearsOfPriorTeachingExperienceSupported              { get { return false; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.GrandBend.IApplicantAddress, bool> Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsApplicantAddressIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.GrandBend.IApplicant.EducationOrganizationResourceId 
        { 
            get { return null; }
            set { ImplicitEducationOrganizationReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.GrandBend.IApplicant.EducationOrganizationDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEducationOrganizationReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantPutPostRequestValidator : FluentValidation.AbstractValidator<Applicant>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<Applicant> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var applicantAddressesValidator = new ApplicantAddressPutPostRequestValidator();

            foreach (var item in instance.ApplicantAddresses)
            {
                var validationResult = applicantAddressesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the grandbend.ApplicantAddress table of the Applicant aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantAddress : Entities.Common.GrandBend.IApplicantAddress, Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.GrandBend.IApplicant _applicant;

        [IgnoreDataMember]
        Entities.Common.GrandBend.IApplicant Entities.Common.GrandBend.IApplicantAddress.Applicant
        {
            get { return _applicant; }
            set { SetApplicant(value); }
        }

        internal Entities.Common.GrandBend.IApplicant Applicant
        {
            set { SetApplicant(value); }
        }

        private void SetApplicant(Entities.Common.GrandBend.IApplicant value)
        {
            _applicant = value;
        }

        /// <summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressTypeDescriptor"), NaturalKeyMember]
        public string AddressTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.GrandBend.IApplicantAddress;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_applicant == null || !_applicant.Equals(compareTo.Applicant))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor == null
                || !(this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor.Equals(compareTo.AddressTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_applicant != null)
                    hash = hash * 23 + _applicant.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The apartment, room, or suite number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="apartmentRoomSuiteNumber")]
        public string ApartmentRoomSuiteNumber { get; set; }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        DateTime? Entities.Common.GrandBend.IApplicantAddress.BeginDate
        {
            get { return default(DateTime?); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicantAddress.BuildingSiteNumber
        {
            get { return default(string); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicantAddress.City
        {
            get { return default(string); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicantAddress.CountyFIPSCode
        {
            get { return default(string); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        DateTime? Entities.Common.GrandBend.IApplicantAddress.EndDate
        {
            get { return default(DateTime?); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicantAddress.Latitude
        {
            get { return default(string); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicantAddress.Longitude
        {
            get { return default(string); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicantAddress.NameOfCounty
        {
            get { return default(string); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicantAddress.PostalCode
        {
            get { return default(string); }
            set { }
        }

        // IS a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicantAddress.StateAbbreviationDescriptor
        {
            get { return null; }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicantAddress.StreetNumberName
        {
            get { return default(string); }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.GrandBend.ApplicantAddressMapper.SynchronizeTo(this, (Entities.Common.GrandBend.IApplicantAddress)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.GrandBend.ApplicantAddressMapper.MapTo(this, (Entities.Common.GrandBend.IApplicantAddress)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsApartmentRoomSuiteNumberSupported     { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsBeginDateSupported                    { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsBuildingSiteNumberSupported           { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsCitySupported                         { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsCountyFIPSCodeSupported               { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsEndDateSupported                      { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsLatitudeSupported                     { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsLongitudeSupported                    { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsNameOfCountySupported                 { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsPostalCodeSupported                   { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsStateAbbreviationDescriptorSupported  { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsStreetNumberNameSupported             { get { return false; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantAddressPutPostRequestValidator : FluentValidation.AbstractValidator<ApplicantAddress>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicantAddress> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Applicant

namespace EdFi.Ods.Api.Models.Resources.Applicant.GrandBend.Applicant_MixedInclude2_Writable
{
    /// <summary>
    /// Represents a reference to the Applicant resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantReference
    {
        [DataMember(Name="applicantIdentifier"), NaturalKeyMember]
        public string ApplicantIdentifier { get; set; }

        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return ApplicantIdentifier != default(string) && EducationOrganizationId != default(int);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "Applicant",
                Href = $"/grand-bend/applicants/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new Common.Models.Domain.FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the grandbend.Applicant table of the Applicant aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class Applicant : Entities.Common.GrandBend.IApplicant, IHasETag, Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Applicant()
        {
            ApplicantAddresses = new List<ApplicantAddress>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Applicant resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EdFi.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EdFi.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EdFi.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EdFi.EducationOrganizationReference EducationOrganizationReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set
            {
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to an applicant.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="applicantIdentifier"), NaturalKeyMember]
        public string ApplicantIdentifier { get; set; }

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int Entities.Common.GrandBend.IApplicant.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.GrandBend.IApplicant;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
 
            // Standard Property
            if ((this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier == null
                || !(this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier.Equals(compareTo.ApplicantIdentifier)) 
                return false;
 
            // Referenced Property
            if ((this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId == null
                || !(this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId.Equals(compareTo.EducationOrganizationId)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier != null) 
                    hash = hash * 23 + (this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier.GetHashCode();
 
                //Referenced Property
                if ((this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="birthDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BirthDate { get; set; }

        /// <summary>
        /// An indicator of whether or not the person is a U.S. citizen.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="citizenshipStatusDescriptor")]
        public string CitizenshipStatusDescriptor { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="highestCompletedLevelOfEducationDescriptor")]
        public string HighestCompletedLevelOfEducationDescriptor { get; set; }

        /// <summary>
        /// An applicant subject in which a teacher applicant is classified as highly qualified.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="highlyQualifiedAcademicSubjectDescriptor")]
        public string HighlyQualifiedAcademicSubjectDescriptor { get; set; }

        /// <summary>
        /// An indication of whether a teacher applicant is classified as highly qualified for his/her prospective assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections to be taught.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="highlyQualifiedTeacher")]
        public bool? HighlyQualifiedTeacher { get; set; }

        /// <summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="hispanicLatinoEthnicity")]
        public bool? HispanicLatinoEthnicity { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// The login ID for the user; used for security access control interface.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="loginId")]
        public string LoginId { get; set; }

        /// <summary>
        /// The person's maiden name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maidenName")]
        public string MaidenName { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }

        /// <summary>
        /// A person's gender.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="sexDescriptor")]
        public string SexDescriptor { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a similar professional position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorProfessionalExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorProfessionalExperience { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a teaching position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorTeachingExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorTeachingExperience { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<ApplicantAddress> _applicantAddresses;
        private ICollection<Entities.Common.GrandBend.IApplicantAddress> _applicantAddressesCovariant;

        [DataMember(Name="addresses"), NoDuplicateMembers]
        public ICollection<ApplicantAddress> ApplicantAddresses
        {
            get { return _applicantAddresses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<ApplicantAddress>(value,
                    (s, e) => ((Entities.Common.GrandBend.IApplicantAddress)e.Item).Applicant = this);
                _applicantAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.GrandBend.IApplicantAddress, ApplicantAddress>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.GrandBend.IApplicantAddress)e.Item).Applicant = this;
                _applicantAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.GrandBend.IApplicantAddress> Entities.Common.GrandBend.IApplicant.ApplicantAddresses
        {
            get { return _applicantAddressesCovariant; }
            set { ApplicantAddresses = new List<ApplicantAddress>(value.Cast<ApplicantAddress>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_applicantAddresses != null) foreach (var item in _applicantAddresses)
            {
                item.Applicant = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.GrandBend.ApplicantMapper.SynchronizeTo(this, (Entities.Common.GrandBend.IApplicant)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.GrandBend.ApplicantMapper.MapTo(this, (Entities.Common.GrandBend.IApplicant)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsApplicantAddressesSupported                          { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsBirthDateSupported                                   { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsCitizenshipStatusDescriptorSupported                 { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsFirstNameSupported                                   { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsGenerationCodeSuffixSupported                        { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHighestCompletedLevelOfEducationDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHighlyQualifiedAcademicSubjectDescriptorSupported    { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHighlyQualifiedTeacherSupported                      { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHispanicLatinoEthnicitySupported                     { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsLastSurnameSupported                                 { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsLoginIdSupported                                     { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsMaidenNameSupported                                  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsMiddleNameSupported                                  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsPersonalTitlePrefixSupported                         { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsSexDescriptorSupported                               { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsYearsOfPriorProfessionalExperienceSupported          { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsYearsOfPriorTeachingExperienceSupported              { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.GrandBend.IApplicantAddress, bool> Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsApplicantAddressIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.GrandBend.IApplicant.EducationOrganizationResourceId 
        { 
            get { return null; }
            set { ImplicitEducationOrganizationReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.GrandBend.IApplicant.EducationOrganizationDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEducationOrganizationReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantPutPostRequestValidator : FluentValidation.AbstractValidator<Applicant>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<Applicant> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var applicantAddressesValidator = new ApplicantAddressPutPostRequestValidator();

            foreach (var item in instance.ApplicantAddresses)
            {
                var validationResult = applicantAddressesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the grandbend.ApplicantAddress table of the Applicant aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantAddress : Entities.Common.GrandBend.IApplicantAddress, Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.GrandBend.IApplicant _applicant;

        [IgnoreDataMember]
        Entities.Common.GrandBend.IApplicant Entities.Common.GrandBend.IApplicantAddress.Applicant
        {
            get { return _applicant; }
            set { SetApplicant(value); }
        }

        internal Entities.Common.GrandBend.IApplicant Applicant
        {
            set { SetApplicant(value); }
        }

        private void SetApplicant(Entities.Common.GrandBend.IApplicant value)
        {
            _applicant = value;
        }

        /// <summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressTypeDescriptor"), NaturalKeyMember]
        public string AddressTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.GrandBend.IApplicantAddress;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_applicant == null || !_applicant.Equals(compareTo.Applicant))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor == null
                || !(this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor.Equals(compareTo.AddressTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_applicant != null)
                    hash = hash * 23 + _applicant.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicantAddress.ApartmentRoomSuiteNumber
        {
            get { return default(string); }
            set { }
        }

        /// <summary>
        /// The month, day, and year the address became effective.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The number of the building on the site, if more than one building shares the same address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="buildingSiteNumber")]
        public string BuildingSiteNumber { get; set; }

        /// <summary>
        /// The name of the city in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="city")]
        public string City { get; set; }

        /// <summary>
        /// The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \"first-order subdivisions\" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="countyFIPSCode")]
        public string CountyFIPSCode { get; set; }

        /// <summary>
        /// The month, day, and year the address ceased to be in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }

        /// <summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in                        'which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nameOfCounty")]
        public string NameOfCounty { get; set; }

        /// <summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="stateAbbreviationDescriptor")]
        public string StateAbbreviationDescriptor { get; set; }

        /// <summary>
        /// The street number and street name or post office box number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="streetNumberName")]
        public string StreetNumberName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.GrandBend.ApplicantAddressMapper.SynchronizeTo(this, (Entities.Common.GrandBend.IApplicantAddress)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.GrandBend.ApplicantAddressMapper.MapTo(this, (Entities.Common.GrandBend.IApplicantAddress)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsApartmentRoomSuiteNumberSupported     { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsBeginDateSupported                    { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsBuildingSiteNumberSupported           { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsCitySupported                         { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsCountyFIPSCodeSupported               { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsEndDateSupported                      { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsLatitudeSupported                     { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsLongitudeSupported                    { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsNameOfCountySupported                 { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsPostalCodeSupported                   { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsStateAbbreviationDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsStreetNumberNameSupported             { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantAddressPutPostRequestValidator : FluentValidation.AbstractValidator<ApplicantAddress>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicantAddress> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Applicant

namespace EdFi.Ods.Api.Models.Resources.Applicant.GrandBend.Applicant_MixedInclude1_Readable
{
    /// <summary>
    /// Represents a reference to the Applicant resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantReference
    {
        [DataMember(Name="applicantIdentifier"), NaturalKeyMember]
        public string ApplicantIdentifier { get; set; }

        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return ApplicantIdentifier != default(string) && EducationOrganizationId != default(int);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "Applicant",
                Href = $"/grand-bend/applicants/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new Common.Models.Domain.FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the grandbend.Applicant table of the Applicant aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class Applicant : Entities.Common.GrandBend.IApplicant, IHasETag, Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Applicant()
        {
            ApplicantAddresses = new List<ApplicantAddress>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Applicant resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EdFi.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EdFi.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EdFi.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EdFi.EducationOrganizationReference EducationOrganizationReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set
            {
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to an applicant.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="applicantIdentifier"), NaturalKeyMember]
        public string ApplicantIdentifier { get; set; }

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int Entities.Common.GrandBend.IApplicant.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.GrandBend.IApplicant;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
 
            // Standard Property
            if ((this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier == null
                || !(this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier.Equals(compareTo.ApplicantIdentifier)) 
                return false;
 
            // Referenced Property
            if ((this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId == null
                || !(this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId.Equals(compareTo.EducationOrganizationId)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier != null) 
                    hash = hash * 23 + (this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier.GetHashCode();
 
                //Referenced Property
                if ((this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="birthDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BirthDate { get; set; }

        // IS a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.CitizenshipStatusDescriptor
        {
            get { return null; }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.FirstName
        {
            get { return default(string); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.GenerationCodeSuffix
        {
            get { return default(string); }
            set { }
        }

        // IS a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.HighestCompletedLevelOfEducationDescriptor
        {
            get { return null; }
            set { }
        }

        // IS a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.HighlyQualifiedAcademicSubjectDescriptor
        {
            get { return null; }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        bool? Entities.Common.GrandBend.IApplicant.HighlyQualifiedTeacher
        {
            get { return default(bool?); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        bool? Entities.Common.GrandBend.IApplicant.HispanicLatinoEthnicity
        {
            get { return default(bool?); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.LastSurname
        {
            get { return default(string); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.LoginId
        {
            get { return default(string); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.MaidenName
        {
            get { return default(string); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.MiddleName
        {
            get { return default(string); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.PersonalTitlePrefix
        {
            get { return default(string); }
            set { }
        }

        // IS a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicant.SexDescriptor
        {
            get { return null; }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        decimal? Entities.Common.GrandBend.IApplicant.YearsOfPriorProfessionalExperience
        {
            get { return default(decimal?); }
            set { }
        }

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        decimal? Entities.Common.GrandBend.IApplicant.YearsOfPriorTeachingExperience
        {
            get { return default(decimal?); }
            set { }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<ApplicantAddress> _applicantAddresses;
        private ICollection<Entities.Common.GrandBend.IApplicantAddress> _applicantAddressesCovariant;

        [DataMember(Name="addresses"), NoDuplicateMembers]
        public ICollection<ApplicantAddress> ApplicantAddresses
        {
            get { return _applicantAddresses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<ApplicantAddress>(value,
                    (s, e) => ((Entities.Common.GrandBend.IApplicantAddress)e.Item).Applicant = this);
                _applicantAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.GrandBend.IApplicantAddress, ApplicantAddress>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.GrandBend.IApplicantAddress)e.Item).Applicant = this;
                _applicantAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.GrandBend.IApplicantAddress> Entities.Common.GrandBend.IApplicant.ApplicantAddresses
        {
            get { return _applicantAddressesCovariant; }
            set { ApplicantAddresses = new List<ApplicantAddress>(value.Cast<ApplicantAddress>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_applicantAddresses != null) foreach (var item in _applicantAddresses)
            {
                item.Applicant = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.GrandBend.ApplicantMapper.SynchronizeTo(this, (Entities.Common.GrandBend.IApplicant)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.GrandBend.ApplicantMapper.MapTo(this, (Entities.Common.GrandBend.IApplicant)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsApplicantAddressesSupported                          { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsBirthDateSupported                                   { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsCitizenshipStatusDescriptorSupported                 { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsFirstNameSupported                                   { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsGenerationCodeSuffixSupported                        { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHighestCompletedLevelOfEducationDescriptorSupported  { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHighlyQualifiedAcademicSubjectDescriptorSupported    { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHighlyQualifiedTeacherSupported                      { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHispanicLatinoEthnicitySupported                     { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsLastSurnameSupported                                 { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsLoginIdSupported                                     { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsMaidenNameSupported                                  { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsMiddleNameSupported                                  { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsPersonalTitlePrefixSupported                         { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsSexDescriptorSupported                               { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsYearsOfPriorProfessionalExperienceSupported          { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsYearsOfPriorTeachingExperienceSupported              { get { return false; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.GrandBend.IApplicantAddress, bool> Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsApplicantAddressIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.GrandBend.IApplicant.EducationOrganizationResourceId 
        { 
            get { return null; }
            set { ImplicitEducationOrganizationReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.GrandBend.IApplicant.EducationOrganizationDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEducationOrganizationReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantPutPostRequestValidator : FluentValidation.AbstractValidator<Applicant>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<Applicant> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var applicantAddressesValidator = new ApplicantAddressPutPostRequestValidator();

            foreach (var item in instance.ApplicantAddresses)
            {
                var validationResult = applicantAddressesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the grandbend.ApplicantAddress table of the Applicant aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantAddress : Entities.Common.GrandBend.IApplicantAddress, Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.GrandBend.IApplicant _applicant;

        [IgnoreDataMember]
        Entities.Common.GrandBend.IApplicant Entities.Common.GrandBend.IApplicantAddress.Applicant
        {
            get { return _applicant; }
            set { SetApplicant(value); }
        }

        internal Entities.Common.GrandBend.IApplicant Applicant
        {
            set { SetApplicant(value); }
        }

        private void SetApplicant(Entities.Common.GrandBend.IApplicant value)
        {
            _applicant = value;
        }

        /// <summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressTypeDescriptor"), NaturalKeyMember]
        public string AddressTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.GrandBend.IApplicantAddress;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_applicant == null || !_applicant.Equals(compareTo.Applicant))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor == null
                || !(this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor.Equals(compareTo.AddressTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_applicant != null)
                    hash = hash * 23 + _applicant.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        string Entities.Common.GrandBend.IApplicantAddress.ApartmentRoomSuiteNumber
        {
            get { return default(string); }
            set { }
        }

        /// <summary>
        /// The month, day, and year the address became effective.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The number of the building on the site, if more than one building shares the same address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="buildingSiteNumber")]
        public string BuildingSiteNumber { get; set; }

        /// <summary>
        /// The name of the city in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="city")]
        public string City { get; set; }

        /// <summary>
        /// The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \"first-order subdivisions\" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="countyFIPSCode")]
        public string CountyFIPSCode { get; set; }

        /// <summary>
        /// The month, day, and year the address ceased to be in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }

        /// <summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in                        'which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nameOfCounty")]
        public string NameOfCounty { get; set; }

        /// <summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="stateAbbreviationDescriptor")]
        public string StateAbbreviationDescriptor { get; set; }

        /// <summary>
        /// The street number and street name or post office box number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="streetNumberName")]
        public string StreetNumberName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.GrandBend.ApplicantAddressMapper.SynchronizeTo(this, (Entities.Common.GrandBend.IApplicantAddress)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.GrandBend.ApplicantAddressMapper.MapTo(this, (Entities.Common.GrandBend.IApplicantAddress)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsApartmentRoomSuiteNumberSupported     { get { return false; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsBeginDateSupported                    { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsBuildingSiteNumberSupported           { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsCitySupported                         { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsCountyFIPSCodeSupported               { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsEndDateSupported                      { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsLatitudeSupported                     { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsLongitudeSupported                    { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsNameOfCountySupported                 { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsPostalCodeSupported                   { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsStateAbbreviationDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsStreetNumberNameSupported             { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantAddressPutPostRequestValidator : FluentValidation.AbstractValidator<ApplicantAddress>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicantAddress> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Applicant

namespace EdFi.Ods.Api.Models.Resources.Applicant.GrandBend.Applicant_MixedInclude1_Writable
{
    /// <summary>
    /// Represents a reference to the Applicant resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantReference
    {
        [DataMember(Name="applicantIdentifier"), NaturalKeyMember]
        public string ApplicantIdentifier { get; set; }

        [DataMember(Name="educationOrganizationId"), NaturalKeyMember]
        public int EducationOrganizationId { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return ApplicantIdentifier != default(string) && EducationOrganizationId != default(int);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "Applicant",
                Href = $"/grand-bend/applicants/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new Common.Models.Domain.FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the grandbend.Applicant table of the Applicant aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class Applicant : Entities.Common.GrandBend.IApplicant, IHasETag, Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Applicant()
        {
            ApplicantAddresses = new List<ApplicantAddress>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Applicant resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------

        private bool _educationOrganizationReferenceExplicitlyAssigned;
        private EducationOrganization.EdFi.EducationOrganizationReference _educationOrganizationReference;
        private EducationOrganization.EdFi.EducationOrganizationReference ImplicitEducationOrganizationReference
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_educationOrganizationReference == null && !_educationOrganizationReferenceExplicitlyAssigned)
                    _educationOrganizationReference = new EducationOrganization.EdFi.EducationOrganizationReference();

                return _educationOrganizationReference;
            }
        }

        [DataMember(Name="educationOrganizationReference")][NaturalKeyMember]
        public EducationOrganization.EdFi.EducationOrganizationReference EducationOrganizationReference
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (ImplicitEducationOrganizationReference != null
                    && (_educationOrganizationReferenceExplicitlyAssigned || _SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference;

                return null;
            }
            set
            {
                _educationOrganizationReferenceExplicitlyAssigned = true;
                _educationOrganizationReference = value;
            }
        }
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to an applicant.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="applicantIdentifier"), NaturalKeyMember]
        public string ApplicantIdentifier { get; set; }

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        // IS in a reference, NOT a lookup column 
        int Entities.Common.GrandBend.IApplicant.EducationOrganizationId
        {
            get
            {
                if (ImplicitEducationOrganizationReference != null
                    && (_SuspendReferenceAssignmentCheck || ImplicitEducationOrganizationReference.IsReferenceFullyDefined()))
                    return ImplicitEducationOrganizationReference.EducationOrganizationId;

                return default(int);
            }
            set
            {
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced

                // EducationOrganization
                _educationOrganizationReferenceExplicitlyAssigned = false;
                ImplicitEducationOrganizationReference.EducationOrganizationId = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.GrandBend.IApplicant;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
 
            // Standard Property
            if ((this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier == null
                || !(this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier.Equals(compareTo.ApplicantIdentifier)) 
                return false;
 
            // Referenced Property
            if ((this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId == null
                || !(this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId.Equals(compareTo.EducationOrganizationId)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
 
                // Standard Property
                if ((this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier != null) 
                    hash = hash * 23 + (this as Entities.Common.GrandBend.IApplicant).ApplicantIdentifier.GetHashCode();
 
                //Referenced Property
                if ((this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId != null) 
                    hash = hash * 23 + (this as Entities.Common.GrandBend.IApplicant).EducationOrganizationId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="birthDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BirthDate { get; set; }

        /// <summary>
        /// An indicator of whether or not the person is a U.S. citizen.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="citizenshipStatusDescriptor")]
        public string CitizenshipStatusDescriptor { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="highestCompletedLevelOfEducationDescriptor")]
        public string HighestCompletedLevelOfEducationDescriptor { get; set; }

        /// <summary>
        /// An applicant subject in which a teacher applicant is classified as highly qualified.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="highlyQualifiedAcademicSubjectDescriptor")]
        public string HighlyQualifiedAcademicSubjectDescriptor { get; set; }

        /// <summary>
        /// An indication of whether a teacher applicant is classified as highly qualified for his/her prospective assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections to be taught.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="highlyQualifiedTeacher")]
        public bool? HighlyQualifiedTeacher { get; set; }

        /// <summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="hispanicLatinoEthnicity")]
        public bool? HispanicLatinoEthnicity { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// The login ID for the user; used for security access control interface.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="loginId")]
        public string LoginId { get; set; }

        /// <summary>
        /// The person's maiden name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maidenName")]
        public string MaidenName { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }

        /// <summary>
        /// A person's gender.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="sexDescriptor")]
        public string SexDescriptor { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a similar professional position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorProfessionalExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorProfessionalExperience { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a teaching position in one or more education institutions.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="yearsOfPriorTeachingExperience")][Range(typeof(decimal), "-999.99", "999.99")]
        public decimal? YearsOfPriorTeachingExperience { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<ApplicantAddress> _applicantAddresses;
        private ICollection<Entities.Common.GrandBend.IApplicantAddress> _applicantAddressesCovariant;

        [DataMember(Name="addresses"), NoDuplicateMembers]
        public ICollection<ApplicantAddress> ApplicantAddresses
        {
            get { return _applicantAddresses; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<ApplicantAddress>(value,
                    (s, e) => ((Entities.Common.GrandBend.IApplicantAddress)e.Item).Applicant = this);
                _applicantAddresses = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.GrandBend.IApplicantAddress, ApplicantAddress>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.GrandBend.IApplicantAddress)e.Item).Applicant = this;
                _applicantAddressesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.GrandBend.IApplicantAddress> Entities.Common.GrandBend.IApplicant.ApplicantAddresses
        {
            get { return _applicantAddressesCovariant; }
            set { ApplicantAddresses = new List<ApplicantAddress>(value.Cast<ApplicantAddress>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_applicantAddresses != null) foreach (var item in _applicantAddresses)
            {
                item.Applicant = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.GrandBend.ApplicantMapper.SynchronizeTo(this, (Entities.Common.GrandBend.IApplicant)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.GrandBend.ApplicantMapper.MapTo(this, (Entities.Common.GrandBend.IApplicant)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsApplicantAddressesSupported                          { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsBirthDateSupported                                   { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsCitizenshipStatusDescriptorSupported                 { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsFirstNameSupported                                   { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsGenerationCodeSuffixSupported                        { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHighestCompletedLevelOfEducationDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHighlyQualifiedAcademicSubjectDescriptorSupported    { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHighlyQualifiedTeacherSupported                      { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsHispanicLatinoEthnicitySupported                     { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsLastSurnameSupported                                 { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsLoginIdSupported                                     { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsMaidenNameSupported                                  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsMiddleNameSupported                                  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsPersonalTitlePrefixSupported                         { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsSexDescriptorSupported                               { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsYearsOfPriorProfessionalExperienceSupported          { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsYearsOfPriorTeachingExperienceSupported              { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.GrandBend.IApplicantAddress, bool> Entities.Common.GrandBend.IApplicantSynchronizationSourceSupport.IsApplicantAddressIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        Guid? Entities.Common.GrandBend.IApplicant.EducationOrganizationResourceId 
        { 
            get { return null; }
            set { ImplicitEducationOrganizationReference.ResourceId = value ?? default(Guid); }
        }

        string Entities.Common.GrandBend.IApplicant.EducationOrganizationDiscriminator
        {
            // Not supported for Resources
            get { return null; }
            set { ImplicitEducationOrganizationReference.Discriminator = value; }
        }


        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantPutPostRequestValidator : FluentValidation.AbstractValidator<Applicant>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<Applicant> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var applicantAddressesValidator = new ApplicantAddressPutPostRequestValidator();

            foreach (var item in instance.ApplicantAddresses)
            {
                var validationResult = applicantAddressesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the grandbend.ApplicantAddress table of the Applicant aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class ApplicantAddress : Entities.Common.GrandBend.IApplicantAddress, Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.GrandBend.IApplicant _applicant;

        [IgnoreDataMember]
        Entities.Common.GrandBend.IApplicant Entities.Common.GrandBend.IApplicantAddress.Applicant
        {
            get { return _applicant; }
            set { SetApplicant(value); }
        }

        internal Entities.Common.GrandBend.IApplicant Applicant
        {
            set { SetApplicant(value); }
        }

        private void SetApplicant(Entities.Common.GrandBend.IApplicant value)
        {
            _applicant = value;
        }

        /// <summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="addressTypeDescriptor"), NaturalKeyMember]
        public string AddressTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.GrandBend.IApplicantAddress;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_applicant == null || !_applicant.Equals(compareTo.Applicant))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor == null
                || !(this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor.Equals(compareTo.AddressTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_applicant != null)
                    hash = hash * 23 + _applicant.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.GrandBend.IApplicantAddress).AddressTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The apartment, room, or suite number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="apartmentRoomSuiteNumber")]
        public string ApartmentRoomSuiteNumber { get; set; }

        /// <summary>
        /// The month, day, and year the address became effective.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="beginDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The number of the building on the site, if more than one building shares the same address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="buildingSiteNumber")]
        public string BuildingSiteNumber { get; set; }

        /// <summary>
        /// The name of the city in which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="city")]
        public string City { get; set; }

        /// <summary>
        /// The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \"first-order subdivisions\" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="countyFIPSCode")]
        public string CountyFIPSCode { get; set; }

        /// <summary>
        /// The month, day, and year the address ceased to be in effect.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="endDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }

        /// <summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in                        'which an address is located.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="nameOfCounty")]
        public string NameOfCounty { get; set; }

        /// <summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="stateAbbreviationDescriptor")]
        public string StateAbbreviationDescriptor { get; set; }

        /// <summary>
        /// The street number and street name or post office box number of an address.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="streetNumberName")]
        public string StreetNumberName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.GrandBend.ApplicantAddressMapper.SynchronizeTo(this, (Entities.Common.GrandBend.IApplicantAddress)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.GrandBend.ApplicantAddressMapper.MapTo(this, (Entities.Common.GrandBend.IApplicantAddress)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsApartmentRoomSuiteNumberSupported     { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsBeginDateSupported                    { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsBuildingSiteNumberSupported           { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsCitySupported                         { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsCountyFIPSCodeSupported               { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsEndDateSupported                      { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsLatitudeSupported                     { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsLongitudeSupported                    { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsNameOfCountySupported                 { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsPostalCodeSupported                   { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsStateAbbreviationDescriptorSupported  { get { return true; } set { } }
        bool Entities.Common.GrandBend.IApplicantAddressSynchronizationSourceSupport.IsStreetNumberNameSupported             { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class ApplicantAddressPutPostRequestValidator : FluentValidation.AbstractValidator<ApplicantAddress>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<ApplicantAddress> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Student

namespace EdFi.Ods.Api.Models.Resources.Student.EdFi.Student_Include_All_Readable
{
    /// <summary>
    /// Represents a reference to the Student resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class StudentReference
    {
        [DataMember(Name="studentUniqueId"), NaturalKeyMember]
        public string StudentUniqueId { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return StudentUniqueId != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "Student",
                Href = $"/ed-fi/students/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new Common.Models.Domain.FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.Student table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class Student : Entities.Common.EdFi.IStudent, IHasETag, Entities.Common.EdFi.IStudentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Student()
        {
            StudentIdentificationDocuments = new List<StudentIdentificationDocument>();
            StudentOtherNames = new List<StudentOtherName>();
            StudentPersonalIdentificationDocuments = new List<StudentPersonalIdentificationDocument>();
            StudentVisas = new List<StudentVisa>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Student resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="studentUniqueId"), NaturalKeyMember, UniqueId]
        public string StudentUniqueId { get; set; }

        string IIdentifiablePerson.UniqueId { get { return StudentUniqueId; } }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStudent;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Property
            if ((this as Entities.Common.EdFi.IStudent).StudentUniqueId == null
                || !(this as Entities.Common.EdFi.IStudent).StudentUniqueId.Equals(compareTo.StudentUniqueId)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Property
                if ((this as Entities.Common.EdFi.IStudent).StudentUniqueId != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStudent).StudentUniqueId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The city the student was born in.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="birthCity")]
        public string BirthCity { get; set; }

        /// <summary>
        /// The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="birthCountryDescriptor")]
        public string BirthCountryDescriptor { get; set; }

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="birthDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime BirthDate { get; set; }

        /// <summary>
        /// For students born outside of the U.S., the Province or jurisdiction in which an individual is born.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="birthInternationalProvince")]
        public string BirthInternationalProvince { get; set; }

        /// <summary>
        /// A person's gender at birth.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="birthSexDescriptor")]
        public string BirthSexDescriptor { get; set; }

        /// <summary>
        /// The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="birthStateAbbreviationDescriptor")]
        public string BirthStateAbbreviationDescriptor { get; set; }

        /// <summary>
        /// An indicator of whether or not the person is a U.S. citizen.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="citizenshipStatusDescriptor")]
        public string CitizenshipStatusDescriptor { get; set; }

        /// <summary>
        /// For students born outside of the U.S., the date the student entered the U.S.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="dateEnteredUS")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? DateEnteredUS { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// The person's maiden name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maidenName")]
        public string MaidenName { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.)
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="multipleBirthStatus")]
        public bool? MultipleBirthStatus { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Student", "Student")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StudentIdentificationDocument> _studentIdentificationDocuments;
        private ICollection<Entities.Common.EdFi.IStudentIdentificationDocument> _studentIdentificationDocumentsCovariant;

        [DataMember(Name="identificationDocuments"), NoDuplicateMembers]
        public ICollection<StudentIdentificationDocument> StudentIdentificationDocuments
        {
            get { return _studentIdentificationDocuments; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StudentIdentificationDocument>(value,
                    (s, e) => ((Entities.Common.EdFi.IStudentIdentificationDocument)e.Item).Student = this);
                _studentIdentificationDocuments = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStudentIdentificationDocument, StudentIdentificationDocument>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStudentIdentificationDocument)e.Item).Student = this;
                _studentIdentificationDocumentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStudentIdentificationDocument> Entities.Common.EdFi.IStudent.StudentIdentificationDocuments
        {
            get { return _studentIdentificationDocumentsCovariant; }
            set { StudentIdentificationDocuments = new List<StudentIdentificationDocument>(value.Cast<StudentIdentificationDocument>()); }
        }

        private ICollection<StudentOtherName> _studentOtherNames;
        private ICollection<Entities.Common.EdFi.IStudentOtherName> _studentOtherNamesCovariant;

        [DataMember(Name="otherNames"), NoDuplicateMembers]
        public ICollection<StudentOtherName> StudentOtherNames
        {
            get { return _studentOtherNames; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StudentOtherName>(value,
                    (s, e) => ((Entities.Common.EdFi.IStudentOtherName)e.Item).Student = this);
                _studentOtherNames = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStudentOtherName, StudentOtherName>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStudentOtherName)e.Item).Student = this;
                _studentOtherNamesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStudentOtherName> Entities.Common.EdFi.IStudent.StudentOtherNames
        {
            get { return _studentOtherNamesCovariant; }
            set { StudentOtherNames = new List<StudentOtherName>(value.Cast<StudentOtherName>()); }
        }

        private ICollection<StudentPersonalIdentificationDocument> _studentPersonalIdentificationDocuments;
        private ICollection<Entities.Common.EdFi.IStudentPersonalIdentificationDocument> _studentPersonalIdentificationDocumentsCovariant;

        [DataMember(Name="personalIdentificationDocuments"), NoDuplicateMembers]
        public ICollection<StudentPersonalIdentificationDocument> StudentPersonalIdentificationDocuments
        {
            get { return _studentPersonalIdentificationDocuments; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StudentPersonalIdentificationDocument>(value,
                    (s, e) => ((Entities.Common.EdFi.IStudentPersonalIdentificationDocument)e.Item).Student = this);
                _studentPersonalIdentificationDocuments = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStudentPersonalIdentificationDocument, StudentPersonalIdentificationDocument>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStudentPersonalIdentificationDocument)e.Item).Student = this;
                _studentPersonalIdentificationDocumentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStudentPersonalIdentificationDocument> Entities.Common.EdFi.IStudent.StudentPersonalIdentificationDocuments
        {
            get { return _studentPersonalIdentificationDocumentsCovariant; }
            set { StudentPersonalIdentificationDocuments = new List<StudentPersonalIdentificationDocument>(value.Cast<StudentPersonalIdentificationDocument>()); }
        }

        private ICollection<StudentVisa> _studentVisas;
        private ICollection<Entities.Common.EdFi.IStudentVisa> _studentVisasCovariant;

        [DataMember(Name="visas"), NoDuplicateMembers]
        public ICollection<StudentVisa> StudentVisas
        {
            get { return _studentVisas; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StudentVisa>(value,
                    (s, e) => ((Entities.Common.EdFi.IStudentVisa)e.Item).Student = this);
                _studentVisas = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStudentVisa, StudentVisa>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStudentVisa)e.Item).Student = this;
                _studentVisasCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStudentVisa> Entities.Common.EdFi.IStudent.StudentVisas
        {
            get { return _studentVisasCovariant; }
            set { StudentVisas = new List<StudentVisa>(value.Cast<StudentVisa>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_studentIdentificationDocuments != null) foreach (var item in _studentIdentificationDocuments)
            {
                item.Student = this;
            }

            if (_studentOtherNames != null) foreach (var item in _studentOtherNames)
            {
                item.Student = this;
            }

            if (_studentPersonalIdentificationDocuments != null) foreach (var item in _studentPersonalIdentificationDocuments)
            {
                item.Student = this;
            }

            if (_studentVisas != null) foreach (var item in _studentVisas)
            {
                item.Student = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StudentMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStudent)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StudentMapper.MapTo(this, (Entities.Common.EdFi.IStudent)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsBirthCitySupported                               { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsBirthCountryDescriptorSupported                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsBirthDateSupported                               { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsBirthInternationalProvinceSupported              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsBirthSexDescriptorSupported                      { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsBirthStateAbbreviationDescriptorSupported        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsCitizenshipStatusDescriptorSupported             { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsDateEnteredUSSupported                           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsFirstNameSupported                               { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsGenerationCodeSuffixSupported                    { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsLastSurnameSupported                             { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsMaidenNameSupported                              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsMiddleNameSupported                              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsMultipleBirthStatusSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsPersonalTitlePrefixSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsStudentIdentificationDocumentsSupported          { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsStudentOtherNamesSupported                       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsStudentPersonalIdentificationDocumentsSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsStudentUniqueIdSupported                         { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsStudentVisasSupported                            { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.EdFi.IStudentIdentificationDocument, bool> Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsStudentIdentificationDocumentIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStudentOtherName, bool> Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsStudentOtherNameIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStudentPersonalIdentificationDocument, bool> Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsStudentPersonalIdentificationDocumentIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStudentVisa, bool> Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsStudentVisaIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StudentPutPostRequestValidator : FluentValidation.AbstractValidator<Student>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<Student> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var studentIdentificationDocumentsValidator = new StudentIdentificationDocumentPutPostRequestValidator();

            foreach (var item in instance.StudentIdentificationDocuments)
            {
                var validationResult = studentIdentificationDocumentsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var studentOtherNamesValidator = new StudentOtherNamePutPostRequestValidator();

            foreach (var item in instance.StudentOtherNames)
            {
                var validationResult = studentOtherNamesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var studentPersonalIdentificationDocumentsValidator = new StudentPersonalIdentificationDocumentPutPostRequestValidator();

            foreach (var item in instance.StudentPersonalIdentificationDocuments)
            {
                var validationResult = studentPersonalIdentificationDocumentsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var studentVisasValidator = new StudentVisaPutPostRequestValidator();

            foreach (var item in instance.StudentVisas)
            {
                var validationResult = studentVisasValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StudentIdentificationDocument table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StudentIdentificationDocument : Entities.Common.EdFi.IStudentIdentificationDocument, Entities.Common.EdFi.IStudentIdentificationDocumentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStudent _student;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStudent Entities.Common.EdFi.IStudentIdentificationDocument.Student
        {
            get { return _student; }
            set { SetStudent(value); }
        }

        internal Entities.Common.EdFi.IStudent Student
        {
            set { SetStudent(value); }
        }

        private void SetStudent(Entities.Common.EdFi.IStudent value)
        {
            _student = value;
        }

        /// <summary>
        /// The primary function of the document used for establishing identity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="identificationDocumentUseDescriptor"), NaturalKeyMember]
        public string IdentificationDocumentUseDescriptor { get; set; }

        /// <summary>
        /// The category of the document relative to its purpose.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="personalInformationVerificationDescriptor"), NaturalKeyMember]
        public string PersonalInformationVerificationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStudentIdentificationDocument;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_student == null || !_student.Equals(compareTo.Student))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStudentIdentificationDocument).IdentificationDocumentUseDescriptor == null
                || !(this as Entities.Common.EdFi.IStudentIdentificationDocument).IdentificationDocumentUseDescriptor.Equals(compareTo.IdentificationDocumentUseDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStudentIdentificationDocument).PersonalInformationVerificationDescriptor == null
                || !(this as Entities.Common.EdFi.IStudentIdentificationDocument).PersonalInformationVerificationDescriptor.Equals(compareTo.PersonalInformationVerificationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_student != null)
                    hash = hash * 23 + _student.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStudentIdentificationDocument).IdentificationDocumentUseDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStudentIdentificationDocument).IdentificationDocumentUseDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStudentIdentificationDocument).PersonalInformationVerificationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStudentIdentificationDocument).PersonalInformationVerificationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The day when the document  expires, if null then never expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentExpirationDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? DocumentExpirationDate { get; set; }

        /// <summary>
        /// The title of the document given by the issuer.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentTitle")]
        public string DocumentTitle { get; set; }

        /// <summary>
        /// Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="issuerCountryDescriptor")]
        public string IssuerCountryDescriptor { get; set; }

        /// <summary>
        /// The unique identifier on the issuer's identification system.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerDocumentIdentificationCode")]
        public string IssuerDocumentIdentificationCode { get; set; }

        /// <summary>
        /// Name of the entity or institution that issued the document.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Student", "StudentIdentificationDocument")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StudentIdentificationDocumentMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStudentIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StudentIdentificationDocumentMapper.MapTo(this, (Entities.Common.EdFi.IStudentIdentificationDocument)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStudentIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported                        { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StudentIdentificationDocumentPutPostRequestValidator : FluentValidation.AbstractValidator<StudentIdentificationDocument>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StudentIdentificationDocument> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StudentOtherName table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StudentOtherName : Entities.Common.EdFi.IStudentOtherName, Entities.Common.EdFi.IStudentOtherNameSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStudent _student;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStudent Entities.Common.EdFi.IStudentOtherName.Student
        {
            get { return _student; }
            set { SetStudent(value); }
        }

        internal Entities.Common.EdFi.IStudent Student
        {
            set { SetStudent(value); }
        }

        private void SetStudent(Entities.Common.EdFi.IStudent value)
        {
            _student = value;
        }

        /// <summary>
        /// The types of alternate names for a person.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="otherNameTypeDescriptor"), NaturalKeyMember]
        public string OtherNameTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStudentOtherName;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_student == null || !_student.Equals(compareTo.Student))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStudentOtherName).OtherNameTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStudentOtherName).OtherNameTypeDescriptor.Equals(compareTo.OtherNameTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_student != null)
                    hash = hash * 23 + _student.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStudentOtherName).OtherNameTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStudentOtherName).OtherNameTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Student", "StudentOtherName")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StudentOtherNameMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStudentOtherName)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StudentOtherNameMapper.MapTo(this, (Entities.Common.EdFi.IStudentOtherName)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStudentOtherNameSynchronizationSourceSupport.IsFirstNameSupported             { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentOtherNameSynchronizationSourceSupport.IsGenerationCodeSuffixSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentOtherNameSynchronizationSourceSupport.IsLastSurnameSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentOtherNameSynchronizationSourceSupport.IsMiddleNameSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentOtherNameSynchronizationSourceSupport.IsPersonalTitlePrefixSupported   { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StudentOtherNamePutPostRequestValidator : FluentValidation.AbstractValidator<StudentOtherName>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StudentOtherName> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StudentPersonalIdentificationDocument table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StudentPersonalIdentificationDocument : Entities.Common.EdFi.IStudentPersonalIdentificationDocument, Entities.Common.EdFi.IStudentPersonalIdentificationDocumentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStudent _student;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStudent Entities.Common.EdFi.IStudentPersonalIdentificationDocument.Student
        {
            get { return _student; }
            set { SetStudent(value); }
        }

        internal Entities.Common.EdFi.IStudent Student
        {
            set { SetStudent(value); }
        }

        private void SetStudent(Entities.Common.EdFi.IStudent value)
        {
            _student = value;
        }

        /// <summary>
        /// The primary function of the document used for establishing identity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="identificationDocumentUseDescriptor"), NaturalKeyMember]
        public string IdentificationDocumentUseDescriptor { get; set; }

        /// <summary>
        /// The category of the document relative to its purpose.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="personalInformationVerificationDescriptor"), NaturalKeyMember]
        public string PersonalInformationVerificationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStudentPersonalIdentificationDocument;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_student == null || !_student.Equals(compareTo.Student))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStudentPersonalIdentificationDocument).IdentificationDocumentUseDescriptor == null
                || !(this as Entities.Common.EdFi.IStudentPersonalIdentificationDocument).IdentificationDocumentUseDescriptor.Equals(compareTo.IdentificationDocumentUseDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStudentPersonalIdentificationDocument).PersonalInformationVerificationDescriptor == null
                || !(this as Entities.Common.EdFi.IStudentPersonalIdentificationDocument).PersonalInformationVerificationDescriptor.Equals(compareTo.PersonalInformationVerificationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_student != null)
                    hash = hash * 23 + _student.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStudentPersonalIdentificationDocument).IdentificationDocumentUseDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStudentPersonalIdentificationDocument).IdentificationDocumentUseDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStudentPersonalIdentificationDocument).PersonalInformationVerificationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStudentPersonalIdentificationDocument).PersonalInformationVerificationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The day when the document  expires, if null then never expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentExpirationDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? DocumentExpirationDate { get; set; }

        /// <summary>
        /// The title of the document given by the issuer.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentTitle")]
        public string DocumentTitle { get; set; }

        /// <summary>
        /// Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="issuerCountryDescriptor")]
        public string IssuerCountryDescriptor { get; set; }

        /// <summary>
        /// The unique identifier on the issuer's identification system.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerDocumentIdentificationCode")]
        public string IssuerDocumentIdentificationCode { get; set; }

        /// <summary>
        /// Name of the entity or institution that issued the document.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Student", "StudentPersonalIdentificationDocument")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StudentPersonalIdentificationDocumentMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStudentPersonalIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StudentPersonalIdentificationDocumentMapper.MapTo(this, (Entities.Common.EdFi.IStudentPersonalIdentificationDocument)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStudentPersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentPersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported                        { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StudentPersonalIdentificationDocumentPutPostRequestValidator : FluentValidation.AbstractValidator<StudentPersonalIdentificationDocument>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StudentPersonalIdentificationDocument> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StudentVisa table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StudentVisa : Entities.Common.EdFi.IStudentVisa, Entities.Common.EdFi.IStudentVisaSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStudent _student;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStudent Entities.Common.EdFi.IStudentVisa.Student
        {
            get { return _student; }
            set { SetStudent(value); }
        }

        internal Entities.Common.EdFi.IStudent Student
        {
            set { SetStudent(value); }
        }

        private void SetStudent(Entities.Common.EdFi.IStudent value)
        {
            _student = value;
        }

        /// <summary>
        /// An indicator of a non-US citizen's Visa type.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="visaDescriptor"), NaturalKeyMember]
        public string VisaDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStudentVisa;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_student == null || !_student.Equals(compareTo.Student))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStudentVisa).VisaDescriptor == null
                || !(this as Entities.Common.EdFi.IStudentVisa).VisaDescriptor.Equals(compareTo.VisaDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_student != null)
                    hash = hash * 23 + _student.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStudentVisa).VisaDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStudentVisa).VisaDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Student", "StudentVisa")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StudentVisaMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStudentVisa)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StudentVisaMapper.MapTo(this, (Entities.Common.EdFi.IStudentVisa)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StudentVisaPutPostRequestValidator : FluentValidation.AbstractValidator<StudentVisa>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StudentVisa> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Student

namespace EdFi.Ods.Api.Models.Resources.Student.EdFi.Student_Include_All_Readable.Extensions.Sample
{
    /// <summary>
    /// A class which represents the sample.StudentAquaticPet table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StudentAquaticPet : Entities.Common.Sample.IStudentAquaticPet, Entities.Common.Sample.IStudentAquaticPetSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.Sample.IStudentExtension _studentExtension;

        [IgnoreDataMember]
        Entities.Common.Sample.IStudentExtension Entities.Common.Sample.IStudentAquaticPet.StudentExtension
        {
            get { return _studentExtension; }
            set { SetStudentExtension(value); }
        }

        internal Entities.Common.Sample.IStudentExtension StudentExtension
        {
            set { SetStudentExtension(value); }
        }

        private void SetStudentExtension(Entities.Common.Sample.IStudentExtension value)
        {
            _studentExtension = value;
        }

        /// <summary>
        /// The pet's name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="petName"), NaturalKeyMember]
        public string PetName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStudentAquaticPet;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_studentExtension == null || !_studentExtension.Equals(compareTo.StudentExtension))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.Sample.IStudentAquaticPet).PetName == null
                || !(this as Entities.Common.Sample.IStudentAquaticPet).PetName.Equals(compareTo.PetName)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_studentExtension != null)
                    hash = hash * 23 + _studentExtension.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.Sample.IStudentAquaticPet).PetName != null) 
                    hash = hash * 23 + (this as Entities.Common.Sample.IStudentAquaticPet).PetName.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication as to whether the pet has been spayed/neutered.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="isFixed")]
        public bool? IsFixed { get; set; }

        /// <summary>
        /// The minimum tank volume this aquatic pet requires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="mimimumTankVolume")]
        public int MimimumTankVolume { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StudentAquaticPetMapper.SynchronizeTo(this, (Entities.Common.Sample.IStudentAquaticPet)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StudentAquaticPetMapper.MapTo(this, (Entities.Common.Sample.IStudentAquaticPet)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStudentAquaticPetSynchronizationSourceSupport.IsIsFixedSupported            { get { return true; } set { } }
        bool Entities.Common.Sample.IStudentAquaticPetSynchronizationSourceSupport.IsMimimumTankVolumeSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StudentAquaticPetPutPostRequestValidator : FluentValidation.AbstractValidator<StudentAquaticPet>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StudentAquaticPet> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the sample.StudentExtension table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StudentExtension : Entities.Common.Sample.IStudentExtension, Entities.Common.Sample.IStudentExtensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StudentExtension()
        {
            StudentAquaticPets = new List<StudentAquaticPet>();
            StudentFavoriteBooks = new List<StudentFavoriteBook>();
            StudentPets = new List<StudentPet>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStudent _student;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStudent Entities.Common.Sample.IStudentExtension.Student
        {
            get { return _student; }
            set { SetStudent(value); }
        }

        internal Entities.Common.EdFi.IStudent Student
        {
            set { SetStudent(value); }
        }

        private void SetStudent(Entities.Common.EdFi.IStudent value)
        {
            _student = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStudentExtension;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_student == null || !_student.Equals(compareTo.Student))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_student != null)
                    hash = hash * 23 + _student.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        /// <summary>
        /// petPreference
        /// </summary>
        [DataMember(Name = "petPreference")]
        public StudentPetPreference StudentPetPreference { get; set; }

        Entities.Common.Sample.IStudentPetPreference Entities.Common.Sample.IStudentExtension.StudentPetPreference
        {
            get { return StudentPetPreference; }
            set { StudentPetPreference = (StudentPetPreference) value; }
        }

        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StudentAquaticPet> _studentAquaticPets;
        private ICollection<Entities.Common.Sample.IStudentAquaticPet> _studentAquaticPetsCovariant;

        [DataMember(Name="aquaticPets"), NoDuplicateMembers]
        public ICollection<StudentAquaticPet> StudentAquaticPets
        {
            get { return _studentAquaticPets; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StudentAquaticPet>(value,
                    (s, e) => ((Entities.Common.Sample.IStudentAquaticPet)e.Item).StudentExtension = this);
                _studentAquaticPets = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.Sample.IStudentAquaticPet, StudentAquaticPet>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.Sample.IStudentAquaticPet)e.Item).StudentExtension = this;
                _studentAquaticPetsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.Sample.IStudentAquaticPet> Entities.Common.Sample.IStudentExtension.StudentAquaticPets
        {
            get { return _studentAquaticPetsCovariant; }
            set { StudentAquaticPets = new List<StudentAquaticPet>(value.Cast<StudentAquaticPet>()); }
        }

        private ICollection<StudentFavoriteBook> _studentFavoriteBooks;
        private ICollection<Entities.Common.Sample.IStudentFavoriteBook> _studentFavoriteBooksCovariant;

        [DataMember(Name="favoriteBooks"), NoDuplicateMembers]
        public ICollection<StudentFavoriteBook> StudentFavoriteBooks
        {
            get { return _studentFavoriteBooks; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StudentFavoriteBook>(value,
                    (s, e) => ((Entities.Common.Sample.IStudentFavoriteBook)e.Item).StudentExtension = this);
                _studentFavoriteBooks = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.Sample.IStudentFavoriteBook, StudentFavoriteBook>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.Sample.IStudentFavoriteBook)e.Item).StudentExtension = this;
                _studentFavoriteBooksCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.Sample.IStudentFavoriteBook> Entities.Common.Sample.IStudentExtension.StudentFavoriteBooks
        {
            get { return _studentFavoriteBooksCovariant; }
            set { StudentFavoriteBooks = new List<StudentFavoriteBook>(value.Cast<StudentFavoriteBook>()); }
        }

        private ICollection<StudentPet> _studentPets;
        private ICollection<Entities.Common.Sample.IStudentPet> _studentPetsCovariant;

        [DataMember(Name="pets"), NoDuplicateMembers]
        public ICollection<StudentPet> StudentPets
        {
            get { return _studentPets; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StudentPet>(value,
                    (s, e) => ((Entities.Common.Sample.IStudentPet)e.Item).StudentExtension = this);
                _studentPets = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.Sample.IStudentPet, StudentPet>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.Sample.IStudentPet)e.Item).StudentExtension = this;
                _studentPetsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.Sample.IStudentPet> Entities.Common.Sample.IStudentExtension.StudentPets
        {
            get { return _studentPetsCovariant; }
            set { StudentPets = new List<StudentPet>(value.Cast<StudentPet>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_studentAquaticPets != null) foreach (var item in _studentAquaticPets)
            {
                item.StudentExtension = this;
            }

            if (_studentFavoriteBooks != null) foreach (var item in _studentFavoriteBooks)
            {
                item.StudentExtension = this;
            }

            if (_studentPets != null) foreach (var item in _studentPets)
            {
                item.StudentExtension = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StudentExtensionMapper.SynchronizeTo(this, (Entities.Common.Sample.IStudentExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StudentExtensionMapper.MapTo(this, (Entities.Common.Sample.IStudentExtension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStudentExtensionSynchronizationSourceSupport.IsStudentAquaticPetsSupported    { get { return true; } set { } }
        bool Entities.Common.Sample.IStudentExtensionSynchronizationSourceSupport.IsStudentFavoriteBooksSupported  { get { return true; } set { } }
        bool Entities.Common.Sample.IStudentExtensionSynchronizationSourceSupport.IsStudentPetPreferenceSupported  { get { return true; } set { } }
        bool Entities.Common.Sample.IStudentExtensionSynchronizationSourceSupport.IsStudentPetsSupported           { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.Sample.IStudentAquaticPet, bool> Entities.Common.Sample.IStudentExtensionSynchronizationSourceSupport.IsStudentAquaticPetIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.Sample.IStudentFavoriteBook, bool> Entities.Common.Sample.IStudentExtensionSynchronizationSourceSupport.IsStudentFavoriteBookIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.Sample.IStudentPet, bool> Entities.Common.Sample.IStudentExtensionSynchronizationSourceSupport.IsStudentPetIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StudentExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<StudentExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StudentExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var studentAquaticPetsValidator = new StudentAquaticPetPutPostRequestValidator();

            foreach (var item in instance.StudentAquaticPets)
            {
                var validationResult = studentAquaticPetsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var studentFavoriteBooksValidator = new StudentFavoriteBookPutPostRequestValidator();

            foreach (var item in instance.StudentFavoriteBooks)
            {
                var validationResult = studentFavoriteBooksValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var studentPetsValidator = new StudentPetPutPostRequestValidator();

            foreach (var item in instance.StudentPets)
            {
                var validationResult = studentPetsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the sample.StudentFavoriteBook table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StudentFavoriteBook : Entities.Common.Sample.IStudentFavoriteBook, Entities.Common.Sample.IStudentFavoriteBookSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StudentFavoriteBook()
        {
            StudentFavoriteBookArtMedia = new List<StudentFavoriteBookArtMedium>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.Sample.IStudentExtension _studentExtension;

        [IgnoreDataMember]
        Entities.Common.Sample.IStudentExtension Entities.Common.Sample.IStudentFavoriteBook.StudentExtension
        {
            get { return _studentExtension; }
            set { SetStudentExtension(value); }
        }

        internal Entities.Common.Sample.IStudentExtension StudentExtension
        {
            set { SetStudentExtension(value); }
        }

        private void SetStudentExtension(Entities.Common.Sample.IStudentExtension value)
        {
            _studentExtension = value;
        }

        /// <summary>
        /// This is documentation.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="favoriteBookCategoryDescriptor"), NaturalKeyMember]
        public string FavoriteBookCategoryDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStudentFavoriteBook;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_studentExtension == null || !_studentExtension.Equals(compareTo.StudentExtension))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.Sample.IStudentFavoriteBook).FavoriteBookCategoryDescriptor == null
                || !(this as Entities.Common.Sample.IStudentFavoriteBook).FavoriteBookCategoryDescriptor.Equals(compareTo.FavoriteBookCategoryDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_studentExtension != null)
                    hash = hash * 23 + _studentExtension.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.Sample.IStudentFavoriteBook).FavoriteBookCategoryDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.Sample.IStudentFavoriteBook).FavoriteBookCategoryDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This is documentation.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="bookTitle")]
        public string BookTitle { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StudentFavoriteBookArtMedium> _studentFavoriteBookArtMedia;
        private ICollection<Entities.Common.Sample.IStudentFavoriteBookArtMedium> _studentFavoriteBookArtMediaCovariant;

        [DataMember(Name="artMedia"), NoDuplicateMembers]
        public ICollection<StudentFavoriteBookArtMedium> StudentFavoriteBookArtMedia
        {
            get { return _studentFavoriteBookArtMedia; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StudentFavoriteBookArtMedium>(value,
                    (s, e) => ((Entities.Common.Sample.IStudentFavoriteBookArtMedium)e.Item).StudentFavoriteBook = this);
                _studentFavoriteBookArtMedia = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.Sample.IStudentFavoriteBookArtMedium, StudentFavoriteBookArtMedium>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.Sample.IStudentFavoriteBookArtMedium)e.Item).StudentFavoriteBook = this;
                _studentFavoriteBookArtMediaCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.Sample.IStudentFavoriteBookArtMedium> Entities.Common.Sample.IStudentFavoriteBook.StudentFavoriteBookArtMedia
        {
            get { return _studentFavoriteBookArtMediaCovariant; }
            set { StudentFavoriteBookArtMedia = new List<StudentFavoriteBookArtMedium>(value.Cast<StudentFavoriteBookArtMedium>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_studentFavoriteBookArtMedia != null) foreach (var item in _studentFavoriteBookArtMedia)
            {
                item.StudentFavoriteBook = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StudentFavoriteBookMapper.SynchronizeTo(this, (Entities.Common.Sample.IStudentFavoriteBook)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StudentFavoriteBookMapper.MapTo(this, (Entities.Common.Sample.IStudentFavoriteBook)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStudentFavoriteBookSynchronizationSourceSupport.IsBookTitleSupported                    { get { return true; } set { } }
        bool Entities.Common.Sample.IStudentFavoriteBookSynchronizationSourceSupport.IsStudentFavoriteBookArtMediaSupported  { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.Sample.IStudentFavoriteBookArtMedium, bool> Entities.Common.Sample.IStudentFavoriteBookSynchronizationSourceSupport.IsStudentFavoriteBookArtMediumIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StudentFavoriteBookPutPostRequestValidator : FluentValidation.AbstractValidator<StudentFavoriteBook>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StudentFavoriteBook> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var studentFavoriteBookArtMediaValidator = new StudentFavoriteBookArtMediumPutPostRequestValidator();

            foreach (var item in instance.StudentFavoriteBookArtMedia)
            {
                var validationResult = studentFavoriteBookArtMediaValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the sample.StudentFavoriteBookArtMedium table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StudentFavoriteBookArtMedium : Entities.Common.Sample.IStudentFavoriteBookArtMedium, Entities.Common.Sample.IStudentFavoriteBookArtMediumSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.Sample.IStudentFavoriteBook _studentFavoriteBook;

        [IgnoreDataMember]
        Entities.Common.Sample.IStudentFavoriteBook Entities.Common.Sample.IStudentFavoriteBookArtMedium.StudentFavoriteBook
        {
            get { return _studentFavoriteBook; }
            set { SetStudentFavoriteBook(value); }
        }

        internal Entities.Common.Sample.IStudentFavoriteBook StudentFavoriteBook
        {
            set { SetStudentFavoriteBook(value); }
        }

        private void SetStudentFavoriteBook(Entities.Common.Sample.IStudentFavoriteBook value)
        {
            _studentFavoriteBook = value;
        }

        /// <summary>
        /// This is documentation.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="artMediumDescriptor"), NaturalKeyMember]
        public string ArtMediumDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStudentFavoriteBookArtMedium;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_studentFavoriteBook == null || !_studentFavoriteBook.Equals(compareTo.StudentFavoriteBook))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.Sample.IStudentFavoriteBookArtMedium).ArtMediumDescriptor == null
                || !(this as Entities.Common.Sample.IStudentFavoriteBookArtMedium).ArtMediumDescriptor.Equals(compareTo.ArtMediumDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_studentFavoriteBook != null)
                    hash = hash * 23 + _studentFavoriteBook.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.Sample.IStudentFavoriteBookArtMedium).ArtMediumDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.Sample.IStudentFavoriteBookArtMedium).ArtMediumDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This is documentation.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="artPieces")]
        public int? ArtPieces { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StudentFavoriteBookArtMediumMapper.SynchronizeTo(this, (Entities.Common.Sample.IStudentFavoriteBookArtMedium)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StudentFavoriteBookArtMediumMapper.MapTo(this, (Entities.Common.Sample.IStudentFavoriteBookArtMedium)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStudentFavoriteBookArtMediumSynchronizationSourceSupport.IsArtPiecesSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StudentFavoriteBookArtMediumPutPostRequestValidator : FluentValidation.AbstractValidator<StudentFavoriteBookArtMedium>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StudentFavoriteBookArtMedium> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the sample.StudentPet table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StudentPet : Entities.Common.Sample.IStudentPet, Entities.Common.Sample.IStudentPetSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.Sample.IStudentExtension _studentExtension;

        [IgnoreDataMember]
        Entities.Common.Sample.IStudentExtension Entities.Common.Sample.IStudentPet.StudentExtension
        {
            get { return _studentExtension; }
            set { SetStudentExtension(value); }
        }

        internal Entities.Common.Sample.IStudentExtension StudentExtension
        {
            set { SetStudentExtension(value); }
        }

        private void SetStudentExtension(Entities.Common.Sample.IStudentExtension value)
        {
            _studentExtension = value;
        }

        /// <summary>
        /// The pet's name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="petName"), NaturalKeyMember]
        public string PetName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStudentPet;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_studentExtension == null || !_studentExtension.Equals(compareTo.StudentExtension))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.Sample.IStudentPet).PetName == null
                || !(this as Entities.Common.Sample.IStudentPet).PetName.Equals(compareTo.PetName)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_studentExtension != null)
                    hash = hash * 23 + _studentExtension.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.Sample.IStudentPet).PetName != null) 
                    hash = hash * 23 + (this as Entities.Common.Sample.IStudentPet).PetName.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication as to whether the pet has been spayed/neutered.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="isFixed")]
        public bool? IsFixed { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StudentPetMapper.SynchronizeTo(this, (Entities.Common.Sample.IStudentPet)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StudentPetMapper.MapTo(this, (Entities.Common.Sample.IStudentPet)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStudentPetSynchronizationSourceSupport.IsIsFixedSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StudentPetPutPostRequestValidator : FluentValidation.AbstractValidator<StudentPet>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StudentPet> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the sample.StudentPetPreference table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StudentPetPreference : Entities.Common.Sample.IStudentPetPreference, Entities.Common.Sample.IStudentPetPreferenceSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.Sample.IStudentExtension _studentExtension;

        [IgnoreDataMember]
        Entities.Common.Sample.IStudentExtension Entities.Common.Sample.IStudentPetPreference.StudentExtension
        {
            get { return _studentExtension; }
            set { SetStudentExtension(value); }
        }

        internal Entities.Common.Sample.IStudentExtension StudentExtension
        {
            set { SetStudentExtension(value); }
        }

        private void SetStudentExtension(Entities.Common.Sample.IStudentExtension value)
        {
            _studentExtension = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStudentPetPreference;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_studentExtension == null || !_studentExtension.Equals(compareTo.StudentExtension))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_studentExtension != null)
                    hash = hash * 23 + _studentExtension.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The preferred maximum weight of a household pet.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maximumWeight")]
        public int MaximumWeight { get; set; }

        /// <summary>
        /// The preferred minimum weight of a household pet.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="minimumWeight")]
        public int MinimumWeight { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StudentPetPreferenceMapper.SynchronizeTo(this, (Entities.Common.Sample.IStudentPetPreference)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StudentPetPreferenceMapper.MapTo(this, (Entities.Common.Sample.IStudentPetPreference)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStudentPetPreferenceSynchronizationSourceSupport.IsMaximumWeightSupported  { get { return true; } set { } }
        bool Entities.Common.Sample.IStudentPetPreferenceSynchronizationSourceSupport.IsMinimumWeightSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StudentPetPreferencePutPostRequestValidator : FluentValidation.AbstractValidator<StudentPetPreference>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StudentPetPreference> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Student

namespace EdFi.Ods.Api.Models.Resources.Student.EdFi.Student_Include_All_Writable
{
    /// <summary>
    /// Represents a reference to the Student resource.
    /// </summary>
    [DataContract]
    [ExcludeFromCodeCoverage]
    public class StudentReference
    {
        [DataMember(Name="studentUniqueId"), NaturalKeyMember]
        public string StudentUniqueId { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        public Guid ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        public string Discriminator { get; set; }


        private Link _link;

        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return StudentUniqueId != default(string);
        }

        private Link CreateLink()
        {
            var link = new Link
            {
                Rel = "Student",
                Href = $"/ed-fi/students/{ResourceId:n}"
            };

            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new Common.Models.Domain.FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            var pm = resource.BaseResourcePropertyMappingsByOtherName();

            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
        }
    } // Aggregate reference

    /// <summary>
    /// A class which represents the edfi.Student table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class Student : Entities.Common.EdFi.IStudent, IHasETag, Entities.Common.EdFi.IStudentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public Student()
        {
            StudentIdentificationDocuments = new List<StudentIdentificationDocument>();
            StudentOtherNames = new List<StudentOtherName>();
            StudentPersonalIdentificationDocuments = new List<StudentPersonalIdentificationDocument>();
            StudentVisas = new List<StudentVisa>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------

        /// <summary>
        /// The unique identifier for the Student resource.
        /// </summary>
        [DataMember(Name="id")]
        [JsonConverter(typeof(GuidConverter))]
        public Guid Id { get; set; }
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="studentUniqueId"), NaturalKeyMember, UniqueId]
        public string StudentUniqueId { get; set; }

        string IIdentifiablePerson.UniqueId { get { return StudentUniqueId; } }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStudent;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Property
            if ((this as Entities.Common.EdFi.IStudent).StudentUniqueId == null
                || !(this as Entities.Common.EdFi.IStudent).StudentUniqueId.Equals(compareTo.StudentUniqueId)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;

                //Property
                if ((this as Entities.Common.EdFi.IStudent).StudentUniqueId != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStudent).StudentUniqueId.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The city the student was born in.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="birthCity")]
        public string BirthCity { get; set; }

        /// <summary>
        /// The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="birthCountryDescriptor")]
        public string BirthCountryDescriptor { get; set; }

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="birthDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime BirthDate { get; set; }

        /// <summary>
        /// For students born outside of the U.S., the Province or jurisdiction in which an individual is born.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="birthInternationalProvince")]
        public string BirthInternationalProvince { get; set; }

        /// <summary>
        /// A person's gender at birth.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="birthSexDescriptor")]
        public string BirthSexDescriptor { get; set; }

        /// <summary>
        /// The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="birthStateAbbreviationDescriptor")]
        public string BirthStateAbbreviationDescriptor { get; set; }

        /// <summary>
        /// An indicator of whether or not the person is a U.S. citizen.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="citizenshipStatusDescriptor")]
        public string CitizenshipStatusDescriptor { get; set; }

        /// <summary>
        /// For students born outside of the U.S., the date the student entered the U.S.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="dateEnteredUS")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? DateEnteredUS { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// The person's maiden name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maidenName")]
        public string MaidenName { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.)
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="multipleBirthStatus")]
        public bool? MultipleBirthStatus { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Student", "Student")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StudentIdentificationDocument> _studentIdentificationDocuments;
        private ICollection<Entities.Common.EdFi.IStudentIdentificationDocument> _studentIdentificationDocumentsCovariant;

        [DataMember(Name="identificationDocuments"), NoDuplicateMembers]
        public ICollection<StudentIdentificationDocument> StudentIdentificationDocuments
        {
            get { return _studentIdentificationDocuments; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StudentIdentificationDocument>(value,
                    (s, e) => ((Entities.Common.EdFi.IStudentIdentificationDocument)e.Item).Student = this);
                _studentIdentificationDocuments = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStudentIdentificationDocument, StudentIdentificationDocument>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStudentIdentificationDocument)e.Item).Student = this;
                _studentIdentificationDocumentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStudentIdentificationDocument> Entities.Common.EdFi.IStudent.StudentIdentificationDocuments
        {
            get { return _studentIdentificationDocumentsCovariant; }
            set { StudentIdentificationDocuments = new List<StudentIdentificationDocument>(value.Cast<StudentIdentificationDocument>()); }
        }

        private ICollection<StudentOtherName> _studentOtherNames;
        private ICollection<Entities.Common.EdFi.IStudentOtherName> _studentOtherNamesCovariant;

        [DataMember(Name="otherNames"), NoDuplicateMembers]
        public ICollection<StudentOtherName> StudentOtherNames
        {
            get { return _studentOtherNames; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StudentOtherName>(value,
                    (s, e) => ((Entities.Common.EdFi.IStudentOtherName)e.Item).Student = this);
                _studentOtherNames = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStudentOtherName, StudentOtherName>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStudentOtherName)e.Item).Student = this;
                _studentOtherNamesCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStudentOtherName> Entities.Common.EdFi.IStudent.StudentOtherNames
        {
            get { return _studentOtherNamesCovariant; }
            set { StudentOtherNames = new List<StudentOtherName>(value.Cast<StudentOtherName>()); }
        }

        private ICollection<StudentPersonalIdentificationDocument> _studentPersonalIdentificationDocuments;
        private ICollection<Entities.Common.EdFi.IStudentPersonalIdentificationDocument> _studentPersonalIdentificationDocumentsCovariant;

        [DataMember(Name="personalIdentificationDocuments"), NoDuplicateMembers]
        public ICollection<StudentPersonalIdentificationDocument> StudentPersonalIdentificationDocuments
        {
            get { return _studentPersonalIdentificationDocuments; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StudentPersonalIdentificationDocument>(value,
                    (s, e) => ((Entities.Common.EdFi.IStudentPersonalIdentificationDocument)e.Item).Student = this);
                _studentPersonalIdentificationDocuments = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStudentPersonalIdentificationDocument, StudentPersonalIdentificationDocument>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStudentPersonalIdentificationDocument)e.Item).Student = this;
                _studentPersonalIdentificationDocumentsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStudentPersonalIdentificationDocument> Entities.Common.EdFi.IStudent.StudentPersonalIdentificationDocuments
        {
            get { return _studentPersonalIdentificationDocumentsCovariant; }
            set { StudentPersonalIdentificationDocuments = new List<StudentPersonalIdentificationDocument>(value.Cast<StudentPersonalIdentificationDocument>()); }
        }

        private ICollection<StudentVisa> _studentVisas;
        private ICollection<Entities.Common.EdFi.IStudentVisa> _studentVisasCovariant;

        [DataMember(Name="visas"), NoDuplicateMembers]
        public ICollection<StudentVisa> StudentVisas
        {
            get { return _studentVisas; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StudentVisa>(value,
                    (s, e) => ((Entities.Common.EdFi.IStudentVisa)e.Item).Student = this);
                _studentVisas = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.EdFi.IStudentVisa, StudentVisa>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.EdFi.IStudentVisa)e.Item).Student = this;
                _studentVisasCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.EdFi.IStudentVisa> Entities.Common.EdFi.IStudent.StudentVisas
        {
            get { return _studentVisasCovariant; }
            set { StudentVisas = new List<StudentVisa>(value.Cast<StudentVisa>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------

        [DataMember(Name="_etag")]
        public virtual string ETag { get; set; }

        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_studentIdentificationDocuments != null) foreach (var item in _studentIdentificationDocuments)
            {
                item.Student = this;
            }

            if (_studentOtherNames != null) foreach (var item in _studentOtherNames)
            {
                item.Student = this;
            }

            if (_studentPersonalIdentificationDocuments != null) foreach (var item in _studentPersonalIdentificationDocuments)
            {
                item.Student = this;
            }

            if (_studentVisas != null) foreach (var item in _studentVisas)
            {
                item.Student = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StudentMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStudent)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StudentMapper.MapTo(this, (Entities.Common.EdFi.IStudent)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsBirthCitySupported                               { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsBirthCountryDescriptorSupported                  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsBirthDateSupported                               { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsBirthInternationalProvinceSupported              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsBirthSexDescriptorSupported                      { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsBirthStateAbbreviationDescriptorSupported        { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsCitizenshipStatusDescriptorSupported             { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsDateEnteredUSSupported                           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsFirstNameSupported                               { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsGenerationCodeSuffixSupported                    { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsLastSurnameSupported                             { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsMaidenNameSupported                              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsMiddleNameSupported                              { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsMultipleBirthStatusSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsPersonalTitlePrefixSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsStudentIdentificationDocumentsSupported          { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsStudentOtherNamesSupported                       { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsStudentPersonalIdentificationDocumentsSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsStudentUniqueIdSupported                         { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsStudentVisasSupported                            { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.EdFi.IStudentIdentificationDocument, bool> Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsStudentIdentificationDocumentIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStudentOtherName, bool> Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsStudentOtherNameIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStudentPersonalIdentificationDocument, bool> Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsStudentPersonalIdentificationDocumentIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.EdFi.IStudentVisa, bool> Entities.Common.EdFi.IStudentSynchronizationSourceSupport.IsStudentVisaIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StudentPutPostRequestValidator : FluentValidation.AbstractValidator<Student>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<Student> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var studentIdentificationDocumentsValidator = new StudentIdentificationDocumentPutPostRequestValidator();

            foreach (var item in instance.StudentIdentificationDocuments)
            {
                var validationResult = studentIdentificationDocumentsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var studentOtherNamesValidator = new StudentOtherNamePutPostRequestValidator();

            foreach (var item in instance.StudentOtherNames)
            {
                var validationResult = studentOtherNamesValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var studentPersonalIdentificationDocumentsValidator = new StudentPersonalIdentificationDocumentPutPostRequestValidator();

            foreach (var item in instance.StudentPersonalIdentificationDocuments)
            {
                var validationResult = studentPersonalIdentificationDocumentsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var studentVisasValidator = new StudentVisaPutPostRequestValidator();

            foreach (var item in instance.StudentVisas)
            {
                var validationResult = studentVisasValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StudentIdentificationDocument table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StudentIdentificationDocument : Entities.Common.EdFi.IStudentIdentificationDocument, Entities.Common.EdFi.IStudentIdentificationDocumentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStudent _student;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStudent Entities.Common.EdFi.IStudentIdentificationDocument.Student
        {
            get { return _student; }
            set { SetStudent(value); }
        }

        internal Entities.Common.EdFi.IStudent Student
        {
            set { SetStudent(value); }
        }

        private void SetStudent(Entities.Common.EdFi.IStudent value)
        {
            _student = value;
        }

        /// <summary>
        /// The primary function of the document used for establishing identity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="identificationDocumentUseDescriptor"), NaturalKeyMember]
        public string IdentificationDocumentUseDescriptor { get; set; }

        /// <summary>
        /// The category of the document relative to its purpose.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="personalInformationVerificationDescriptor"), NaturalKeyMember]
        public string PersonalInformationVerificationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStudentIdentificationDocument;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_student == null || !_student.Equals(compareTo.Student))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStudentIdentificationDocument).IdentificationDocumentUseDescriptor == null
                || !(this as Entities.Common.EdFi.IStudentIdentificationDocument).IdentificationDocumentUseDescriptor.Equals(compareTo.IdentificationDocumentUseDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStudentIdentificationDocument).PersonalInformationVerificationDescriptor == null
                || !(this as Entities.Common.EdFi.IStudentIdentificationDocument).PersonalInformationVerificationDescriptor.Equals(compareTo.PersonalInformationVerificationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_student != null)
                    hash = hash * 23 + _student.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStudentIdentificationDocument).IdentificationDocumentUseDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStudentIdentificationDocument).IdentificationDocumentUseDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStudentIdentificationDocument).PersonalInformationVerificationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStudentIdentificationDocument).PersonalInformationVerificationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The day when the document  expires, if null then never expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentExpirationDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? DocumentExpirationDate { get; set; }

        /// <summary>
        /// The title of the document given by the issuer.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentTitle")]
        public string DocumentTitle { get; set; }

        /// <summary>
        /// Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="issuerCountryDescriptor")]
        public string IssuerCountryDescriptor { get; set; }

        /// <summary>
        /// The unique identifier on the issuer's identification system.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerDocumentIdentificationCode")]
        public string IssuerDocumentIdentificationCode { get; set; }

        /// <summary>
        /// Name of the entity or institution that issued the document.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Student", "StudentIdentificationDocument")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StudentIdentificationDocumentMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStudentIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StudentIdentificationDocumentMapper.MapTo(this, (Entities.Common.EdFi.IStudentIdentificationDocument)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStudentIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported                        { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StudentIdentificationDocumentPutPostRequestValidator : FluentValidation.AbstractValidator<StudentIdentificationDocument>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StudentIdentificationDocument> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StudentOtherName table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StudentOtherName : Entities.Common.EdFi.IStudentOtherName, Entities.Common.EdFi.IStudentOtherNameSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStudent _student;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStudent Entities.Common.EdFi.IStudentOtherName.Student
        {
            get { return _student; }
            set { SetStudent(value); }
        }

        internal Entities.Common.EdFi.IStudent Student
        {
            set { SetStudent(value); }
        }

        private void SetStudent(Entities.Common.EdFi.IStudent value)
        {
            _student = value;
        }

        /// <summary>
        /// The types of alternate names for a person.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="otherNameTypeDescriptor"), NaturalKeyMember]
        public string OtherNameTypeDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStudentOtherName;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_student == null || !_student.Equals(compareTo.Student))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStudentOtherName).OtherNameTypeDescriptor == null
                || !(this as Entities.Common.EdFi.IStudentOtherName).OtherNameTypeDescriptor.Equals(compareTo.OtherNameTypeDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_student != null)
                    hash = hash * 23 + _student.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStudentOtherName).OtherNameTypeDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStudentOtherName).OtherNameTypeDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="generationCodeSuffix")]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="personalTitlePrefix")]
        public string PersonalTitlePrefix { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Student", "StudentOtherName")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StudentOtherNameMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStudentOtherName)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StudentOtherNameMapper.MapTo(this, (Entities.Common.EdFi.IStudentOtherName)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStudentOtherNameSynchronizationSourceSupport.IsFirstNameSupported             { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentOtherNameSynchronizationSourceSupport.IsGenerationCodeSuffixSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentOtherNameSynchronizationSourceSupport.IsLastSurnameSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentOtherNameSynchronizationSourceSupport.IsMiddleNameSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentOtherNameSynchronizationSourceSupport.IsPersonalTitlePrefixSupported   { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StudentOtherNamePutPostRequestValidator : FluentValidation.AbstractValidator<StudentOtherName>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StudentOtherName> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StudentPersonalIdentificationDocument table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StudentPersonalIdentificationDocument : Entities.Common.EdFi.IStudentPersonalIdentificationDocument, Entities.Common.EdFi.IStudentPersonalIdentificationDocumentSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStudent _student;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStudent Entities.Common.EdFi.IStudentPersonalIdentificationDocument.Student
        {
            get { return _student; }
            set { SetStudent(value); }
        }

        internal Entities.Common.EdFi.IStudent Student
        {
            set { SetStudent(value); }
        }

        private void SetStudent(Entities.Common.EdFi.IStudent value)
        {
            _student = value;
        }

        /// <summary>
        /// The primary function of the document used for establishing identity.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="identificationDocumentUseDescriptor"), NaturalKeyMember]
        public string IdentificationDocumentUseDescriptor { get; set; }

        /// <summary>
        /// The category of the document relative to its purpose.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="personalInformationVerificationDescriptor"), NaturalKeyMember]
        public string PersonalInformationVerificationDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStudentPersonalIdentificationDocument;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_student == null || !_student.Equals(compareTo.Student))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStudentPersonalIdentificationDocument).IdentificationDocumentUseDescriptor == null
                || !(this as Entities.Common.EdFi.IStudentPersonalIdentificationDocument).IdentificationDocumentUseDescriptor.Equals(compareTo.IdentificationDocumentUseDescriptor)) 
                return false;
 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStudentPersonalIdentificationDocument).PersonalInformationVerificationDescriptor == null
                || !(this as Entities.Common.EdFi.IStudentPersonalIdentificationDocument).PersonalInformationVerificationDescriptor.Equals(compareTo.PersonalInformationVerificationDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_student != null)
                    hash = hash * 23 + _student.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStudentPersonalIdentificationDocument).IdentificationDocumentUseDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStudentPersonalIdentificationDocument).IdentificationDocumentUseDescriptor.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStudentPersonalIdentificationDocument).PersonalInformationVerificationDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStudentPersonalIdentificationDocument).PersonalInformationVerificationDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The day when the document  expires, if null then never expires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentExpirationDate")][JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]
        public DateTime? DocumentExpirationDate { get; set; }

        /// <summary>
        /// The title of the document given by the issuer.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="documentTitle")]
        public string DocumentTitle { get; set; }

        /// <summary>
        /// Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="issuerCountryDescriptor")]
        public string IssuerCountryDescriptor { get; set; }

        /// <summary>
        /// The unique identifier on the issuer's identification system.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerDocumentIdentificationCode")]
        public string IssuerDocumentIdentificationCode { get; set; }

        /// <summary>
        /// Name of the entity or institution that issued the document.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Student", "StudentPersonalIdentificationDocument")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StudentPersonalIdentificationDocumentMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStudentPersonalIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StudentPersonalIdentificationDocumentMapper.MapTo(this, (Entities.Common.EdFi.IStudentPersonalIdentificationDocument)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.EdFi.IStudentPersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported            { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentPersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported                     { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported           { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported  { get { return true; } set { } }
        bool Entities.Common.EdFi.IStudentPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported                        { get { return true; } set { } }
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StudentPersonalIdentificationDocumentPutPostRequestValidator : FluentValidation.AbstractValidator<StudentPersonalIdentificationDocument>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StudentPersonalIdentificationDocument> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the edfi.StudentVisa table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StudentVisa : Entities.Common.EdFi.IStudentVisa, Entities.Common.EdFi.IStudentVisaSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStudent _student;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStudent Entities.Common.EdFi.IStudentVisa.Student
        {
            get { return _student; }
            set { SetStudent(value); }
        }

        internal Entities.Common.EdFi.IStudent Student
        {
            set { SetStudent(value); }
        }

        private void SetStudent(Entities.Common.EdFi.IStudent value)
        {
            _student = value;
        }

        /// <summary>
        /// An indicator of a non-US citizen's Visa type.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="visaDescriptor"), NaturalKeyMember]
        public string VisaDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.EdFi.IStudentVisa;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_student == null || !_student.Equals(compareTo.Student))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.EdFi.IStudentVisa).VisaDescriptor == null
                || !(this as Entities.Common.EdFi.IStudentVisa).VisaDescriptor.Equals(compareTo.VisaDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_student != null)
                    hash = hash * 23 + _student.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.EdFi.IStudentVisa).VisaDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.EdFi.IStudentVisa).VisaDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        [JsonProperty("_ext")]
        [JsonConverter(typeof(ExtensionsConverter), "Student", "StudentVisa")]
        public System.Collections.IDictionary Extensions { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.EdFi.StudentVisaMapper.SynchronizeTo(this, (Entities.Common.EdFi.IStudentVisa)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.EdFi.StudentVisaMapper.MapTo(this, (Entities.Common.EdFi.IStudentVisa)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        bool IExtensionsSynchronizationSourceSupport.IsExtensionSupported(string name) { return new [] { "Sample",  }.Contains(name); }
        void IExtensionsSynchronizationSourceSupport.SetExtensionSupported(string name, bool isSupported) { }
        bool IExtensionsSynchronizationSourceSupport.IsExtensionAvailable(string name) { return true; }
        void IExtensionsSynchronizationSourceSupport.SetExtensionAvailable(string name, bool isSupported) { }


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StudentVisaPutPostRequestValidator : FluentValidation.AbstractValidator<StudentVisa>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StudentVisa> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
// Aggregate: Student

namespace EdFi.Ods.Api.Models.Resources.Student.EdFi.Student_Include_All_Writable.Extensions.Sample
{
    /// <summary>
    /// A class which represents the sample.StudentAquaticPet table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StudentAquaticPet : Entities.Common.Sample.IStudentAquaticPet, Entities.Common.Sample.IStudentAquaticPetSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.Sample.IStudentExtension _studentExtension;

        [IgnoreDataMember]
        Entities.Common.Sample.IStudentExtension Entities.Common.Sample.IStudentAquaticPet.StudentExtension
        {
            get { return _studentExtension; }
            set { SetStudentExtension(value); }
        }

        internal Entities.Common.Sample.IStudentExtension StudentExtension
        {
            set { SetStudentExtension(value); }
        }

        private void SetStudentExtension(Entities.Common.Sample.IStudentExtension value)
        {
            _studentExtension = value;
        }

        /// <summary>
        /// The pet's name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="petName"), NaturalKeyMember]
        public string PetName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStudentAquaticPet;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_studentExtension == null || !_studentExtension.Equals(compareTo.StudentExtension))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.Sample.IStudentAquaticPet).PetName == null
                || !(this as Entities.Common.Sample.IStudentAquaticPet).PetName.Equals(compareTo.PetName)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_studentExtension != null)
                    hash = hash * 23 + _studentExtension.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.Sample.IStudentAquaticPet).PetName != null) 
                    hash = hash * 23 + (this as Entities.Common.Sample.IStudentAquaticPet).PetName.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication as to whether the pet has been spayed/neutered.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="isFixed")]
        public bool? IsFixed { get; set; }

        /// <summary>
        /// The minimum tank volume this aquatic pet requires.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="mimimumTankVolume")]
        public int MimimumTankVolume { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StudentAquaticPetMapper.SynchronizeTo(this, (Entities.Common.Sample.IStudentAquaticPet)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StudentAquaticPetMapper.MapTo(this, (Entities.Common.Sample.IStudentAquaticPet)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStudentAquaticPetSynchronizationSourceSupport.IsIsFixedSupported            { get { return true; } set { } }
        bool Entities.Common.Sample.IStudentAquaticPetSynchronizationSourceSupport.IsMimimumTankVolumeSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StudentAquaticPetPutPostRequestValidator : FluentValidation.AbstractValidator<StudentAquaticPet>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StudentAquaticPet> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the sample.StudentExtension table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StudentExtension : Entities.Common.Sample.IStudentExtension, Entities.Common.Sample.IStudentExtensionSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StudentExtension()
        {
            StudentAquaticPets = new List<StudentAquaticPet>();
            StudentFavoriteBooks = new List<StudentFavoriteBook>();
            StudentPets = new List<StudentPet>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.EdFi.IStudent _student;

        [IgnoreDataMember]
        Entities.Common.EdFi.IStudent Entities.Common.Sample.IStudentExtension.Student
        {
            get { return _student; }
            set { SetStudent(value); }
        }

        internal Entities.Common.EdFi.IStudent Student
        {
            set { SetStudent(value); }
        }

        private void SetStudent(Entities.Common.EdFi.IStudent value)
        {
            _student = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStudentExtension;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_student == null || !_student.Equals(compareTo.Student))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_student != null)
                    hash = hash * 23 + _student.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        /// <summary>
        /// petPreference
        /// </summary>
        [DataMember(Name = "petPreference")]
        public StudentPetPreference StudentPetPreference { get; set; }

        Entities.Common.Sample.IStudentPetPreference Entities.Common.Sample.IStudentExtension.StudentPetPreference
        {
            get { return StudentPetPreference; }
            set { StudentPetPreference = (StudentPetPreference) value; }
        }

        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StudentAquaticPet> _studentAquaticPets;
        private ICollection<Entities.Common.Sample.IStudentAquaticPet> _studentAquaticPetsCovariant;

        [DataMember(Name="aquaticPets"), NoDuplicateMembers]
        public ICollection<StudentAquaticPet> StudentAquaticPets
        {
            get { return _studentAquaticPets; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StudentAquaticPet>(value,
                    (s, e) => ((Entities.Common.Sample.IStudentAquaticPet)e.Item).StudentExtension = this);
                _studentAquaticPets = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.Sample.IStudentAquaticPet, StudentAquaticPet>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.Sample.IStudentAquaticPet)e.Item).StudentExtension = this;
                _studentAquaticPetsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.Sample.IStudentAquaticPet> Entities.Common.Sample.IStudentExtension.StudentAquaticPets
        {
            get { return _studentAquaticPetsCovariant; }
            set { StudentAquaticPets = new List<StudentAquaticPet>(value.Cast<StudentAquaticPet>()); }
        }

        private ICollection<StudentFavoriteBook> _studentFavoriteBooks;
        private ICollection<Entities.Common.Sample.IStudentFavoriteBook> _studentFavoriteBooksCovariant;

        [DataMember(Name="favoriteBooks"), NoDuplicateMembers]
        public ICollection<StudentFavoriteBook> StudentFavoriteBooks
        {
            get { return _studentFavoriteBooks; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StudentFavoriteBook>(value,
                    (s, e) => ((Entities.Common.Sample.IStudentFavoriteBook)e.Item).StudentExtension = this);
                _studentFavoriteBooks = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.Sample.IStudentFavoriteBook, StudentFavoriteBook>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.Sample.IStudentFavoriteBook)e.Item).StudentExtension = this;
                _studentFavoriteBooksCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.Sample.IStudentFavoriteBook> Entities.Common.Sample.IStudentExtension.StudentFavoriteBooks
        {
            get { return _studentFavoriteBooksCovariant; }
            set { StudentFavoriteBooks = new List<StudentFavoriteBook>(value.Cast<StudentFavoriteBook>()); }
        }

        private ICollection<StudentPet> _studentPets;
        private ICollection<Entities.Common.Sample.IStudentPet> _studentPetsCovariant;

        [DataMember(Name="pets"), NoDuplicateMembers]
        public ICollection<StudentPet> StudentPets
        {
            get { return _studentPets; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StudentPet>(value,
                    (s, e) => ((Entities.Common.Sample.IStudentPet)e.Item).StudentExtension = this);
                _studentPets = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.Sample.IStudentPet, StudentPet>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.Sample.IStudentPet)e.Item).StudentExtension = this;
                _studentPetsCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.Sample.IStudentPet> Entities.Common.Sample.IStudentExtension.StudentPets
        {
            get { return _studentPetsCovariant; }
            set { StudentPets = new List<StudentPet>(value.Cast<StudentPet>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_studentAquaticPets != null) foreach (var item in _studentAquaticPets)
            {
                item.StudentExtension = this;
            }

            if (_studentFavoriteBooks != null) foreach (var item in _studentFavoriteBooks)
            {
                item.StudentExtension = this;
            }

            if (_studentPets != null) foreach (var item in _studentPets)
            {
                item.StudentExtension = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StudentExtensionMapper.SynchronizeTo(this, (Entities.Common.Sample.IStudentExtension)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StudentExtensionMapper.MapTo(this, (Entities.Common.Sample.IStudentExtension)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStudentExtensionSynchronizationSourceSupport.IsStudentAquaticPetsSupported    { get { return true; } set { } }
        bool Entities.Common.Sample.IStudentExtensionSynchronizationSourceSupport.IsStudentFavoriteBooksSupported  { get { return true; } set { } }
        bool Entities.Common.Sample.IStudentExtensionSynchronizationSourceSupport.IsStudentPetPreferenceSupported  { get { return true; } set { } }
        bool Entities.Common.Sample.IStudentExtensionSynchronizationSourceSupport.IsStudentPetsSupported           { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.Sample.IStudentAquaticPet, bool> Entities.Common.Sample.IStudentExtensionSynchronizationSourceSupport.IsStudentAquaticPetIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.Sample.IStudentFavoriteBook, bool> Entities.Common.Sample.IStudentExtensionSynchronizationSourceSupport.IsStudentFavoriteBookIncluded
        { 
            get { return null; }
            set { }
        }
        Func<Entities.Common.Sample.IStudentPet, bool> Entities.Common.Sample.IStudentExtensionSynchronizationSourceSupport.IsStudentPetIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StudentExtensionPutPostRequestValidator : FluentValidation.AbstractValidator<StudentExtension>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StudentExtension> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var studentAquaticPetsValidator = new StudentAquaticPetPutPostRequestValidator();

            foreach (var item in instance.StudentAquaticPets)
            {
                var validationResult = studentAquaticPetsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var studentFavoriteBooksValidator = new StudentFavoriteBookPutPostRequestValidator();

            foreach (var item in instance.StudentFavoriteBooks)
            {
                var validationResult = studentFavoriteBooksValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }

            var studentPetsValidator = new StudentPetPutPostRequestValidator();

            foreach (var item in instance.StudentPets)
            {
                var validationResult = studentPetsValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the sample.StudentFavoriteBook table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StudentFavoriteBook : Entities.Common.Sample.IStudentFavoriteBook, Entities.Common.Sample.IStudentFavoriteBookSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        public StudentFavoriteBook()
        {
            StudentFavoriteBookArtMedia = new List<StudentFavoriteBookArtMedium>();
        }
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.Sample.IStudentExtension _studentExtension;

        [IgnoreDataMember]
        Entities.Common.Sample.IStudentExtension Entities.Common.Sample.IStudentFavoriteBook.StudentExtension
        {
            get { return _studentExtension; }
            set { SetStudentExtension(value); }
        }

        internal Entities.Common.Sample.IStudentExtension StudentExtension
        {
            set { SetStudentExtension(value); }
        }

        private void SetStudentExtension(Entities.Common.Sample.IStudentExtension value)
        {
            _studentExtension = value;
        }

        /// <summary>
        /// This is documentation.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="favoriteBookCategoryDescriptor"), NaturalKeyMember]
        public string FavoriteBookCategoryDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStudentFavoriteBook;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_studentExtension == null || !_studentExtension.Equals(compareTo.StudentExtension))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.Sample.IStudentFavoriteBook).FavoriteBookCategoryDescriptor == null
                || !(this as Entities.Common.Sample.IStudentFavoriteBook).FavoriteBookCategoryDescriptor.Equals(compareTo.FavoriteBookCategoryDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_studentExtension != null)
                    hash = hash * 23 + _studentExtension.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.Sample.IStudentFavoriteBook).FavoriteBookCategoryDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.Sample.IStudentFavoriteBook).FavoriteBookCategoryDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This is documentation.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="bookTitle")]
        public string BookTitle { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<StudentFavoriteBookArtMedium> _studentFavoriteBookArtMedia;
        private ICollection<Entities.Common.Sample.IStudentFavoriteBookArtMedium> _studentFavoriteBookArtMediaCovariant;

        [DataMember(Name="artMedia"), NoDuplicateMembers]
        public ICollection<StudentFavoriteBookArtMedium> StudentFavoriteBookArtMedia
        {
            get { return _studentFavoriteBookArtMedia; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<StudentFavoriteBookArtMedium>(value,
                    (s, e) => ((Entities.Common.Sample.IStudentFavoriteBookArtMedium)e.Item).StudentFavoriteBook = this);
                _studentFavoriteBookArtMedia = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<Entities.Common.Sample.IStudentFavoriteBookArtMedium, StudentFavoriteBookArtMedium>(value);
                covariantList.ItemAdded += (s, e) => ((Entities.Common.Sample.IStudentFavoriteBookArtMedium)e.Item).StudentFavoriteBook = this;
                _studentFavoriteBookArtMediaCovariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.Sample.IStudentFavoriteBookArtMedium> Entities.Common.Sample.IStudentFavoriteBook.StudentFavoriteBookArtMedia
        {
            get { return _studentFavoriteBookArtMediaCovariant; }
            set { StudentFavoriteBookArtMedia = new List<StudentFavoriteBookArtMedium>(value.Cast<StudentFavoriteBookArtMedium>()); }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect external inbound references on deserialization
            if (_studentFavoriteBookArtMedia != null) foreach (var item in _studentFavoriteBookArtMedia)
            {
                item.StudentFavoriteBook = this;
            }

        }
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StudentFavoriteBookMapper.SynchronizeTo(this, (Entities.Common.Sample.IStudentFavoriteBook)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StudentFavoriteBookMapper.MapTo(this, (Entities.Common.Sample.IStudentFavoriteBook)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStudentFavoriteBookSynchronizationSourceSupport.IsBookTitleSupported                    { get { return true; } set { } }
        bool Entities.Common.Sample.IStudentFavoriteBookSynchronizationSourceSupport.IsStudentFavoriteBookArtMediaSupported  { get { return true; } set { } }

        // Child collection item filter delegates
        Func<Entities.Common.Sample.IStudentFavoriteBookArtMedium, bool> Entities.Common.Sample.IStudentFavoriteBookSynchronizationSourceSupport.IsStudentFavoriteBookArtMediumIncluded
        { 
            get { return null; }
            set { }
        }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StudentFavoriteBookPutPostRequestValidator : FluentValidation.AbstractValidator<StudentFavoriteBook>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StudentFavoriteBook> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators
            var studentFavoriteBookArtMediaValidator = new StudentFavoriteBookArtMediumPutPostRequestValidator();

            foreach (var item in instance.StudentFavoriteBookArtMedia)
            {
                var validationResult = studentFavoriteBookArtMediaValidator.Validate(item);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }


            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the sample.StudentFavoriteBookArtMedium table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StudentFavoriteBookArtMedium : Entities.Common.Sample.IStudentFavoriteBookArtMedium, Entities.Common.Sample.IStudentFavoriteBookArtMediumSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.Sample.IStudentFavoriteBook _studentFavoriteBook;

        [IgnoreDataMember]
        Entities.Common.Sample.IStudentFavoriteBook Entities.Common.Sample.IStudentFavoriteBookArtMedium.StudentFavoriteBook
        {
            get { return _studentFavoriteBook; }
            set { SetStudentFavoriteBook(value); }
        }

        internal Entities.Common.Sample.IStudentFavoriteBook StudentFavoriteBook
        {
            set { SetStudentFavoriteBook(value); }
        }

        private void SetStudentFavoriteBook(Entities.Common.Sample.IStudentFavoriteBook value)
        {
            _studentFavoriteBook = value;
        }

        /// <summary>
        /// This is documentation.
        /// </summary>
        // NOT in a reference, IS a lookup column 
        [DataMember(Name="artMediumDescriptor"), NaturalKeyMember]
        public string ArtMediumDescriptor { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStudentFavoriteBookArtMedium;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_studentFavoriteBook == null || !_studentFavoriteBook.Equals(compareTo.StudentFavoriteBook))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.Sample.IStudentFavoriteBookArtMedium).ArtMediumDescriptor == null
                || !(this as Entities.Common.Sample.IStudentFavoriteBookArtMedium).ArtMediumDescriptor.Equals(compareTo.ArtMediumDescriptor)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_studentFavoriteBook != null)
                    hash = hash * 23 + _studentFavoriteBook.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.Sample.IStudentFavoriteBookArtMedium).ArtMediumDescriptor != null) 
                    hash = hash * 23 + (this as Entities.Common.Sample.IStudentFavoriteBookArtMedium).ArtMediumDescriptor.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// This is documentation.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="artPieces")]
        public int? ArtPieces { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StudentFavoriteBookArtMediumMapper.SynchronizeTo(this, (Entities.Common.Sample.IStudentFavoriteBookArtMedium)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StudentFavoriteBookArtMediumMapper.MapTo(this, (Entities.Common.Sample.IStudentFavoriteBookArtMedium)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStudentFavoriteBookArtMediumSynchronizationSourceSupport.IsArtPiecesSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StudentFavoriteBookArtMediumPutPostRequestValidator : FluentValidation.AbstractValidator<StudentFavoriteBookArtMedium>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StudentFavoriteBookArtMedium> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the sample.StudentPet table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StudentPet : Entities.Common.Sample.IStudentPet, Entities.Common.Sample.IStudentPetSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.Sample.IStudentExtension _studentExtension;

        [IgnoreDataMember]
        Entities.Common.Sample.IStudentExtension Entities.Common.Sample.IStudentPet.StudentExtension
        {
            get { return _studentExtension; }
            set { SetStudentExtension(value); }
        }

        internal Entities.Common.Sample.IStudentExtension StudentExtension
        {
            set { SetStudentExtension(value); }
        }

        private void SetStudentExtension(Entities.Common.Sample.IStudentExtension value)
        {
            _studentExtension = value;
        }

        /// <summary>
        /// The pet's name.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="petName"), NaturalKeyMember]
        public string PetName { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStudentPet;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_studentExtension == null || !_studentExtension.Equals(compareTo.StudentExtension))
                return false;

 
            // Standard Property
            if ((this as Entities.Common.Sample.IStudentPet).PetName == null
                || !(this as Entities.Common.Sample.IStudentPet).PetName.Equals(compareTo.PetName)) 
                return false;
            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_studentExtension != null)
                    hash = hash * 23 + _studentExtension.GetHashCode();
 
                // Standard Property
                if ((this as Entities.Common.Sample.IStudentPet).PetName != null) 
                    hash = hash * 23 + (this as Entities.Common.Sample.IStudentPet).PetName.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// An indication as to whether the pet has been spayed/neutered.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="isFixed")]
        public bool? IsFixed { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StudentPetMapper.SynchronizeTo(this, (Entities.Common.Sample.IStudentPet)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StudentPetMapper.MapTo(this, (Entities.Common.Sample.IStudentPet)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStudentPetSynchronizationSourceSupport.IsIsFixedSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StudentPetPutPostRequestValidator : FluentValidation.AbstractValidator<StudentPet>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StudentPet> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

    /// <summary>
    /// A class which represents the sample.StudentPetPreference table of the Student aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract]
    [ExcludeFromCodeCoverage]
    public class StudentPetPreference : Entities.Common.Sample.IStudentPetPreference, Entities.Common.Sample.IStudentPetPreferenceSynchronizationSourceSupport
    {
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private Entities.Common.Sample.IStudentExtension _studentExtension;

        [IgnoreDataMember]
        Entities.Common.Sample.IStudentExtension Entities.Common.Sample.IStudentPetPreference.StudentExtension
        {
            get { return _studentExtension; }
            set { SetStudentExtension(value); }
        }

        internal Entities.Common.Sample.IStudentExtension StudentExtension
        {
            set { SetStudentExtension(value); }
        }

        private void SetStudentExtension(Entities.Common.Sample.IStudentExtension value)
        {
            _studentExtension = value;
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            #pragma warning disable 472
            var compareTo = obj as Entities.Common.Sample.IStudentPetPreference;
        
            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;
            
            // Parent Property
            if (_studentExtension == null || !_studentExtension.Equals(compareTo.StudentExtension))
                return false;

            #pragma warning disable 472

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            #pragma warning disable 472
            unchecked
            {
                int hash = 17;
                //Parent Property
                if (_studentExtension != null)
                    hash = hash * 23 + _studentExtension.GetHashCode();
                return hash;
            }
            #pragma warning restore 472
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------

        /// <summary>
        /// The preferred maximum weight of a household pet.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="maximumWeight")]
        public int MaximumWeight { get; set; }

        /// <summary>
        /// The preferred minimum weight of a household pet.
        /// </summary>
        // NOT in a reference, NOT a lookup column 
        [DataMember(Name="minimumWeight")]
        public int MinimumWeight { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------
    
        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { } 
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return Entities.Common.Sample.StudentPetPreferenceMapper.SynchronizeTo(this, (Entities.Common.Sample.IStudentPetPreference)target);
        }

        void IMappable.Map(object target)
        {
            Entities.Common.Sample.StudentPetPreferenceMapper.MapTo(this, (Entities.Common.Sample.IStudentPetPreference)target, null);
        }
        // -------------------------------------------------------------

        // =============================================================
        //                Synchronization Source Support
        // -------------------------------------------------------------
        bool Entities.Common.Sample.IStudentPetPreferenceSynchronizationSourceSupport.IsMaximumWeightSupported  { get { return true; } set { } }
        bool Entities.Common.Sample.IStudentPetPreferenceSynchronizationSourceSupport.IsMinimumWeightSupported  { get { return true; } set { } }
        // -------------------------------------------------------------


        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        // -----------------------------------------------------------------
    }

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------

    [ExcludeFromCodeCoverage]
    public class StudentPetPreferencePutPostRequestValidator : FluentValidation.AbstractValidator<StudentPetPreference>
    {
        protected override bool PreValidate(FluentValidation.ValidationContext<StudentPetPreference> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            // -----------------------
            //  Validate unified keys
            // -----------------------
        
            // Recursively invoke the child collection item validators

            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    // -----------------------------------------------------------------

}
