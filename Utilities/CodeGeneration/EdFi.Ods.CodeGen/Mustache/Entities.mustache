using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Runtime.Serialization;
using EdFi.Ods.Api;
using EdFi.Ods.Api.Caching;
using EdFi.Ods.Api.Extensibility;
using EdFi.Ods.Api.NHibernate;
using EdFi.Ods.Api.NHibernate.Architecture;
using EdFi.Ods.Api.Validation;
using EdFi.Ods.Common;
using EdFi.Ods.Common.Extensions;
{{#HasExtensionDerivedFromEdFiBaseEntity}}
using EdFi.Ods.Entities.Common.EdFi;
{{/HasExtensionDerivedFromEdFiBaseEntity}}
using EdFi.Ods.Entities.Common.{{SchemaProperCaseName}};
using EdFi.Ods.Entities.Common.Records.{{SchemaProperCaseName}};
using Newtonsoft.Json;

{{#Aggregates}}
// Aggregate: {{AggregateName}}

namespace {{AggregateNamespace}}
{
    {{#Classes}}
        {{#IsImplicitExtension}}

{{> Entities_ImplicitExtension}}
        {{/IsImplicitExtension}}
        {{^IsImplicitExtension}}
        {{#HasReferenceDataClass}}
    /// <summary>
    /// Represents a read-only reference to the <see cref="{{ClassName}}"/> entity.
    /// </summary>
    public class {{ReferenceDataClassName}} : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        {{#PrimaryKey}}
            {{#NonParentProperties}}
        public virtual {{CSharpDeclaredType}} {{CSharpSafePropertyName}} { get; set; }
            {{/NonParentProperties}}
        {{/PrimaryKey}}
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }
        {{#HasDiscriminator}}

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }
        {{/HasDiscriminator}}

        {{#PrimaryKeyMap}}
        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            {{#ParentClassName}}
            // Get parent key values
            var keyValues = ({{ParentClassName}} as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            {{/ParentClassName}}
            {{^ParentClassName}}
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();
            {{/ParentClassName}}

            // Add current key values
            {{#PropertyNames}}
            keyValues.Add("{{PropertyName}}", {{CSharpSafePropertyName}});
            {{/PropertyNames}}

            return keyValues;
        }

        {{/PrimaryKeyMap}}
        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

        {{/HasReferenceDataClass}}
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the {{SchemaName}}.{{TableName}} table of the {{AggregateName}} aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("{{SchemaName}}")]
    [ExcludeFromCodeCoverage]
    public {{#IsAbstract}}abstract {{/IsAbstract}}class {{ClassName}}{{#IsConcreteEntityBaseClass}}Base{{/IsConcreteEntityBaseClass}}{{#IsConcreteEntityChildClassForBase}}ForBase{{/IsConcreteEntityChildClassForBase}} : {{#IsDerived}}{{BaseAggregateRootRelativeNamespace}}{{#IsConcreteEntityBaseClass}}Base{{/IsConcreteEntityBaseClass}}{{/IsDerived}}{{^IsDerived}}{{#IsAggregateRoot}}AggregateRootWithCompositeKey{{/IsAggregateRoot}}{{^IsAggregateRoot}}EntityWithCompositeKey{{/IsAggregateRoot}}{{/IsDerived}},{{^IsAggregateRoot}} IChildEntity,{{/IsAggregateRoot}}{{#AllowsPrimaryKeyUpdates}} IHasCascadableKeyValues,{{/AllowsPrimaryKeyUpdates}}
        {{NamespacePrefix}}I{{ClassName}}, {{RecordNamespacePrefix}}I{{ClassName}}Record, IHasPrimaryKeyValues{{#HasAlternateKeyValues}}, IHasAlternateKeyValues{{/HasAlternateKeyValues}}, IHasLookupColumnPropertyMap{{^IsAbstract}}, {{NamespacePrefix}}I{{ClassName}}SynchronizationSourceSupport{{/IsAbstract}}{{#IsDescriptor}}, IEdFiDescriptor{{/IsDescriptor}}{{#ExtendableConcreteBase}}, IHasExtensions{{/ExtendableConcreteBase}}
    {
        {{^IsDerived}}
        public virtual void SuspendReferenceAssignmentCheck() { }

        {{/IsDerived}}
        {{#Constructor}}
            {{#IsConcreteEntityBaseClass}}
        [Obsolete("This class is not intended to be used directly.  Use the {{UnderlyingClassName}} entity instead for a concrete class mapped to the {{TableName}} table.")]
            {{/IsConcreteEntityBaseClass}}
        {{#IsConcreteEntityBaseClass}}protected{{/IsConcreteEntityBaseClass}}{{^IsConcreteEntityBaseClass}}public{{/IsConcreteEntityBaseClass}} {{ContextualClassName}}{{#IsConcreteEntityChildClassForBase}}ForBase{{/IsConcreteEntityChildClassForBase}}()
        {
            {{#EmbeddedObjects}}
           {{EmbeddedObjectPropertyName}} = new HashSet<{{Name}}>();
            {{/EmbeddedObjects}}
            {{#Collections}}
            {{CollectionName}} = new HashSet<{{ContextualCollectionItemName}}>();
            {{/Collections}}
            {{#IsExtendable}}
            Extensions = new Dictionary<string, object>(EntityExtensionsFactory.Instance.CreateRequiredEntityExtensions<{{ContextualClassName}}>(this));
            AggregateExtensions = new Dictionary<string, object>(EntityExtensionsFactory.Instance.CreateAggregateExtensions<{{ContextualClassName}}>());
            {{/IsExtendable}}
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618
        {{/Constructor}}

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        {{#PrimaryKey}}
            {{#ParentReference}}
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual {{EntityParentClassNamespacePrefix}}{{EntityParentClassName}}{{ContextualSuffix}} {{EntityParentClassName}} { get; set; }

        {{ModelParentInterfaceNamespacePrefix}}{{ModelParentInterfaceName}} I{{ClassName}}.{{ModelParentClassName}}
        {
                {{^IsAggregateExtension}}
            get { return {{EntityParentClassName}}; }
            set { {{EntityParentClassName}} = ({{EntityParentClassNamespacePrefix}}{{EntityParentClassName}}{{ContextualSuffix}}) value; }
                {{/IsAggregateExtension}}
                {{#IsAggregateExtension}}
            get { return ({{ModelParentInterfaceName}}) {{EntityParentClassName}}.Extensions["{{SchemaProperCaseName}}"]; }
            set { {{EntityParentClassName}}.Extensions["{{SchemaProperCaseName}}"] = value; }
                {{/IsAggregateExtension}}
        }

        {{#RecordProperties}}
        {{CSharpType}} {{RecordNamespacePrefix}}I{{ClassName}}Record.{{PropertyName}}
        {
            get { return (({{ParentRecordInterfaceName}}) {{ParentClassName}}).{{ParentPropertyName}}; }
            set { (({{ParentRecordInterfaceName}}) {{ParentClassName}}).{{ParentPropertyName}} = value; }
        }

        {{/RecordProperties}}
            {{/ParentReference}}
            {{#NonParentProperties}}
                {{^IsAbstract}}
        {{#DisplayName}}[Display(Name="{{DisplayName}}")]
        {{/DisplayName}}[DomainSignature{{#IsRequiredWithNonDefault}}, RequiredWithNonDefault{{#ValidationReferenceName}}("{{ValidationReferenceName}}"){{/ValidationReferenceName}}{{/IsRequiredWithNonDefault}}{{#IsDateTime}}, SqlServerDateTimeRange{{/IsDateTime}}{{#IsString}}, StringLength({{MaxLength}}), NoDangerousText{{/IsString}}{{#NoWhitespaceEnforced}}, NoWhitespace{{/NoWhitespaceEnforced}}]
                {{/IsAbstract}}
        public {{#NeedsOverride}}override{{/NeedsOverride}}{{^NeedsOverride}}virtual{{/NeedsOverride}} {{CSharpDeclaredType}} {{CSharpSafePropertyName}} {{#IsStandardProperty}} { get; set; }{{/IsStandardProperty}}
                {{#PropertyAccessors}}
{{> Entities_PropertyAccessors}}
                {{/PropertyAccessors}}
            {{/NonParentProperties}}
        {{/PrimaryKey}}
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        {{#IsDerived}}
        {{#InheritedProperties}}
        {{CSharpType}} I{{BaseClassName}}.{{PropertyName}}
        {
            get { return {{PropertyName}}; }
            set { {{PropertyName}} = value; }
        }
        {{/InheritedProperties}}
        {{/IsDerived}}
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        {{#Properties}}
            {{#Attributes}}
        [{{Attributes}}]
            {{/Attributes}}
            {{#RangeAttribute}}
        [Range(typeof({{CSharpBaseType}}), "{{MinimumRangeValue}}", "{{MaximumRangeValue}}")]
            {{/RangeAttribute}}
        public virtual {{CSharpDeclaredType}} {{CSharpSafePropertyName}} {{#IsStandardProperty}} { get; set; }{{/IsStandardProperty}}
            {{#PropertyAccessors}}
{{> Entities_PropertyAccessors}}
            {{/PropertyAccessors}}
        {{/Properties}}
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
            {{#OneToOnes}}
        [ValidateObject]
        public virtual {{AggregateNamespacePrefix}}{{OtherClassName}} {{OtherClassName}}
        {
            get
            {
                // Return the item in the list, if one exists
                if ({{EmbeddedObjectPropertyName}}.Any())
                    return {{EmbeddedObjectPropertyName}}.First();

                // No reference is present
                return null;
            }
            set
            {
                // Delete the existing object
                if ({{EmbeddedObjectPropertyName}}.Any())
                    {{EmbeddedObjectPropertyName}}.Clear();

                // If we're setting a value, add it to the list now
                if (value != null)
                {
                    // Set the back-reference to the parent
                    value.{{ClassName}} = this;

                    {{EmbeddedObjectPropertyName}}.Add(value);
                }
            }
        }

        {{OtherNamespacePrefix}}I{{OtherClassName}} {{NamespacePrefix}}I{{ClassName}}.{{OtherClassName}}
        {
            get { return {{OtherClassName}}; }
            set { {{OtherClassName}} = ({{AggregateNamespacePrefix}}{{OtherClassName}}) value; }
        }

        private ICollection<{{AggregateNamespacePrefix}}{{OtherClassName}}> _{{EmbeddedObjectPropertyNameCamelCase}};

        public virtual ICollection<{{AggregateNamespacePrefix}}{{OtherClassName}}> {{EmbeddedObjectPropertyName}}
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _{{EmbeddedObjectPropertyNameCamelCase}})
                    if (item.{{ClassName}} == null)
                        item.{{ClassName}} = this;
                // -------------------------------------------------------------

                return _{{EmbeddedObjectPropertyNameCamelCase}};
            }
            set
            {
                _{{EmbeddedObjectPropertyNameCamelCase}} = value;
            }
        }

            {{/OneToOnes}}
            {{#RelocatedExtensionOneToOnes}}
        // This property implementation exists to provide the mapper with reflection-based access to the target instance's .NET type (for creating new instances)
        public {{AggregateNamespacePrefix}}{{OtherClassName}} {{OtherClassName}}
        {
            get { return ({{AggregateNamespacePrefix}}{{OtherClassName}}) (this as {{NamespacePrefix}}I{{ClassName}}).{{OtherClassName}};  }
            set { (this as {{OtherNamespacePrefix}}I{{ClassName}}).{{OtherClassName}} = value;  }
        }

        // Aggregate extension explicit implementation to redirect model abstraction to the persistent entity location
        {{OtherNamespacePrefix}}I{{OtherClassName}} {{OtherNamespacePrefix}}I{{ClassName}}.{{OtherClassName}}
        {
            get
            {
                var list = (IList) {{EdFiStandardClassName}}.AggregateExtensions["{{SchemaName}}_{{OtherClassPluralName}}"];

                if (list != null && list.Count > 0)
                    return ({{OtherNamespacePrefix}}I{{OtherClassName}}) list[0];

                return null;
            }
            set
            {
                // Delete the existing object
                var list = (IList) {{EdFiStandardClassName}}.AggregateExtensions["{{SchemaName}}_{{OtherClassPluralName}}"] ?? new List<object>();
                list.Clear();

                // If we're setting a value, add it to the list now
                if (value != null)
                {
                    list.Add(value);

                    // Set the parent reference
                    (value as IChildEntity).SetParent({{EdFiStandardClassName}});
                }
            }
        }
            {{/RelocatedExtensionOneToOnes}}
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        {{#IsExtendable}}
        {{^ExtendableConcreteBase}}
        [ValidateExtensions]
        public{{#IsConcreteEntityBaseClass}} virtual{{/IsConcreteEntityBaseClass}} IDictionary Extensions { get; set; }
        
        [ValidateAggregateExtensions]
        public{{#IsConcreteEntityBaseClass}} virtual{{/IsConcreteEntityBaseClass}} IDictionary AggregateExtensions { get; set; }
        {{/ExtendableConcreteBase}}
        {{/IsExtendable}}
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        {{#AggregateReferences}}
        public virtual {{ReferenceAggregateRelativeNamespace}}.{{ReferenceDataClassName }} {{ReferenceDataPropertyName}} { get; set; }

        {{#MappedReferenceDataHasDiscriminator}}
        /// <summary>
        /// Read-only property that allows the {{ReferenceAssociationName}} discriminator value to be mapped to the resource reference.
        /// </summary>
        string {{NamespacePrefix}}I{{ClassName}}.{{ReferenceAssociationName}}Discriminator
        {
            get { return {{ReferenceDataPropertyName}}?.Discriminator; }
            set { }
        }

        {{/MappedReferenceDataHasDiscriminator}}
        /// <summary>
        /// Read-only property that allows the {{ReferenceAssociationName}} resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? {{NamespacePrefix}}I{{ClassName}}.{{ReferenceAssociationName}}ResourceId
        {
            get { return {{ReferenceDataPropertyName}}?.Id; }
            set { }
        }

        {{/AggregateReferences}}
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        {{#NavigableChildren}}

        private ICollection<{{AggregateNamespacePrefix}}{{ChildClassName}}{{#IsChildForConcreteBase}}ForBase{{/IsChildForConcreteBase}}> {{ChildCollectionFieldName}};
        private ICollection<{{ChildRelativeNamespace}}I{{ChildClassName}}> {{ChildCollectionFieldName}}Covariant;
        {{#IsRequiredCollection}}
        [RequiredCollection]
        {{/IsRequiredCollection}}
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<{{AggregateNamespacePrefix}}{{ChildClassName}}{{#IsChildForConcreteBase}}ForBase{{/IsChildForConcreteBase}}> {{ChildCollectionPropertyName}}
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in {{ChildCollectionFieldName}})
                    if (item.{{ClassName}} == null)
                        item.{{ClassName}} = this;
                // -------------------------------------------------------------

                return {{ChildCollectionFieldName}};
            }
            set
            {
                {{ChildCollectionFieldName}} = value;
                {{ChildCollectionFieldName}}Covariant = new CovariantCollectionAdapter<{{ChildRelativeNamespace}}I{{ChildClassName}}, {{AggregateNamespacePrefix}}{{ChildClassName}}{{#IsChildForConcreteBase}}ForBase{{/IsChildForConcreteBase}}>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<{{ChildRelativeNamespace}}I{{ChildClassName}}> {{NamespacePrefix}}I{{ClassName}}.{{ChildCollectionPropertyName}}
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in {{ChildCollectionFieldName}})
                    if (item.{{ClassName}} == null)
                        item.{{ClassName}} = this;
                // -------------------------------------------------------------

                return {{ChildCollectionFieldName}}Covariant;
            }
            set
            {
                {{ChildCollectionPropertyName}} = new HashSet<{{AggregateNamespacePrefix}}{{ChildClassName}}{{#IsChildForConcreteBase}}ForBase{{/IsChildForConcreteBase}}>(value.Cast<{{AggregateNamespacePrefix}}{{ChildClassName}}{{#IsChildForConcreteBase}}ForBase{{/IsChildForConcreteBase}}>());
            }
        }

        {{/NavigableChildren}}
        {{#RelocatedExtensionCollections}}
        {{#IsRequiredCollection}}
        [RequiredCollection]
        {{/IsRequiredCollection}}
        private ICollection<{{ChildRelativeNamespace}}I{{ChildClassName}}> {{ChildCollectionFieldName}};
        // Aggregate extension explicit implementation to redirect model abstraction to the persistent entity location
        ICollection<{{ChildRelativeNamespace}}I{{ChildClassName}}> I{{ClassName}}.{{ChildCollectionPropertyName}}
        {
            get
            {
                var sourceList =  new ContravariantCollectionAdapter<object, {{AggregateNamespacePrefix}}{{ChildClassName}}>((IList<object>) {{EdFiStandardClassName}}.AggregateExtensions["{{SchemaName}}_{{ChildCollectionPropertyName}}"]);

                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach ({{AggregateNamespacePrefix}}{{ChildClassName}} item in sourceList)
                    if (item.{{EntityParentClassName}} == null)
                        item.{{EntityParentClassName}} = this.{{EntityParentClassName}};
                // -------------------------------------------------------------

                if ({{ChildCollectionFieldName}} == null)
                    {{ChildCollectionFieldName}} = new CovariantCollectionAdapter<{{ChildRelativeNamespace}}I{{ChildClassName}}, {{AggregateNamespacePrefix}}{{ChildClassName}}>(sourceList);
                
                return {{ChildCollectionFieldName}};
            }
            set
            {
                {{EdFiStandardClassName}}.AggregateExtensions["{{SchemaName}}_{{ChildCollectionPropertyName}}"] = value;
            }
        }
        {{/RelocatedExtensionCollections}}
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
        {{#LookupProperties}}
                { "{{ValuePropertyName}}", new LookupColumnDetails { PropertyName = "{{PropertyName}}", LookupTypeName = "{{ValueEntityName}}"} },
        {{/LookupProperties}}
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        {{#PrimaryKeyMap}}
        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            {{#ParentClassName}}
            // Get parent key values
            var keyValues = ({{ParentClassName}} as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            {{/ParentClassName}}
            {{^ParentClassName}}
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();
            {{/ParentClassName}}

            // Add current key values
            {{#PropertyNames}}
            keyValues.Add("{{PropertyName}}", {{CSharpSafePropertyName}});
            {{/PropertyNames}}

            return keyValues;
        }

        {{/PrimaryKeyMap}}
        {{#AllowsPrimaryKeyUpdates}}
        /// <summary>
        /// Gets or sets the <see cref="OrderedDictionary"/> capturing the new key values that have
        /// not been modified directly on the entity.
        /// </summary>
        OrderedDictionary IHasCascadableKeyValues.NewKeyValues { get; set; }

        {{/AllowsPrimaryKeyUpdates}}
        {{#HasAlternateKeyValues}}
        // Provide alternate key information
        OrderedDictionary IHasAlternateKeyValues.GetAlternateKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();
            {{#AlternateKeyProperties}}
            keyValues.Add("{{PropertyName}}", {{PropertyName}});
            {{/AlternateKeyProperties}}
            return keyValues;
        }
        {{/HasAlternateKeyValues}}
        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        {{^IsAbstract}}
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo(({{NamespacePrefix}}I{{ClassName}})target);
        }

        void IMappable.Map(object target)
        {
            this.{{#IsDerivedExtensionEntityOfConcreteBase}}MapDerivedTo{{/IsDerivedExtensionEntityOfConcreteBase}}{{^IsDerivedExtensionEntityOfConcreteBase}}MapTo{{/IsDerivedExtensionEntityOfConcreteBase}}(({{NamespacePrefix}}I{{ClassName}}) target, null);
        }

        {{/IsAbstract}}
        {{#HasParent}}
        void IChildEntity.SetParent(object value)
        {
            {{EntityParentClassName}} = ({{EntityParentClassNamespacePrefix}}{{EntityParentClassName}}{{#IsConcreteEntityChildClassForBase}}Base{{/IsConcreteEntityChildClassForBase}}) value;
        }
        {{/HasParent}}
        {{^IsAbstract}}

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        {{#SynchronizationSupport}}
            {{#Properties}}
        private bool _is{{PropertyName}}Supported = true;
        bool {{NamespacePrefix}}I{{ClassName}}SynchronizationSourceSupport.Is{{PropertyName}}Supported
        {
            get { return _is{{PropertyName}}Supported; }
            set { _is{{PropertyName}}Supported = value; }
        }

            {{/Properties}}
            {{#CollectionClasses}}
        private Func<{{ChildCollectionRelativeNamespace}}I{{ChildCollectionClassName}}, bool> _is{{ChildCollectionRoleName}}{{ChildCollectionClassName}}Included;
        Func<{{ChildCollectionRelativeNamespace}}I{{ChildCollectionClassName}}, bool> {{NamespacePrefix}}I{{ClassName}}SynchronizationSourceSupport.Is{{ChildCollectionRoleName}}{{ChildCollectionClassName}}Included
        {
            get { return _is{{ChildCollectionClassName}}Included; }
            set { _is{{ChildCollectionClassName}}Included = value; }
        }

            {{/CollectionClasses}}
        {{/SynchronizationSupport}}
        // -----------------------------------------
        {{/IsAbstract}}
        {{#IsExtendable}}
        {{^ExtendableConcreteBase}}
        private readonly HashSet<string> _excludedExtensions = new HashSet<string>(StringComparer.InvariantCultureIgnoreCase);

        public{{#IsConcreteEntityBaseClass}} virtual{{/IsConcreteEntityBaseClass}} bool IsExtensionSupported(string name)
        {
            return !_excludedExtensions.Contains(name);
        }

        public{{#IsConcreteEntityBaseClass}} virtual{{/IsConcreteEntityBaseClass}} void SetExtensionSupported(string name, bool isSupported)
        {
            if (isSupported)
                _excludedExtensions.Remove(name);
            else
                _excludedExtensions.Add(name);
        }

        private readonly HashSet<string> _availableExtensions = new HashSet<string>(StringComparer.InvariantCultureIgnoreCase);

        public bool IsExtensionAvailable(string name)
        {
            return _availableExtensions.Contains(name);
        }

        public void SetExtensionAvailable(string name, bool isAvailable)
        {
            if (isAvailable)
                _availableExtensions.Add(name);
            else
                _availableExtensions.Remove(name);
        }
        {{/ExtendableConcreteBase}}
        {{/IsExtendable}}
    }
        {{/IsImplicitExtension}}
    {{/Classes}}
}
{{/Aggregates}}


