using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using EdFi.Common.Extensions;
using EdFi.Ods.Api.Caching;
using EdFi.Ods.Api.Attributes;
using EdFi.Ods.Common.Adapters;
using EdFi.Ods.Common.Attributes;
using EdFi.Ods.Common.Caching;
using EdFi.Ods.Common.Dependencies;
using EdFi.Ods.Common.Models.Domain;
using EdFi.Ods.Common.Infrastructure.Extensibility;
using EdFi.Ods.Common;
using EdFi.Ods.Common.Extensions;
using EdFi.Ods.Common.Serialization;
{{#HasExtensionDerivedFromEdFiBaseEntity}}
using EdFi.Ods.Entities.Common.EdFi;
{{/HasExtensionDerivedFromEdFiBaseEntity}}
using EdFi.Ods.Entities.Common.{{SchemaProperCaseName}};
using Newtonsoft.Json;
using MessagePack;
using KeyAttribute = MessagePack.KeyAttribute;

{{#Aggregates}}
// Aggregate: {{AggregateName}}

namespace {{AggregateNamespace}}
{
    {{#Classes}}
        {{#IsImplicitExtension}}

{{> Entities_ImplicitExtension}}
        {{/IsImplicitExtension}}
        {{^IsImplicitExtension}}
        {{#HasReferenceDataClass}}
    /// <summary>
    /// Represents a read-only reference to the <see cref="{{ClassName}}"/> entity.
    /// </summary>
    [MessagePackObject]
    public class {{ReferenceDataClassName}} : IEntityReferenceData
    {
        private bool _trackLookupContext;
        private Action<{{ReferenceDataClassName}}> _contextualValuesInitializer;
        private bool _contextualValuesInitialized;

        // Default constructor (used by NHibernate)
        public {{ReferenceDataClassName}}() { }

        // Constructor used for deferred initialization when the parent reference hasn't yet been initialized yet because we're falling back from stale serialized data to NHibernate hydration 
        public {{ReferenceDataClassName}}(Action<{{ReferenceDataClassName}}> contextualValuesInitializer)
        {
            _trackLookupContext = true;
            _contextualValuesInitializer = contextualValuesInitializer;
        }

        // Constructor (used for link support with Serialized Data feature)
        public {{ReferenceDataClassName}}({{#PrimaryKey}}{{#NonParentProperties}}{{CSharpDeclaredType}} contextual{{CSharpSafePropertyName}} = default, {{/NonParentProperties}}{{/PrimaryKey}}bool trackLookupContext = true)
        {
            _trackLookupContext = trackLookupContext;
    
            // Assign supplied contextual values (values pre-determined from parent context)
            {{#PrimaryKey}}
                {{#NonParentProperties}}
            {{CSharpSafeFieldName}} = contextual{{CSharpSafePropertyName}};
                {{/NonParentProperties}}
            {{/PrimaryKey}}

            _contextualValuesInitialized = true;
        }

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
{{! Id must appear first for deserialization support to allow for correct behavior of reference data resolution }}
        private Guid? _id;

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        [Key({{#ReferenceDataMessagePackIndexer}}{{NextKey}}{{/ReferenceDataMessagePackIndexer}})]
        public virtual Guid? Id
        {
            get => _id;
            set
            {
                _id = value;

                if (_trackLookupContext || (GeneratedArtifactStaticDependencies.SerializedDataEnabled && GeneratedArtifactStaticDependencies.ResourceLinksEnabled))
                {
                    // If explicitly setting this to a non-value, it needs to be resolved.
                    if (value == default(Guid) || value == null)
                    {
                        GeneratedArtifactStaticDependencies.ReferenceDataLookupContextProvider.Get()?.Add(this);
                    }
                }
            }
        }

        {{#PrimaryKey}}
            {{#NonParentProperties}}
        private {{CSharpDeclaredType}} {{CSharpSafeFieldName}};

        [Key({{#ReferenceDataMessagePackIndexer}}{{NextKey}}{{/ReferenceDataMessagePackIndexer}})]
        public virtual {{CSharpDeclaredType}} {{CSharpSafePropertyName}}
        {
            get { EnsureContextualValuesInitialized(); return {{CSharpSafeFieldName}}; }
            set
            {
                var originalValue = {{CSharpSafeFieldName}};
                {{CSharpSafeFieldName}} = value;

                if (_trackLookupContext)
                {
                    // If Id is NOT already known then value is being initialized (from mapping or syncing -- not deserialized) and needs resolution 
                    if (_id == default && originalValue == default && value != default && IsFullyDefined())
                    {
                        GeneratedArtifactStaticDependencies.ReferenceDataLookupContextProvider.Get()?.Add(this);
                    }
                    // If key value is changing (i.e. only via Synchronize)
                    else if (originalValue != default && value != originalValue) 
                    {
                        // Clear the values
                        Id = default;
                    {{#HasDiscriminator}}
                        Discriminator = null;
                    {{/HasDiscriminator}}
                        GeneratedArtifactStaticDependencies.ReferenceDataLookupContextProvider.Get()?.Add(this);
                    }
                }
            }
        }
            {{/NonParentProperties}}
        {{/PrimaryKey}}

        private void EnsureContextualValuesInitialized()
        {
            if (!_contextualValuesInitialized && _contextualValuesInitializer != null)
            {
                _contextualValuesInitializer(this);
                _contextualValuesInitialized = true;
            }
        }

        {{#PrimaryKey}}
        public virtual bool IsFullyDefined()
        {
            return
            {{#NonParentProperties}}
                {{^IsFirst}}&& {{/IsFirst}}{{CSharpSafeFieldName}} != default
            {{/NonParentProperties}};
        }
        {{/PrimaryKey}}
        {{#HasDiscriminator}}

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        [Key({{#ReferenceDataMessagePackIndexer}}{{NextKey}}{{/ReferenceDataMessagePackIndexer}})]
        public virtual string Discriminator { get; set; }
        {{/HasDiscriminator}}
        {{^HasDiscriminator}}

        string IEntityReferenceData.Discriminator { get => null; set {} }
        {{/HasDiscriminator}}

        private static FullName _fullName = new FullName("{{SchemaName}}", "{{TableName}}"); 
        FullName IEntityReferenceData.FullName { get => _fullName; }
    
        {{#PrimaryKeyMap}}
        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            {{#ParentClassName}}
            // Get parent key values
            var keyValues = ({{ParentClassName}} as IHasPrimaryKeyValues)?.GetPrimaryKeyValues() ?? new OrderedDictionary();
            {{/ParentClassName}}
            {{^ParentClassName}}
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();
            {{/ParentClassName}}

            // Add current key values
            {{#PropertyNames}}
            keyValues.Add("{{PropertyName}}", {{CSharpSafePropertyName}});
            {{/PropertyNames}}

            return keyValues;
        }

        {{/PrimaryKeyMap}}
        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        public override int GetHashCode()
        {
            var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            if (keyValues.Count == 0)
                return base.GetHashCode();

            var hashCode = new HashCode();

            foreach (DictionaryEntry entry in keyValues)
            {
                hashCode.Add(entry.Value);
            }

            return hashCode.ToHashCode();
        }
        #endregion
    }

        {{/HasReferenceDataClass}}
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the {{SchemaName}}.{{TableName}} table of the {{AggregateName}} aggregate in the ODS database.
    /// </summary>
    [Schema("{{SchemaName}}")]
    [ExcludeFromCodeCoverage]
    [MessagePackObject]
    public {{#IsAbstract}}abstract {{/IsAbstract}}class {{ClassName}}{{#IsConcreteEntityBaseClass}}Base{{/IsConcreteEntityBaseClass}}{{#IsConcreteEntityChildClassForBase}}ForBase{{/IsConcreteEntityChildClassForBase}} : {{#IsDerived}}{{BaseAggregateRootRelativeNamespace}}{{#IsConcreteEntityBaseClass}}Base{{/IsConcreteEntityBaseClass}}{{/IsDerived}}{{^IsDerived}}{{#IsAggregateRoot}}AggregateRootWithCompositeKey{{/IsAggregateRoot}}{{^IsAggregateRoot}}EntityWithCompositeKey{{/IsAggregateRoot}}{{/IsDerived}},{{^IsAggregateRoot}} IChildEntity,{{/IsAggregateRoot}}{{#AllowsPrimaryKeyUpdates}} IHasCascadableKeyValues,{{/AllowsPrimaryKeyUpdates}}
        {{NamespacePrefix}}I{{ClassName}}, IHasPrimaryKeyValues{{#HasAlternateKeyValues}}, IHasAlternateKeyValues{{/HasAlternateKeyValues}}, IHasLookupColumnPropertyMap{{#IsDescriptor}}, IEdFiDescriptor{{/IsDescriptor}}{{#IsPersonEntity}}, IPersonUsiMutator{{/IsPersonEntity}}{{#IsExtendable}}{{^ExtendableConcreteBase}}, IHasExtensions{{/ExtendableConcreteBase}}{{/IsExtendable}}
    {
        {{^IsDerived}}
        public virtual void SuspendReferenceAssignmentCheck() { }

        {{/IsDerived}}
        {{#Constructor}}
            {{#IsConcreteEntityBaseClass}}
        [Obsolete("This class is not intended to be used directly.  Use the {{UnderlyingClassName}} entity instead for a concrete class mapped to the {{TableName}} table.")]
            {{/IsConcreteEntityBaseClass}}
        {{#IsConcreteEntityBaseClass}}protected{{/IsConcreteEntityBaseClass}}{{^IsConcreteEntityBaseClass}}public{{/IsConcreteEntityBaseClass}} {{ContextualClassName}}{{#IsConcreteEntityChildClassForBase}}ForBase{{/IsConcreteEntityChildClassForBase}}()
        {
            {{#EmbeddedObjects}}
           {{EmbeddedObjectPropertyName}} = new HashSet<{{Name}}>();
            {{/EmbeddedObjects}}
            {{#Collections}}
            {{CollectionName}} = new HashSet<{{ContextualCollectionItemName}}>();
            {{/Collections}}
            {{#IsExtendable}}
            Extensions = GeneratedArtifactStaticDependencies.EntityExtensionsFactory == null ? new Dictionary<string, object>() : new Dictionary<string, object>(GeneratedArtifactStaticDependencies.EntityExtensionsFactory.CreateRequiredEntityExtensions<{{ContextualClassName}}>(this));
            AggregateExtensions = GeneratedArtifactStaticDependencies.EntityExtensionsFactory == null ? new Dictionary<string, object>() : new Dictionary<string, object>(GeneratedArtifactStaticDependencies.EntityExtensionsFactory.CreateAggregateExtensions<{{ContextualClassName}}>());
            {{/IsExtendable}}
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618
        {{/Constructor}}

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        {{#AggregateReferences}}
        private {{ReferenceAggregateRelativeNamespace}}.{{ReferenceDataClassName}} {{ReferenceDataFieldName}};

        private bool {{ReferenceDataPropertyName}}IsProxied()
        {
            return {{ReferenceDataFieldName}} != null 
                && {{ReferenceDataFieldName}}.GetType() != typeof({{ReferenceAggregateRelativeNamespace}}.{{ReferenceDataClassName}});
        }

        [IgnoreMember]
        public virtual {{ReferenceAggregateRelativeNamespace}}.{{ReferenceDataClassName}} {{ReferenceDataPropertyName}}
        {
            get => {{ReferenceDataFieldName}};
            set
            {
                {{ReferenceDataFieldName}} = value;

                if (value != null && GeneratedArtifactStaticDependencies.SerializedDataEnabled && GeneratedArtifactStaticDependencies.ResourceLinksEnabled
                    // NHibernate will proxy this object reference if it is not hydrated through an outer join in the query
                    && !{{ReferenceDataPropertyName}}IsProxied())
                {
                    // We've encountered an NHibernate hydrated reference data meaning we've already got all reference data needed
                    GeneratedArtifactStaticDependencies.ReferenceDataLookupContextProvider.Get()?.Suppress();
                }
            }
        }

        [Key({{#MessagePackIndexer}}{{NextKey}}{{/MessagePackIndexer}})]
        public virtual {{ReferenceAggregateRelativeNamespace}}.{{ReferenceDataClassName}} {{SerializedReferenceDataPropertyName}} { get => {{SerializedReferenceDataFieldName}}; set { if (value != null) {{SerializedReferenceDataFieldName}} = value; } }
        private {{ReferenceAggregateRelativeNamespace}}.{{ReferenceDataClassName}} {{SerializedReferenceDataFieldName}};

        {{#MappedReferenceDataHasDiscriminator}}
        /// <summary>
        /// A read-only property implementation that allows the {{ReferenceAssociationName}} discriminator value to be mapped to the resource reference.
        /// </summary>
        string {{NamespacePrefix}}I{{ClassName}}.{{ReferenceAssociationName}}Discriminator
        {
            get
            {
                return {{ReferenceDataPropertyName}}IsProxied()
                    ? ({{SerializedReferenceDataPropertyName}} ?? {{ReferenceDataPropertyName}})?.Discriminator
                    : ({{ReferenceDataPropertyName}} ?? {{SerializedReferenceDataPropertyName}})?.Discriminator;
            }
            set { }
        }

        {{/MappedReferenceDataHasDiscriminator}}
        /// <summary>
        /// A property implementation whose getter allows the {{ReferenceAssociationName}} resource identifier value to be mapped to the resource reference,
        /// and whose setter is used with serialized data and links features to signal need to resolve reference data from the ODS.
        /// </summary>
        Guid? {{NamespacePrefix}}I{{ClassName}}.{{ReferenceAssociationName}}ResourceId
        {
            {{#PotentiallyLogical}}
            get
            {
                if ({{ReferenceDataPropertyName}}IsProxied())
                {
                    {{ReferenceDataPropertyName}} = null;
                    return null;
                }

                return ({{ReferenceDataPropertyName}} ?? {{SerializedReferenceDataPropertyName}})?.Id;
            }
            {{/PotentiallyLogical}}
            {{^PotentiallyLogical}}
            get
            {
                return {{ReferenceDataPropertyName}}IsProxied()
                    ? ({{SerializedReferenceDataPropertyName}} ?? {{ReferenceDataPropertyName}})?.Id
                    : ({{ReferenceDataPropertyName}} ?? {{SerializedReferenceDataPropertyName}})?.Id;
            }
            {{/PotentiallyLogical}}
            set { if ({{SerializedReferenceDataPropertyName}}?.IsFullyDefined() == true) {{SerializedReferenceDataPropertyName}}.Id = value; }
        }

        {{/AggregateReferences}}
        // -------------------------------------------------------------

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        {{#PrimaryKey}}
            {{#ParentReference}}
        [DomainSignature, IgnoreMember]
        public virtual {{EntityParentClassNamespacePrefix}}{{EntityParentClassName}}{{ContextualSuffix}} {{EntityParentClassName}} { get; set; }

        {{ModelParentInterfaceNamespacePrefix}}{{ModelParentInterfaceName}} I{{ClassName}}.{{ModelParentClassName}}
        {
                {{^IsAggregateExtensionTopLevelEntity}}
            get { return {{EntityParentClassName}}; }
            set { {{EntityParentClassName}} = ({{EntityParentClassNamespacePrefix}}{{EntityParentClassName}}{{ContextualSuffix}}) value; }
                {{/IsAggregateExtensionTopLevelEntity}}
                {{#IsAggregateExtensionTopLevelEntity}}
            get { return ({{ModelParentInterfaceName}}) {{EntityParentClassName}}.Extensions["{{SchemaProperCaseName}}"]; }
            set { {{EntityParentClassName}}.Extensions["{{SchemaProperCaseName}}"] = value; }
                {{/IsAggregateExtensionTopLevelEntity}}
        }

            {{/ParentReference}}
            {{#NonParentProperties}}
                {{^IsAbstract}}
        {{#DisplayName}}[Display(Name="{{DisplayName}}")]{{/DisplayName}}[DomainSignature]
                {{/IsAbstract}}
                {{#IsDerived}}
        [IgnoreMember]
                {{/IsDerived}}
                {{^IsDerived}}
        [Key({{#MessagePackIndexer}}{{NextKey}}{{/MessagePackIndexer}})]
                {{/IsDerived}}
        public {{#NeedsOverride}}override{{/NeedsOverride}}{{^NeedsOverride}}virtual{{/NeedsOverride}} {{CSharpDeclaredType}} {{CSharpSafePropertyName}} {{#PropertyAccessors}}{{> Entities_PropertyAccessors}}{{/PropertyAccessors}}
            {{/NonParentProperties}}
        {{/PrimaryKey}}
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        {{#IsDerived}}
        {{#InheritedProperties}}
        {{CSharpType}} I{{BaseClassName}}.{{PropertyName}}
        {
            get { return {{PropertyName}}; }
            set { {{PropertyName}} = value; }
        }
        {{/InheritedProperties}}
        {{/IsDerived}}
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        {{#Properties}}
        [Key({{#MessagePackIndexer}}{{NextKey}}{{/MessagePackIndexer}})]
        public virtual {{CSharpDeclaredType}} {{CSharpSafePropertyName}} {{#PropertyAccessors}}{{> Entities_PropertyAccessors}}{{/PropertyAccessors}}
        {{/Properties}}
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
            {{#OneToOnes}}
        [IgnoreMember]
        public virtual {{AggregateNamespacePrefix}}{{OtherClassName}} {{OtherClassName}}
        {
            get
            {
                // Return the item in the list, if one exists
                if ({{EmbeddedObjectPropertyName}}.Any())
                    return {{EmbeddedObjectPropertyName}}.First();

                // No reference is present
                return null;
            }
            set
            {
                // Delete the existing object
                if ({{EmbeddedObjectPropertyName}}.Any())
                    {{EmbeddedObjectPropertyName}}.Clear();

                // If we're setting a value, add it to the list now
                if (value != null)
                {
                    // Set the back-reference to the parent
                    value.{{ClassName}} = this;

                    {{EmbeddedObjectPropertyName}}.Add(value);
                }
            }
        }

        {{OtherNamespacePrefix}}I{{OtherClassName}} {{NamespacePrefix}}I{{ClassName}}.{{OtherClassName}}
        {
            get { return {{OtherClassName}}; }
            set { {{OtherClassName}} = ({{AggregateNamespacePrefix}}{{OtherClassName}}) value; }
        }

        private ICollection<{{AggregateNamespacePrefix}}{{OtherClassName}}> _{{EmbeddedObjectPropertyNameCamelCase}};

        [Key({{#MessagePackIndexer}}{{NextKey}}{{/MessagePackIndexer}})]
        [MessagePackFormatter(typeof(PersistentCollectionFormatter<{{AggregateNamespacePrefix}}{{OtherClassName}}>))]
        public virtual ICollection<{{AggregateNamespacePrefix}}{{OtherClassName}}> {{EmbeddedObjectPropertyName}}
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                if (_{{EmbeddedObjectPropertyNameCamelCase}} is DeserializedPersistentGenericSet<{{AggregateNamespacePrefix}}{{OtherClassName}}> set)
                {
                    set.Reattach(this, "{{OtherClassName}}");
                }

                foreach (var item in _{{EmbeddedObjectPropertyNameCamelCase}})
                    if (item.{{ClassName}} == null)
                        item.{{ClassName}} = this;
                // -------------------------------------------------------------

                return _{{EmbeddedObjectPropertyNameCamelCase}};
            }
            set
            {
                _{{EmbeddedObjectPropertyNameCamelCase}} = value;
            }
        }

            {{/OneToOnes}}
            {{#RelocatedExtensionOneToOnes}}
        [IgnoreMember]
        // This property implementation exists to provide the mapper with reflection-based access to the target instance's .NET type (for creating new instances)
        public {{AggregateNamespacePrefix}}{{OtherClassName}} {{OtherClassName}}
        {
            get { return ({{AggregateNamespacePrefix}}{{OtherClassName}}) (this as {{NamespacePrefix}}I{{ClassName}}).{{OtherClassName}};  }
            set { (this as {{OtherNamespacePrefix}}I{{ClassName}}).{{OtherClassName}} = value;  }
        }

        // Aggregate extension explicit implementation to redirect model abstraction to the persistent entity location
        {{OtherNamespacePrefix}}I{{OtherClassName}} {{OtherNamespacePrefix}}I{{ClassName}}.{{OtherClassName}}
        {
            get
            {
                var list = (IList) {{EdFiStandardClassName}}.AggregateExtensions["{{AggregateExtensionBagName}}"];

                if (list != null && list.Count > 0)
                    return ({{OtherNamespacePrefix}}I{{OtherClassName}}) list[0];

                return null;
            }
            set
            {
                // Delete the existing object
                var list = (IList) {{EdFiStandardClassName}}.AggregateExtensions["{{AggregateExtensionBagName}}"] ?? new List<object>();
                list.Clear();

                // If we're setting a value, add it to the list now
                if (value != null)
                {
                    list.Add(value);

                    // Set the parent reference
                    (value as IChildEntity).SetParent({{EdFiStandardClassName}});
                }
            }
        }
            {{/RelocatedExtensionOneToOnes}}
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        {{#IsExtendable}}
        {{^ExtendableConcreteBase}}
        private IDictionary _extensions;

        [MessagePackFormatter(typeof(EntityExtensionsMessagePackFormatter), "{{AggregateName}}", "{{ClassName}}{{#IsConcreteEntityBaseClass}}Base{{/IsConcreteEntityBaseClass}}")]
        [Key({{#MessagePackIndexer}}{{NextKey}}{{/MessagePackIndexer}})]
        public{{#IsConcreteEntityBaseClass}} virtual{{/IsConcreteEntityBaseClass}} IDictionary Extensions
        {
            get 
            {
                foreach (var key in _extensions.Keys)
                {
                    if (_extensions[key] is IDeserializedPersistentGenericCollection collection)
                    {
                        collection.ReattachExtension(this, (string) key);
                    }
                }

                return _extensions;
            }
            set
            {
                // If the _extensions is null, this is being assigned from the constructor
                // for the first time and no special handling is required
                if (_extensions != null && value != null)
                {
                    // For extensions that have already been initialized by the extensions factory,
                    // we need to copy any "implicit" extension object entries over to the incoming
                    // value dictionary being assigned by NHibernate because it won't have them,
                    // but they must be there for correct handling of extensions for the API.
                    foreach (var key in _extensions.Keys)
                    {
                        if (!value.Contains(key))
                        {
                            value[key] = _extensions[key];
                        }
                    }
                }

                _extensions = value;
            }
        }

        private IDictionary _aggregateExtensions;

        [MessagePackFormatter(typeof(AggregateExtensionsMessagePackFormatter), "{{AggregateName}}", "{{ClassName}}{{#IsConcreteEntityBaseClass}}Base{{/IsConcreteEntityBaseClass}}")]
        [Key({{#MessagePackIndexer}}{{NextKey}}{{/MessagePackIndexer}})]
        public{{#IsConcreteEntityBaseClass}} virtual{{/IsConcreteEntityBaseClass}} IDictionary AggregateExtensions
        { 
            get
            {
                foreach (var key in _aggregateExtensions.Keys)
                {
                    if (_aggregateExtensions[key] is IDeserializedPersistentGenericCollection collection)
                    {
                        collection.ReattachAggregateExtension(this, (string) key);
                    }
                }

                return _aggregateExtensions; 
            }
            set
            {
                // If the _aggregateExtensions is null, this is being assigned from the constructor
                // for the first time and no special handling is required
                if (_aggregateExtensions != null && value != null)
                {
                    // For aggregate extensions that have already been initialized by the extensions factory,
                    // we need to copy any "implicit" aggregate extension object entries over to the incoming
                    // value dictionary being assigned by NHibernate (or deserialization) because it won't have them,
                    // but they must be there for correct handling of extensions for the API.
                    foreach (var key in _aggregateExtensions.Keys)
                    {
                        if (!value.Contains(key))
                        {
                            value[key] = _aggregateExtensions[key];
                        }
                    }
                }

                _aggregateExtensions = value;
            }
        }

        {{/ExtendableConcreteBase}}
        {{/IsExtendable}}
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        {{#NavigableChildren}}

        private ICollection<{{AggregateNamespacePrefix}}{{ChildClassName}}{{#IsChildForConcreteBase}}ForBase{{/IsChildForConcreteBase}}> {{ChildCollectionFieldName}};
        private ICollection<{{ChildRelativeNamespace}}I{{ChildClassName}}> {{ChildCollectionFieldName}}Covariant;
        [Key({{#MessagePackIndexer}}{{NextKey}}{{/MessagePackIndexer}})]
        [MessagePackFormatter(typeof(PersistentCollectionFormatter<{{AggregateNamespacePrefix}}{{ChildClassName}}>))]
        public virtual ICollection<{{AggregateNamespacePrefix}}{{ChildClassName}}{{#IsChildForConcreteBase}}ForBase{{/IsChildForConcreteBase}}> {{ChildCollectionPropertyName}}
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                if ({{ChildCollectionFieldName}} is DeserializedPersistentGenericSet<{{AggregateNamespacePrefix}}{{ChildClassName}}{{#IsChildForConcreteBase}}ForBase{{/IsChildForConcreteBase}}> set)
                {
                    set.Reattach(this, "{{ChildCollectionPropertyName}}");
                }
            
                foreach (var item in {{ChildCollectionFieldName}})
                    if (item.{{ClassName}} == null)
                        item.{{ClassName}} = this;
                // -------------------------------------------------------------

                return {{ChildCollectionFieldName}};
            }
            set
            {
                {{ChildCollectionFieldName}} = value;
                {{ChildCollectionFieldName}}Covariant = new CovariantCollectionAdapter<{{ChildRelativeNamespace}}I{{ChildClassName}}, {{AggregateNamespacePrefix}}{{ChildClassName}}{{#IsChildForConcreteBase}}ForBase{{/IsChildForConcreteBase}}>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<{{ChildRelativeNamespace}}I{{ChildClassName}}> {{NamespacePrefix}}I{{ClassName}}.{{ChildCollectionPropertyName}}
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in {{ChildCollectionFieldName}})
                    if (item.{{ClassName}} == null)
                        item.{{ClassName}} = this;
                // -------------------------------------------------------------

                return {{ChildCollectionFieldName}}Covariant;
            }
            set
            {
                {{ChildCollectionPropertyName}} = new HashSet<{{AggregateNamespacePrefix}}{{ChildClassName}}{{#IsChildForConcreteBase}}ForBase{{/IsChildForConcreteBase}}>(value.Cast<{{AggregateNamespacePrefix}}{{ChildClassName}}{{#IsChildForConcreteBase}}ForBase{{/IsChildForConcreteBase}}>());
            }
        }

        {{/NavigableChildren}}
        {{#RelocatedExtensionCollections}}
        private ICollection<{{ChildRelativeNamespace}}I{{ChildClassName}}> {{ChildCollectionFieldName}};
        // Aggregate extension explicit implementation to redirect model abstraction to the persistent entity location
        ICollection<{{ChildRelativeNamespace}}I{{ChildClassName}}> I{{ClassName}}.{{ChildCollectionPropertyName}}
        {
            get
            {
                var sourceList =  new ContravariantCollectionAdapter<object, {{AggregateNamespacePrefix}}{{ChildClassName}}>((IList<object>) {{EdFiStandardClassName}}.AggregateExtensions["{{AggregateExtensionBagName}}"]);

                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach ({{AggregateNamespacePrefix}}{{ChildClassName}} item in sourceList)
                    if (item.{{EntityParentClassName}} == null)
                        item.{{EntityParentClassName}} = this.{{EntityParentClassName}};
                // -------------------------------------------------------------

                if ({{ChildCollectionFieldName}} == null)
                    {{ChildCollectionFieldName}} = new CovariantCollectionAdapter<{{ChildRelativeNamespace}}I{{ChildClassName}}, {{AggregateNamespacePrefix}}{{ChildClassName}}>(sourceList);

                return {{ChildCollectionFieldName}};
            }
            set
            {
                {{EdFiStandardClassName}}.AggregateExtensions["{{AggregateExtensionBagName}}"] = value;
            }
        }
        {{/RelocatedExtensionCollections}}
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
        {{#LookupProperties}}
                { "{{ValuePropertyName}}", new LookupColumnDetails { PropertyName = "{{PropertyName}}", LookupTypeName = "{{ValueEntityName}}"} },
        {{/LookupProperties}}
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        {{#PrimaryKeyMap}}
        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            {{#ParentClassName}}
            // Get parent key values
            var keyValues = ({{ParentClassName}} as IHasPrimaryKeyValues)?.GetPrimaryKeyValues() ?? new OrderedDictionary();
            {{/ParentClassName}}
            {{^ParentClassName}}
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();
            {{/ParentClassName}}

            // Add current key values
            {{#PropertyNames}}
            keyValues.Add("{{PropertyName}}", {{CSharpSafePropertyName}});
            {{/PropertyNames}}

            return keyValues;
        }

        {{/PrimaryKeyMap}}
        {{#AllowsPrimaryKeyUpdates}}
        /// <summary>
        /// Gets or sets the <see cref="OrderedDictionary"/> capturing the new key values that have
        /// not been modified directly on the entity.
        /// </summary>
        OrderedDictionary IHasCascadableKeyValues.NewKeyValues { get; set; }

        {{/AllowsPrimaryKeyUpdates}}
        {{#HasAlternateKeyValues}}
        // Provide alternate key information
        (OrderedDictionary keyValues, bool isDefinedOnBaseType) IHasAlternateKeyValues.GetAlternateKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();
            {{#AlternateKeyProperties}}
            keyValues.Add("{{PropertyName}}", {{PropertyName}});
            {{/AlternateKeyProperties}}
            return (keyValues, {{#IsAbstract}}true{{/IsAbstract}}{{^IsAbstract}}false{{/IsAbstract}});
        }
        {{/HasAlternateKeyValues}}
        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer.Equals((string) entry.Value, (string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        public override int GetHashCode()
        {
            var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            if (keyValues.Count == 0)
                return base.GetHashCode();

            var hashCode = new HashCode();

            foreach (DictionaryEntry entry in keyValues)
            {
                if (entry.Value is string)
                {
                    hashCode.Add(entry.Value as string, GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer);
                }
                else
                {
                    hashCode.Add(entry.Value);
                }
            }

            return hashCode.ToHashCode();
        }
        #endregion
        {{^IsAbstract}}
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo(({{NamespacePrefix}}I{{ClassName}})target);
        }

        void IMappable.Map(object target)
        {
            this.{{#IsDerivedExtensionEntityOfConcreteBase}}MapDerivedTo{{/IsDerivedExtensionEntityOfConcreteBase}}{{^IsDerivedExtensionEntityOfConcreteBase}}MapTo{{/IsDerivedExtensionEntityOfConcreteBase}}(({{NamespacePrefix}}I{{ClassName}}) target, null);
        }

        {{/IsAbstract}}
        {{#HasParent}}
        void IChildEntity.SetParent(object value)
        {
            {{EntityParentClassName}} = ({{EntityParentClassNamespacePrefix}}{{EntityParentClassName}}{{#IsConcreteEntityChildClassForBase}}Base{{/IsConcreteEntityChildClassForBase}}) value;
        }
        {{/HasParent}}
    }
        {{/IsImplicitExtension}}
    {{/Classes}}
}
{{/Aggregates}}
