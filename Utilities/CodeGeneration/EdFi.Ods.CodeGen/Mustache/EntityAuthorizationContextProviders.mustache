
using System;
using System.Linq;
using System.Diagnostics.CodeAnalysis;
using {{ClaimsNamespace}};
using {{EntitiesNamespace}};
using {{AuthorizationStrategyNamespace}};

#region Aggregate Entity Includes
{{#AggregateEntityIncludes}}
using {{Include}};
{{/AggregateEntityIncludes}}
#endregion

namespace {{ContextDataProviderNamespace}}
{ 

{{#ResourcesToRender}}
    /// <summary>
    /// Creates and returns an <see cref="RelationshipsAuthorizationContextData"/> instance for making authorization decisions for access to the {{Schema}}.{{ResourceName}} table of the {{ResourceName}} aggregate in the Ods Database.
    /// </summary>
    [ExcludeFromCodeCoverage]
    public class {{ResourceName}}RelationshipsAuthorizationContextDataProvider<TContextData> : IRelationshipsAuthorizationContextDataProvider<I{{ResourceName}}, TContextData>
        where TContextData : RelationshipsAuthorizationContextData, new()
    {     
        /// <summary>
        /// Creates and returns an <see cref="TContextData"/> instance based on the supplied resource.
        /// </summary>
        public TContextData GetContextData(I{{ResourceName}} resource)
        {
            if (resource == null)
                throw new ArgumentNullException("resource", "The '{{ResourceNameCamelCase}}' resource for obtaining authorization context data cannot be null.");

            var entity = resource as {{ResourceName}};

            {{#SchemaIsEdFi}}
            var contextData = new TContextData();
            {{/SchemaIsEdFi}}          
            {{^SchemaIsEdFi}}
            dynamic contextData = new TContextData();
            {{/SchemaIsEdFi}}
            {{#AuthorizationResourceProperties}}   
              {{#ContextPropertyIsIncludedAndNumeric}}
            contextData.{{ContextPropertyName}} = entity.{{ContextPropertyName}} == default({{ContextPropertyType}}) ? null as {{ContextPropertyType}}? : entity.{{ContextPropertyName}}; // {{#IsIdentifying}}Primary key property, {{/IsIdentifying}}{{ContextPropertyReason}}
              {{/ContextPropertyIsIncludedAndNumeric}}
              {{#ContextPropertyIsIncludedOrNumeric}}
            {{^IsIncluded}}// {{/IsIncluded}}{{ContextPropertyName}} = entity.{{ContextPropertyName}}, // {{#IsIdentifying}}Primary key property, {{/IsIdentifying}}{{ContextPropertyReason}}
              {{/ContextPropertyIsIncludedOrNumeric}}
            {{/AuthorizationResourceProperties}}
            {{#SchemaIsEdFi}}
            return contextData;
            {{/SchemaIsEdFi}}
            {{^SchemaIsEdFi}}
            return (TContextData) contextData;
            {{/SchemaIsEdFi}}
        }

        /// <summary>
        ///  Creates and returns a signature key based on the resource, which can then be used to get and instance of IEdFiSignatureAuthorizationProvider
        /// </summary>
        public string[] GetAuthorizationContextPropertyNames()
        {
           var properties = new string[]
                {
            {{#AuthorizationResourceProperties}}                                                
                    {{#ContextPropertyIsIncludedAndNumeric}}
                    "{{ContextPropertyName}}",
                    {{/ContextPropertyIsIncludedAndNumeric}}
                    {{#ContextPropertyIsNotIncludedAndNumeric}}
                    // "{{ContextPropertyName}}",
                    {{/ContextPropertyIsNotIncludedAndNumeric}}
            {{/AuthorizationResourceProperties}}
                };

           return properties;
        }

        /// <summary>
        /// Creates and returns an <see cref="RelationshipsAuthorizationContextData"/> instance based on the supplied resource.
        /// </summary>
        public TContextData GetContextData(object resource)
        {
            return GetContextData(({{ResourceName}}) resource);
        } 
    } 

{{/ResourcesToRender}}
}
