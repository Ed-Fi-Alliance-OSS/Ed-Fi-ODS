using System;
using System.Linq;
using System.Diagnostics.CodeAnalysis;
using EdFi.Ods.Api.Dependencies;
using EdFi.Ods.Api.ETag;
using EdFi.Ods.Api.Extensions;
using EdFi.Ods.Common;
using EdFi.Ods.Common.Constants;
using EdFi.Ods.Common.Conventions;
using EdFi.Ods.Common.Extensions;
{{#HasDerivedResources}}
using EdFi.Ods.Entities.Common.EdFi;
{{/HasDerivedResources}}
{{#Aggregates}}
// Aggregate: {{AggregateName}}

namespace {{NamespaceName}} //.{{AggregateName}}Aggregate
{ 
    {{#Mappers}}
    [ExcludeFromCodeCoverage]
    public static class {{ModelName}}Mapper 
    {
        public static bool SynchronizeTo(this I{{ModelName}} source, I{{ModelName}} target)
        {
            bool isModified = false;

            var sourceSupport = source as I{{ModelName}}SynchronizationSourceSupport;
            {{#IsEntityExtension}}

            var sourceExtensionSupport = source.{{ModelParentName}} as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("{{ExtensionName}}"))
                return false;
            {{/IsEntityExtension}}
            {{#AllowPrimaryKeyUpdates}}

            // Allow PK column updates on {{ModelName}}
            if (
                {{#AnnotatedLocalPrimaryKeyList}}
                {{#NotFirst}}||{{/NotFirst}} (target.{{PrimaryKeyName}} != source.{{PrimaryKeyName}}){{#IsLast}}){{/IsLast}}
                {{/AnnotatedLocalPrimaryKeyList}}
            {            
                isModified = true;

                var sourceWithPrimaryKeyValues = (source as IHasPrimaryKeyValues);

                if (sourceWithPrimaryKeyValues != null)
                {
                    var targetWithNewKeyValues = target as IHasCascadableKeyValues;

                    if (targetWithNewKeyValues != null)
                        targetWithNewKeyValues.NewKeyValues = sourceWithPrimaryKeyValues.GetPrimaryKeyValues();
                }
            }
            {{/AllowPrimaryKeyUpdates}}

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            {{#BackSynchedPrimaryKeyList}}
            if (source.{{CSharpSafePrimaryKeyName}} != target.{{CSharpSafePrimaryKeyName}})
            {
                source.{{CSharpSafePrimaryKeyName}} = target.{{CSharpSafePrimaryKeyName}};
            }
            {{/BackSynchedPrimaryKeyList}}
            {{#IsDerivedEntity}}

            // Copy inherited non-PK properties

            {{#BaseClassNonPkPropertyList}}

            if ((sourceSupport == null || sourceSupport.Is{{BasePropertyName}}Supported)
                && target.{{BasePropertyName}} != source.{{BasePropertyName}})
            {
                target.{{BasePropertyName}} = source.{{BasePropertyName}};
                isModified = true;
            }
            {{/BaseClassNonPkPropertyList}}
            {{/IsDerivedEntity}}

            // Copy non-PK properties
            {{#NonPrimaryKeyList}}

            if ((sourceSupport == null || sourceSupport.Is{{PropertyName}}Supported)
                && target.{{CSharpSafePropertyName}} != source.{{CSharpSafePropertyName}})
            {
                target.{{CSharpSafePropertyName}} = source.{{CSharpSafePropertyName}};
                isModified = true;
            }
            {{/NonPrimaryKeyList}}

            {{#HasOneToOneRelationships}}
            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            {{#OneToOneClassList}}
            // {{OtherClassName}}
            if (sourceSupport == null || sourceSupport.Is{{OtherClassName}}Supported)
            {
                if (source.{{OtherClassName}} == null)
                {
                    if (target.{{OtherClassName}} != null)
                    {
                        target.{{OtherClassName}} = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.{{OtherClassName}} == null)
                    {
                        var itemType = target.GetType().GetProperty("{{OtherClassName}}").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.{{OtherClassName}} = (I{{OtherClassName}}) newItem;
                    }

                    isModified |= source.{{OtherClassName}}.Synchronize(target.{{OtherClassName}});
                }
            }
            {{/OneToOneClassList}}
            
            // -------------------------------------------------------------
            {{/HasOneToOneRelationships}}
            {{#IsDerivedEntity}}

            // Synch inherited lists
            {{#BaseNavigableChildrenList}}
            if (sourceSupport == null || sourceSupport.Is{{OtherClassPlural}}Supported)
                isModified |= source.{{OtherClassPlural}}.SynchronizeCollectionTo(target.{{OtherClassPlural}}, child => child.{{BaseClassName}} = target,
                                sourceSupport == null ? null : sourceSupport.Is{{OtherClassSingular}}Included);

            {{/BaseNavigableChildrenList}}
            {{/IsDerivedEntity}}

            // Sync lists
            {{#NavigableChildrenList}}
            if (sourceSupport == null || sourceSupport.Is{{ChildClassPlural}}Supported)
            {
                isModified |= 
                    source.{{ChildClassPlural}}.SynchronizeCollectionTo(
                        target.{{ChildClassPlural}}, 
                        onChildAdded: child => 
                            {
                                child.{{ModelName}} = target;
                {{#IsExtensionClass}}

                                // Extension class "children" need to reference the Ed-Fi Standard entity as the parent
                                (child as IChildEntity)?.SetParent(target.{{ParentName}});
                {{/IsExtensionClass}}
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.Is{{ChildClassSingular}}Included);
            }

            {{/NavigableChildrenList}}
            {{#IsExtendable}}
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);
            {{/IsExtendable}}

            return isModified;
        }



        {{#IsBaseClassConcrete}}
        public static void MapDerivedTo(this I{{ModelName}} source, I{{ModelName}} target, Action<I{{ModelName}}, I{{ModelName}}> onMapped)
        {{/IsBaseClassConcrete}}
        {{^IsBaseClassConcrete}}
        public static void MapTo(this I{{ModelName}} source, I{{ModelName}} target, Action<I{{ModelName}}, I{{ModelName}}> onMapped)
        {{/IsBaseClassConcrete}}
        {
            var sourceSynchSupport = source as I{{ModelName}}SynchronizationSourceSupport;
            var targetSynchSupport = target as I{{ModelName}}SynchronizationSourceSupport;

            {{#IsBaseEntity}}
            // =======================================================================================
            // Detect and map derived types (compiler is unable to correctly link to appropriate 
            //      mapping methods when there are base/derived interfaces and a concrete base class)
            // ---------------------------------------------------------------------------------------
            {{#DerivedEntitiesList}}
            // Map derived type {{DerivedEntityName}}
            var source{{DerivedEntityName}} = source as I{{DerivedEntityName}};

            if (source{{DerivedEntityName}} != null)
            {
                source{{DerivedEntityName}}.MapDerivedTo((I{{DerivedEntityName}}) target, onMapped);
                return;
            }
            {{/DerivedEntitiesList}}
            // =======================================================================================

            {{/IsBaseEntity}}
            {{#IsRootEntity}}    
            // Copy resource Id
            target.Id = source.Id;

            {{/IsRootEntity}}
            // Copy contextual primary key values
            {{#ContextualKeysList}}
            target.{{CSharpSafePropertyName}} = source.{{CSharpSafePropertyName}};
            {{/ContextualKeysList}}
            {{#IsDerivedEntity}}

            // Copy inherited non-PK properties
            {{#BaseClassNonPkPropertyList}}

            if (sourceSynchSupport.Is{{BasePropertyName}}Supported)
                target.{{BasePropertyName}} = source.{{BasePropertyName}};
            else
                targetSynchSupport.Is{{BasePropertyName}}Supported = false;
            {{/BaseClassNonPkPropertyList}}
            {{/IsDerivedEntity}}    

            // Copy non-PK properties
            {{#NonPrimaryKeyList}}

            if (sourceSynchSupport.Is{{PropertyName}}Supported)
                target.{{CSharpSafePropertyName}} = source.{{CSharpSafePropertyName}};
            else
                targetSynchSupport.Is{{PropertyName}}Supported = false;
            {{/NonPrimaryKeyList}}

            // Copy Aggregate Reference Data
            {{#HasAggregateReferences}}
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
            {{#AggregateReferences}}
                target.{{AggregateReferenceName}}ResourceId = source.{{AggregateReferenceName}}ResourceId;
                {{#MappedReferenceDataHasDiscriminator}}
                target.{{AggregateReferenceName}}Discriminator = source.{{AggregateReferenceName}}Discriminator;
                {{/MappedReferenceDataHasDiscriminator}}
            {{/AggregateReferences}}
            }

            {{/HasAggregateReferences}}


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            {{#HasOneToOneRelationships}}
            {{#OneToOneClassList}}
            // {{OtherClassName}} (Source)
            if (sourceSynchSupport.Is{{OtherClassName}}Supported)
            {
                var itemProperty = target.GetType().GetProperty("{{OtherClassName}}");
                
                if (itemProperty != null)
                {                    
                    if (source.{{OtherClassName}} == null)
                    {
                        target.{{OtherClassName}} = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object target{{OtherClassName}} = Activator.CreateInstance(itemType);
                        (target{{OtherClassName}} as IChildEntity)?.SetParent(target{{#IsEntityExtension}}.{{ModelParentName}}{{/IsEntityExtension}});
                        source.{{OtherClassName}}.Map(target{{OtherClassName}});
                        
                        // Update the target reference appropriately
                        target.{{OtherClassName}} = (I{{OtherClassName}}) target{{OtherClassName}};
                    }
                }
            }
            else
            {
                targetSynchSupport.Is{{OtherClassName}}Supported = false; 
            }
            {{/OneToOneClassList}}
            // -------------------------------------------------------------
            {{/HasOneToOneRelationships}}
            {{#IsDerivedEntity}}

            // Map inherited lists
            {{#BaseNavigableChildrenList}}

            if (sourceSynchSupport.Is{{OtherClassPlural}}Supported)
            {
                targetSynchSupport.Is{{OtherClassSingular}}Included = sourceSynchSupport.Is{{OtherClassSingular}}Included;
                source.{{OtherClassPlural}}.MapCollectionTo(target.{{OtherClassPlural}}, target);
            }
            else
            {
                targetSynchSupport.Is{{OtherClassPlural}}Supported = false;
            }
            {{/BaseNavigableChildrenList}}
            {{/IsDerivedEntity}}

            // Map lists
            {{#NavigableChildrenList}}

            if (sourceSynchSupport.Is{{ChildClassPlural}}Supported)
            {    
                targetSynchSupport.Is{{ChildClassSingular}}Included = sourceSynchSupport.Is{{ChildClassSingular}}Included;
                source.{{ChildClassPlural}}.MapCollectionTo(target.{{ChildClassPlural}}, {{#IsCollectionAggregateExtension}}target.{{ParentName}}{{/IsCollectionAggregateExtension}}{{^IsCollectionAggregateExtension}}target{{/IsCollectionAggregateExtension}});
            }
            else
            {
                targetSynchSupport.Is{{ChildClassPlural}}Supported = false;
            }
            {{/NavigableChildrenList}}

            {{#IsExtendable}}
            // Map extensions
            source.MapExtensionsTo(target);
            {{/IsExtendable}}

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface I{{ModelName}}SynchronizationSourceSupport {{#IsExtendable}}: IExtensionsSynchronizationSourceSupport{{/IsExtendable}}
    {
        {{#SourceSupportPropertyList}}
        bool Is{{PropertyName}}Supported { get; set; }
        {{/SourceSupportPropertyList}}
        {{#FilterDelegatePropertyList}}
        Func<I{{PropertyName}}, bool> Is{{PropertyName}}Included { get; set; }
        {{/FilterDelegatePropertyList}}
    }
 
{{/Mappers}}
}
{{/Aggregates}}
