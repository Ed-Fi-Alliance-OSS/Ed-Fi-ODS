{{#IsStandardProperty}}
    {{^HasSerializedReferenceDataMappings}}
 { get; set; }
    {{/HasSerializedReferenceDataMappings}}
    {{#HasSerializedReferenceDataMappings}}

        {
            get => {{CSharpSafeFieldName}};
            set
            {
                {{CSharpSafeFieldName}} = value;

                if (GeneratedArtifactStaticDependencies.SerializedDataEnabled && GeneratedArtifactStaticDependencies.ResourceLinksEnabled)
                {
{{#SerializedReferenceDataMappings}}
                    {{ReferenceDataPropertyName}} ??= new {{ReferenceDataClassNamespace}}.{{ReferenceDataClassName}}(true);
                    {{ReferenceDataPropertyName}}.{{OtherPropertyName}} = value{{#IsNullable}} ?? default{{/IsNullable}};
{{/SerializedReferenceDataMappings}}
                }
            }
        }

        private {{CSharpDeclaredType}} {{CSharpSafeFieldName}};
    {{/HasSerializedReferenceDataMappings}}
{{/IsStandardProperty}}
{{#LookupProperty}}

        {
            get
            {
                if ({{IdFieldName}} == default({{CSharpDeclaredType}}))
                {
                    {{IdFieldName}} = {{#IsNullable}}string.IsNullOrWhiteSpace({{ValueFieldName}}) ? default({{CSharpDeclaredType}}) : {{/IsNullable}}GeneratedArtifactStaticDependencies.DescriptorResolver.GetDescriptorId("{{LookupEntityName}}", {{ValueFieldName}});
        {{#HasSerializedReferenceDataMappings}}
                
                    if (GeneratedArtifactStaticDependencies.SerializedDataEnabled && GeneratedArtifactStaticDependencies.ResourceLinksEnabled)
                    {
            {{#SerializedReferenceDataMappings}}
                        {{ReferenceDataPropertyName}} ??= new {{ReferenceDataClassNamespace}}.{{ReferenceDataClassName}}(true);
                        {{ReferenceDataPropertyName}}.{{OtherPropertyName}} = {{IdFieldName}}{{#IsNullable}} ?? default{{/IsNullable}};
            {{/SerializedReferenceDataMappings}}
                    }
        {{/HasSerializedReferenceDataMappings}}
                }

                return {{IdFieldName}};
            } 
            set
            {
                {{IdFieldName}} = value;
                {{ValueFieldName}} = null;
        {{#HasSerializedReferenceDataMappings}}
        
                if (value != default && GeneratedArtifactStaticDependencies.SerializedDataEnabled && GeneratedArtifactStaticDependencies.ResourceLinksEnabled)
                {
            {{#SerializedReferenceDataMappings}}
                    {{ReferenceDataPropertyName}} ??= new {{ReferenceDataClassNamespace}}.{{ReferenceDataClassName}}(true);
                    {{ReferenceDataPropertyName}}.{{OtherPropertyName}} = value{{#IsNullable}} ?? default{{/IsNullable}};
            {{/SerializedReferenceDataMappings}}
                }
        {{/HasSerializedReferenceDataMappings}}
            }
        }

        private {{CSharpDeclaredType}} {{IdFieldName}};
        private string {{ValueFieldName}};

        [IgnoreMember]
        public {{#NeedsOverride}}override{{/NeedsOverride}}{{^NeedsOverride}}virtual{{/NeedsOverride}} string {{LookupValuePropertyName}}
        {
            get
            {
                if ({{ValueFieldName}} == null)
                    {{ValueFieldName}} = {{#IsNullable}}{{IdFieldName}} == null ? null : {{/IsNullable}}GeneratedArtifactStaticDependencies.DescriptorResolver.GetUri("{{LookupEntityName}}", {{IdFieldname}}{{#IsNullable}}.Value{{/IsNullable}});
                    
                return {{ValueFieldName}};
            }
            set
            {
                {{ValueFieldName}} = value;
                {{IdFieldName}} = default({{CSharpDeclaredType}});
        {{#HasSerializedReferenceDataMappings}}

                if (value != null && GeneratedArtifactStaticDependencies.SerializedDataEnabled && GeneratedArtifactStaticDependencies.ResourceLinksEnabled)
                {
            {{#SerializedReferenceDataMappings}}
                    {{ReferenceDataPropertyName}} ??= new {{ReferenceDataClassNamespace}}.{{ReferenceDataClassName}}(true);
                    {{ReferenceDataPropertyName}}.{{OtherPropertyName}} = GeneratedArtifactStaticDependencies.DescriptorResolver.GetDescriptorId("{{LookupEntityName}}", {{ValueFieldName}});
            {{/SerializedReferenceDataMappings}}
                }
        {{/HasSerializedReferenceDataMappings}}
            }
        }
{{/LookupProperty}}
{{#UsiProperty}}

        {
            get
            {
                if ({{UsiFieldName}} == default({{CSharpDeclaredType}}) && {{UniqueIdFieldName}} != null)
                {
                    if (GeneratedArtifactStaticDependencies.UsiLookupsByUniqueIdContextProvider.Get().UsiByUniqueIdByPersonType.TryGetValue("{{PersonType}}", out var usiByUniqueId)
                        && usiByUniqueId.TryGetValue({{UniqueIdFieldName}}, out var usi))
                    {
                        {{UsiFieldName}} = usi;
        {{#HasSerializedReferenceDataMappings}}

                        if (GeneratedArtifactStaticDependencies.SerializedDataEnabled && GeneratedArtifactStaticDependencies.ResourceLinksEnabled)
                        {
            {{#SerializedReferenceDataMappings}}
                            {{ReferenceDataPropertyName}} ??= new {{ReferenceDataClassNamespace}}.{{ReferenceDataClassName}}(true);
                            {{ReferenceDataPropertyName}}.{{OtherPropertyName}} = {{UsiFieldName}}{{#IsNullable}} ?? default{{/IsNullable}};
            {{/SerializedReferenceDataMappings}}
                        }
        {{/HasSerializedReferenceDataMappings}}
                    }
                }

                return {{UsiFieldName}};
            } 
            set
            {
                {{UsiFieldName}} = value;
        {{^IsPersonEntity}}
            {{#IsNullable}}

                if (value != null)
                {
                    GeneratedArtifactStaticDependencies.UniqueIdLookupsByUsiContextProvider.Get().AddLookup("{{PersonType}}", value.Value);
                }
            {{/IsNullable}}
            {{^IsNullable}}
                GeneratedArtifactStaticDependencies.UniqueIdLookupsByUsiContextProvider.Get().AddLookup("{{PersonType}}", value);
            {{/IsNullable}}
            {{#HasSerializedReferenceDataMappings}}

                if ({{#IsNullable}}value != null && {{/IsNullable}}GeneratedArtifactStaticDependencies.SerializedDataEnabled && GeneratedArtifactStaticDependencies.ResourceLinksEnabled)
                {
                {{#SerializedReferenceDataMappings}}
                    {{ReferenceDataPropertyName}} ??= new {{ReferenceDataClassNamespace}}.{{ReferenceDataClassName}}(true);
                    {{ReferenceDataPropertyName}}.{{OtherPropertyName}} = value{{#IsNullable}} ?? default{{/IsNullable}};
                {{/SerializedReferenceDataMappings}}
                }
            {{/HasSerializedReferenceDataMappings}}
        {{/IsPersonEntity}}
            }
        }

        private {{CSharpDeclaredType}} {{UsiFieldName}};
    {{#IsPersonEntity}}
        string IIdentifiablePerson.UniqueId { get { return {{UniqueIdPropertyName}}; } }
        
        // Supports deserialization of entities that don't have surrogate id available after creation
        void IPersonUsiMutator.SetUsi(int newValue) => {{UsiFieldName}} = newValue;
        int IPersonUsiMutator.GetUsi() => {{UsiFieldName}};

    {{/IsPersonEntity}}
    {{^IsPersonEntity}}
        private string {{UniqueIdFieldName}};

        [IgnoreMember]
        public {{#NeedsOverride}}override{{/NeedsOverride}}{{^NeedsOverride}}virtual{{/NeedsOverride}} string {{UniqueIdPropertyName}}
        {
            get
            {
                if ({{UniqueIdFieldName}} == null{{#IsNullable}} && {{UsiFieldName}}.HasValue{{/IsNullable}})
                {
                    if (GeneratedArtifactStaticDependencies.UniqueIdLookupsByUsiContextProvider.Get().UniqueIdByUsiByPersonType.TryGetValue("{{PersonType}}", out var uniqueIdByUsi)
                        && uniqueIdByUsi.TryGetValue({{UsiFieldName}}{{#IsNullable}}.Value{{/IsNullable}}, out var uniqueId))
                    {
                        {{UniqueIdFieldName}} = uniqueId;
                    }
                }

                return {{UniqueIdFieldName}};
            }
            set
            {
                if ({{UniqueIdFieldName}} != value)
                        {{UsiFieldName}} = default({{CSharpDeclaredType}});

                {{UniqueIdFieldName}} = value;
        {{#HasSerializedReferenceDataMappings}}

                if (value != null && GeneratedArtifactStaticDependencies.SerializedDataEnabled && GeneratedArtifactStaticDependencies.ResourceLinksEnabled)
                {
                    if (GeneratedArtifactStaticDependencies.UsiLookupsByUniqueIdContextProvider.Get().UsiByUniqueIdByPersonType.TryGetValue("{{PersonType}}", out var usiByUniqueId)
                        && usiByUniqueId.TryGetValue({{UniqueIdFieldName}}, out var usi))
                    {
            {{#SerializedReferenceDataMappings}}
                        {{ReferenceDataPropertyName}} ??= new {{ReferenceDataClassNamespace}}.{{ReferenceDataClassName}}(true);
                        {{ReferenceDataPropertyName}}.{{OtherPropertyName}} = usi;
            {{/SerializedReferenceDataMappings}}
                    }
                }
        {{/HasSerializedReferenceDataMappings}}
            }
        }
    {{/IsPersonEntity}}
{{/UsiProperty}}
{{#UniqueIdProperty}}

        {
            get
            {
                if ({{UniqueIdFieldName}} == null{{#IsNullable}} && {{UsiFieldName}}.HasValue{{/IsNullable}})
                {
                    if (GeneratedArtifactStaticDependencies.UniqueIdLookupsByUsiContextProvider.Get().UniqueIdByUsiByPersonType.TryGetValue("{{PersonType}}", out var uniqueIdByUsi)
                        && uniqueIdByUsi.TryGetValue({{UsiFieldName}}{{#IsNullable}}.Value{{/IsNullable}}, out var uniqueId))
                    {
                        {{UniqueIdFieldName}} = uniqueId;
                    }
                }

                return {{UniqueIdFieldName}};
            }
            set
            {
                {{UniqueIdFieldName}} = value;
            }
        }
        private string {{UniqueIdFieldName}};
        
{{/UniqueIdProperty}}
{{#DateOnlyProperty}}
    {{#IsNullable}}

        {
            get { return {{FieldName}}; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    {{FieldName}} = null;
                } else
                {
                    var given = (DateTime) value;
                    {{FieldName}} = new DateTime(given.Year, given.Month, given.Day);
                }
        {{#HasSerializedReferenceDataMappings}}

                if (value != null && GeneratedArtifactStaticDependencies.SerializedDataEnabled && GeneratedArtifactStaticDependencies.ResourceLinksEnabled)
                {
            {{#SerializedReferenceDataMappings}}
                    {{ReferenceDataPropertyName}} ??= new {{ReferenceDataClassNamespace}}.{{ReferenceDataClassName}}(true);
                    {{ReferenceDataPropertyName}}.{{OtherPropertyName}} = {{FieldName}} ?? default;
            {{/SerializedReferenceDataMappings}}
                }
        {{/HasSerializedReferenceDataMappings}}
            }
        }
    {{/IsNullable}}
    {{^IsNullable}}

        {
            get { return {{FieldName}}; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
        {{^HasSerializedReferenceDataMappings}}
            set { {{FieldName}} = new DateTime(value.Year, value.Month, value.Day); }
        {{/HasSerializedReferenceDataMappings}}
        {{#HasSerializedReferenceDataMappings}}
            set
            {
                {{FieldName}} = new DateTime(value.Year, value.Month, value.Day);

                if ({{FieldName}} != default && GeneratedArtifactStaticDependencies.SerializedDataEnabled && GeneratedArtifactStaticDependencies.ResourceLinksEnabled)
                {
            {{#SerializedReferenceDataMappings}}
                    {{ReferenceDataPropertyName}} ??= new {{ReferenceDataClassNamespace}}.{{ReferenceDataClassName}}(true);
                    {{ReferenceDataPropertyName}}.{{OtherPropertyName}} = {{FieldName}};
            {{/SerializedReferenceDataMappings}}
                }
            }
        {{/HasSerializedReferenceDataMappings}}
        }
    {{/IsNullable}}

        private {{CSharpDeclaredType}} {{FieldName}};
{{/DateOnlyProperty}}
{{#DateTimeProperty}}
    {{#IsNullable}}

        {
            get { return {{FieldName}}; }
            set
            {
                // This is only stored as a UTC DateTime in the DB and NHibernate will retrieve it back as the (UTC) DateTime.Kind.
                // Note ToUniversal will work differently based on DateTime.Kind
                // See https://docs.microsoft.com/en-us/dotnet/api/system.datetime.touniversaltime?view=netframework-4.5#System_DateTime_ToUniversalTime
                // Utc - No conversion is performed.
                // Local - The current DateTime object is converted to UTC.
                // Unspecified - The current DateTime object is assumed to be a local time, and the conversion is performed as if Kind were Local.
                if (value.HasValue && value.Value != (DateTime)typeof(DateTime).GetDefaultValue())
                    {{FieldName}} = value?.ToUniversalTime();
        {{#HasSerializedReferenceDataMappings}}

                if (value != null && GeneratedArtifactStaticDependencies.SerializedDataEnabled && GeneratedArtifactStaticDependencies.ResourceLinksEnabled)
                {
            {{#SerializedReferenceDataMappings}}
                    {{ReferenceDataPropertyName}} ??= new {{ReferenceDataClassNamespace}}.{{ReferenceDataClassName}}(true);
                    {{ReferenceDataPropertyName}}.{{OtherPropertyName}} = {{FieldName}} ?? default;
            {{/SerializedReferenceDataMappings}}
                }
        {{/HasSerializedReferenceDataMappings}}
            }
        }
    {{/IsNullable}}
    {{^IsNullable}}

        {
            get { return {{FieldName}}; }
            set
            {
                // This is only stored as a UTC DateTime in the DB and NHibernate will retrieve it back as the (UTC) DateTime.Kind.
                // Note ToUniversal will work differently based on DateTime.Kind
                // See https://docs.microsoft.com/en-us/dotnet/api/system.datetime.touniversaltime?view=netframework-4.5#System_DateTime_ToUniversalTime
                // Utc - No conversion is performed.
                // Local - The current DateTime object is converted to UTC.
                // Unspecified - The current DateTime object is assumed to be a local time, and the conversion is performed as if Kind were Local.
                if (value != ({{CSharpDeclaredType}})typeof({{CSharpDeclaredType}}).GetDefaultValue())
                    {{FieldName}} = value.ToUniversalTime();
        {{#HasSerializedReferenceDataMappings}}

                if (value != default && GeneratedArtifactStaticDependencies.SerializedDataEnabled && GeneratedArtifactStaticDependencies.ResourceLinksEnabled)
                {
            {{#SerializedReferenceDataMappings}}
                    {{ReferenceDataPropertyName}} ??= new {{ReferenceDataClassNamespace}}.{{ReferenceDataClassName}}(true);
                    {{ReferenceDataPropertyName}}.{{OtherPropertyName}} = {{FieldName}};
            {{/SerializedReferenceDataMappings}}
                }
        {{/HasSerializedReferenceDataMappings}}
            }
        }
    {{/IsNullable}}

        private {{CSharpDeclaredType}} {{FieldName}};
{{/DateTimeProperty}}
{{#DelegatedProperty}}

        {
            get { return base.{{BasePropertyName}}; }
        {{^HasSerializedReferenceDataMappings}}
            set { base.{{BasePropertyName}} = value; }
        {{/HasSerializedReferenceDataMappings}}
        {{#HasSerializedReferenceDataMappings}}
            set
            {
                base.{{BasePropertyName}} = value;

                if (value != default && GeneratedArtifactStaticDependencies.SerializedDataEnabled && GeneratedArtifactStaticDependencies.ResourceLinksEnabled)
                {
            {{#SerializedReferenceDataMappings}}
                    {{ReferenceDataPropertyName}} ??= new {{ReferenceDataClassNamespace}}.{{ReferenceDataClassName}}(true);
                    {{ReferenceDataPropertyName}}.{{OtherPropertyName}} = value{{#IsNullable}} ?? default{{/IsNullable}};
            {{/SerializedReferenceDataMappings}}
                }
            }
        {{/HasSerializedReferenceDataMappings}}
        }
        
{{/DelegatedProperty}}