{{#LookupProperty}}
        {
            get
            {
                if ({{IdFieldName}} == default({{CSharpDeclaredType}}))
                    {{IdFieldName}} = {{#IsNullable}}string.IsNullOrWhiteSpace({{ValueFieldName}}) ? default({{CSharpDeclaredType}}) : {{/IsNullable}}DescriptorsCache.GetCache().GetId("{{LookupEntityName}}", {{ValueFieldName}});

                return {{IdFieldName}};
            } 
            set
            {
                {{IdFieldName}} = value;
                {{ValueFieldName}} = null;
            }
        }

        private {{CSharpDeclaredType}} {{IdFieldName}};
        private string {{ValueFieldName}};

        public {{#NeedsOverride}}override{{/NeedsOverride}}{{^NeedsOverride}}virtual{{/NeedsOverride}} string {{LookupValuePropertyName}}
        {
            get
            {
                if ({{ValueFieldName}} == null)
                    {{ValueFieldName}} = {{#IsNullable}}{{IdFieldName}} == null ? null : {{/IsNullable}}DescriptorsCache.GetCache().GetValue("{{LookupEntityName}}", {{IdFieldname}}{{#IsNullable}}.Value{{/IsNullable}});
                    
                return {{ValueFieldName}};
            }
            set
            {
                {{ValueFieldName}} = value;
                {{IdFieldName}} = default({{CSharpDeclaredType}});
            }
        }
{{/LookupProperty}}
{{#UsiProperty}}
        {
            get
            {
                if ({{UsiFieldName}} == default({{CSharpDeclaredType}}))
                    {{UsiFieldName}} = PersonUniqueIdToUsiCache.GetCache().GetUsi{{#IsNullable}}Nullable{{/IsNullable}}("{{PersonType}}", {{UniqueIdFieldName}});

                return {{UsiFieldName}};
            } 
            set
            {
                {{UsiFieldName}} = value;
            }
        }

        private {{CSharpDeclaredType}} {{UsiFieldName}};
    {{#IsPersonEntity}}
        string IIdentifiablePerson.UniqueId { get { return {{UniqueIdPropertyName}}; } }
        
    {{/IsPersonEntity}}
    {{^IsPersonEntity}}
        private string {{UniqueIdFieldName}};

        {{^IsNullable}}[RequiredWithNonDefault]{{/IsNullable}}
        public {{#NeedsOverride}}override{{/NeedsOverride}}{{^NeedsOverride}}virtual{{/NeedsOverride}} string {{UniqueIdPropertyName}}
        {
            get
            {
                if ({{UniqueIdFieldName}} == null{{#IsNullable}} && {{UsiFieldName}}.HasValue{{/IsNullable}})
                    {{UniqueIdFieldName}} = PersonUniqueIdToUsiCache.GetCache().GetUniqueId("{{PersonType}}", {{UsiFieldName}}{{#IsNullable}}.Value{{/IsNullable}});
                    
                return {{UniqueIdFieldName}};
            }
            set
            {
                if ({{UniqueIdFieldName}} != value)
                        {{UsiFieldName}} = default({{CSharpDeclaredType}});

                {{UniqueIdFieldName}} = value;
            }
        }
    {{/IsPersonEntity}}
{{/UsiProperty}}
{{#UniqueIdProperty}}
        {
            get
            {
                if ({{UniqueIdFieldName}} == null)
                    {{UniqueIdFieldName}} = PersonUniqueIdToUsiCache.GetCache().GetUniqueId("{{PersonType}}", {{UsiFieldName}});
                    
                return {{UniqueIdFieldName}};
            }
            set
            {
                {{UniqueIdFieldName}} = value;
            }
        }
        private string {{UniqueIdFieldName}};
        
{{/UniqueIdProperty}}
{{#DateOnlyProperty}}
    {{#IsNullable}}
        {
            get { return {{FieldName}}; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    {{FieldName}} = null;
                } else
                {
                    var given = (DateTime) value;
                    {{FieldName}} = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }
    {{/IsNullable}}
    {{^IsNullable}}
        {
            get { return {{FieldName}}; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { {{FieldName}} = new DateTime(value.Year, value.Month, value.Day); }
        }
    {{/IsNullable}}

        private {{CSharpDeclaredType}} {{FieldName}};
        
{{/DateOnlyProperty}}
{{#DateTimeProperty}}
{{#IsNullable}}
        {
            get { return {{FieldName}}; }
            set
            {
                // This is only stored as a UTC DateTime in the DB and NHibernate will retrieve it back as the (UTC) DateTime.Kind.
                // Note ToUniversal will work differently based on DateTime.Kind
                // See https://docs.microsoft.com/en-us/dotnet/api/system.datetime.touniversaltime?view=netframework-4.5#System_DateTime_ToUniversalTime
                // Utc - No conversion is performed.
                // Local - The current DateTime object is converted to UTC.
                // Unspecified - The current DateTime object is assumed to be a local time, and the conversion is performed as if Kind were Local.
                if (value.HasValue && value.Value != (DateTime)typeof(DateTime).GetDefaultValue())
                    {{FieldName}} = value?.ToUniversalTime();
            }
        }
{{/IsNullable}}
{{^IsNullable}}
        {
            get { return {{FieldName}}; }
            set
            {
                // This is only stored as a UTC DateTime in the DB and NHibernate will retrieve it back as the (UTC) DateTime.Kind.
                // Note ToUniversal will work differently based on DateTime.Kind
                // See https://docs.microsoft.com/en-us/dotnet/api/system.datetime.touniversaltime?view=netframework-4.5#System_DateTime_ToUniversalTime
                // Utc - No conversion is performed.
                // Local - The current DateTime object is converted to UTC.
                // Unspecified - The current DateTime object is assumed to be a local time, and the conversion is performed as if Kind were Local.
                if (value != ({{CSharpDeclaredType}})typeof({{CSharpDeclaredType}}).GetDefaultValue())
                    {{FieldName}} = value.ToUniversalTime();
            }
        }
{{/IsNullable}}

        private {{CSharpDeclaredType}} {{FieldName}};

{{/DateTimeProperty}}
{{#DelegatedProperty}}
        {
            get { return base.{{BasePropertyName}}; }
            set { base.{{BasePropertyName}} = value; }
        }
        
{{/DelegatedProperty}}
