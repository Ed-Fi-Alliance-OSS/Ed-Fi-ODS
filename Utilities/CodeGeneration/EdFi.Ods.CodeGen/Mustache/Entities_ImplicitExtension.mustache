    /// <summary>
    /// An implicitly created entity extension class to enable entity mapping and sychronization behavior for the {{EntityParentClassName}} entity's aggregate extensions.
    /// </summary>
    [ExcludeFromCodeCoverage]
    public class {{ClassName}} : I{{ClassName}}, I{{ClassName}}SynchronizationSourceSupport, IChildEntity, IImplicitEntityExtension, IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        {{#PrimaryKey}}
            {{#ParentReference}}
        private {{EntityParentClassNamespacePrefix}}{{EntityParentClassName}} {{EntityParentFieldName}};

        {{ModelParentInterfaceNamespacePrefix}}{{ModelParentInterfaceName}} I{{ClassName}}.{{ModelParentClassName}}
        {
            get { return {{EntityParentFieldName}}; }
            set { {{EntityParentFieldName}} = ({{EntityParentClassNamespacePrefix}}{{EntityParentClassName}}) value; }
        }

        private {{EntityParentClassNamespacePrefix}}{{EntityParentClassName}} {{EntityParentClassName}}
        {
            get { return (this as I{{ClassName}}).{{ModelParentClassName}} as {{EntityParentClassNamespacePrefix}}{{EntityParentClassName}}; }
        }
            {{/ParentReference}}
        {{/PrimaryKey}}

        bool IImplicitEntityExtension.IsEmpty()
        {
            return (true
        {{#OneToOnes}}
                && {{OtherClassName}} == null
        {{/OneToOnes}}
        {{#NavigableChildren}}
                && ((IList<object>) {{EntityParentFieldName}}.AggregateExtensions["{{SchemaProperCaseName}}_{{ChildCollectionPropertyName}}"]).Count == 0
        {{/NavigableChildren}}
            );
        }

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        {{#OneToOnes}}
        // This property implementation exists to provide the mapper with reflection-based access to the target instance's .NET type (for creating new instances)
        public {{OtherClassName}} {{OtherClassName}}
        {
            get { return ({{OtherClassName}}) (this as I{{ClassName}}).{{OtherClassName}};  }
            set { (this as I{{ClassName}}).{{OtherClassName}} = value;  }
        }

        I{{OtherClassName}} I{{ClassName}}.{{OtherClassName}}
        {
            get
            {
                var list = (IList) {{EntityParentFieldName}}.AggregateExtensions["{{SchemaProperCaseName}}_{{OtherClassPluralName}}"];

                if (list != null && list.Count > 0)
                    return (I{{OtherClassName}}) list[0];

                return null;
            }
            set
            {
                // Delete the existing object
                var list = (IList) {{EntityParentFieldName}}.AggregateExtensions["{{SchemaProperCaseName}}_{{OtherClassPluralName}}"];
                list.Clear();

                // If we're setting a value, add it to the list now
                if (value != null)
                {
                    list.Add(value);

                    // Set the parent reference
                    (value as IChildEntity).SetParent({{EntityParentFieldName}});
                }
            }
        }
        {{/OneToOnes}}
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        {{#NavigableChildren}}
        ICollection<I{{ChildClassName}}> I{{ClassName}}.{{ChildCollectionPropertyName}}
        {
            get
            {
                var sourceList =  new ContravariantCollectionAdapter<object, {{ChildClassName}}>((IList<object>) {{EntityParentFieldName}}.AggregateExtensions["{{AggregateExtensionBagName}}"]);

                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach ({{ChildClassName}} item in sourceList)
                    if (item.{{ModelParentClassName}} == null)
                        item.{{ModelParentClassName}} = this.{{ModelParentClassName}};
                // -------------------------------------------------------------

                var adaptedList = new CovariantCollectionAdapter<I{{ChildClassName}}, {{ChildClassName}}>(sourceList);

                return adaptedList;
            }
            set
            {
                {{EntityParentFieldName}}.AggregateExtensions["{{SchemaProperCaseName}}_{{ChildCollectionPropertyName}}"] = value;
            }
        }
        {{/NavigableChildren}}
        // -------------------------------------------------------------

        void IMappable.Map(object target)
        {
            this.MapTo((I{{ClassName}}) target, null);
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((I{{ClassName}}) target);
        }

        void IChildEntity.SetParent(object value)
        {
            {{EntityParentFieldName}} = ({{EntityParentClassNamespacePrefix}}{{EntityParentClassName}})value;
        }

        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            return ({{EntityParentFieldName}} as IHasPrimaryKeyValues).GetPrimaryKeyValues();
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------
        {{#SynchronizationSupport}}
            {{#Properties}}
        bool I{{ClassName}}SynchronizationSourceSupport.Is{{PropertyName}}Supported { get; set; } = true;
            {{/Properties}}
            {{#CollectionClasses}}
        Func<I{{ChildCollectionClassName}}, bool> I{{ClassName}}SynchronizationSourceSupport.Is{{ChildCollectionRoleName}}{{ChildCollectionClassName}}Included { get; set; }
            {{/CollectionClasses}}
        {{/SynchronizationSupport}}

        void IGetByExample.SuspendReferenceAssignmentCheck() { }
    }
