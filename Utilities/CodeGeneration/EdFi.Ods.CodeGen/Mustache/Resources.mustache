using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using System.Diagnostics.CodeAnalysis;
using EdFi.Common.Extensions;
using EdFi.Ods.Api.Extensions;
using EdFi.Ods.Api.Models;
using EdFi.Ods.Common.Extensions;
using EdFi.Ods.Common;
using EdFi.Ods.Common.Models.Domain;
using EdFi.Ods.Common.Serialization;
using EdFi.Ods.Api.Attributes;
using EdFi.Ods.Common.Adapters;
using EdFi.Ods.Common.Attributes;
using EdFi.Ods.Common.Dependencies;
using EdFi.Ods.Common.Models;
using EdFi.Ods.Common.Models.Resource;
using EdFi.Ods.Common.Validation;
{{#SchemaNamespaces}}
using {{Namespace}};
{{/SchemaNamespaces}}
using Newtonsoft.Json;
using FluentValidation.Results;
using MessagePack;
using KeyAttribute = MessagePack.KeyAttribute;

{{#ResourceContexts}}
// Aggregate: {{ResourceName}}

namespace {{ResourceClassesNamespace}}
{
    {{#ResourceClasses}}
    {{#ResourceClass}}
    {{#ResourceReference}}
    /// <summary>
    /// Represents a reference to the {{ReferenceName}} resource.
    /// </summary>
    [DataContract, MessagePackObject]
    [ExcludeFromCodeCoverage]
    public class {{ReferenceName}}Reference : IResourceReference
    {
        {{#ReferenceIdentifiers}}
        [DataMember(Name="{{JsonPropertyName}}")]{{#DisplayName}}[Display(Name="{{DisplayName}}")]{{/DisplayName}}{{#IsDescriptorUsage}}[DescriptorExists("{{DescriptorName}}")]{{/IsDescriptorUsage}}{{#IsDateOnlyProperty}}[JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]{{/IsDateOnlyProperty}}{{#IsTimeSpanProperty}}[JsonConverter(typeof(UtcTimeConverter))]{{/IsTimeSpanProperty}}
        {{^IsUniqueId}}
        {{#IsDescriptorUsage}}[IgnoreMember]{{/IsDescriptorUsage}}{{^IsDescriptorUsage}}[Key({{#MessagePackIndexer}}{{NextKey}}{{/MessagePackIndexer}})]{{/IsDescriptorUsage}}
        public {{PropertyType}} {{PropertyName}} { get; set; }
        {{#IsDescriptorUsage}}

        [Key({{#MessagePackIndexer}}{{NextKey}}{{/MessagePackIndexer}})][JsonIgnore]
        public int {{CSharpSafePropertyName}}Id
        {
            get { return GeneratedArtifactStaticDependencies.DescriptorResolver.GetDescriptorId("{{DescriptorName}}", {{CSharpSafePropertyName}}); }
            set { {{CSharpSafePropertyName}} = GeneratedArtifactStaticDependencies.DescriptorResolver.GetUri("{{DescriptorName}}", value); }
        }
        {{/IsDescriptorUsage}}
        {{/IsUniqueId}}
        {{#IsUniqueId}}
        public {{PropertyType}} {{PropertyName}} 
        {
            get => _{{PropertyFieldName}};
            set
            {
                _{{PropertyFieldName}} = value;
                GeneratedArtifactStaticDependencies.UsiLookupsByUniqueIdContextProvider.Get().AddLookup("{{UniqueIdPersonType}}", value);
            }
        }
        private {{PropertyType}} _{{PropertyFieldName}};
        {{/IsUniqueId}}

        {{/ReferenceIdentifiers}}
        /// <summary>
        /// Gets or sets the resource identifier of the referenced resource.
        /// </summary>
        [Key({{#MessagePackIndexer}}{{NextKey}}{{/MessagePackIndexer}})]
        public Guid ResourceId { get; set; }

        {{#HasDiscriminator}}
        /// <summary>
        /// Gets or sets the discriminator value which identifies the concrete sub-type of the referenced resource
        /// when the referenced resource has been derived; otherwise <b>null</b>.
        /// </summary>
        [Key({{#MessagePackIndexer}}{{NextKey}}{{/MessagePackIndexer}})]
        public string Discriminator { get; set; }

        {{/HasDiscriminator}}
        {{#HRef}}

        [JsonIgnore]
        [Key({{#MessagePackIndexer}}{{NextKey}}{{/MessagePackIndexer}})]
        public Link _link;

        [IgnoreMember]
        [DataMember(Name="link")]
        public Link Link
        {
            get
            {
                if (_link == null)
                {
                    // Only generate links when all values are present
                    if (IsReferenceFullyDefined())
                        _link = CreateLink();
                }

                return _link;
            }
        }{{/HRef}}

        /// <summary>
        /// Indicates whether the reference has been fully defined (all key values are currently assigned non-default values).
        /// </summary>
        /// <returns><b>true</b> if the reference's properties are all set to non-default values; otherwise <b>false</b>.</returns>
        public bool IsReferenceFullyDefined()
        {
            return {{#ReferenceIdentifiers}}{{#IsFirstProperty}}{{PropertyName}} != default({{PropertyType}}){{/IsFirstProperty}}{{^IsFirstProperty}} && {{PropertyName}} != default({{PropertyType}}){{/IsFirstProperty}}{{/ReferenceIdentifiers}};
        }

        IEnumerable<string> IResourceReference.GetUndefinedProperties()
        {
            {{#ReferenceIdentifiers}}
            if ({{PropertyName}} == default)
            {
                yield return "{{PropertyName}}";
            }

            {{/ReferenceIdentifiers}}
        }

        {{#HRef}}
        private Link CreateLink()
        {
            {{#StandardLink}}
            var link = new Link
            {
                Rel = "{{ResourceName}}",
                Href = $"{{ResourceBaseRoute}}/{ResourceId:n}"
            };
            {{/StandardLink}}

            {{^HasDiscriminator}}
            return link;
            {{/HasDiscriminator}}
            {{#HasDiscriminator}}
            if (string.IsNullOrEmpty(Discriminator))
                return link;

            string[] linkParts = Discriminator.Split('.');

            if (linkParts.Length < 2)
                return link;

            var resource = GeneratedArtifactStaticDependencies.ResourceModelProvider.GetResourceModel()
                .GetResourceByFullName(new FullName(linkParts[0], linkParts[1]));

            // return the default link if the relationship is already correct, and/or if the resource is not found.
            if (resource == null || link.Rel == resource.Name)
                return link;

            {{#StandardLink}}
            return new Link
            {
                Rel = resource.Name,
                Href = $"/{resource.SchemaUriSegment()}/{resource.PluralName.ToCamelCase()}/{ResourceId:n}"
            };
                {{/StandardLink}}
            {{/HasDiscriminator}}
        }
        {{/HRef}}
    } // Aggregate reference

    {{/ResourceReference}}
    {{#ShouldRenderClass}}
    /// <summary>
    /// A class which represents the {{FQName}} table of the {{ResourceName}} aggregate in the ODS Database.
    /// </summary>
    [Serializable, DataContract, MessagePackObject]
    [ExcludeFromCodeCoverage]
    {{#IsResourceExtensionClass}}
    [Display(Name="{{SchemaProperCaseName}}")]
    {{/IsResourceExtensionClass}}
    {{#HasRequiredMembersWithMeaningfulDefaultValues}}
    [NoUnsuppliedRequiredMembersWithMeaningfulDefaults]
    {{/HasRequiredMembersWithMeaningfulDefaultValues}}
    public {{#IsAbstract}}abstract {{/IsAbstract}}class {{ClassName}} : {{NamespacePrefix}}I{{EntityName}}{{DerivedName}}{{#IsAggregateRoot}}, IHasETag, IDateVersionedEntity{{/IsAggregateRoot}}{{#HasRequiredMembersWithMeaningfulDefaultValues}}, IHasRequiredMembersWithMeaningfulDefaultValues{{/HasRequiredMembersWithMeaningfulDefaultValues}}{{#IsResourceExtensionClass}}, IChildEntity{{/IsResourceExtensionClass}}{{#HasValidatableChildren}}, IValidatableObject{{/HasValidatableChildren}}
    {
        private static FullName _fullName = new FullName("{{SchemaName}}", "{{EntityName}}");

        // Fluent validator instance (threadsafe)
        private static {{ClassName}}PutPostRequestValidator _validator = new {{ClassName}}PutPostRequestValidator();
        
#pragma warning disable 414
        private bool _SuspendReferenceAssignmentCheck = false;
        public void SuspendReferenceAssignmentCheck() { _SuspendReferenceAssignmentCheck = true; }
#pragma warning restore 414

        // =============================================================
        //                         Constructor
        // -------------------------------------------------------------

        {{#Constructor}}
        public {{ClassName}}()
        {
            {{#Standard}}
            {{#Collections}}
            {{PropertyName}} = new List<{{CollectionName}}>();
            {{/Collections}}
            {{/Standard}}
            {{#Inherited}}

            // Inherited lists
            {{#InheritedCollections}}
            {{PropertyName}} = new List<{{BaseEntity}}.{{CollectionName}}>();
            {{/InheritedCollections}}
            {{/Inherited}}
        }
        {{/Constructor}}
        
        // ------------------------------------------------------------

        // ============================================================
        //                Unique Identifier
        // ------------------------------------------------------------
        {{#Guid}}

        /// <summary>
        /// The unique identifier for the {{EntityName}} resource.
        /// </summary>
        [DataMember(Name="id")]
        [Key({{#MessagePackIndexer}}{{NextKey}}{{/MessagePackIndexer}})]
        [JsonConverter(typeof({{GuidConverterTypeName}}))]
        public Guid Id { get; set; }
        {{/Guid}}
        // ------------------------------------------------------------

        // =============================================================
        //                         References
        // -------------------------------------------------------------
        {{#References}}

        {{#Collections}}
        {{#Standard}}
        {{#Reference}}
        private bool _{{PropertyFieldName}}ExplicitlyAssigned;
        private {{ReferenceTypeName}} _{{PropertyFieldName}};
        private {{ReferenceTypeName}} Implicit{{PropertyName}}
        {
            get
            {
                // if the Reference is null, it is instantiated unless it has been explicitly assigned to null
                if (_{{PropertyFieldName}} == null && !_{{PropertyFieldName}}ExplicitlyAssigned)
                    _{{PropertyFieldName}} = new {{ReferenceTypeName}}();

                return _{{PropertyFieldName}};
            }
        }

        [DataMember(Name="{{JsonPropertyName}}")]{{#DisplayName}}[Display(Name="{{DisplayName}}")]{{/DisplayName}}
        [Key({{#MessagePackIndexer}}{{NextKey}}{{/MessagePackIndexer}})]
        [FullyDefinedReference]{{#IsRequired}}[RequiredReference({{#IsIdentifying}}isIdentifying: true{{/IsIdentifying}}{{^IsIdentifying}}"{{SchemaName}}", "{{ResourceName}}"{{/IsIdentifying}})]{{/IsRequired}}
        public {{ReferenceTypeName}} {{PropertyName}}
        {
            get
            {
                // Only return the reference if it's non-null, and all its properties have non-default values assigned
                if (Implicit{{PropertyName}} != null
                    && (_{{PropertyFieldName}}ExplicitlyAssigned || _SuspendReferenceAssignmentCheck || Implicit{{PropertyName}}.IsReferenceFullyDefined()))
                    return Implicit{{PropertyName}};

                return null;
            }
            set
            {
                _{{PropertyFieldName}}ExplicitlyAssigned = true;
                _{{PropertyFieldName}} = value;
            }
        }
        {{/Reference}}
        {{/Standard}}
        {{/Collections}}
        {{/References}}
        // -------------------------------------------------------------

        //==============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        {{#Identifiers}}
        {{#Properties}}
        {{#HasParent}}
        {{#Property}}
        private {{ParentNamespacePrefix}}I{{ParentName}} _{{ParentFieldName}};

        [IgnoreDataMember]
        {{ParentNamespacePrefix}}I{{ParentName}} {{PropertyName}}.{{ParentName}}
        {
            get { return _{{ParentFieldName}}; }
            set { Set{{ParentName}}(value); }
        }

        [IgnoreMember]
        public {{ParentNamespacePrefix}}I{{ParentName}} {{ParentName}}
        {
            set { Set{{ParentName}}(value); }
        }

        private void Set{{ParentName}}({{ParentNamespacePrefix}}I{{ParentName}} value)
        {
            _{{ParentFieldName}} = value;
            {{#ReferencesWithUnifiedKey}}

            // Initialize unified key values from parent context when reference is being formed by outbound mapper
            if (!_{{ReferenceFieldName}}ExplicitlyAssigned)
            {
                {{#UnifiedKeyProperties}}
                Implicit{{ReferencePropertyName}}.{{ReferenceTypePropertyName}} = _{{ParentFieldName}}{{PropertyPath}}.{{UnifiedKeyPropertyName}};
                {{/UnifiedKeyProperties}}
            }
            {{/ReferencesWithUnifiedKey}}
        }
        {{/Property}}
        {{/HasParent}}
        {{#Usi}}
        {{#Property}}

        /// <summary>
        /// {{{Description}}}
        /// </summary>
        {{{Misc}}}
{{>Resources_PropertyValidations}}
        {{#IsUnique}}[UniqueId]{{/IsUnique}}[DataMember(Name="{{JsonPropertyName}}")]{{#DisplayName}}[Display(Name="{{DisplayName}}")]{{/DisplayName}}{{#IsDescriptorUsage}}[DescriptorExists("{{DescriptorName}}")]{{/IsDescriptorUsage}}{{#IsDateOnlyProperty}}[JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]{{/IsDateOnlyProperty}}{{#IsTimeSpanProperty}}[JsonConverter(typeof(UtcTimeConverter))]{{/IsTimeSpanProperty}}
        [Key({{#MessagePackIndexer}}{{NextKey}}{{/MessagePackIndexer}})]
        public {{PropertyType}} {{PropertyName}} 
        {
            get => _{{PropertyFieldName}};
            set
            {
                _{{PropertyFieldName}} = value;
                GeneratedArtifactStaticDependencies.UsiLookupsByUniqueIdContextProvider.Get().AddLookup("{{UniqueIdPersonType}}", value);
            }
        }
        private {{PropertyType}} _{{PropertyFieldName}};
        
        {{PropertyType}} IIdentifiablePerson.UniqueId { get { return {{PropertyName}}; } }
        {{/Property}}
        {{/Usi}}
        {{#Standard}}
        {{#Property}}
        {{#PropertyDefaultHasDomainMeaning}}
        
        private bool _{{PropertyFieldName}}ExplicitlyAssigned = false;
        private {{PropertyType}} _{{PropertyFieldName}};

        /// <summary>
        /// {{{Description}}}
        /// </summary>
        {{Misc}}
{{>Resources_PropertyValidations}}
        {{#IsUnique}}[UniqueId]{{/IsUnique}}[DataMember(Name="{{JsonPropertyName}}")]{{#DisplayName}}[Display(Name="{{DisplayName}}")]{{/DisplayName}}{{#IsDescriptorUsage}}[DescriptorExists("{{DescriptorName}}")]{{/IsDescriptorUsage}}{{#IsDateOnlyProperty}}[JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]{{/IsDateOnlyProperty}}{{#IsTimeSpanProperty}}[JsonConverter(typeof(UtcTimeConverter))]{{/IsTimeSpanProperty}}
        [Key({{#MessagePackIndexer}}{{NextKey}}{{/MessagePackIndexer}})]            
        public {{PropertyType}} {{CSharpSafePropertyName}} 
        { 
            get => _{{PropertyFieldName}};
            set 
            { 
                _{{PropertyFieldName}} = value;
                _{{PropertyFieldName}}ExplicitlyAssigned = true; 
            }
        }
        {{/PropertyDefaultHasDomainMeaning}}

        {{^PropertyDefaultHasDomainMeaning}}
        /// <summary>
        /// {{{Description}}}
        /// </summary>
        {{Misc}}
{{>Resources_PropertyValidations}}
        {{#IsUnique}}[UniqueId]{{/IsUnique}}[DataMember(Name="{{JsonPropertyName}}")]{{#DisplayName}}[Display(Name="{{DisplayName}}")]{{/DisplayName}}{{#IsDescriptorUsage}}[DescriptorExists("{{DescriptorName}}")]{{/IsDescriptorUsage}}{{#IsDateOnlyProperty}}[JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]{{/IsDateOnlyProperty}}{{#IsTimeSpanProperty}}[JsonConverter(typeof(UtcTimeConverter))]{{/IsTimeSpanProperty}}
        {{#IsDescriptorUsage}}[IgnoreMember]{{/IsDescriptorUsage}}{{^IsDescriptorUsage}}[Key({{#MessagePackIndexer}}{{NextKey}}{{/MessagePackIndexer}})]{{/IsDescriptorUsage}}            
        public {{PropertyType}} {{CSharpSafePropertyName}} { get; set; }
        {{#IsDescriptorUsage}}

        [Key({{#MessagePackIndexer}}{{NextKey}}{{/MessagePackIndexer}})][JsonIgnore]
        public int {{CSharpSafePropertyName}}Id
        {
            get { return GeneratedArtifactStaticDependencies.DescriptorResolver.GetDescriptorId("{{DescriptorName}}", {{CSharpSafePropertyName}}); }
            set { {{CSharpSafePropertyName}} = GeneratedArtifactStaticDependencies.DescriptorResolver.GetUri("{{DescriptorName}}", value); }
        }
        {{/IsDescriptorUsage}}
        {{/PropertyDefaultHasDomainMeaning}}
        {{/Property}}
        {{/Standard}}
        {{#Referenced}}
        {{#Property}}

        {{#PropertyIsUnifiedAndLocallyDefined}}
        private {{PropertyType}} _{{PropertyFieldName}};
            {{#PropertyDefaultHasDomainMeaning}}
        private bool _{{PropertyFieldName}}ExplicitlyAssigned = false;
            {{/PropertyDefaultHasDomainMeaning}}

        {{/PropertyIsUnifiedAndLocallyDefined}}
        /// <summary>
        /// {{{Description}}}
        /// </summary>
        {{Misc}}
        {{#PropertyIsUnifiedAndLocallyDefined}}
{{>Resources_PropertyValidations}}
        [DataMember(Name="{{JsonPropertyName}}")]{{#DisplayName}}[Display(Name="{{DisplayName}}")]{{/DisplayName}}
        [Key({{#MessagePackIndexer}}{{NextKey}}{{/MessagePackIndexer}})]
        public {{PropertyType}} {{PropertyName}}
        {{/PropertyIsUnifiedAndLocallyDefined}}
        {{^PropertyIsUnifiedAndLocallyDefined}}
        {{PropertyType}} {{PropertyNamespacePrefix}}I{{ParentName}}.{{PropertyName}}
        {{/PropertyIsUnifiedAndLocallyDefined}}
        {
            get
            {
                {{#PropertyIsUnifiedAndLocallyDefined}}
                return _{{PropertyFieldName}};
                {{/PropertyIsUnifiedAndLocallyDefined}}
                {{^PropertyIsUnifiedAndLocallyDefined}}
                if (Implicit{{ImplicitPropertyName}}Reference != null
                    && (_SuspendReferenceAssignmentCheck || Implicit{{ImplicitPropertyName}}Reference.IsReferenceFullyDefined()))
                    return Implicit{{ImplicitPropertyName}}Reference.{{ParentPropertyName}};

                return default({{PropertyType}});
                {{/PropertyIsUnifiedAndLocallyDefined}}
            }
            set
            {
                {{#PropertyIsUnifiedAndLocallyDefined}}
                _{{PropertyFieldName}} = value;
                    {{#PropertyDefaultHasDomainMeaning}}
                _{{PropertyFieldName}}ExplicitlyAssigned = true;
                    {{/PropertyDefaultHasDomainMeaning}}

                {{/PropertyIsUnifiedAndLocallyDefined}}
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced
                {{#UnifiedKeys}}

                // {{ReferenceName}}
                _{{ReferenceFieldName}}ReferenceExplicitlyAssigned = false;
                Implicit{{ReferenceName}}Reference.{{ParentPropertyName}} = value;
                {{/UnifiedKeys}}
                {{#UnifiedExtensions}}

                // {{ReferenceName}}
                _{{ReferenceFieldName}}ReferenceExplicitlyAssigned = false;
                Implicit{{ReferenceName}}Reference.{{ParentPropertyName}} = value;
                {{/UnifiedExtensions}}
                {{#IsUniqueId}}
                GeneratedArtifactStaticDependencies.UsiLookupsByUniqueIdContextProvider.Get().AddLookup("{{UniqueIdPersonType}}", value);                
                {{/IsUniqueId}}
            }
        }
        {{/Property}}
        {{/Referenced}}
        {{#UnifiedType}}

        {{#Property}}
        /// <summary>
        /// {{{Description}}}
        /// </summary>

        {{Misc}}
        {{PropertyType}} {{PropertyNamespacePrefix}}I{{ParentName}}.{{PropertyName}}
        {
            get
            {
                if (Implicit{{ImplicitPropertyName}}Reference != null
                    && (_SuspendReferenceAssignmentCheck || Implicit{{ImplicitPropertyName}}Reference.IsReferenceFullyDefined()))
                    return Implicit{{ImplicitPropertyName}}Reference.{{ParentPropertyName}};

                return null;
            }
            set
            {
                {{#UnifiedKeys}}
                Implicit{{ReferenceName}}Reference.{{ParentPropertyName}} = value;
                {{/UnifiedKeys}}
                {{#UnifiedExtensions}}
                Implicit{{ReferenceName}}Reference.{{ParentPropertyName}} = value;
                {{/UnifiedExtensions}}
            }
        }
        {{/Property}}
        {{/UnifiedType}}
        {{#Derived}}
        {{#Property}}

        /// <summary>
        /// {{{Description}}}
        /// </summary>
        {{{Misc}}}
{{>Resources_PropertyValidations}}
        [{{^JsonIgnore}}DataMember(Name="{{JsonPropertyName}}"),Key({{#MessagePackIndexer}}{{NextKey}}{{/MessagePackIndexer}}){{/JsonIgnore}}{{#JsonIgnore}}JsonIgnore{{/JsonIgnore}}]{{#DisplayName}}[Display(Name="{{DisplayName}}")]{{/DisplayName}}{{#IsDescriptorUsage}}[DescriptorExists("{{DescriptorName}}")]{{/IsDescriptorUsage}}{{#IsDateOnlyProperty}}[JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]{{/IsDateOnlyProperty}}{{#IsTimeSpanProperty}}[JsonConverter(typeof(UtcTimeConverter))]{{/IsTimeSpanProperty}}
        public {{PropertyType}} {{PropertyName}} { get; set; }

        {{PropertyType}} I{{DerivedName}}.{{DerivedName}}Id
        {
            get { return {{PropertyName}}; }
            set { {{PropertyName}} = value; }
        }
        {{/Property}}
        {{/Derived}}
        {{/Properties}}
        // -------------------------------------------------------------

        // =============================================================
        //                      Equality
        // -------------------------------------------------------------

        /// <summary>
        /// Determines equality based on the natural key properties of the resource.
        /// </summary>
        /// <returns>
        /// A boolean value indicating equality result of the compared resources.
        /// </returns>
        public override bool Equals(object obj)
        {
            var compareTo = obj as {{NamespacePrefix}}I{{EntityName}};

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            {{#Properties}}
            {{#HasParent}}
            // Parent Property
            if (_{{ParentFieldName}} == null || !_{{ParentFieldName}}.Equals(compareTo.{{InterfaceParentFieldName}}))
                return false;

            {{/HasParent}}
            {{#Usi}}
            {{#Property}}
            // Property
            {{#IsNullable}}
            if ((this as {{NamespacePrefix}}I{{ClassName}}).{{PropertyName}} == null
                || !(this as {{NamespacePrefix}}I{{ClassName}}).{{PropertyName}}.Equals(compareTo.{{PropertyName}}))
                return false;
            {{/IsNullable}}
            {{^IsNullable}}
            if (!((this as {{NamespacePrefix}}I{{ClassName}}).{{PropertyName}}.Equals(compareTo.{{PropertyName}})))
                return false;
            {{/IsNullable}}
            {{/Property}}
            {{/Usi}}
            {{#Standard}}
            {{#Property}}

            // Standard Property
            {{#IsNullable}}
            if ((this as {{NamespacePrefix}}I{{ClassName}}).{{CSharpSafePropertyName}} == null
                {{^StringComparer}}
                || !(this as {{NamespacePrefix}}I{{ClassName}}).{{CSharpSafePropertyName}}.Equals(compareTo.{{CSharpSafePropertyName}}))
                {{/StringComparer}}
                {{#StringComparer}}
                || !{{StringComparer}}.Equals((this as {{NamespacePrefix}}I{{ClassName}}).{{CSharpSafePropertyName}}, compareTo.{{CSharpSafePropertyName}}))
                {{/StringComparer}}
                return false;
            {{/IsNullable}}
            {{^IsNullable}}
                {{^StringComparer}}
            if (!(this as {{NamespacePrefix}}I{{ClassName}}).{{PropertyName}}.Equals(compareTo.{{CSharpSafePropertyName}}))
                {{/StringComparer}}
                {{#StringComparer}}
            if (!{{StringComparer}}.Equals((this as {{NamespacePrefix}}I{{ClassName}}).{{CSharpSafePropertyName}}, compareTo.{{CSharpSafePropertyName}}))
                {{/StringComparer}}
                return false;
            {{/IsNullable}}

            {{/Property}}
            {{/Standard}}
            {{#Referenced}}
            {{#Property}}

            // Referenced Property
            {{#IsNullable}}
            if ((this as {{NamespacePrefix}}I{{ClassName}}).{{PropertyName}} == null
                {{^StringComparer}}
                || !(this as {{NamespacePrefix}}I{{ClassName}}).{{PropertyName}}.Equals(compareTo.{{PropertyName}}))
                {{/StringComparer}}
                {{#StringComparer}}
                || !{{StringComparer}}.Equals((this as {{NamespacePrefix}}I{{ClassName}}).{{PropertyName}}, compareTo.{{PropertyName}}))
                {{/StringComparer}}
                return false;
            {{/IsNullable}}
            {{^IsNullable}}
                {{^StringComparer}}
            if (!(this as {{NamespacePrefix}}I{{ClassName}}).{{PropertyName}}.Equals(compareTo.{{PropertyName}}))
                {{/StringComparer}}
                {{#StringComparer}}
            if (!{{StringComparer}}.Equals((this as {{NamespacePrefix}}I{{ClassName}}).{{PropertyName}}, compareTo.{{PropertyName}}))
                {{/StringComparer}}
                return false;
            {{/IsNullable}}

            {{/Property}}
            {{/Referenced}}
            {{#UnifiedType}}
            {{#Property}}

            // Unified Type Property
            {{#IsNullable}}
            if ((this as {{NamespacePrefix}}I{{ClassName}}).{{PropertyName}} == null
                {{^StringComparer}}
                || !(this as {{NamespacePrefix}}I{{ClassName}}).{{PropertyName}}.Equals(compareTo.{{PropertyName}}))
                {{/StringComparer}}
                {{#StringComparer}}
                || !{{StringComparer}}.Equals((this as {{NamespacePrefix}}I{{ClassName}}).{{PropertyName}}, compareTo.{{PropertyName}}))
                {{/StringComparer}}
                return false;
            {{/IsNullable}}
            {{^IsNullable}}
                {{^StringComparer}}
            if (!(this as {{NamespacePrefix}}I{{ClassName}}).{{PropertyName}}.Equals(compareTo.{{PropertyName}}))
                return false;
                {{/StringComparer}}
                {{#StringComparer}}
            if (!{{StringComparer}}.Equals((this as {{NamespacePrefix}}I{{ClassName}}).{{PropertyName}}, compareTo.{{PropertyName}}))
                {{/StringComparer}}
                return false;
            {{/IsNullable}}

            {{/Property}}
            {{/UnifiedType}}
            {{#Derived}}
            {{#Property}}

            // Derived Property
            {{#IsNullable}}
            if ((this as {{NamespacePrefix}}I{{ClassName}}).{{PropertyName}} == null
                {{^StringComparer}}
                || !(this as {{NamespacePrefix}}I{{ClassName}}).{{PropertyName}}.Equals(compareTo.{{PropertyName}}))
                {{/StringComparer}}
                {{#StringComparer}}
                || !{{StringComparer}}.Equals((this as {{NamespacePrefix}}I{{ClassName}}).{{PropertyName}}, compareTo.{{PropertyName}}))
                {{/StringComparer}}
                return false;
            {{/IsNullable}}
            {{^IsNullable}}
                {{^StringComparer}}
            if (!(this as {{NamespacePrefix}}I{{ClassName}}).{{PropertyName}}.Equals(compareTo.{{PropertyName}}))
                {{/StringComparer}}
                {{#StringComparer}}
            if (!{{StringComparer}}.Equals((this as {{NamespacePrefix}}I{{ClassName}}).{{PropertyName}}, compareTo.{{PropertyName}}))
                {{/StringComparer}}
                return false;
            {{/IsNullable}}

            {{/Property}}
            {{/Derived}}
            {{/Properties}}

            return true;
        }

        /// <summary>
        /// Builds the hash code based on the unique identifying values.
        /// </summary>
        /// <returns>
        /// A hash code for the resource.
        /// </returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            {{#Properties}}
            {{#HasParent}}
            //Parent Property
            if (_{{ParentFieldName}} != null)
                hash.Add(_{{ParentFieldName}});
            {{/HasParent}}
            {{#Usi}}
            {{#Property}}

            //Property
            {{#IsNullable}}
            if ((this as {{NamespacePrefix}}I{{ClassName}}).{{PropertyName}} != null)
                hash.Add((this as {{NamespacePrefix}}I{{ClassName}}).{{PropertyName}});
            {{/IsNullable}}
            {{^IsNullable}}
            hash.Add((this as {{NamespacePrefix}}I{{ClassName}}).{{PropertyName}});
            {{/IsNullable}}

            {{/Property}}
            {{/Usi}}
            {{#Standard}}
            {{#Property}}

            // Standard Property
            {{#IsNullable}}
            if ((this as {{NamespacePrefix}}I{{ClassName}}).{{CSharpSafePropertyName}} != null)
                hash.Add((this as {{NamespacePrefix}}I{{{ClassName}}}).{{CSharpSafePropertyName}});
            {{/IsNullable}}
            {{^IsNullable}}
                hash.Add((this as {{NamespacePrefix}}I{{{ClassName}}}).{{CSharpSafePropertyName}});
            {{/IsNullable}}

            {{/Property}}
            {{/Standard}}
            {{#Referenced}}
            {{#Property}}

            //Referenced Property
            {{#IsNullable}}
            if ((this as {{NamespacePrefix}}I{{ClassName}}).{{PropertyName}} != null)
                hash.Add((this as {{NamespacePrefix}}I{{{ClassName}}}).{{PropertyName}});
            {{/IsNullable}}
            hash.Add((this as {{NamespacePrefix}}I{{{ClassName}}}).{{PropertyName}});
            {{/Property}}
            {{/Referenced}}
            {{#UnifiedType}}
            {{#Property}}

            //Unified Type Property
            {{#IsNullalbe}}
            if ((this as {{NamespacePrefix}}I{{ClassName}}).{{PropertyName}} != null)
                hash.Add((this as {{NamespacePrefix}}I{{{ClassName}}}).{{PropertyName}});
            {{/IsNullalbe}}
            {{^IsNullable}}
            hash.Add((this as {{NamespacePrefix}}I{{{ClassName}}}).{{PropertyName}});
            {{/IsNullable}}

            {{/Property}}
            {{/UnifiedType}}
            {{#Derived}}
            {{#Property}}

            //Derived Property
            {{#IsNullable}}
            if ((this as {{NamespacePrefix}}I{{ClassName}}).{{PropertyName}} != null)
                hash.Add((this as {{NamespacePrefix}}I{{{ClassName}}}).{{PropertyName}});
            {{/IsNullable}}
            {{^IsNullable}}
            hash.Add((this as {{NamespacePrefix}}I{{{ClassName}}}).{{PropertyName}});
            {{/IsNullable}}

            {{/Property}}
            {{/Derived}}
            {{/Properties}}
            return hash.ToHashCode();
        }
        // -------------------------------------------------------------
        {{/Identifiers}}

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        {{#InheritedProperties}}
        {{#Properties}}
        {{#Standard}}
        {{#Property}}

        /// <summary>
        /// {{{Description}}}
        /// </summary>
        {{{Misc}}}
{{>Resources_PropertyValidations}}
        [DataMember(Name="{{JsonPropertyName}}")]{{#DisplayName}}[Display(Name="{{DisplayName}}")]{{/DisplayName}}{{#IsDescriptorUsage}}[DescriptorExists("{{DescriptorName}}")]{{/IsDescriptorUsage}}{{#IsDateOnlyProperty}}[JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]{{/IsDateOnlyProperty}}{{#IsTimeSpanProperty}}[JsonConverter(typeof(UtcTimeConverter))]{{/IsTimeSpanProperty}}
        {{#IsDescriptorUsage}}[IgnoreMember]{{/IsDescriptorUsage}}{{^IsDescriptorUsage}}[Key({{#MessagePackIndexer}}{{NextKey}}{{/MessagePackIndexer}})]{{/IsDescriptorUsage}}            
        public {{PropertyType}} {{PropertyName}} { get; set; }
        {{#IsDescriptorUsage}}

        [Key({{#MessagePackIndexer}}{{NextKey}}{{/MessagePackIndexer}})][JsonIgnore]
        public int {{CSharpSafePropertyName}}Id
        {
            get { return GeneratedArtifactStaticDependencies.DescriptorResolver.GetDescriptorId("{{DescriptorName}}", {{CSharpSafePropertyName}}); }
            set { {{CSharpSafePropertyName}} = GeneratedArtifactStaticDependencies.DescriptorResolver.GetUri("{{DescriptorName}}", value); }
        }
        {{/IsDescriptorUsage}}
        {{/Property}}
        {{/Standard}}
        {{/Properties}}
        {{/InheritedProperties}}
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        {{#NonIdentifiers}}
        {{#Properties}}
        {{#Referenced}}
        {{#Property}}

        {{#PropertyIsUnifiedAndLocallyDefined}}
        private {{PropertyType}} _{{PropertyFieldName}};
            {{#PropertyDefaultHasDomainMeaning}}
        private bool _{{PropertyFieldName}}ExplicitlyAssigned = false;
            {{/PropertyDefaultHasDomainMeaning}}

        {{/PropertyIsUnifiedAndLocallyDefined}}
        /// <summary>
        /// {{{Description}}}
        /// </summary>
        {{Misc}}
        {{#PropertyIsUnifiedAndLocallyDefined}}
{{>Resources_PropertyValidations}}
        [DataMember(Name="{{JsonPropertyName}}")]{{#DisplayName}}[Display(Name="{{DisplayName}}")]{{/DisplayName}}
        [Key({{#MessagePackIndexer}}{{NextKey}}{{/MessagePackIndexer}})]
        public {{PropertyType}} {{PropertyName}}
        {{/PropertyIsUnifiedAndLocallyDefined}}
        {{^PropertyIsUnifiedAndLocallyDefined}}
        {{PropertyType}} {{NamespacePrefix}}I{{ParentName}}.{{PropertyName}}
        {{/PropertyIsUnifiedAndLocallyDefined}}
        {
            get
            {
                {{#PropertyIsUnifiedAndLocallyDefined}}
                return _{{PropertyFieldName}};
                {{/PropertyIsUnifiedAndLocallyDefined}}
                {{^PropertyIsUnifiedAndLocallyDefined}}
                {{#UnifiedKeys}}
                if (Implicit{{ReferenceName}}Reference != null
                    && (_SuspendReferenceAssignmentCheck || Implicit{{ReferenceName}}Reference.IsReferenceFullyDefined()))
                    {
                        return Implicit{{ReferenceName}}Reference.{{ParentPropertyName}};
                    }

                {{/UnifiedKeys}}
                {{#UnifiedExtensions}}
                if (Implicit{{ReferenceName}}Reference != null
                    && (_SuspendReferenceAssignmentCheck || Implicit{{ReferenceName}}Reference.IsReferenceFullyDefined()))
                    {
                        return Implicit{{ReferenceName}}Reference.{{ParentPropertyName}};
                    }

                {{/UnifiedExtensions}}
                return default({{PropertyType}});
                {{/PropertyIsUnifiedAndLocallyDefined}}
            }
            set
            {
                {{#PropertyIsUnifiedAndLocallyDefined}}
                _{{PropertyFieldName}} = value;
                    {{#PropertyDefaultHasDomainMeaning}}
                _{{PropertyFieldName}}ExplicitlyAssigned = true;
                    {{/PropertyDefaultHasDomainMeaning}}

                {{/PropertyIsUnifiedAndLocallyDefined}}
                // When a property is assigned, Reference should not be null even if it has been explicitly assigned to null.
                // All ExplicitlyAssigned are reset to false in advanced
                {{#UnifiedKeys}}

                // {{ReferenceName}}
                _{{ReferenceFieldName}}ReferenceExplicitlyAssigned = false;
                Implicit{{ReferenceName}}Reference.{{ParentPropertyName}} = value{{{ImplicitNullable}}};
                {{/UnifiedKeys}}
                {{#UnifiedExtensions}}

                // {{ReferenceName}}
                _{{ReferenceFieldName}}ReferenceExplicitlyAssigned = false;
                Implicit{{ReferenceName}}Reference.{{ParentPropertyName}} = value{{{ImplicitNullable}}};
                {{/UnifiedExtensions}}
                {{#IsUniqueId}}
                GeneratedArtifactStaticDependencies.UsiLookupsByUniqueIdContextProvider.Get().AddLookup("{{UniqueIdPersonType}}", value);
                {{/IsUniqueId}}
            }
        }
        {{/Property}}
        {{/Referenced}}
        {{#UnifiedType}}

        {{#Property}}
        /// <summary>
        /// {{{Description}}}
        /// </summary>

        {{Misc}}
{{>Resources_PropertyValidations}}
        {{PropertyType}} {{NamespacePrefix}}I{{ParentName}}.{{PropertyName}}
        {
            get
            {
                {{#UnifiedKeys}}
                if (Implicit{{ReferenceName}}Reference != null
                    && (_SuspendReferenceAssignmentCheck || Implicit{{ReferenceName}}Reference.IsReferenceFullyDefined()))
                    {
                        return Implicit{{ReferenceName}}Reference.{{ParentPropertyName}};
                    }

                {{/UnifiedKeys}}
                {{#UnifiedExtensions}}
                if (Implicit{{ReferenceName}}Reference != null
                    && (_SuspendReferenceAssignmentCheck || Implicit{{ReferenceName}}Reference.IsReferenceFullyDefined()))
                    {
                        return Implicit{{ReferenceName}}Reference.{{ParentPropertyName}};
                    }

                {{/UnifiedExtensions}}
                return null;
            }
            set
            {
                {{#UnifiedKeys}}
                Implicit{{ReferenceName}}Reference.{{ParentPropertyName}} = value{{{ImplicitNullable}}};
                {{/UnifiedKeys}}
                {{#UnifiedExtensions}}
                Implicit{{ReferenceName}}Reference.{{ParentPropertyName}} = value{{{ImplicitNullable}}};
                {{/UnifiedExtensions}}
            }
        }
        {{/Property}}
        {{/UnifiedType}}
        {{#Standard}}
        {{#Property}}
        {{#PropertyDefaultHasDomainMeaning}}
        
        private bool _{{PropertyFieldName}}ExplicitlyAssigned = false;
        private {{PropertyType}} _{{PropertyFieldName}};

        /// <summary>
        /// {{{Description}}}
        /// </summary>
        {{Misc}}
{{>Resources_PropertyValidations}}
        [DataMember(Name="{{JsonPropertyName}}")]{{#DisplayName}}[Display(Name="{{DisplayName}}")]{{/DisplayName}}{{#IsDescriptorUsage}}[DescriptorExists("{{DescriptorName}}")]{{/IsDescriptorUsage}}{{#IsDateOnlyProperty}}[JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]{{/IsDateOnlyProperty}}{{#IsTimeSpanProperty}}[JsonConverter(typeof(UtcTimeConverter))]{{/IsTimeSpanProperty}}
        [Key({{#MessagePackIndexer}}{{NextKey}}{{/MessagePackIndexer}})]
        public {{PropertyType}} {{CSharpSafePropertyName}} 
        { 
            get => _{{PropertyFieldName}};
            set 
            { 
                _{{PropertyFieldName}} = value;
                _{{PropertyFieldName}}ExplicitlyAssigned = true; 
            }
        }
        {{/PropertyDefaultHasDomainMeaning}}

        {{^PropertyDefaultHasDomainMeaning}}
        /// <summary>
        /// {{{Description}}}
        /// </summary>
        {{Misc}}
{{>Resources_PropertyValidations}}
        [DataMember(Name="{{JsonPropertyName}}")]{{#DisplayName}}[Display(Name="{{DisplayName}}")]{{/DisplayName}}{{#IsDescriptorUsage}}[DescriptorExists("{{DescriptorName}}")]{{/IsDescriptorUsage}}{{#IsDateOnlyProperty}}[JsonConverter(typeof(Iso8601UtcDateOnlyConverter))]{{/IsDateOnlyProperty}}{{#IsTimeSpanProperty}}[JsonConverter(typeof(UtcTimeConverter))]{{/IsTimeSpanProperty}}
        {{#IsDescriptorUsage}}[IgnoreMember]{{/IsDescriptorUsage}}{{^IsDescriptorUsage}}[Key({{#MessagePackIndexer}}{{NextKey}}{{/MessagePackIndexer}})]{{/IsDescriptorUsage}}
        public {{PropertyType}} {{CSharpSafePropertyName}} { get; set; }
            {{#IsDescriptorUsage}}

        [Key({{#MessagePackIndexer}}{{NextKey}}{{/MessagePackIndexer}})][JsonIgnore]
        public int {{CSharpSafePropertyName}}Id
        { 
            get { return GeneratedArtifactStaticDependencies.DescriptorResolver.GetDescriptorId("{{DescriptorName}}", {{CSharpSafePropertyName}}); }
            set { {{CSharpSafePropertyName}} = GeneratedArtifactStaticDependencies.DescriptorResolver.GetUri("{{DescriptorName}}", value); } 
        }
            {{/IsDescriptorUsage}}
        {{/PropertyDefaultHasDomainMeaning}}
        {{/Property}}
        {{/Standard}}
        {{/Properties}}
        {{/NonIdentifiers}}
        // -------------------------------------------------------------
        {{#HasRequiredMembersWithMeaningfulDefaultValues}}

        IEnumerable<string> IHasRequiredMembersWithMeaningfulDefaultValues.GetUnassignedMemberNames()
        {
            {{#RequiredMembersWithMeaningfulDefaultValues}}
            if (!_{{PropertyFieldName}}ExplicitlyAssigned)
            {
                yield return "{{CSharpSafePropertyName}}";
            }
            {{/RequiredMembersWithMeaningfulDefaultValues}}
        }
        {{/HasRequiredMembersWithMeaningfulDefaultValues}}

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        {{#NavigableOneToOnes}}
        /// <summary>
        /// {{JsonPropertyName}}
        /// </summary>
        {{#IsRequired}}[Required(ErrorMessage=ValidationHelpers.RequiredObjectMessageFormat)]{{/IsRequired}}
        [DataMember(Name = "{{JsonPropertyName}}")]
        [Key({{#MessagePackIndexer}}{{NextKey}}{{/MessagePackIndexer}})]
        public {{EmbeddedObjectType}} {{PropertyName}} { get; set; }

        {{EmbeddedObjectNamespacePrefix}}I{{EmbeddedObjectType}} {{NamespacePrefix}}I{{ParentName}}.{{PropertyName}}
        {
            get { return {{PropertyName}}; }
            set { {{PropertyName}} = ({{EmbeddedObjectType}}) value; }
        }

        {{/NavigableOneToOnes}}
        // -------------------------------------------------------------

        // =============================================================
        //              Inherited One-to-one relationships
        // -------------------------------------------------------------
        {{#InheritedNavigableOneToOnes}}
        /// <summary>
        /// {{JsonPropertyName}}
        /// </summary>
        {{#IsRequired}}[Required(ErrorMessage=ValidationHelpers.RequiredObjectMessageFormat)]{{/IsRequired}}
        [DataMember(Name = "{{JsonPropertyName}}")]
        [Key({{#MessagePackIndexer}}{{NextKey}}{{/MessagePackIndexer}})]
        public {{EmbeddedObjectTypeNamespace}}{{EmbeddedObjectType}} {{PropertyName}} { get; set; }

        {{EmbeddedObjectInterfaceNamespacePrefix}}{{EmbeddedObjectInterfaceType}} {{BaseEntityNamespacePrefix}}I{{BaseEntityName}}.{{PropertyName}}
        {
            get { return {{PropertyName}}; }
            set { {{PropertyName}} = ({{EmbeddedObjectTypeNamespace}}{{EmbeddedObjectType}}) value; }
        }

        {{/InheritedNavigableOneToOnes}}
        // -------------------------------------------------------------

        // =============================================================
        //                     Inherited Collections
        // -------------------------------------------------------------
        {{#InheritedCollections}}
        {{#Inherited}}
        private ICollection<{{BaseEntity}}.{{ItemType}}> _{{PropertyFieldName}};
        private ICollection<{{ItemTypeNamespacePrefix}}I{{ItemType}}> _{{PropertyFieldName}}Covariant;

        [NoDuplicateMembers]{{#IsRequiredCollection}}[RequiredCollection]{{/IsRequiredCollection}}
        [DataMember(Name="{{JsonPropertyName}}")]{{#DisplayName}}[Display(Name="{{DisplayName}}")]{{/DisplayName}}
        [Key({{#MessagePackIndexer}}{{NextKey}}{{/MessagePackIndexer}})]
        public ICollection<{{BaseEntity}}.{{ItemType}}> {{Collection}}
        {
            get { return _{{PropertyFieldName}}; }
            set
            {
                _{{PropertyFieldName}} = value;
                _{{PropertyFieldName}}Covariant = new CovariantCollectionAdapter<{{ItemTypeNamespacePrefix}}I{{ItemType}}, {{BaseEntity}}.{{ItemType}}>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<{{ItemTypeNamespacePrefix}}I{{ItemType}}> {{ItemTypeNamespacePrefix}}I{{ParentName}}.{{Collection}}
        {
            get { return _{{PropertyFieldName}}Covariant; }
            set { {{Collection}} = new List<{{BaseEntity}}.{{ItemType}}>(value.Cast<{{BaseEntity}}.{{ItemType}}>()); }
        }
        {{/Inherited}}
        {{/InheritedCollections}}
        // -------------------------------------------------------------

        // =============================================================
        //                     Extensions
        // -------------------------------------------------------------
        {{#IsExtendable}}
        [JsonProperty("_ext")][JsonConverter(typeof(ExtensionsConverter), "{{ResourceName}}", "{{EntityName}}")]
        [Key({{#MessagePackIndexer}}{{NextKey}}{{/MessagePackIndexer}})]
        public System.Collections.IDictionary Extensions { get; set; }
        {{/IsExtendable}}
        {{^IsExtendable}}
        // NOT a lookup column, Not supported by this model, so there's "null object pattern" style implementation
        public System.Collections.IDictionary Extensions {
            get { return null; }
            set { }
        }
        {{/IsExtendable}}
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        {{#Collections}}
        private ICollection<{{ItemType}}> _{{PropertyFieldName}};
        private ICollection<{{ItemTypeNamespacePrefix}}I{{ItemType}}> _{{PropertyFieldName}}Covariant;

        [NoDuplicateMembers]{{#IsRequiredCollection}}[RequiredCollection]{{/IsRequiredCollection}}
        [DataMember(Name="{{JsonPropertyName}}")]{{#DisplayName}}[Display(Name="{{DisplayName}}")]{{/DisplayName}}
        [Key({{#MessagePackIndexer}}{{NextKey}}{{/MessagePackIndexer}})]
        public ICollection<{{ItemType}}> {{Collection}}
        {
            get { return _{{PropertyFieldName}}; }
            set
            {
                if (value == null) return;
                // Initialize primary list with notifying adapter immediately wired up so existing items are associated with the parent
                var list = new CollectionAdapterWithAddNotifications<{{ItemType}}>(value,
                    (s, e) => (({{ItemTypeNamespacePrefix}}I{{ItemType}})e.Item).{{ParentName}} = this);
                _{{PropertyFieldName}} = list;

                // Initialize covariant list with notifying adapter with deferred wire up so only new items are processed (optimization)
                var covariantList = new CovariantCollectionAdapterWithAddNotifications<{{ItemTypeNamespacePrefix}}I{{ItemType}}, {{ItemType}}>(value);
                covariantList.ItemAdded += (s, e) => (({{ItemTypeNamespacePrefix}}I{{ItemType}})e.Item).{{ParentName}} = this;
                _{{PropertyFieldName}}Covariant = covariantList;
            }
        }

        // Covariant version, visible only on the interface
        ICollection<{{ItemTypeNamespacePrefix}}I{{ItemType}}> {{ItemTypeNamespacePrefix}}I{{ParentName}}.{{Collection}}
        {
            get { return _{{PropertyFieldName}}Covariant; }
            set { {{Collection}} = new List<{{ItemType}}>(value.Cast<{{ItemType}}>()); }
        }

        {{/Collections}}
        // -------------------------------------------------------------

        // =============================================================
        //                         Versioning
        // -------------------------------------------------------------
        {{#Versioning}}

        [DataMember(Name="_etag")]
        [Key({{#MessagePackIndexer}}{{NextKey}}{{/MessagePackIndexer}})]
        public virtual string ETag { get; set; }
            
        [DataMember(Name="_lastModifiedDate")]
        [Key({{#MessagePackIndexer}}{{NextKey}}{{/MessagePackIndexer}})]
        public virtual DateTime LastModifiedDate { get; set; }

        {{/Versioning}}
        // -------------------------------------------------------------

        // -------------------------------------------------------------
        //                        OnDeserialize
        // -------------------------------------------------------------
        {{#OnDeserialize}}

        [OnDeserialized]
        internal void OnDeserialized(StreamingContext context)
        {
            // Reconnect collection item parent references on deserialization
            {{#Inherited}}
            {{#InheritedCollections}}
            if (_{{PropertyFieldName}} != null) foreach (var item in _{{PropertyFieldName}})
            {
                item.{{ParentName}} = this;
            }

            {{/InheritedCollections}}
            {{/Inherited}}
            {{#Standard}}
            {{#Collections}}
            if (_{{PropertyFieldName}} != null) foreach (var item in _{{PropertyFieldName}})
            {
                item.{{ParentName}} = this;
            }

            {{/Collections}}
            {{/Standard}}
        }
        {{/OnDeserialize}}
        // ------------------------------------------------------------

        // ============================================================
        //                      Data Synchronization
        // ------------------------------------------------------------
        bool ISynchronizable.Synchronize(object target)
        {
            return {{NamespacePrefix}}{{EntityName}}Mapper.SynchronizeTo(this, ({{NamespacePrefix}}I{{EntityName}})target);
        }

        void IMappable.Map(object target)
        {
            {{^IsBaseClassConcrete}}
            {{NamespacePrefix}}{{EntityName}}Mapper.MapTo(this, ({{NamespacePrefix}}I{{EntityName}})target, null);
            {{/IsBaseClassConcrete}}
            {{#IsBaseClassConcrete}}
            {{NamespacePrefix}}{{EntityName}}Mapper.MapDerivedTo(this, ({{NamespacePrefix}}I{{EntityName}})target, null);
            {{/IsBaseClassConcrete}}
        }
        // -------------------------------------------------------------

        // =================================================================
        //                    Resource Reference Data
        // -----------------------------------------------------------------
        {{#ResourceReferences}}
        Guid? {{Namespace}}.I{{ClassName}}.{{ReferenceName}}ResourceId
        {
            get { return null; }
            set { Implicit{{ReferenceName}}Reference.ResourceId = value ?? default(Guid); }
        }

        {{#MappedReferenceDataHasDiscriminator}}
        string {{Namespace}}.I{{ClassName}}.{{ReferenceName}}Discriminator
        {
            // Not supported for Resources
            get { return null; }
            set { Implicit{{ReferenceName}}Reference.Discriminator = value; }
        }

        {{/MappedReferenceDataHasDiscriminator}}

        {{/ResourceReferences}}
        // -----------------------------------------------------------------
        {{#IsResourceExtensionClass}}

        void IChildEntity.SetParent(object value)
        {
            {{ParentName}} = (I{{ParentName}})value;
        }
        {{/IsResourceExtensionClass}}
        {{#HasValidatableChildren}}

        // ==================================
        //            Validation
        // ----------------------------------
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            var mappingContractProvider = GeneratedArtifactStaticDependencies.MappingContractProvider;
            var mappingContract = mappingContractProvider.GetMappingContract(_fullName);
            
            var pathBuilder = ValidationHelpers.GetPathBuilder(validationContext);
            
            int originalLength = pathBuilder.Length;

            try
            {
                // Prepare builders for validating members
            {{^IsAggregateRoot}}
                pathBuilder.Append(ValidationHelpers.JsonPathSeparator);
            {{/IsAggregateRoot}}
                int dotLength = pathBuilder.Length;

                // ----------------------
                //  Validate collections
                // ----------------------
            {{#InheritedCollections}}
                {{#Inherited}}
                if ({{Collection}}.Any() && mappingContract?.IsMemberSupported("{{Collection}}") != false)
                {
                    // Reset path builder
                    pathBuilder.Length = dotLength;
                    pathBuilder.Append("{{Collection}}");
    
                    foreach (var result in ValidationHelpers.ValidateCollection(new ValidationContext({{Collection}}, validationContext, validationContext.Items.ForCollection("{{Collection}}"))))
                    {
                        yield return result;
                    }
                }

                {{/Inherited}}
            {{/InheritedCollections}}
            {{#Collections}}
                if ({{Collection}}.Any() && mappingContract?.IsMemberSupported("{{Collection}}") != false)
                {
                    // Reset path builder
                    pathBuilder.Length = dotLength;
                    pathBuilder.Append("{{Collection}}");
    
                    foreach (var result in ValidationHelpers.ValidateCollection(new ValidationContext({{Collection}}, validationContext, validationContext.Items.ForCollection("{{Collection}}"))))
                    {
                        yield return result;
                    }
                }

            {{/Collections}}

                // ---------------------------
                //  Validate embedded objects
                // ---------------------------
            {{#InheritedNavigableOneToOnes}}
                if ({{PropertyName}} != null)
                {
                    // Reset path builder
                    pathBuilder.Length = dotLength;
                    pathBuilder.Append("{{PropertyName}}");

                    foreach (var result in ValidationHelpers.ValidateEmbeddedObject(new ValidationContext({{PropertyName}}, validationContext, validationContext.Items.ForEmbeddedObject("{{PropertyName}}"))))
                    {
                        yield return result;
                    }
                }

            {{/InheritedNavigableOneToOnes}}
            {{#NavigableOneToOnes}}
                if ({{PropertyName}} != null && mappingContract?.IsMemberSupported("{{PropertyName}}") != false)
                {
                    // Reset path builder
                    pathBuilder.Length = dotLength;
                    pathBuilder.Append("{{PropertyName}}");

                    foreach (var result in ValidationHelpers.ValidateEmbeddedObject(new ValidationContext({{PropertyName}}, validationContext, validationContext.Items.ForEmbeddedObject("{{PropertyName}}"))))
                    {
                        yield return result;
                    }
                }

            {{/NavigableOneToOnes}}
            {{#IsExtendable}}

                // ---------------------
                //  Validate Extensions
                // ---------------------
                if (Extensions != null)
                {
                    // Reset path builder
                    pathBuilder.Length = dotLength;
                    pathBuilder.Append(nameof(Extensions));
    
                    foreach (var result in ValidationHelpers.ValidateExtensions(validationContext, mappingContract))
                    {
                        yield return result;
                    }
                }
            {{/IsExtendable}}
            {{#KeyUnificationValidations}}
                {{#HasUnifiedProperties}}

                // -----------------------
                //  Validate unified keys
                // -----------------------
                pathBuilder.Length = dotLength;
                string pathPrefix = null;

                {{/HasUnifiedProperties}}
                {{#UnifiedProperties}}
                var sourcesFor{{UnifiedPropertyName}} = Get{{UnifiedPropertyName}}Sources().ToArray();

                if (!sourcesFor{{UnifiedPropertyName}}.Select(t => t.Item2).Where(v => !v.IsDefaultValue()).AllEqual({{#UnifiedPropertyIsString}}GeneratedArtifactStaticDependencies.DatabaseEngineSpecificStringComparer{{/UnifiedPropertyIsString}}))
                {
                    pathPrefix ??= pathBuilder.ToString();

                    string values = string.Join("', '", sourcesFor{{UnifiedPropertyName}}.Select(src => src.value.ToString().TrimAt(50, true)));
                    string parentContextNote = sourcesFor{{UnifiedPropertyName}}.Any(src => src.path == null) ? " (including those higher up in the resource's data)" : null;

                    yield return new System.ComponentModel.DataAnnotations.ValidationResult($"All values supplied for '{{UnifiedJsonPropertyName}}' must match. Review all references{parentContextNote} and align the following conflicting values: '{values}'",
                        sourcesFor{{UnifiedPropertyName}}.Where(src => src.path != null).Select(src => $"{pathPrefix}{src.path}").ToArray());
                }
    
                IEnumerable<(string path, {{UnifiedCSharpPropertyType}} value)> Get{{UnifiedPropertyName}}Sources()
                {
                    {{#UnifiedPropertyIsLocallyDefined}}
                    // Obtain value from the locally defined property
                    yield return ("{{UnifiedPropertyName}}", this.{{UnifiedPropertyName}});
                    
                    {{/UnifiedPropertyIsLocallyDefined}}
                    {{#UnifiedPropertyIsFromParent}}
                    // Obtain value from the parent
                    yield return (null, (this as {{NamespacePrefix}}I{{ResourceClassName}}).{{ParentResourceClassName}}{{UnifiedPropertyParentPath}}.{{UnifiedPropertyName}});
    
                    {{/UnifiedPropertyIsFromParent}}
                    {{#References}}
                    // Obtain value from other references
                    var valueFrom{{ReferenceName}} = this.{{ReferenceName}}?.{{ReferencePropertyName}};
    
                    if (valueFrom{{ReferenceName}} != null)
                    {
                        yield return ("{{ReferenceJsonName}}.{{ReferenceJsonPropertyName}}", this.{{ReferenceName}}.{{ReferencePropertyName}});
                    }
    
                    {{/References}}
                }
                {{/UnifiedProperties}}
            {{/KeyUnificationValidations}}
            
                // Execute the resource's fluent validator
                var fluentValidationResult = _validator.Validate(this);

                if (!fluentValidationResult.IsValid)
                {
                    foreach (var error in fluentValidationResult.Errors)
                    {
                        yield return new System.ComponentModel.DataAnnotations.ValidationResult(error.ErrorMessage, new[] { error.PropertyName });
                    }
                }
            }
            finally
            {
                // Restore original length
                pathBuilder.Length = originalLength;
            }
            // ----------------------------------
        }
        {{/HasValidatableChildren}}
    }
    {{/ShouldRenderClass}}

    // =================================================================
    //                         Validators
    // -----------------------------------------------------------------
    {{#ShouldRenderValidator}}
    {{#Validator}}

    [ExcludeFromCodeCoverage]
    public class {{EntityName}}PutPostRequestValidator : FluentValidation.AbstractValidator<{{EntityName}}>
    {
        {{#HasCollections}}
        private static readonly FullName _fullName_{{Schema}}_{{EntityName}} = new FullName("{{Schema}}", "{{EntityName}}");

        // Declare collection item validators
            {{#Collections}}
        private {{Namespace}}{{ItemTypeName}}PutPostRequestValidator _{{PropertyFieldNamePrefix}}Validator = new ();
            {{/Collections}}

        {{/HasCollections}}
        protected override bool PreValidate(FluentValidation.ValidationContext<{{EntityName}}> context, FluentValidation.Results.ValidationResult result)
        {
            if (context.InstanceToValidate == null)
            {
                result.Errors.Add(new ValidationFailure("", "Please ensure a model was supplied."));

                return false;
            }

            var instance = context.InstanceToValidate;

            var failures = new List<ValidationFailure>();

            {{#HasCollections}}
            // Profile-based collection item filter validation
            string profileName = null;

            // Get the current mapping contract
            var mappingContract = ({{ExtensionNamespacePrefix}}{{EntityName}}MappingContract) GeneratedArtifactStaticDependencies.MappingContractProvider
                .GetMappingContract(_fullName_{{Schema}}_{{EntityName}});

            if (mappingContract != null)
            {
                {{#Collections}}
                if (mappingContract.Is{{ItemTypeName}}Included != null)
                {
                    var hasInvalid{{PropertyName}}Items = instance.{{PropertyName}}.Any(x => !mappingContract.Is{{ItemTypeName}}Included(x));
        
                    if (hasInvalid{{PropertyName}}Items)
                    {
                        profileName ??= GeneratedArtifactStaticDependencies.ProfileContentTypeContextProvider.Get().ProfileName;
                        failures.Add(new ValidationFailure("{{PropertyName}}", $"A supplied '{{ItemTypeName}}' has a descriptor value that does not conform with the filter values defined by profile '{profileName}'."));
                    }
                }

                {{/Collections}}
            }

            {{/HasCollections}}
            {{#HasCollection}}
            // Recursively invoke the child collection item validators
                {{#Collections}}

            foreach (var item in instance.{{PropertyName}})
            {
                var validationResult = _{{PropertyFieldNamePrefix}}Validator.Validate(new FluentValidation.ValidationContext<{{ItemTypeName}}>(item, context.PropertyChain);

                if (!validationResult.IsValid)
                    failures.AddRange(validationResult.Errors);
            }
                {{/Collections}}

            {{/HasCollection}}
            if (failures.Any())
            {
                foreach (var failure in failures)
                {
                    result.Errors.Add(failure);
                }

                return false;
            }

            return true;
        }
    }
    {{/Validator}}
    {{/ShouldRenderValidator}}
    // -----------------------------------------------------------------

    {{/ResourceClass}}
    {{/ResourceClasses}}
}
{{/ResourceContexts}}
