-- SPDX-License-Identifier: Apache-2.0
-- Licensed to the Ed-Fi Alliance under one or more agreements.
-- The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
-- See the LICENSE and NOTICES files in the project root for more information.

{{#Tables}}
    {{#IsAggregateRoot}}
        {{#IsDescriptorTable}}
DROP TRIGGER IF EXISTS [{{Schema}}].[{{Schema}}_{{TableName}}_TR_DeleteTracking]
GO

CREATE TRIGGER [{{Schema}}].[{{Schema}}_{{TableName}}_TR_DeleteTracking] ON [{{Schema}}].[{{TableName}}] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_{{BaseTableSchema}}].[{{BaseTableName}}]({{#PrimaryKeyColumns}}Old{{BaseColumnName}}, {{/PrimaryKeyColumns}}{{#BaseAlternateKeyColumns}}Old{{ColumnName}}, {{/BaseAlternateKeyColumns}}Id, Discriminator, ChangeVersion)
    SELECT  {{#PrimaryKeyColumns}}d.{{ColumnName}}, {{/PrimaryKeyColumns}}{{#BaseAlternateKeyColumns}}b.{{ColumnName}}, {{/BaseAlternateKeyColumns}}b.Id, {{#IsDescriptorTable}}{{#FullName}}'{{Schema}}.{{Name}}', {{/FullName}}{{/IsDescriptorTable}}{{^IsDescriptorTable}}b.Discriminator, {{/IsDescriptorTable}}(NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
            INNER JOIN {{BaseTableSchema}}.{{BaseTableName}} b ON {{#PrimaryKeyColumns}}{{^IsFirst}} AND {{/IsFirst}}d.{{ColumnName}} = b.{{BaseColumnName}}{{/PrimaryKeyColumns}}
END
GO

ALTER TABLE [{{Schema}}].[{{TableName}}] ENABLE TRIGGER [{{Schema}}_{{TableName}}_TR_DeleteTracking]
GO
        {{/IsDescriptorTable}}
        {{^IsDerived}}
            {{^IsDescriptorBaseTable}}{{! We can't use the delete trigger on the Descriptor base table because it doesn't have a populated Discriminator column in the ODS as of at least v5.2 }}
DROP TRIGGER IF EXISTS [{{Schema}}].[{{Schema}}_{{TableName}}_TR_DeleteTracking]
GO

CREATE TRIGGER [{{Schema}}].[{{Schema}}_{{TableName}}_TR_DeleteTracking] ON [{{Schema}}].[{{TableName}}] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_{{Schema}}].[{{TableName}}]({{#ChangeDataColumns}}Old{{ColumnName}}, {{/ChangeDataColumns}}Id, {{#HasDiscriminatorColumn}}Discriminator, {{/HasDiscriminatorColumn}}ChangeVersion)
    SELECT  {{#ChangeDataColumns}}{{#SelectExpression}}{{SelectExpression}}{{/SelectExpression}}{{^SelectExpression}}d.{{ColumnName}}{{/SelectExpression}}, {{/ChangeDataColumns}}d.Id, {{#HasDiscriminatorColumn}}d.Discriminator, {{/HasDiscriminatorColumn}}(NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
    {{#Joins}}
        {{#IsLeftJoin}}LEFT {{/IsLeftJoin}}{{^IsLeftJoin}}INNER {{/IsLeftJoin}}JOIN {{Schema}}.{{TableName}} {{JoinAlias}}
            ON d.{{ThisJoinColumnName}} = {{JoinAlias}}.{{OtherJoinColumnName}} 
    {{/Joins}}
END
GO

ALTER TABLE [{{Schema}}].[{{TableName}}] ENABLE TRIGGER [{{Schema}}_{{TableName}}_TR_DeleteTracking]
GO

            {{/IsDescriptorBaseTable}}
        {{/IsDerived}}
    {{/IsAggregateRoot}}
{{/Tables}}